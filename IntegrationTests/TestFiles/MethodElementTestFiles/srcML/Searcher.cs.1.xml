<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\TestFiles\MethodElementTestFiles\Searcher.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Indexer</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Documents</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Indexer</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Exceptions</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Translation</name></name>;</using>

<comment type="line" pos:line="10" pos:column="1">//This is for TESTING ONLY!</comment>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Indexer</name><op:operator pos:line="12" pos:column="24">.</op:operator><name pos:line="12" pos:column="25">Searching</name><op:operator pos:line="12" pos:column="34">.</op:operator><name pos:line="12" pos:column="35">Criteria</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">SimpleSearchCriteria</name> <super pos:line="14" pos:column="39">: <name pos:line="14" pos:column="41">SearchCriteria</name></super>
    <block pos:line="15" pos:column="5">{
        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">SimpleSearchCriteria</name><parameter_list pos:line="16" pos:column="36">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">SearchTerms</name> <op:operator pos:line="18" pos:column="25">=</op:operator> <op:operator pos:line="18" pos:column="27">new</op:operator> <call><name><name pos:line="18" pos:column="31">SortedSet</name><argument_list pos:line="18" pos:column="40">&lt;<argument><name pos:line="18" pos:column="41">string</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">MatchCase</name> <op:operator pos:line="19" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="25">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">MatchWholeWord</name> <op:operator pos:line="20" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="20" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">ExactMode</name> <op:operator pos:line="21" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="21" pos:column="25">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">SearchByAccessLevel</name> <op:operator pos:line="22" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="22" pos:column="35">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="23" pos:column="13">AccessLevels</name> <op:operator pos:line="23" pos:column="26">=</op:operator> <op:operator pos:line="23" pos:column="28">new</op:operator> <call><name><name pos:line="23" pos:column="32">SortedSet</name><argument_list pos:line="23" pos:column="41">&lt;<argument><name pos:line="23" pos:column="42">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">SearchByProgramElementType</name> <op:operator pos:line="24" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="24" pos:column="42">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">ProgramElementTypes</name> <op:operator pos:line="25" pos:column="33">=</op:operator> <op:operator pos:line="25" pos:column="35">new</op:operator> <call><name><name pos:line="25" pos:column="39">SortedSet</name><argument_list pos:line="25" pos:column="48">&lt;<argument><name pos:line="25" pos:column="49">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">SearchByUsageType</name> <op:operator pos:line="26" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="26" pos:column="33">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">UsageTypes</name> <op:operator pos:line="27" pos:column="24">=</op:operator> <op:operator pos:line="27" pos:column="26">new</op:operator> <call><name><name pos:line="27" pos:column="30">SortedSet</name><argument_list pos:line="27" pos:column="39">&lt;<argument><name pos:line="27" pos:column="40">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">Locations</name> <op:operator pos:line="28" pos:column="23">=</op:operator> <op:operator pos:line="28" pos:column="25">new</op:operator> <call><name><name pos:line="28" pos:column="29">SortedSet</name><argument_list pos:line="28" pos:column="38">&lt;<argument><name pos:line="28" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ToQueryString</name><parameter_list pos:line="31" pos:column="34">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">FetchOutputStream</name></type> <name pos:line="33" pos:column="31">f</name> =<init pos:line="33" pos:column="34"> <expr><op:operator pos:line="33" pos:column="35">new</op:operator> <call><name pos:line="33" pos:column="39">String</name><argument_list pos:line="33" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="46">"stuff"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><specifier pos:line="36" pos:column="9">private</specifier> <name pos:line="36" pos:column="17">void</name></type> <name pos:line="36" pos:column="22">AccessLevelCriteriaToString</name><parameter_list pos:line="36" pos:column="49">(<param><decl><type><name pos:line="36" pos:column="50">StringBuilder</name></type> <name pos:line="36" pos:column="64">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Contract</name><op:operator pos:line="38" pos:column="21">.</op:operator><name pos:line="38" pos:column="22">Requires</name></name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">AccessLevels</name> <op:operator pos:line="38" pos:column="44">!=</op:operator> <name pos:line="38" pos:column="47">null</name></expr></argument><op:operator pos:line="38" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="38" pos:column="53">"SimpleSearchCriteria:AccessLevelCriteriaToString - AccessLevels cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Contract</name><op:operator pos:line="39" pos:column="21">.</op:operator><name pos:line="39" pos:column="22">Requires</name></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name><name pos:line="39" pos:column="31">AccessLevels</name><op:operator pos:line="39" pos:column="43">.</op:operator><name pos:line="39" pos:column="44">Count</name></name> <op:operator pos:line="39" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="39" pos:column="52">0</lit:literal></expr></argument><op:operator pos:line="39" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="39" pos:column="55">"SimpleSearchCriteria:AccessLevelCriteriaToString - AccessLevels cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">stringBuilder</name><op:operator pos:line="41" pos:column="26">.</op:operator><name pos:line="41" pos:column="27">Append</name></name><argument_list pos:line="41" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">int</name></type> <name pos:line="42" pos:column="17">collectionSize</name> =<init pos:line="42" pos:column="33"> <expr><name><name pos:line="42" pos:column="34">AccessLevels</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="43" pos:column="13">foreach (<init><decl><type><name pos:line="43" pos:column="22">AccessLevel</name></type> <name pos:line="43" pos:column="34">accessLevel</name> <init pos:line="43" pos:column="46">in <expr><name pos:line="43" pos:column="49">AccessLevels</name></expr></init></decl></init>)
            <block pos:line="44" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">stringBuilder</name><op:operator pos:line="45" pos:column="30">.</op:operator><name pos:line="45" pos:column="31">Append</name></name><argument_list pos:line="45" pos:column="37">(<argument><expr><call><name><name pos:line="45" pos:column="38">SandoField</name><op:operator pos:line="45" pos:column="48">.</op:operator><name pos:line="45" pos:column="49">AccessLevel</name><op:operator pos:line="45" pos:column="60">.</op:operator><name pos:line="45" pos:column="61">ToString</name></name><argument_list pos:line="45" pos:column="69">()</argument_list></call> <op:operator pos:line="45" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="45" pos:column="74">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="46" pos:column="17">stringBuilder</name><op:operator pos:line="46" pos:column="30">.</op:operator><name pos:line="46" pos:column="31">Append</name></name><argument_list pos:line="46" pos:column="37">(<argument><expr><call><name><name pos:line="46" pos:column="38">accessLevel</name><op:operator pos:line="46" pos:column="49">.</op:operator><name pos:line="46" pos:column="50">ToString</name></name><argument_list pos:line="46" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">collectionSize</name> <op:operator pos:line="47" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="47" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="47" pos:column="40">
                <block pos:line="48" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="49" pos:column="21">stringBuilder</name><op:operator pos:line="49" pos:column="34">.</op:operator><name pos:line="49" pos:column="35">Append</name></name><argument_list pos:line="49" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="51" pos:column="17">--</op:operator><name pos:line="51" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">stringBuilder</name><op:operator pos:line="53" pos:column="26">.</op:operator><name pos:line="53" pos:column="27">Append</name></name><argument_list pos:line="53" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="56" pos:column="9">private</specifier> <name pos:line="56" pos:column="17">void</name></type> <name pos:line="56" pos:column="22">ProgramElementTypeCriteriaToString</name><parameter_list pos:line="56" pos:column="56">(<param><decl><type><name pos:line="56" pos:column="57">StringBuilder</name></type> <name pos:line="56" pos:column="71">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="57" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Contract</name><op:operator pos:line="58" pos:column="21">.</op:operator><name pos:line="58" pos:column="22">Requires</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">ProgramElementTypes</name> <op:operator pos:line="58" pos:column="51">!=</op:operator> <name pos:line="58" pos:column="54">null</name></expr></argument><op:operator pos:line="58" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="58" pos:column="60">"SimpleSearchCriteria:ProgramElementTypeCriteriaToString - ProgramElementTypes cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Contract</name><op:operator pos:line="59" pos:column="21">.</op:operator><name pos:line="59" pos:column="22">Requires</name></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name><name pos:line="59" pos:column="31">ProgramElementTypes</name><op:operator pos:line="59" pos:column="50">.</op:operator><name pos:line="59" pos:column="51">Count</name></name> <op:operator pos:line="59" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="59" pos:column="59">0</lit:literal></expr></argument><op:operator pos:line="59" pos:column="60">,</op:operator> <argument><expr><lit:literal type="string" pos:line="59" pos:column="62">"SimpleSearchCriteria:ProgramElementTypeCriteriaToString - ProgramElementTypes cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">stringBuilder</name><op:operator pos:line="61" pos:column="26">.</op:operator><name pos:line="61" pos:column="27">Append</name></name><argument_list pos:line="61" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">int</name></type> <name pos:line="62" pos:column="17">collectionSize</name> =<init pos:line="62" pos:column="33"> <expr><name><name pos:line="62" pos:column="34">ProgramElementTypes</name><op:operator pos:line="62" pos:column="53">.</op:operator><name pos:line="62" pos:column="54">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="63" pos:column="13">foreach (<init><decl><type><name pos:line="63" pos:column="22">ProgramElementType</name></type> <name pos:line="63" pos:column="41">programElementType</name> <init pos:line="63" pos:column="60">in <expr><name pos:line="63" pos:column="63">ProgramElementTypes</name></expr></init></decl></init>)
            <block pos:line="64" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">stringBuilder</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">Append</name></name><argument_list pos:line="65" pos:column="37">(<argument><expr><call><name><name pos:line="65" pos:column="38">SandoField</name><op:operator pos:line="65" pos:column="48">.</op:operator><name pos:line="65" pos:column="49">ProgramElementType</name><op:operator pos:line="65" pos:column="67">.</op:operator><name pos:line="65" pos:column="68">ToString</name></name><argument_list pos:line="65" pos:column="76">()</argument_list></call> <op:operator pos:line="65" pos:column="79">+</op:operator> <lit:literal type="string" pos:line="65" pos:column="81">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">stringBuilder</name><op:operator pos:line="66" pos:column="30">.</op:operator><name pos:line="66" pos:column="31">Append</name></name><argument_list pos:line="66" pos:column="37">(<argument><expr><call><name><name pos:line="66" pos:column="38">programElementType</name><op:operator pos:line="66" pos:column="56">.</op:operator><name pos:line="66" pos:column="57">ToString</name></name><argument_list pos:line="66" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">collectionSize</name> <op:operator pos:line="67" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="67" pos:column="40">
                <block pos:line="68" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="69" pos:column="21">stringBuilder</name><op:operator pos:line="69" pos:column="34">.</op:operator><name pos:line="69" pos:column="35">Append</name></name><argument_list pos:line="69" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="71" pos:column="17">--</op:operator><name pos:line="71" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">stringBuilder</name><op:operator pos:line="73" pos:column="26">.</op:operator><name pos:line="73" pos:column="27">Append</name></name><argument_list pos:line="73" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="76" pos:column="9">private</specifier> <name pos:line="76" pos:column="17">void</name></type> <name pos:line="76" pos:column="22">LocationCriteriaToString</name><parameter_list pos:line="76" pos:column="46">(<param><decl><type><name pos:line="76" pos:column="47">StringBuilder</name></type> <name pos:line="76" pos:column="61">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Contract</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">Requires</name></name><argument_list pos:line="78" pos:column="30">(<argument><expr><name pos:line="78" pos:column="31">Locations</name> <op:operator pos:line="78" pos:column="41">!=</op:operator> <name pos:line="78" pos:column="44">null</name></expr></argument><op:operator pos:line="78" pos:column="48">,</op:operator> <argument><expr><lit:literal type="string" pos:line="78" pos:column="50">"SimpleSearchCriteria:LocationCriteriaToString - Locations cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Contract</name><op:operator pos:line="79" pos:column="21">.</op:operator><name pos:line="79" pos:column="22">Requires</name></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name><name pos:line="79" pos:column="31">Locations</name><op:operator pos:line="79" pos:column="40">.</op:operator><name pos:line="79" pos:column="41">Count</name></name> <op:operator pos:line="79" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="49">0</lit:literal></expr></argument><op:operator pos:line="79" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="79" pos:column="52">"SimpleSearchCriteria:LocationCriteriaToString - Locations cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">stringBuilder</name><op:operator pos:line="81" pos:column="26">.</op:operator><name pos:line="81" pos:column="27">Append</name></name><argument_list pos:line="81" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">int</name></type> <name pos:line="82" pos:column="17">collectionSize</name> =<init pos:line="82" pos:column="33"> <expr><name><name pos:line="82" pos:column="34">Locations</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="83" pos:column="13">foreach (<init><decl><type><name pos:line="83" pos:column="22">string</name></type> <name pos:line="83" pos:column="29">location</name> <init pos:line="83" pos:column="38">in <expr><name pos:line="83" pos:column="41">Locations</name></expr></init></decl></init>)
            <block pos:line="84" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">stringBuilder</name><op:operator pos:line="85" pos:column="30">.</op:operator><name pos:line="85" pos:column="31">Append</name></name><argument_list pos:line="85" pos:column="37">(<argument><expr><call><name><name pos:line="85" pos:column="38">SandoField</name><op:operator pos:line="85" pos:column="48">.</op:operator><name pos:line="85" pos:column="49">FullFilePath</name><op:operator pos:line="85" pos:column="61">.</op:operator><name pos:line="85" pos:column="62">ToString</name></name><argument_list pos:line="85" pos:column="70">()</argument_list></call> <op:operator pos:line="85" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="85" pos:column="75">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">stringBuilder</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">Append</name></name><argument_list pos:line="86" pos:column="37">(<argument><expr><call><name><name pos:line="86" pos:column="38">String</name><op:operator pos:line="86" pos:column="44">.</op:operator><name pos:line="86" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="86" pos:column="63">(<argument><expr><name pos:line="86" pos:column="64">location</name></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="74">?</op:operator> <lit:literal type="string" pos:line="86" pos:column="76">"*"</lit:literal> <op:operator pos:line="86" pos:column="80">:</op:operator> <lit:literal type="char" pos:line="86" pos:column="82">'\"'</lit:literal> <op:operator pos:line="86" pos:column="87">+</op:operator> <name pos:line="86" pos:column="89">location</name> <op:operator pos:line="86" pos:column="98">+</op:operator> <lit:literal type="char" pos:line="86" pos:column="100">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name pos:line="87" pos:column="21">collectionSize</name> <op:operator pos:line="87" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="87" pos:column="40">
                <block pos:line="88" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="89" pos:column="21">stringBuilder</name><op:operator pos:line="89" pos:column="34">.</op:operator><name pos:line="89" pos:column="35">Append</name></name><argument_list pos:line="89" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="91" pos:column="17">--</op:operator><name pos:line="91" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">stringBuilder</name><op:operator pos:line="93" pos:column="26">.</op:operator><name pos:line="93" pos:column="27">Append</name></name><argument_list pos:line="93" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="96" pos:column="9">private</specifier> <name pos:line="96" pos:column="17">void</name></type> <name pos:line="96" pos:column="22">UsageTypeCriteriaToString</name><parameter_list pos:line="96" pos:column="47">(<param><decl><type><name pos:line="96" pos:column="48">StringBuilder</name></type> <name pos:line="96" pos:column="62">stringBuilder</name></decl></param><op:operator pos:line="96" pos:column="75">,</op:operator> <param><decl><type><name pos:line="96" pos:column="77">bool</name></type> <name pos:line="96" pos:column="82">searchByUsageType</name></decl></param>)</parameter_list>
        <block pos:line="97" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Contract</name><op:operator pos:line="98" pos:column="21">.</op:operator><name pos:line="98" pos:column="22">Requires</name></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name pos:line="98" pos:column="31">UsageTypes</name> <op:operator pos:line="98" pos:column="42">!=</op:operator> <name pos:line="98" pos:column="45">null</name></expr></argument><op:operator pos:line="98" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="98" pos:column="51">"SimpleSearchCriteria:UsageTypeCriteriaToString - UsageTypes cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Contract</name><op:operator pos:line="99" pos:column="21">.</op:operator><name pos:line="99" pos:column="22">Requires</name></name><argument_list pos:line="99" pos:column="30">(<argument><expr><op:operator pos:line="99" pos:column="31">!</op:operator><name pos:line="99" pos:column="32">SearchByUsageType</name> <op:operator pos:line="99" pos:column="50">||</op:operator> <name><name pos:line="99" pos:column="53">UsageTypes</name><op:operator pos:line="99" pos:column="63">.</op:operator><name pos:line="99" pos:column="64">Count</name></name> <op:operator pos:line="99" pos:column="70">&gt;</op:operator> <lit:literal type="number" pos:line="99" pos:column="72">0</lit:literal></expr></argument><op:operator pos:line="99" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="99" pos:column="75">"SimpleSearchCriteria:UsageTypeCriteriaToString - UsageTypes cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">SearchTerms</name><op:operator pos:line="101" pos:column="28">.</op:operator><name pos:line="101" pos:column="29">Count</name></name> <op:operator pos:line="101" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="101" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="101" pos:column="40">
                <return pos:line="102" pos:column="17">return;</return></then></if>

            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name><name pos:line="104" pos:column="17">stringBuilder</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">Length</name></name> <op:operator pos:line="104" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="104" pos:column="42">
                <expr_stmt><expr><call><name><name pos:line="105" pos:column="17">stringBuilder</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">Append</name></name><argument_list pos:line="105" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="38">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">stringBuilder</name><op:operator pos:line="107" pos:column="26">.</op:operator><name pos:line="107" pos:column="27">Append</name></name><argument_list pos:line="107" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><name pos:line="108" pos:column="17">SearchByUsageType</name></expr>)</condition><then pos:line="108" pos:column="35">
            <block pos:line="109" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">int</name></type> <name pos:line="110" pos:column="21">collectionSize</name> =<init pos:line="110" pos:column="37"> <expr><name><name pos:line="110" pos:column="38">UsageTypes</name><op:operator pos:line="110" pos:column="48">.</op:operator><name pos:line="110" pos:column="49">Count</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="111" pos:column="17">foreach (<init><decl><type><name pos:line="111" pos:column="26">UsageType</name></type> <name pos:line="111" pos:column="36">usageType</name> <init pos:line="111" pos:column="46">in <expr><name pos:line="111" pos:column="49">UsageTypes</name></expr></init></decl></init>)
                <block pos:line="112" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="113" pos:column="21">stringBuilder</name><op:operator pos:line="113" pos:column="34">.</op:operator><name pos:line="113" pos:column="35">Append</name></name><argument_list pos:line="113" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="42">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="114" pos:column="21">SingleUsageTypeCriteriaToString</name><argument_list pos:line="114" pos:column="52">(<argument><expr><name pos:line="114" pos:column="53">stringBuilder</name></expr></argument><op:operator pos:line="114" pos:column="66">,</op:operator> <argument><expr><name pos:line="114" pos:column="68">usageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="115" pos:column="21">stringBuilder</name><op:operator pos:line="115" pos:column="34">.</op:operator><name pos:line="115" pos:column="35">Append</name></name><argument_list pos:line="115" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="42">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="116" pos:column="21">if <condition pos:line="116" pos:column="24">(<expr><name pos:line="116" pos:column="25">collectionSize</name> <op:operator pos:line="116" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="116" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="116" pos:column="44">
                    <block pos:line="117" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="118" pos:column="25">stringBuilder</name><op:operator pos:line="118" pos:column="38">.</op:operator><name pos:line="118" pos:column="39">Append</name></name><argument_list pos:line="118" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="46">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><op:operator pos:line="120" pos:column="21">--</op:operator><name pos:line="120" pos:column="23">collectionSize</name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then>
            <else pos:line="123" pos:column="13">else <comment type="line" pos:line="123" pos:column="18">//all usage types are used</comment>
            <block pos:line="124" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">int</name></type> <name pos:line="125" pos:column="21">collectionSize</name> =<init pos:line="125" pos:column="37"> <expr><call><name><name pos:line="125" pos:column="38">Enum</name><op:operator pos:line="125" pos:column="42">.</op:operator><name pos:line="125" pos:column="43">GetValues</name></name><argument_list pos:line="125" pos:column="52">(<argument><expr><call><name pos:line="125" pos:column="53">typeof</name><argument_list pos:line="125" pos:column="59">(<argument><expr><name pos:line="125" pos:column="60">UsageType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="125" pos:column="71">.</op:operator><name pos:line="125" pos:column="72">Length</name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="126" pos:column="17">foreach (<init><decl><type><name pos:line="126" pos:column="26">UsageType</name></type> <name pos:line="126" pos:column="36">usageType</name> <init pos:line="126" pos:column="46">in <expr><call><name><name pos:line="126" pos:column="49">Enum</name><op:operator pos:line="126" pos:column="53">.</op:operator><name pos:line="126" pos:column="54">GetValues</name></name><argument_list pos:line="126" pos:column="63">(<argument><expr><call><name pos:line="126" pos:column="64">typeof</name><argument_list pos:line="126" pos:column="70">(<argument><expr><name pos:line="126" pos:column="71">UsageType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl></init>)
                <block pos:line="127" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="128" pos:column="21">stringBuilder</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">Append</name></name><argument_list pos:line="128" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="42">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="129" pos:column="21">SingleUsageTypeCriteriaToString</name><argument_list pos:line="129" pos:column="52">(<argument><expr><name pos:line="129" pos:column="53">stringBuilder</name></expr></argument><op:operator pos:line="129" pos:column="66">,</op:operator> <argument><expr><name pos:line="129" pos:column="68">usageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="130" pos:column="21">stringBuilder</name><op:operator pos:line="130" pos:column="34">.</op:operator><name pos:line="130" pos:column="35">Append</name></name><argument_list pos:line="130" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="42">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="131" pos:column="21">if <condition pos:line="131" pos:column="24">(<expr><name pos:line="131" pos:column="25">collectionSize</name> <op:operator pos:line="131" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="131" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="131" pos:column="44">
                    <block pos:line="132" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="133" pos:column="25">stringBuilder</name><op:operator pos:line="133" pos:column="38">.</op:operator><name pos:line="133" pos:column="39">Append</name></name><argument_list pos:line="133" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="46">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><op:operator pos:line="135" pos:column="21">--</op:operator><name pos:line="135" pos:column="23">collectionSize</name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></else></if>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">stringBuilder</name><op:operator pos:line="138" pos:column="26">.</op:operator><name pos:line="138" pos:column="27">Append</name></name><argument_list pos:line="138" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="141" pos:column="9">private</specifier> <name pos:line="141" pos:column="17">void</name></type> <name pos:line="141" pos:column="22">SingleUsageTypeCriteriaToString</name><parameter_list pos:line="141" pos:column="53">(<param><decl><type><name pos:line="141" pos:column="54">StringBuilder</name></type> <name pos:line="141" pos:column="68">stringBuilder</name></decl></param><op:operator pos:line="141" pos:column="81">,</op:operator> <param><decl><type><name pos:line="141" pos:column="83">UsageType</name></type> <name pos:line="141" pos:column="93">usageType</name></decl></param>)</parameter_list>
        <block pos:line="142" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="143" pos:column="13">int</name></type> <name pos:line="143" pos:column="17">collectionSize</name> =<init pos:line="143" pos:column="33"> <expr><name><name pos:line="143" pos:column="34">SearchTerms</name><op:operator pos:line="143" pos:column="45">.</op:operator><name pos:line="143" pos:column="46">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="144" pos:column="13">foreach (<init><decl><type><name pos:line="144" pos:column="22">string</name></type> <name pos:line="144" pos:column="29">searchTerm</name> <init pos:line="144" pos:column="40">in <expr><name pos:line="144" pos:column="43">SearchTerms</name></expr></init></decl></init>)
            <block pos:line="145" pos:column="13">{
                <switch pos:line="146" pos:column="17">switch <condition pos:line="146" pos:column="24">(<expr><name pos:line="146" pos:column="25">usageType</name></expr>)</condition>
                <block pos:line="147" pos:column="17">{
                    <case pos:line="148" pos:column="21">case <expr><name><name pos:line="148" pos:column="26">UsageType</name><op:operator pos:line="148" pos:column="35">.</op:operator><name pos:line="148" pos:column="36">Bodies</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="149" pos:column="25">stringBuilder</name><op:operator pos:line="149" pos:column="38">.</op:operator><name pos:line="149" pos:column="39">Append</name></name><argument_list pos:line="149" pos:column="45">(<argument><expr><call><name><name pos:line="149" pos:column="46">SandoField</name><op:operator pos:line="149" pos:column="56">.</op:operator><name pos:line="149" pos:column="57">Body</name><op:operator pos:line="149" pos:column="61">.</op:operator><name pos:line="149" pos:column="62">ToString</name></name><argument_list pos:line="149" pos:column="70">()</argument_list></call> <op:operator pos:line="149" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="75">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="150" pos:column="25">stringBuilder</name><op:operator pos:line="150" pos:column="38">.</op:operator><name pos:line="150" pos:column="39">Append</name></name><argument_list pos:line="150" pos:column="45">(<argument><expr><name pos:line="150" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="151" pos:column="25">break;</break>
                    </case><case pos:line="152" pos:column="21">case <expr><name><name pos:line="152" pos:column="26">UsageType</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">Definitions</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="153" pos:column="25">stringBuilder</name><op:operator pos:line="153" pos:column="38">.</op:operator><name pos:line="153" pos:column="39">Append</name></name><argument_list pos:line="153" pos:column="45">(<argument><expr><call><name><name pos:line="153" pos:column="46">SandoField</name><op:operator pos:line="153" pos:column="56">.</op:operator><name pos:line="153" pos:column="57">Name</name><op:operator pos:line="153" pos:column="61">.</op:operator><name pos:line="153" pos:column="62">ToString</name></name><argument_list pos:line="153" pos:column="70">()</argument_list></call> <op:operator pos:line="153" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="153" pos:column="75">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="154" pos:column="25">stringBuilder</name><op:operator pos:line="154" pos:column="38">.</op:operator><name pos:line="154" pos:column="39">Append</name></name><argument_list pos:line="154" pos:column="45">(<argument><expr><name pos:line="154" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="155" pos:column="25">break;</break>
                    </case><case pos:line="156" pos:column="21">case <expr><name><name pos:line="156" pos:column="26">UsageType</name><op:operator pos:line="156" pos:column="35">.</op:operator><name pos:line="156" pos:column="36">EnumValues</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="157" pos:column="25">stringBuilder</name><op:operator pos:line="157" pos:column="38">.</op:operator><name pos:line="157" pos:column="39">Append</name></name><argument_list pos:line="157" pos:column="45">(<argument><expr><call><name><name pos:line="157" pos:column="46">SandoField</name><op:operator pos:line="157" pos:column="56">.</op:operator><name pos:line="157" pos:column="57">Values</name><op:operator pos:line="157" pos:column="63">.</op:operator><name pos:line="157" pos:column="64">ToString</name></name><argument_list pos:line="157" pos:column="72">()</argument_list></call> <op:operator pos:line="157" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="157" pos:column="77">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="158" pos:column="25">stringBuilder</name><op:operator pos:line="158" pos:column="38">.</op:operator><name pos:line="158" pos:column="39">Append</name></name><argument_list pos:line="158" pos:column="45">(<argument><expr><name pos:line="158" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="159" pos:column="25">break;</break>
                    </case><case pos:line="160" pos:column="21">case <expr><name><name pos:line="160" pos:column="26">UsageType</name><op:operator pos:line="160" pos:column="35">.</op:operator><name pos:line="160" pos:column="36">ExtendedClasses</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="161" pos:column="25">stringBuilder</name><op:operator pos:line="161" pos:column="38">.</op:operator><name pos:line="161" pos:column="39">Append</name></name><argument_list pos:line="161" pos:column="45">(<argument><expr><call><name><name pos:line="161" pos:column="46">SandoField</name><op:operator pos:line="161" pos:column="56">.</op:operator><name pos:line="161" pos:column="57">ExtendedClasses</name><op:operator pos:line="161" pos:column="72">.</op:operator><name pos:line="161" pos:column="73">ToString</name></name><argument_list pos:line="161" pos:column="81">()</argument_list></call> <op:operator pos:line="161" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="161" pos:column="86">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="162" pos:column="25">stringBuilder</name><op:operator pos:line="162" pos:column="38">.</op:operator><name pos:line="162" pos:column="39">Append</name></name><argument_list pos:line="162" pos:column="45">(<argument><expr><name pos:line="162" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="163" pos:column="25">break;</break>
                    </case><case pos:line="164" pos:column="21">case <expr><name><name pos:line="164" pos:column="26">UsageType</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">ImplementedInterfaces</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="165" pos:column="25">stringBuilder</name><op:operator pos:line="165" pos:column="38">.</op:operator><name pos:line="165" pos:column="39">Append</name></name><argument_list pos:line="165" pos:column="45">(<argument><expr><call><name><name pos:line="165" pos:column="46">SandoField</name><op:operator pos:line="165" pos:column="56">.</op:operator><name pos:line="165" pos:column="57">ImplementedInterfaces</name><op:operator pos:line="165" pos:column="78">.</op:operator><name pos:line="165" pos:column="79">ToString</name></name><argument_list pos:line="165" pos:column="87">()</argument_list></call> <op:operator pos:line="165" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="165" pos:column="92">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="166" pos:column="25">stringBuilder</name><op:operator pos:line="166" pos:column="38">.</op:operator><name pos:line="166" pos:column="39">Append</name></name><argument_list pos:line="166" pos:column="45">(<argument><expr><name pos:line="166" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="167" pos:column="25">break;</break>
                    </case><case pos:line="168" pos:column="21">case <expr><name><name pos:line="168" pos:column="26">UsageType</name><op:operator pos:line="168" pos:column="35">.</op:operator><name pos:line="168" pos:column="36">MethodArguments</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="169" pos:column="25">stringBuilder</name><op:operator pos:line="169" pos:column="38">.</op:operator><name pos:line="169" pos:column="39">Append</name></name><argument_list pos:line="169" pos:column="45">(<argument><expr><call><name><name pos:line="169" pos:column="46">SandoField</name><op:operator pos:line="169" pos:column="56">.</op:operator><name pos:line="169" pos:column="57">Arguments</name><op:operator pos:line="169" pos:column="66">.</op:operator><name pos:line="169" pos:column="67">ToString</name></name><argument_list pos:line="169" pos:column="75">()</argument_list></call> <op:operator pos:line="169" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="169" pos:column="80">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="170" pos:column="25">stringBuilder</name><op:operator pos:line="170" pos:column="38">.</op:operator><name pos:line="170" pos:column="39">Append</name></name><argument_list pos:line="170" pos:column="45">(<argument><expr><name pos:line="170" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="171" pos:column="25">break;</break>
                    </case><case pos:line="172" pos:column="21">case <expr><name><name pos:line="172" pos:column="26">UsageType</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">MethodReturnTypes</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="173" pos:column="25">stringBuilder</name><op:operator pos:line="173" pos:column="38">.</op:operator><name pos:line="173" pos:column="39">Append</name></name><argument_list pos:line="173" pos:column="45">(<argument><expr><call><name><name pos:line="173" pos:column="46">SandoField</name><op:operator pos:line="173" pos:column="56">.</op:operator><name pos:line="173" pos:column="57">ReturnType</name><op:operator pos:line="173" pos:column="67">.</op:operator><name pos:line="173" pos:column="68">ToString</name></name><argument_list pos:line="173" pos:column="76">()</argument_list></call> <op:operator pos:line="173" pos:column="79">+</op:operator> <lit:literal type="string" pos:line="173" pos:column="81">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="174" pos:column="25">stringBuilder</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">Append</name></name><argument_list pos:line="174" pos:column="45">(<argument><expr><name pos:line="174" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="175" pos:column="25">break;</break>
                    </case><case pos:line="176" pos:column="21">case <expr><name><name pos:line="176" pos:column="26">UsageType</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">NamespaceNames</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="177" pos:column="25">stringBuilder</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">Append</name></name><argument_list pos:line="177" pos:column="45">(<argument><expr><call><name><name pos:line="177" pos:column="46">SandoField</name><op:operator pos:line="177" pos:column="56">.</op:operator><name pos:line="177" pos:column="57">Namespace</name><op:operator pos:line="177" pos:column="66">.</op:operator><name pos:line="177" pos:column="67">ToString</name></name><argument_list pos:line="177" pos:column="75">()</argument_list></call> <op:operator pos:line="177" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="177" pos:column="80">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="178" pos:column="25">stringBuilder</name><op:operator pos:line="178" pos:column="38">.</op:operator><name pos:line="178" pos:column="39">Append</name></name><argument_list pos:line="178" pos:column="45">(<argument><expr><name pos:line="178" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="179" pos:column="25">break;</break>
                    </case><case pos:line="180" pos:column="21">case <expr><name><name pos:line="180" pos:column="26">UsageType</name><op:operator pos:line="180" pos:column="35">.</op:operator><name pos:line="180" pos:column="36">PropertyOrFieldTypes</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="181" pos:column="25">stringBuilder</name><op:operator pos:line="181" pos:column="38">.</op:operator><name pos:line="181" pos:column="39">Append</name></name><argument_list pos:line="181" pos:column="45">(<argument><expr><call><name><name pos:line="181" pos:column="46">SandoField</name><op:operator pos:line="181" pos:column="56">.</op:operator><name pos:line="181" pos:column="57">DataType</name><op:operator pos:line="181" pos:column="65">.</op:operator><name pos:line="181" pos:column="66">ToString</name></name><argument_list pos:line="181" pos:column="74">()</argument_list></call> <op:operator pos:line="181" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="181" pos:column="79">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="182" pos:column="25">stringBuilder</name><op:operator pos:line="182" pos:column="38">.</op:operator><name pos:line="182" pos:column="39">Append</name></name><argument_list pos:line="182" pos:column="45">(<argument><expr><name pos:line="182" pos:column="46">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="183" pos:column="25">break;</break>
                    </case><default pos:line="184" pos:column="21">default:
                        <throw pos:line="185" pos:column="25">throw <expr><op:operator pos:line="185" pos:column="31">new</op:operator> <call><name pos:line="185" pos:column="35">IndexerException</name><argument_list pos:line="185" pos:column="51">(<argument><expr><name><name pos:line="185" pos:column="52">TranslationCode</name><op:operator pos:line="185" pos:column="67">.</op:operator><name pos:line="185" pos:column="68">Exception_General_UnrecognizedEnumValue</name></name></expr></argument><op:operator pos:line="185" pos:column="107">,</op:operator> <argument><expr><name pos:line="185" pos:column="109">null</name></expr></argument><op:operator pos:line="185" pos:column="113">,</op:operator> <argument><expr><lit:literal type="string" pos:line="185" pos:column="115">"UsageType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                </default>}</block></switch>
                <if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><name pos:line="187" pos:column="21">collectionSize</name> <op:operator pos:line="187" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="187" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="187" pos:column="40">
                <block pos:line="188" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">stringBuilder</name><op:operator pos:line="189" pos:column="34">.</op:operator><name pos:line="189" pos:column="35">Append</name></name><argument_list pos:line="189" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="42">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="189" pos:column="52">//every term must be present in the results</comment>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="191" pos:column="17">--</op:operator><name pos:line="191" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="195" pos:column="9">public</specifier> <specifier pos:line="195" pos:column="16">virtual</specifier> <name><name pos:line="195" pos:column="24">SortedSet</name><argument_list pos:line="195" pos:column="33">&lt;<argument><name pos:line="195" pos:column="34">string</name></argument>&gt;</argument_list></name></type> <name pos:line="195" pos:column="42">SearchTerms</name> <block pos:line="195" pos:column="54">{ <function><name pos:line="195" pos:column="56">get</name>;</function> <function><name pos:line="195" pos:column="61">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="196" pos:column="9">public</specifier> <specifier pos:line="196" pos:column="16">virtual</specifier> <name pos:line="196" pos:column="24">bool</name></type> <name pos:line="196" pos:column="29">MatchCase</name> <block pos:line="196" pos:column="39">{ <function><name pos:line="196" pos:column="41">get</name>;</function> <function><name pos:line="196" pos:column="46">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="197" pos:column="9">public</specifier> <specifier pos:line="197" pos:column="16">virtual</specifier> <name pos:line="197" pos:column="24">bool</name></type> <name pos:line="197" pos:column="29">MatchWholeWord</name> <block pos:line="197" pos:column="44">{ <function><name pos:line="197" pos:column="46">get</name>;</function> <function><name pos:line="197" pos:column="51">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="198" pos:column="9">public</specifier> <specifier pos:line="198" pos:column="16">virtual</specifier> <name pos:line="198" pos:column="24">bool</name></type> <name pos:line="198" pos:column="29">ExactMode</name> <block pos:line="198" pos:column="39">{ <function><name pos:line="198" pos:column="41">get</name>;</function> <function><name pos:line="198" pos:column="46">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="199" pos:column="9">public</specifier> <specifier pos:line="199" pos:column="16">virtual</specifier> <name pos:line="199" pos:column="24">bool</name></type> <name pos:line="199" pos:column="29">SearchByAccessLevel</name> <block pos:line="199" pos:column="49">{ <function><name pos:line="199" pos:column="51">get</name>;</function> <function><name pos:line="199" pos:column="56">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="200" pos:column="9">public</specifier> <specifier pos:line="200" pos:column="16">virtual</specifier> <name><name pos:line="200" pos:column="24">SortedSet</name><argument_list pos:line="200" pos:column="33">&lt;<argument><name pos:line="200" pos:column="34">AccessLevel</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="47">AccessLevels</name> <block pos:line="200" pos:column="60">{ <function><name pos:line="200" pos:column="62">get</name>;</function> <function><name pos:line="200" pos:column="67">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="201" pos:column="9">public</specifier> <specifier pos:line="201" pos:column="16">virtual</specifier> <name pos:line="201" pos:column="24">bool</name></type> <name pos:line="201" pos:column="29">SearchByProgramElementType</name> <block pos:line="201" pos:column="56">{ <function><name pos:line="201" pos:column="58">get</name>;</function> <function><name pos:line="201" pos:column="63">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="202" pos:column="9">public</specifier> <specifier pos:line="202" pos:column="16">virtual</specifier> <name><name pos:line="202" pos:column="24">SortedSet</name><argument_list pos:line="202" pos:column="33">&lt;<argument><name pos:line="202" pos:column="34">ProgramElementType</name></argument>&gt;</argument_list></name></type> <name pos:line="202" pos:column="54">ProgramElementTypes</name> <block pos:line="202" pos:column="74">{ <function><name pos:line="202" pos:column="76">get</name>;</function> <function><name pos:line="202" pos:column="81">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="203" pos:column="9">public</specifier> <specifier pos:line="203" pos:column="16">virtual</specifier> <name pos:line="203" pos:column="24">bool</name></type> <name pos:line="203" pos:column="29">SearchByUsageType</name> <block pos:line="203" pos:column="47">{ <function><name pos:line="203" pos:column="49">get</name>;</function> <function><name pos:line="203" pos:column="54">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="204" pos:column="9">public</specifier> <specifier pos:line="204" pos:column="16">virtual</specifier> <name><name pos:line="204" pos:column="24">SortedSet</name><argument_list pos:line="204" pos:column="33">&lt;<argument><name pos:line="204" pos:column="34">UsageType</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="45">UsageTypes</name> <block pos:line="204" pos:column="56">{ <function><name pos:line="204" pos:column="58">get</name>;</function> <function><name pos:line="204" pos:column="63">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="205" pos:column="9">public</specifier> <specifier pos:line="205" pos:column="16">virtual</specifier> <name pos:line="205" pos:column="24">bool</name></type> <name pos:line="205" pos:column="29">SearchByLocation</name> <block pos:line="205" pos:column="46">{ <function><name pos:line="205" pos:column="48">get</name>;</function> <function><name pos:line="205" pos:column="53">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="206" pos:column="9">public</specifier> <specifier pos:line="206" pos:column="16">virtual</specifier> <name><name pos:line="206" pos:column="24">SortedSet</name><argument_list pos:line="206" pos:column="33">&lt;<argument><name pos:line="206" pos:column="34">string</name></argument>&gt;</argument_list></name></type> <name pos:line="206" pos:column="42">Locations</name> <block pos:line="206" pos:column="52">{ <function><name pos:line="206" pos:column="54">get</name>;</function> <function><name pos:line="206" pos:column="59">set</name>;</function> }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
