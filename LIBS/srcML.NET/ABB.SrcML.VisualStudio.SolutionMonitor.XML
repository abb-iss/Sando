<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.SrcML.VisualStudio.SolutionMonitor</name>
    </assembly>
    <members>
        <member name="T:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor">
            <summary>
            This class implements three Visual Studio basic IDE interfaces:
            (1) IVsTrackProjectDocumentsEvents2: Notifies clients of changes made to project files or directories.
            Methods of this interface were implemented to handle file creation and deletion events in Visual Studio envinronment.
            (2) IVsRunningDocTableEvents: Implements methods that fire in response to changes to documents in the Running Document Table (RDT).
            Methods of this interface were implemented to handle file change events in Visual Studio envinronment.
            (3) IVsSolutionEvents: Listening interface that monitors any notifications of changes to the solution.
            Methods of this interface were implemented to handle project creation/change/deletion events in Visual Studio envinronment.
            This class also extends AbstractFileMonitor so that SrcMLService can subscribe events that are raised from solution monitor.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OpenSolution">
            <summary>
            OpenSolution: The solution to be monitored.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.AllMonitoredFiles">
            <summary>
            List of all "monitored" files.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.DocumentTable">
            <summary>
            IVsRunningDocumentTable: Manages the set of currently open documents in the environment.
            DocumentTableItemId is used in registering/unregistering events.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProjectDocumentsTracker">
            <summary>
            IVsTrackProjectDocumentsEvents2: Used by projects to query the environment for 
            permission to add, remove, or rename a file or directory in a solution.
            pdwCookie is used in registering/unregistering events.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.solution">
            <summary>
            IVsSolution: Provides top-level manipulation or maintenance of the solution.
            cookie is used in registering/unregistering events.
            </summary>
        </member>
        <member name="F:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.isAboutToStopMonitoring">
            <summary>
            A bool flag indicating whether Solution Monitor is about to stop monitoring.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.#ctor(ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper,System.String,ABB.SrcML.IArchive,ABB.SrcML.IArchive[])">
            <summary>
            Constructor.
            </summary>
            <param name="openSolution"></param>
            <param name="baseDirectory"></param>
            <param name="defaultArchive"></param>
            <param name="otherArchives"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.StartMonitoring">
            <summary>
            Start monitoring the solution.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.StopMonitoring">
            <summary>
            Stop monitoring the solution.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.GetFilesFromSource">
            <summary>
            Gets the list of all files from the opened solution being monitored.
            </summary>
            <returns>An enumerable of files to be monitored</returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.RegisterSolutionEvents">
            <summary>
            Register Solution events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.RegisterTrackProjectDocumentsEvents2">
            <summary>
            Register TrackProjectDocuments2 events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.RegisterRunningDocumentTableEvents">
            <summary>
            Register RunningDocumentTable events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.UnregisterSolutionEvents">
            <summary>
            Unregister Solution events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.UnregisterTrackProjectDocumentsEvents2">
            <summary>
            Unregister TrackProjectDocuments2 events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.UnregisterRunningDocumentTableEvents">
            <summary>
            Unregister RunningDocumentTable events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.GetMonitoredFiles(System.ComponentModel.BackgroundWorker)">
            <summary>
            Get all "monitored" files in this solution.
            TODO: exclude directories? worker?
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.WalkSolutionTree(System.ComponentModel.BackgroundWorker)">
            <summary>
            Recursively walk through the solution/projects to check if srcML files need to be ADDED or CHANGED.
            TODO: may process files in parallel
            </summary>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProcessProject(EnvDTE.Project,System.ComponentModel.BackgroundWorker,System.Collections.Generic.List{System.String})">
            <summary>
            Process a project item.
            </summary>
            <param name="project"></param>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProcessItems(System.Collections.IEnumerator,System.ComponentModel.BackgroundWorker,System.Collections.Generic.List{System.String})">
            <summary>
            Recursively process project items.
            </summary>
            <param name="items"></param>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProcessItem(EnvDTE.ProjectItem,System.ComponentModel.BackgroundWorker,System.Collections.Generic.List{System.String})">
            <summary>
            Process a single project item.
            </summary>
            <param name="item"></param>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProcessChildren(EnvDTE.ProjectItem,System.ComponentModel.BackgroundWorker,System.Collections.Generic.List{System.String})">
            <summary>
            Process the children items of a project item.
            </summary>
            <param name="item"></param>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.ProcessSingleFile(EnvDTE.ProjectItem,System.ComponentModel.BackgroundWorker,System.Collections.Generic.List{System.String})">
            <summary>
            Process a single source file. (Not include file deletion.)
            </summary>
            <param name="item"></param>
            <param name="worker"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnNotifyFileAddRemove(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],ABB.SrcML.FileEventType)">
            <summary>
            Handle file creation/deletion cases.
            The way these parameters work is:
            rgFirstIndices contains a list of the starting index into the changeProjectItems array for each project listed in the changedProjects list
            Example: if you get two projects, then rgFirstIndices should have two elements, the first element is probably zero since rgFirstIndices would start at zero.
            Then item two in the rgFirstIndices array is where in the changeProjectItems list that the second project's changed items reside.
            TODO: may process files in parallel
            </summary>
            <param name="cProjects"></param>
            <param name="cFiles"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.RespondToVSFileChangedEvent(System.String,System.String,ABB.SrcML.FileEventType)">
            <summary>
            Respond to events of file creation/change/deletion in the solution in Visual Studio
            </summary>
            <param name="filePath"></param>
            <param name="oldFilePath"></param>
            <param name="type"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
            <summary>
            This method notifies the client after a project has added files.
            </summary>
            <param name="cProjects"></param>
            <param name="cFiles"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
            <summary>
            This method notifies the client after files are removed from the project.
            </summary>
            <param name="cProjects"></param>
            <param name="cFiles"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
            <summary>
            This method notifies the client when files have been renamed in the project.
            </summary>
            <param name="cProjects"></param>
            <param name="cFiles"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgszMkOldNames"></param>
            <param name="rgszMkNewNames"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
            <summary>
            This method notifies the client after directories are added to the project.
            </summary>
            <param name="cProjects"></param>
            <param name="cDirectories"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
            <summary>
            This method notifies the client when directories have been removed from the project.
            </summary>
            <param name="cProjects"></param>
            <param name="cDirectories"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
            <summary>
            This method notifies the client when directories have been renamed in the project.
            </summary>
            <param name="cProjects"></param>
            <param name="cDirs"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgszMkOldNames"></param>
            <param name="rgszMkNewNames"></param>
            <param name="rgFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
            <summary>
            This method notifies the client when source control status has changed.
            </summary>
            <param name="cProjects"></param>
            <param name="cFiles"></param>
            <param name="rgpProjects"></param>
            <param name="rgFirstIndices"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgdwSccStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
            <summary>
            This method notifies the client when a project has requested to add directories.
            </summary>
            <param name="pProject"></param>
            <param name="cDirectories"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
            <summary>
            This method notifies the client when a project has requested to add files.
            </summary>
            <param name="pProject"></param>
            <param name="cFiles"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
            <summary>
            This method notifies the client when a project has requested to remove directories.
            </summary>
            <param name="pProject"></param>
            <param name="cDirectories"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
            <summary>
            This method notifies the client when a project has requested to remove files.
            </summary>
            <param name="pProject"></param>
            <param name="cFiles"></param>
            <param name="rgpszMkDocuments"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
            <summary>
            This method notifies the client when a project has requested to rename directories.
            </summary>
            <param name="pProject"></param>
            <param name="cDirs"></param>
            <param name="rgszMkOldNames"></param>
            <param name="rgszMkNewNames"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.Microsoft#VisualStudio#Shell#Interop#IVsTrackProjectDocumentsEvents2#OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
            <summary>
            This method notifies the client when a project has requested to rename files.
            </summary>
            <param name="pProject"></param>
            <param name="cFiles"></param>
            <param name="rgszMkOldNames"></param>
            <param name="rgszMkNewNames"></param>
            <param name="rgFlags"></param>
            <param name="pSummaryResult"></param>
            <param name="rgResults"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterSave(System.UInt32)">
            <summary>
            Called after saving a document in the Running Document Table (RDT).
            TODO: run in background or not?
            </summary>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called after application of the first lock of the specified type to the specified document in the Running Document Table (RDT).
            </summary>
            <param name="cookie"></param>
            <param name="lockType"></param>
            <param name="readLocksLeft"></param>
            <param name="editLocksLeft"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).
            </summary>
            <param name="cookie"></param>
            <param name="lockType"></param>
            <param name="readLocksLeft"></param>
            <param name="editLocksLeft"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterAttributeChange(System.UInt32,System.UInt32)">
            <summary>
            Called after a change in an attribute of a document in the Running Document Table (RDT).
            </summary>
            <param name="cookie"></param>
            <param name="grfAttribs"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called before displaying a document window.
            </summary>
            <param name="cookie"></param>
            <param name="fFirstShow"></param>
            <param name="pFrame"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called after a document window is placed in the Hide state.
            </summary>
            <param name="docCookie"></param>
            <param name="pFrame"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterCloseSolution(System.Object)">
            <summary>
            Notifies listening clients that a solution has been closed.
            </summary>
            <param name="pUnkReserved"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Notifies listening clients that the project has been loaded.
            Only being triggered when reloading a project.
            </summary>
            <param name="pStubHierarchy"></param>
            <param name="pRealHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Notifies listening clients that the project has been opened.
            </summary>
            <param name="pHierarchy"></param>
            <param name="fAdded"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnAfterOpenSolution(System.Object,System.Int32)">
            <summary>
            Notifies listening clients that the solution has been opened.
            </summary>
            <param name="pUnkReserved"></param>
            <param name="fNewSolution"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Notifies listening clients that the project is about to be closed.
            </summary>
            <param name="pHierarchy"></param>
            <param name="fRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnBeforeCloseSolution(System.Object)">
            <summary>
            Notifies listening clients that the solution is about to be closed.
            </summary>
            <param name="pUnkReserved"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Notifies listening clients that the project is about to be unloaded.
            </summary>
            <param name="pRealHierarchy"></param>
            <param name="pStubHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
            <summary>
            Queries listening clients as to whether the project can be closed.
            </summary>
            <param name="pHierarchy"></param>
            <param name="fRemoving"></param>
            <param name="pfCancel"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnQueryCloseSolution(System.Object,System.Int32@)">
            <summary>
            Queries listening clients as to whether the solution can be closed.
            </summary>
            <param name="pUnkReserved"></param>
            <param name="pfCancel"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
            <summary>
            Queries listening clients as to whether the project can be unloaded.
            </summary>
            <param name="pRealHierarchy"></param>
            <param name="pfCancel"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.NotifyProjectAddRemove(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,ABB.SrcML.FileEventType)">
            <summary>
            Handle project addition/deletion cases.
            The way these parameters work is:
            pHierarchy: Pointer to the IVsHierarchy interface of the project being loaded or closed.
            fAddedRemoved: For addition, true if the project is added to the solution after the solution is opened,
                           false if the project is added to the solution while the solution is being opened.
                           For deletion, true if the project was removed from the solution before the solution was closed,
                           false if the project was removed from the solution while the solution was being closed.
            type: FileEventType.FileAdded - project addition, FileEventType.FileDeleted - project deletion.
            TODO: may process files in parallel
            </summary>
            <param name="pHierarchy"></param>
            <param name="fAddedRemoved"></param>
            <param name="type"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.GetRDTFiles">
            <summary>
            Get a list of all files in the Running Docuement Table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor.saveRDTFile(System.String)">
            <summary>
            Save a specific file in the Running Docuement Table.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitorFactory">
            <summary>
            Factory class for creating the instance of solution monitor.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitorFactory.CreateMonitor(System.String,ABB.SrcML.IArchive,ABB.SrcML.IArchive[])">
            <summary>
            Create an instance of solution monitor.
            </summary>
            <param name="SrcMLServiceDirectory"></param>
            <param name="lastModifiedArchive"></param>
            <param name="CurrentSrcMLArchive"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitorFactory.CreateMonitor(EnvDTE.Solution,System.String,ABB.SrcML.IArchive,ABB.SrcML.IArchive[])">
            <summary>
            Create an instance of solution monitor.
            </summary>
            <param name="openSolution"></param>
            <param name="SrcMLServiceDirectory"></param>
            <param name="lastModifiedArchive"></param>
            <param name="CurrentSrcMLArchive"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitorFactory.GetOpenSolution">
            <summary>
            Get the open solution.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper">
            <summary>
            Wrapper of the Visual Studio EnvDTE.Solution interface.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper.FindProjectItem(System.String)">
            <summary>
            Locates an item in a project.
            </summary>
            <param name="name">The name of the project item.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper.getProjects">
            <summary>
            Gets a collection of the projects currently in the solution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper.Create(EnvDTE.Solution)">
            <summary>
            Creates an instance of a Visual Studio solution.
            </summary>
            <param name="openSolution"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.SolutionWrapper.GetSolutionFullName">
            <summary>
            Gets the full path and name of the object's file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.VisualStudio.SolutionMonitor.StandardSolutionWrapper">
            <summary>
            Standard wrapper of the Visual Studio EnvDTE.Solution interface.
            </summary>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.StandardSolutionWrapper.#ctor(EnvDTE.Solution)">
            <summary>
            Constructor.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.StandardSolutionWrapper.FindProjectItem(System.String)">
            <summary>
            Locates an item in a project.
            </summary>
            <param name="name">The name of the project item.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.StandardSolutionWrapper.getProjects">
            <summary>
            Gets a collection of the projects currently in the solution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.VisualStudio.SolutionMonitor.StandardSolutionWrapper.GetSolutionFullName">
            <summary>
            Gets the full path and name of the object's file.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
