<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\temp\ConfigManip.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Windows</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Windows</name><op:operator pos:line="3" pos:column="21">.</op:operator><name pos:line="3" pos:column="22">Forms</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Diagnostics</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name pos:line="8" pos:column="11">RobotConfigServe2</name>
<block pos:line="9" pos:column="1">{ 
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">partial</specifier> class <name pos:line="10" pos:column="26">ConfigManip</name>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">static</specifier> <name pos:line="12" pos:column="16">string</name></type> <name pos:line="12" pos:column="23">toUpper</name><parameter_list pos:line="12" pos:column="30">(<param><decl><type><name pos:line="12" pos:column="31">string</name></type> <name pos:line="12" pos:column="38">str</name></decl></param>)</parameter_list> 
        <block pos:line="13" pos:column="9">{
            <return pos:line="14" pos:column="13">return <expr><call><name><name pos:line="14" pos:column="20">str</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">ToUpper</name></name><argument_list pos:line="14" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="17" pos:column="9">static</specifier> <name pos:line="17" pos:column="16">string</name></type> <name pos:line="17" pos:column="23">convertInt</name><parameter_list pos:line="17" pos:column="33">(<param><decl><type><name pos:line="17" pos:column="34">int</name></type> <name pos:line="17" pos:column="38">number</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <return pos:line="19" pos:column="13">return <expr><call><name><name pos:line="19" pos:column="20">System</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">Convert</name><op:operator pos:line="19" pos:column="34">.</op:operator><name pos:line="19" pos:column="35">ToString</name></name><argument_list pos:line="19" pos:column="43">(<argument><expr><name pos:line="19" pos:column="44">number</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="22" pos:column="9">static</specifier> <name pos:line="22" pos:column="16">string</name></type> <name pos:line="22" pos:column="23">replaceCharInStr</name><parameter_list pos:line="22" pos:column="39">(<param><decl><type><name pos:line="22" pos:column="40">string</name></type> <name pos:line="22" pos:column="47">origStr</name></decl></param><op:operator pos:line="22" pos:column="54">,</op:operator> <param><decl><type><name pos:line="22" pos:column="56">char</name></type> <name pos:line="22" pos:column="61">to_be_replaced</name></decl></param><op:operator pos:line="22" pos:column="75">,</op:operator> <param><decl><type><name pos:line="22" pos:column="77">char</name></type> <name pos:line="22" pos:column="82">replace_with</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
           <return pos:line="24" pos:column="12">return <expr><call><name><name pos:line="24" pos:column="19">origStr</name><op:operator pos:line="24" pos:column="26">.</op:operator><name pos:line="24" pos:column="27">Replace</name></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name pos:line="24" pos:column="35">to_be_replaced</name></expr></argument><op:operator pos:line="24" pos:column="49">,</op:operator><argument><expr><name pos:line="24" pos:column="50">replace_with</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="27" pos:column="9">static</specifier> <name pos:line="27" pos:column="16">string</name></type> <name pos:line="27" pos:column="23">removeCharInStr</name><parameter_list pos:line="27" pos:column="38">(<param><decl><type><name pos:line="27" pos:column="39">string</name></type> <name pos:line="27" pos:column="46">origStr</name></decl></param><op:operator pos:line="27" pos:column="53">,</op:operator> <param><decl><type><name pos:line="27" pos:column="55">char</name></type> <name pos:line="27" pos:column="60">to_be_removed</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{   
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">string</name></type> <name pos:line="29" pos:column="20">removed</name> =<init pos:line="29" pos:column="29"> <expr><op:operator pos:line="29" pos:column="30">new</op:operator> <call><name pos:line="29" pos:column="34">string</name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">to_be_removed</name></expr></argument><op:operator pos:line="29" pos:column="54">,</op:operator><argument><expr><lit:literal type="number" pos:line="29" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="30" pos:column="13">return <expr><call><name><name pos:line="30" pos:column="20">origStr</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">Replace</name></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">removed</name></expr></argument><op:operator pos:line="30" pos:column="43">,</op:operator><argument><expr><lit:literal type="string" pos:line="30" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">ConfigManip</name><parameter_list pos:line="33" pos:column="27">()</parameter_list>
        <block pos:line="34" pos:column="9">{
        }</block></constructor>

        <constructor><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">ConfigManip</name><parameter_list pos:line="37" pos:column="27">(<param><decl><type><name pos:line="37" pos:column="28">string</name></type> <name pos:line="37" pos:column="35">configListFileName</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">configCnt</name> <op:operator pos:line="39" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="39" pos:column="25">0</lit:literal></expr>;</expr_stmt>

            <comment type="line" pos:line="41" pos:column="13">//get the "configWorkspaceRoot"</comment>
	        <decl_stmt><decl><type><name pos:line="42" pos:column="17">int</name></type> <name pos:line="42" pos:column="21">pos</name> =<init pos:line="42" pos:column="26"> <expr><call><name><name pos:line="42" pos:column="27">configListFileName</name><op:operator pos:line="42" pos:column="45">.</op:operator><name pos:line="42" pos:column="46">LastIndexOf</name></name><argument_list pos:line="42" pos:column="57">(<argument><expr><lit:literal type="char" pos:line="42" pos:column="58">'\\'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><name pos:line="43" pos:column="17">configWorkspaceRoot</name> <op:operator pos:line="43" pos:column="37">=</op:operator> <call><name><name pos:line="43" pos:column="39">configListFileName</name><op:operator pos:line="43" pos:column="57">.</op:operator><name pos:line="43" pos:column="58">Substring</name></name><argument_list pos:line="43" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="68">0</lit:literal></expr></argument><op:operator pos:line="43" pos:column="69">,</op:operator><argument><expr><name pos:line="43" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><op:operator pos:line="45" pos:column="17">!</op:operator><call><name><name pos:line="45" pos:column="18">File</name><op:operator pos:line="45" pos:column="22">.</op:operator><name pos:line="45" pos:column="23">Exists</name></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">configListFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="45" pos:column="50">
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">MessageBox</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">Show</name></name><argument_list pos:line="47" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="33">"Can't find file "</lit:literal> <op:operator pos:line="47" pos:column="52">+</op:operator> <name pos:line="47" pos:column="54">configListFileName</name></expr></argument><op:operator pos:line="47" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="47" pos:column="74">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="48" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">StreamReader</name></type> <name pos:line="51" pos:column="26">configListFile</name> =<init pos:line="51" pos:column="42"> <expr><op:operator pos:line="51" pos:column="43">new</op:operator> <call><name pos:line="51" pos:column="47">StreamReader</name><argument_list pos:line="51" pos:column="59">(<argument><expr><name pos:line="51" pos:column="60">configListFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <block pos:line="52" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="53" pos:column="17">string</name></type> <name pos:line="53" pos:column="24">line</name></decl>;</decl_stmt>
	            <comment type="line" pos:line="54" pos:column="21">//read through the configListFile</comment>
                <while pos:line="55" pos:column="17">while<condition pos:line="55" pos:column="22">(<expr><op:operator pos:line="55" pos:column="23">(</op:operator><name pos:line="55" pos:column="24">line</name> <op:operator pos:line="55" pos:column="29">=</op:operator> <call><name><name pos:line="55" pos:column="31">configListFile</name><op:operator pos:line="55" pos:column="45">.</op:operator><name pos:line="55" pos:column="46">ReadLine</name></name><argument_list pos:line="55" pos:column="54">()</argument_list></call><op:operator pos:line="55" pos:column="56">)</op:operator> <op:operator pos:line="55" pos:column="58">!=</op:operator> <name pos:line="55" pos:column="61">null</name></expr>)</condition>
                <block pos:line="56" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="57" pos:column="21">string</name></type> <name pos:line="57" pos:column="28">configuration</name> =<init pos:line="57" pos:column="43"> <expr><name pos:line="57" pos:column="44">line</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="58" pos:column="21">configList</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">Add</name></name><argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="59" pos:column="21">configCnt</name><op:operator pos:line="59" pos:column="30">++</op:operator></expr>;</expr_stmt>
                }</block></while>	            

	            <expr_stmt><expr><call><name><name pos:line="62" pos:column="21">configListFile</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">Close</name></name><argument_list pos:line="62" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            }</block>
        }</block></constructor>

        <cpp:region pos:line="66" pos:column="9">#<cpp:directive pos:line="66" pos:column="10">region</cpp:directive> class members definition</cpp:region>
        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">private</specifier> <name pos:line="67" pos:column="17">string</name></type> <name pos:line="67" pos:column="24">configWorkspaceRoot</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">private</specifier> <name><name pos:line="68" pos:column="17">List</name><argument_list pos:line="68" pos:column="21">&lt;<argument><name pos:line="68" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="30">configList</name> =<init pos:line="68" pos:column="42"> <expr><op:operator pos:line="68" pos:column="43">new</op:operator> <call><name><name pos:line="68" pos:column="47">List</name><argument_list pos:line="68" pos:column="51">&lt;<argument><name pos:line="68" pos:column="52">string</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">private</specifier> <name><name pos:line="69" pos:column="17">List</name><argument_list pos:line="69" pos:column="21">&lt;<argument><name pos:line="69" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="69" pos:column="30">configSelect</name> =<init pos:line="69" pos:column="44"> <expr><op:operator pos:line="69" pos:column="45">new</op:operator> <call><name><name pos:line="69" pos:column="49">List</name><argument_list pos:line="69" pos:column="53">&lt;<argument><name pos:line="69" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">private</specifier> <name><name pos:line="70" pos:column="17">List</name><argument_list pos:line="70" pos:column="21">&lt;<argument><name pos:line="70" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="30">files_in_build</name> =<init pos:line="70" pos:column="46"> <expr><op:operator pos:line="70" pos:column="47">new</op:operator> <call><name><name pos:line="70" pos:column="51">List</name><argument_list pos:line="70" pos:column="55">&lt;<argument><name pos:line="70" pos:column="56">string</name></argument>&gt;</argument_list></name><argument_list pos:line="70" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">private</specifier> <name><name pos:line="71" pos:column="17">List</name><argument_list pos:line="71" pos:column="21">&lt;<argument><name pos:line="71" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="27">allSelections</name> =<init pos:line="71" pos:column="42"> <expr><op:operator pos:line="71" pos:column="43">new</op:operator> <call><name><name pos:line="71" pos:column="47">List</name><argument_list pos:line="71" pos:column="51">&lt;<argument><name pos:line="71" pos:column="52">int</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">private</specifier> <name pos:line="72" pos:column="17">uint</name></type> <name pos:line="72" pos:column="22">configCnt</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">private</specifier> <name><name pos:line="74" pos:column="17">List</name><argument_list pos:line="74" pos:column="21">&lt;<argument><name pos:line="74" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="30">fileImpacted</name> =<init pos:line="74" pos:column="44"> <expr><op:operator pos:line="74" pos:column="45">new</op:operator> <call><name><name pos:line="74" pos:column="49">List</name><argument_list pos:line="74" pos:column="53">&lt;<argument><name pos:line="74" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="75" pos:column="9">private</specifier> <name><name pos:line="75" pos:column="17">List</name><argument_list pos:line="75" pos:column="21">&lt;<argument><name pos:line="75" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="27">lineCntImpactedPerFile</name> =<init pos:line="75" pos:column="51"> <expr><op:operator pos:line="75" pos:column="52">new</op:operator> <call><name><name pos:line="75" pos:column="56">List</name><argument_list pos:line="75" pos:column="60">&lt;<argument><name pos:line="75" pos:column="61">int</name></argument>&gt;</argument_list></name><argument_list pos:line="75" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">private</specifier> <name><name pos:line="77" pos:column="17">List</name><argument_list pos:line="77" pos:column="21">&lt;<argument><name pos:line="77" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="30">funcImpacted</name> =<init pos:line="77" pos:column="44"> <expr><op:operator pos:line="77" pos:column="45">new</op:operator> <call><name><name pos:line="77" pos:column="49">List</name><argument_list pos:line="77" pos:column="53">&lt;<argument><name pos:line="77" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="77" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">private</specifier> <name><name pos:line="78" pos:column="17">List</name><argument_list pos:line="78" pos:column="21">&lt;<argument><name pos:line="78" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="27">lineCntImpactedPerFunc</name> =<init pos:line="78" pos:column="51"> <expr><op:operator pos:line="78" pos:column="52">new</op:operator> <call><name><name pos:line="78" pos:column="56">List</name><argument_list pos:line="78" pos:column="60">&lt;<argument><name pos:line="78" pos:column="61">int</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">private</specifier> <name pos:line="80" pos:column="17">string</name></type> <name pos:line="80" pos:column="24">code_change_imp_file</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="81" pos:column="9">private</specifier> <name><name pos:line="81" pos:column="17">List</name><argument_list pos:line="81" pos:column="21">&lt;<argument><name pos:line="81" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="27">configIndexImpacted</name> =<init pos:line="81" pos:column="48"> <expr><op:operator pos:line="81" pos:column="49">new</op:operator> <call><name><name pos:line="81" pos:column="53">List</name><argument_list pos:line="81" pos:column="57">&lt;<argument><name pos:line="81" pos:column="58">int</name></argument>&gt;</argument_list></name><argument_list pos:line="81" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="82" pos:column="9">private</specifier> <name><name pos:line="82" pos:column="17">List</name><argument_list pos:line="82" pos:column="21">&lt;<argument><name pos:line="82" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="82" pos:column="30">configImpacted</name> =<init pos:line="82" pos:column="46"> <expr><op:operator pos:line="82" pos:column="47">new</op:operator> <call><name><name pos:line="82" pos:column="51">List</name><argument_list pos:line="82" pos:column="55">&lt;<argument><name pos:line="82" pos:column="56">string</name></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <cpp:endregion pos:line="83" pos:column="9">#<cpp:directive pos:line="83" pos:column="10">endregion</cpp:directive></cpp:endregion>


        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <name><name pos:line="86" pos:column="16">List</name><argument_list pos:line="86" pos:column="20">&lt;<argument><name pos:line="86" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="29">displayConfig</name><parameter_list pos:line="86" pos:column="42">()</parameter_list>
        <block pos:line="87" pos:column="9">{
            <return pos:line="88" pos:column="13">return <expr><name pos:line="88" pos:column="20">configList</name></expr>;</return>
        }</block></function>
        
        <function><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">getConfigSelect</name><parameter_list pos:line="91" pos:column="36">(<param><decl><type><name><name pos:line="91" pos:column="37">List</name><argument_list pos:line="91" pos:column="41">&lt;<argument><name pos:line="91" pos:column="42">string</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="50">configSelectExt</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{
            <expr_stmt><expr><name pos:line="93" pos:column="13">configSelect</name> <op:operator pos:line="93" pos:column="26">=</op:operator> <name pos:line="93" pos:column="28">configSelectExt</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">getChangeImpact</name><parameter_list pos:line="96" pos:column="36">(<param><decl><type><name pos:line="96" pos:column="37">string</name></type> <name pos:line="96" pos:column="44">codeChangeImpFile</name></decl></param>)</parameter_list>
        <block pos:line="97" pos:column="9">{
            <expr_stmt><expr><name pos:line="98" pos:column="13">code_change_imp_file</name> <op:operator pos:line="98" pos:column="34">=</op:operator> <name pos:line="98" pos:column="36">codeChangeImpFile</name></expr>;</expr_stmt>
        }</block></function>

        <cpp:region pos:line="101" pos:column="9">#<cpp:directive pos:line="101" pos:column="10">region</cpp:directive> main functionalities</cpp:region>

        <cpp:region pos:line="103" pos:column="9">#<cpp:directive pos:line="103" pos:column="10">region</cpp:directive> scenario 1 -- given configuration, find its impact on code</cpp:region> 
        <function><type><specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">int</name></type> <name pos:line="104" pos:column="20">genConfigImp</name><parameter_list pos:line="104" pos:column="32">(<param><decl><type><name pos:line="104" pos:column="33">string</name></type> <name pos:line="104" pos:column="40">workspacePos</name></decl></param>)</parameter_list>   
        <block pos:line="105" pos:column="9">{
            <comment type="line" pos:line="106" pos:column="13">// get all corresponding selections in code for all configurations of interest</comment>
	        <if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><call><name pos:line="107" pos:column="21">getChangeSets</name><argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">workspacePos</name></expr></argument><op:operator pos:line="107" pos:column="47">,</op:operator> <argument><expr><lit:literal type="number" pos:line="107" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="52">==</op:operator> <op:operator pos:line="107" pos:column="55">-</op:operator><lit:literal type="number" pos:line="107" pos:column="56">1</lit:literal></expr>)</condition><then pos:line="107" pos:column="58">
		        <return pos:line="108" pos:column="25">return <expr><op:operator pos:line="108" pos:column="32">-</op:operator><lit:literal type="number" pos:line="108" pos:column="33">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="110" pos:column="13">// get files in build, store them in vector "files_in_build"</comment>
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(<expr><call><name pos:line="111" pos:column="17">getFileInBuild</name><argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">workspacePos</name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="46">==</op:operator> <op:operator pos:line="111" pos:column="49">-</op:operator><lit:literal type="number" pos:line="111" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="111" pos:column="52">
                <return pos:line="112" pos:column="17">return <expr><op:operator pos:line="112" pos:column="24">-</op:operator><lit:literal type="number" pos:line="112" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="114" pos:column="13">//	generate impact at line level by calling external application: ImpactCompare.exe</comment>
	        <expr_stmt><expr><call><name pos:line="115" pos:column="17">genMultiSelectImp</name><argument_list pos:line="115" pos:column="34">(<argument><expr><name pos:line="115" pos:column="35">workspacePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
            <comment type="line" pos:line="117" pos:column="13">// generate impact at file level from the file (impact at line level) generated above</comment>
            <if pos:line="118" pos:column="13">if <condition pos:line="118" pos:column="16">(<expr><call><name pos:line="118" pos:column="17">genImpUnionFile</name><argument_list pos:line="118" pos:column="32">(<argument><expr><name pos:line="118" pos:column="33">workspacePos</name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="47">==</op:operator> <op:operator pos:line="118" pos:column="50">-</op:operator><lit:literal type="number" pos:line="118" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="118" pos:column="53">
                <return pos:line="119" pos:column="17">return <expr><op:operator pos:line="119" pos:column="24">-</op:operator><lit:literal type="number" pos:line="119" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="121" pos:column="13">// generate impact at file level that will be feed into MasaiCode for visiualization</comment>
            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><call><name pos:line="122" pos:column="17">genFileImp</name><argument_list pos:line="122" pos:column="27">(<argument><expr><name pos:line="122" pos:column="28">workspacePos</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="42">==</op:operator> <op:operator pos:line="122" pos:column="45">-</op:operator><lit:literal type="number" pos:line="122" pos:column="46">1</lit:literal></expr>)</condition><then pos:line="122" pos:column="48">
                <return pos:line="123" pos:column="17">return <expr><op:operator pos:line="123" pos:column="24">-</op:operator><lit:literal type="number" pos:line="123" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="125" pos:column="13">// generate impact at func level from the file (impact at line level) generated above	        </comment>
	        <if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><call><name pos:line="126" pos:column="21">genImpUnionFunc</name><argument_list pos:line="126" pos:column="36">(<argument><expr><name pos:line="126" pos:column="37">workspacePos</name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="51">==</op:operator> <op:operator pos:line="126" pos:column="54">-</op:operator><lit:literal type="number" pos:line="126" pos:column="55">1</lit:literal></expr>)</condition><then pos:line="126" pos:column="57">
                <return pos:line="127" pos:column="17">return <expr><op:operator pos:line="127" pos:column="24">-</op:operator><lit:literal type="number" pos:line="127" pos:column="25">1</lit:literal></expr> ;</return></then></if>

            <comment type="line" pos:line="129" pos:column="13">// generate impact at func level that will be feed into MasaiCode for visiualization</comment>
            <if pos:line="130" pos:column="13">if<condition pos:line="130" pos:column="15">(<expr><call><name pos:line="130" pos:column="16">genFuncImp</name><argument_list pos:line="130" pos:column="26">(<argument><expr><name pos:line="130" pos:column="27">workspacePos</name></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="41">==</op:operator> <op:operator pos:line="130" pos:column="44">-</op:operator><lit:literal type="number" pos:line="130" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="130" pos:column="47">
                <return pos:line="131" pos:column="17">return <expr><op:operator pos:line="131" pos:column="24">-</op:operator><lit:literal type="number" pos:line="131" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">MessageBox</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">Show</name></name><argument_list pos:line="133" pos:column="28">(
                <comment type="line" pos:line="134" pos:column="17">//"Impacted Files and Functions are created as " </comment>
                <comment type="line" pos:line="135" pos:column="17">//+ workspacePos </comment>
                <comment type="line" pos:line="136" pos:column="17">//+ "\\imp_union_filesImpacted.csv and imp_union_funcsImpacted.csv"</comment>
                <comment type="line" pos:line="137" pos:column="17">//+ Environment.NewLine + </comment>
                <argument><expr><lit:literal type="string" pos:line="138" pos:column="17">"Visualization inputs are created in "</lit:literal>
                <op:operator pos:line="139" pos:column="17">+</op:operator><name pos:line="139" pos:column="18">workspacePos</name> <op:operator pos:line="139" pos:column="31">+</op:operator> <lit:literal type="string" pos:line="139" pos:column="33">"\\MosaiCodeInputs."</lit:literal>
                <op:operator pos:line="140" pos:column="17">+</op:operator> <name><name pos:line="140" pos:column="19">Environment</name><op:operator pos:line="140" pos:column="30">.</op:operator><name pos:line="140" pos:column="31">NewLine</name></name> <op:operator pos:line="140" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="140" pos:column="41">"Exits normally."</lit:literal></expr></argument><op:operator pos:line="140" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="140" pos:column="60">"Progress"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="142" pos:column="13">//clean up</comment>
            <decl_stmt><decl><type><name pos:line="143" pos:column="13">string</name></type> <name pos:line="143" pos:column="20">toRemoveFile1</name> =<init pos:line="143" pos:column="35"> <expr><name pos:line="143" pos:column="36">workspacePos</name> <op:operator pos:line="143" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="143" pos:column="51">"\\"</lit:literal> <op:operator pos:line="143" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="143" pos:column="58">"imp_union_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="144" pos:column="13">if <condition pos:line="144" pos:column="16">(<expr><op:operator pos:line="144" pos:column="17">!</op:operator><call><name><name pos:line="144" pos:column="18">File</name><op:operator pos:line="144" pos:column="22">.</op:operator><name pos:line="144" pos:column="23">Exists</name></name><argument_list pos:line="144" pos:column="29">(<argument><expr><name pos:line="144" pos:column="30">toRemoveFile1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="45">           
                <expr_stmt><expr><name pos:line="145" pos:column="17">toRemoveFile1</name> <op:operator pos:line="145" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="145" pos:column="33">"imp_union_linesImpacted.csv"</lit:literal></expr>;</expr_stmt></then></if>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><call><name><name pos:line="146" pos:column="17">File</name><op:operator pos:line="146" pos:column="21">.</op:operator><name pos:line="146" pos:column="22">Exists</name></name><argument_list pos:line="146" pos:column="28">(<argument><expr><name pos:line="146" pos:column="29">toRemoveFile1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="44">
                <expr_stmt><expr><call><name><name pos:line="147" pos:column="17">File</name><op:operator pos:line="147" pos:column="21">.</op:operator><name pos:line="147" pos:column="22">Delete</name></name><argument_list pos:line="147" pos:column="28">(<argument><expr><name pos:line="147" pos:column="29">toRemoveFile1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="149" pos:column="13">string</name></type> <name pos:line="149" pos:column="20">toRemoveFile2</name> =<init pos:line="149" pos:column="35"> <expr><name pos:line="149" pos:column="36">workspacePos</name> <op:operator pos:line="149" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="51">"\\"</lit:literal> <op:operator pos:line="149" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="58">"imp_intersection_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="150" pos:column="13">if <condition pos:line="150" pos:column="16">(<expr><op:operator pos:line="150" pos:column="17">!</op:operator><call><name><name pos:line="150" pos:column="18">File</name><op:operator pos:line="150" pos:column="22">.</op:operator><name pos:line="150" pos:column="23">Exists</name></name><argument_list pos:line="150" pos:column="29">(<argument><expr><name pos:line="150" pos:column="30">toRemoveFile2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="45">
                <expr_stmt><expr><name pos:line="151" pos:column="17">toRemoveFile2</name> <op:operator pos:line="151" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="151" pos:column="33">"imp_intersection_linesImpacted.csv"</lit:literal></expr>;</expr_stmt></then></if>
            <if pos:line="152" pos:column="13">if <condition pos:line="152" pos:column="16">(<expr><call><name><name pos:line="152" pos:column="17">File</name><op:operator pos:line="152" pos:column="21">.</op:operator><name pos:line="152" pos:column="22">Exists</name></name><argument_list pos:line="152" pos:column="28">(<argument><expr><name pos:line="152" pos:column="29">toRemoveFile2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="44">
                <expr_stmt><expr><call><name><name pos:line="153" pos:column="17">File</name><op:operator pos:line="153" pos:column="21">.</op:operator><name pos:line="153" pos:column="22">Delete</name></name><argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">toRemoveFile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="155" pos:column="13">string</name></type> <name pos:line="155" pos:column="20">toRemoveFile3</name> =<init pos:line="155" pos:column="35"> <expr><name pos:line="155" pos:column="36">workspacePos</name> <op:operator pos:line="155" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="155" pos:column="51">"\\"</lit:literal> <op:operator pos:line="155" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="155" pos:column="58">"imp_impactCompare_statistics"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="156" pos:column="13">if <condition pos:line="156" pos:column="16">(<expr><op:operator pos:line="156" pos:column="17">!</op:operator><call><name><name pos:line="156" pos:column="18">File</name><op:operator pos:line="156" pos:column="22">.</op:operator><name pos:line="156" pos:column="23">Exists</name></name><argument_list pos:line="156" pos:column="29">(<argument><expr><name pos:line="156" pos:column="30">toRemoveFile3</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="45">
                <expr_stmt><expr><name pos:line="157" pos:column="17">toRemoveFile3</name> <op:operator pos:line="157" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="157" pos:column="33">"imp_impactCompare_statistics"</lit:literal></expr>;</expr_stmt></then></if>
            <if pos:line="158" pos:column="13">if <condition pos:line="158" pos:column="16">(<expr><call><name><name pos:line="158" pos:column="17">File</name><op:operator pos:line="158" pos:column="21">.</op:operator><name pos:line="158" pos:column="22">Exists</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">toRemoveFile3</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="44">
                <expr_stmt><expr><call><name><name pos:line="159" pos:column="17">File</name><op:operator pos:line="159" pos:column="21">.</op:operator><name pos:line="159" pos:column="22">Delete</name></name><argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">toRemoveFile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="161" pos:column="13">string</name></type> <name pos:line="161" pos:column="20">toMoveFile1</name> =<init pos:line="161" pos:column="33"> <expr><name pos:line="161" pos:column="34">workspacePos</name> <op:operator pos:line="161" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="161" pos:column="49">"\\"</lit:literal> <op:operator pos:line="161" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="161" pos:column="56">"imp_union_filesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="162" pos:column="13">if <condition pos:line="162" pos:column="16">(<expr><call><name><name pos:line="162" pos:column="17">File</name><op:operator pos:line="162" pos:column="21">.</op:operator><name pos:line="162" pos:column="22">Exists</name></name><argument_list pos:line="162" pos:column="28">(<argument><expr><name pos:line="162" pos:column="29">toMoveFile1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="42">
                <expr_stmt><expr><call><name><name pos:line="163" pos:column="17">File</name><op:operator pos:line="163" pos:column="21">.</op:operator><name pos:line="163" pos:column="22">Delete</name></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name pos:line="163" pos:column="29">toMoveFile1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="165" pos:column="13">string</name></type> <name pos:line="165" pos:column="20">toMoveFile2</name> =<init pos:line="165" pos:column="33"> <expr><name pos:line="165" pos:column="34">workspacePos</name> <op:operator pos:line="165" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="165" pos:column="49">"\\"</lit:literal> <op:operator pos:line="165" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="165" pos:column="56">"imp_union_funcsImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="166" pos:column="13">if <condition pos:line="166" pos:column="16">(<expr><call><name><name pos:line="166" pos:column="17">File</name><op:operator pos:line="166" pos:column="21">.</op:operator><name pos:line="166" pos:column="22">Exists</name></name><argument_list pos:line="166" pos:column="28">(<argument><expr><name pos:line="166" pos:column="29">toMoveFile2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="42">
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">File</name><op:operator pos:line="167" pos:column="21">.</op:operator><name pos:line="167" pos:column="22">Delete</name></name><argument_list pos:line="167" pos:column="28">(<argument><expr><name pos:line="167" pos:column="29">toMoveFile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	        <return pos:line="169" pos:column="17">return <expr><lit:literal type="number" pos:line="169" pos:column="24">0</lit:literal></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="171" pos:column="9">#<cpp:directive pos:line="171" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="173" pos:column="9">#<cpp:directive pos:line="173" pos:column="10">region</cpp:directive> scenario 2 -- given impact of code change, find configurations impacted</cpp:region>

        <function><type><specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">int</name></type> <name pos:line="175" pos:column="20">findChangeImpConfig</name><parameter_list pos:line="175" pos:column="39">(<param><decl><type><name pos:line="175" pos:column="40">string</name></type> <name pos:line="175" pos:column="47">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="176" pos:column="9">{
            <comment type="line" pos:line="177" pos:column="13">// get all corresponding selections in code for all configurations of interest</comment>
            <if pos:line="178" pos:column="13">if <condition pos:line="178" pos:column="16">(<expr><call><name pos:line="178" pos:column="17">getChangeSets</name><argument_list pos:line="178" pos:column="30">(<argument><expr><name pos:line="178" pos:column="31">workspacePos</name></expr></argument><op:operator pos:line="178" pos:column="43">,</op:operator> <argument><expr><lit:literal type="number" pos:line="178" pos:column="45">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="48">==</op:operator> <op:operator pos:line="178" pos:column="51">-</op:operator><lit:literal type="number" pos:line="178" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="178" pos:column="54">
                <return pos:line="179" pos:column="17">return <expr><op:operator pos:line="179" pos:column="24">-</op:operator><lit:literal type="number" pos:line="179" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">prg</name> =<init pos:line="181" pos:column="22"> <expr><op:operator pos:line="181" pos:column="23">new</op:operator> <call><name pos:line="181" pos:column="27">Progress</name><argument_list pos:line="181" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">prg</name><op:operator pos:line="182" pos:column="16">.</op:operator><name pos:line="182" pos:column="17">Show</name></name><argument_list pos:line="182" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">prg</name><op:operator pos:line="183" pos:column="16">.</op:operator><name pos:line="183" pos:column="17">setProgressInit</name></name><argument_list pos:line="183" pos:column="32">(<argument><expr><name><name pos:line="183" pos:column="33">allSelections</name><op:operator pos:line="183" pos:column="46">.</op:operator><name pos:line="183" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="185" pos:column="13">foreach (<init><decl><type><name pos:line="185" pos:column="22">int</name></type> <name pos:line="185" pos:column="26">i</name> <init pos:line="185" pos:column="28">in <expr><name pos:line="185" pos:column="31">allSelections</name></expr></init></decl></init>)
            <block pos:line="186" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="187" pos:column="17">bool</name></type> <name pos:line="187" pos:column="22">isImpacted</name> =<init pos:line="187" pos:column="34"> <expr><call><name pos:line="187" pos:column="35">genSingleConfigImp</name><argument_list pos:line="187" pos:column="53">(<argument><expr><name pos:line="187" pos:column="54">workspacePos</name></expr></argument><op:operator pos:line="187" pos:column="66">,</op:operator> <argument><expr><name pos:line="187" pos:column="68">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="188" pos:column="17">if<condition pos:line="188" pos:column="19">(<expr><name pos:line="188" pos:column="20">isImpacted</name></expr>)</condition><then pos:line="188" pos:column="31">
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">configIndexImpacted</name><op:operator pos:line="189" pos:column="40">.</op:operator><name pos:line="189" pos:column="41">Add</name></name><argument_list pos:line="189" pos:column="44">(<argument><expr><name pos:line="189" pos:column="45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><call><name><name pos:line="191" pos:column="17">prg</name><op:operator pos:line="191" pos:column="20">.</op:operator><name pos:line="191" pos:column="21">showProgress</name></name><argument_list pos:line="191" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><call><name><name pos:line="194" pos:column="13">prg</name><op:operator pos:line="194" pos:column="16">.</op:operator><name pos:line="194" pos:column="17">Close</name></name><argument_list pos:line="194" pos:column="22">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="196" pos:column="13">// output configurations impacted by code change</comment>
            <if pos:line="197" pos:column="13">if<condition pos:line="197" pos:column="15">(<expr><name><name pos:line="197" pos:column="16">configIndexImpacted</name><op:operator pos:line="197" pos:column="35">.</op:operator><name pos:line="197" pos:column="36">Count</name></name> <op:operator pos:line="197" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="197" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="197" pos:column="46">
                <expr_stmt><expr><call><name pos:line="198" pos:column="17">getConfigImpacted</name><argument_list pos:line="198" pos:column="34">(<argument><expr><name pos:line="198" pos:column="35">workspacePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if pos:line="200" pos:column="13">if <condition pos:line="200" pos:column="16">(<expr><name><name pos:line="200" pos:column="17">configImpacted</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">Count</name></name> <op:operator pos:line="200" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="200" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="200" pos:column="43">
                <expr_stmt><expr><call><name><name pos:line="201" pos:column="17">MessageBox</name><op:operator pos:line="201" pos:column="27">.</op:operator><name pos:line="201" pos:column="28">Show</name></name><argument_list pos:line="201" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="33">"There is no impacted configurations."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="202" pos:column="13">else
            <block pos:line="203" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="204" pos:column="17">string</name></type> <name pos:line="204" pos:column="24">strConifgImpacted</name> =<init pos:line="204" pos:column="43"> <expr><lit:literal type="string" pos:line="204" pos:column="44">""</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="205" pos:column="17">Dictionary</name><argument_list pos:line="205" pos:column="27">&lt;<argument><name pos:line="205" pos:column="28">string</name></argument>, <argument><name pos:line="205" pos:column="36">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="42">dit</name> =<init pos:line="205" pos:column="47"> <expr><op:operator pos:line="205" pos:column="48">new</op:operator> <call><name><name pos:line="205" pos:column="52">Dictionary</name><argument_list pos:line="205" pos:column="62">&lt;<argument><name pos:line="205" pos:column="63">string</name></argument>, <argument><name pos:line="205" pos:column="71">bool</name></argument>&gt;</argument_list></name><argument_list pos:line="205" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="206" pos:column="17">for (<init><decl><type><name pos:line="206" pos:column="22">int</name></type> <name pos:line="206" pos:column="26">i</name> =<init pos:line="206" pos:column="29"> <expr><lit:literal type="number" pos:line="206" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="206" pos:column="33">i</name> <op:operator pos:line="206" pos:column="35">&lt;</op:operator> <name><name pos:line="206" pos:column="37">configImpacted</name><op:operator pos:line="206" pos:column="51">.</op:operator><name pos:line="206" pos:column="52">Count</name></name></expr>;</condition> <incr><expr><name pos:line="206" pos:column="59">i</name><op:operator pos:line="206" pos:column="60">++</op:operator></expr></incr>)
                <block pos:line="207" pos:column="17">{                    
                    <if pos:line="208" pos:column="21">if <condition pos:line="208" pos:column="24">(<expr><op:operator pos:line="208" pos:column="25">!</op:operator> <call><name><name pos:line="208" pos:column="27">dit</name><op:operator pos:line="208" pos:column="30">.</op:operator><name pos:line="208" pos:column="31">ContainsKey</name></name><argument_list pos:line="208" pos:column="42">(<argument><expr><name><name pos:line="208" pos:column="43">configImpacted</name><index pos:line="208" pos:column="57">[<expr><name pos:line="208" pos:column="58">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="208" pos:column="62"> <comment type="line" pos:line="208" pos:column="63">//avoid duplication</comment>
                    <block pos:line="209" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="210" pos:column="25">dit</name><op:operator pos:line="210" pos:column="28">.</op:operator><name pos:line="210" pos:column="29">Add</name></name><argument_list pos:line="210" pos:column="32">(<argument><expr><name><name pos:line="210" pos:column="33">configImpacted</name><index pos:line="210" pos:column="47">[<expr><name pos:line="210" pos:column="48">i</name></expr>]</index></name></expr></argument><op:operator pos:line="210" pos:column="50">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="210" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="211" pos:column="25">strConifgImpacted</name> <op:operator pos:line="211" pos:column="43">+=</op:operator> <name><name pos:line="211" pos:column="46">configImpacted</name><index pos:line="211" pos:column="60">[<expr><name pos:line="211" pos:column="61">i</name></expr>]</index></name> <op:operator pos:line="211" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="211" pos:column="66">"\n"</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>

                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">MessageBox</name><op:operator pos:line="215" pos:column="27">.</op:operator><name pos:line="215" pos:column="28">Show</name></name><argument_list pos:line="215" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="33">"Impacted Configurations are: \n"</lit:literal> <op:operator pos:line="215" pos:column="67">+</op:operator> <name pos:line="215" pos:column="69">strConifgImpacted</name></expr></argument><op:operator pos:line="215" pos:column="86">,</op:operator> <argument><expr><lit:literal type="string" pos:line="215" pos:column="88">"Report"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            

            <return pos:line="220" pos:column="13">return <expr><lit:literal type="number" pos:line="220" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="223" pos:column="9">#<cpp:directive pos:line="223" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:endregion pos:line="225" pos:column="9">#<cpp:directive pos:line="225" pos:column="10">endregion</cpp:directive></cpp:endregion>


        <function><type><specifier pos:line="228" pos:column="9">public</specifier> <name pos:line="228" pos:column="16">int</name></type> <name pos:line="228" pos:column="20">genConfigImp</name><parameter_list pos:line="228" pos:column="32">()</parameter_list>
        <block pos:line="229" pos:column="9">{
            <return pos:line="230" pos:column="13">return <expr><call><name pos:line="230" pos:column="20">genConfigImp</name><argument_list pos:line="230" pos:column="32">(<argument><expr><name pos:line="230" pos:column="33">configWorkspaceRoot</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="233" pos:column="9">public</specifier> <name pos:line="233" pos:column="16">int</name></type> <name pos:line="233" pos:column="20">findChangeImpConfig</name><parameter_list pos:line="233" pos:column="39">()</parameter_list>
        <block pos:line="234" pos:column="9">{
            <return pos:line="235" pos:column="13">return <expr><call><name pos:line="235" pos:column="20">findChangeImpConfig</name><argument_list pos:line="235" pos:column="39">(<argument><expr><name pos:line="235" pos:column="40">configWorkspaceRoot</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="238" pos:column="9">public</specifier> <name pos:line="238" pos:column="16">int</name></type> <name pos:line="238" pos:column="20">getConfigImpacted</name><parameter_list pos:line="238" pos:column="37">(<param><decl><type><name pos:line="238" pos:column="38">string</name></type> <name pos:line="238" pos:column="45">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="239" pos:column="9">{
            <comment type="line" pos:line="240" pos:column="13">//reverse mapping --- impacted configurations</comment>
            <comment type="line" pos:line="241" pos:column="13">// [in] configIndexImpacted</comment>
            <comment type="line" pos:line="242" pos:column="13">// [out] configImpacted</comment>
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">string</name></type> <name pos:line="243" pos:column="20">fullmapFileName</name> =<init pos:line="243" pos:column="37"> <expr><lit:literal type="string" pos:line="243" pos:column="38">""</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="245" pos:column="13">//to avoid hard code</comment>
            <decl_stmt><decl><type><name><name pos:line="246" pos:column="13">string</name><index pos:line="246" pos:column="19">[]</index></name></type> <name pos:line="246" pos:column="22">files</name> =<init pos:line="246" pos:column="29"> <expr><call><name><name pos:line="246" pos:column="30">Directory</name><op:operator pos:line="246" pos:column="39">.</op:operator><name pos:line="246" pos:column="40">GetFiles</name></name><argument_list pos:line="246" pos:column="48">(<argument><expr><name pos:line="246" pos:column="49">workspacePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="247" pos:column="13">foreach (<init><decl><type><name pos:line="247" pos:column="22">string</name></type> <name pos:line="247" pos:column="29">file</name> <init pos:line="247" pos:column="34">in <expr><name pos:line="247" pos:column="37">files</name></expr></init></decl></init>)
            <block pos:line="248" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="249" pos:column="17">string</name></type> <name pos:line="249" pos:column="24">file2</name> =<init pos:line="249" pos:column="31"> <expr><call><name><name pos:line="249" pos:column="32">file</name><op:operator pos:line="249" pos:column="36">.</op:operator><name pos:line="249" pos:column="37">Substring</name></name><argument_list pos:line="249" pos:column="46">(<argument><expr><name><name pos:line="249" pos:column="47">workspacePos</name><op:operator pos:line="249" pos:column="59">.</op:operator><name pos:line="249" pos:column="60">Length</name></name> <op:operator pos:line="249" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="249" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="250" pos:column="17">if <condition pos:line="250" pos:column="20">(<expr><call><name><name pos:line="250" pos:column="21">file2</name><op:operator pos:line="250" pos:column="26">.</op:operator><name pos:line="250" pos:column="27">StartsWith</name></name><argument_list pos:line="250" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="38">"config_select_mapping"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="250" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="250" pos:column="66">file2</name><op:operator pos:line="250" pos:column="71">.</op:operator><name pos:line="250" pos:column="72">EndsWith</name></name><argument_list pos:line="250" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="81">".txt"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="250" pos:column="89">
                <block pos:line="251" pos:column="17">{
                    <expr_stmt><expr><name pos:line="252" pos:column="21">fullmapFileName</name> <op:operator pos:line="252" pos:column="37">=</op:operator> <name pos:line="252" pos:column="39">file</name></expr>;</expr_stmt>
                    <break pos:line="253" pos:column="21">break;</break>
                }</block></then></if>
            }</block></foreach>

            <if pos:line="257" pos:column="13">if <condition pos:line="257" pos:column="16">(<expr><op:operator pos:line="257" pos:column="17">!</op:operator><call><name><name pos:line="257" pos:column="18">File</name><op:operator pos:line="257" pos:column="22">.</op:operator><name pos:line="257" pos:column="23">Exists</name></name><argument_list pos:line="257" pos:column="29">(<argument><expr><name pos:line="257" pos:column="30">fullmapFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="257" pos:column="47">
            <block pos:line="258" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="259" pos:column="17">MessageBox</name><op:operator pos:line="259" pos:column="27">.</op:operator><name pos:line="259" pos:column="28">Show</name></name><argument_list pos:line="259" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="33">"Missing config-changeset-mapping file."</lit:literal></expr></argument><op:operator pos:line="259" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="259" pos:column="75">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="260" pos:column="17">return <expr><op:operator pos:line="260" pos:column="24">-</op:operator><lit:literal type="number" pos:line="260" pos:column="25">1</lit:literal></expr>;</return>
            }</block></then></if>    

            <for pos:line="263" pos:column="13">for (<init><decl><type><name pos:line="263" pos:column="18">int</name></type> <name pos:line="263" pos:column="22">i</name> =<init pos:line="263" pos:column="25"> <expr><lit:literal type="number" pos:line="263" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="263" pos:column="29">i</name> <op:operator pos:line="263" pos:column="31">&lt;</op:operator> <name><name pos:line="263" pos:column="33">configIndexImpacted</name><op:operator pos:line="263" pos:column="52">.</op:operator><name pos:line="263" pos:column="53">Count</name></name></expr>;</condition> <incr><expr><name pos:line="263" pos:column="60">i</name><op:operator pos:line="263" pos:column="61">++</op:operator></expr></incr>)
            <block pos:line="264" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="265" pos:column="17">int</name></type> <name pos:line="265" pos:column="21">impacted</name> =<init pos:line="265" pos:column="31"> <expr><name><name pos:line="265" pos:column="32">configIndexImpacted</name><index pos:line="265" pos:column="51">[<expr><name pos:line="265" pos:column="52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="267" pos:column="17">StreamReader</name></type> <name pos:line="267" pos:column="30">mapFile</name> =<init pos:line="267" pos:column="39"> <expr><op:operator pos:line="267" pos:column="40">new</op:operator> <call><name pos:line="267" pos:column="44">StreamReader</name><argument_list pos:line="267" pos:column="56">(<argument><expr><name pos:line="267" pos:column="57">fullmapFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="268" pos:column="17">string</name></type> <name pos:line="268" pos:column="24">dummyLine</name></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="269" pos:column="17">dummyLine</name> <op:operator pos:line="269" pos:column="27">=</op:operator> <call><name><name pos:line="269" pos:column="29">mapFile</name><op:operator pos:line="269" pos:column="36">.</op:operator><name pos:line="269" pos:column="37">ReadLine</name></name><argument_list pos:line="269" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="270" pos:column="17">string</name></type> <name pos:line="270" pos:column="24">line</name></decl>;</decl_stmt>
                <while pos:line="271" pos:column="17">while <condition pos:line="271" pos:column="23">(<expr><op:operator pos:line="271" pos:column="24">(</op:operator><name pos:line="271" pos:column="25">line</name> <op:operator pos:line="271" pos:column="30">=</op:operator> <call><name><name pos:line="271" pos:column="32">mapFile</name><op:operator pos:line="271" pos:column="39">.</op:operator><name pos:line="271" pos:column="40">ReadLine</name></name><argument_list pos:line="271" pos:column="48">()</argument_list></call><op:operator pos:line="271" pos:column="50">)</op:operator> <op:operator pos:line="271" pos:column="52">!=</op:operator> <name pos:line="271" pos:column="55">null</name></expr>)</condition>
                <block pos:line="272" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="273" pos:column="21">string</name><index pos:line="273" pos:column="27">[]</index></name></type> <name pos:line="273" pos:column="30">words</name> =<init pos:line="273" pos:column="37"> <expr><call><name><name pos:line="273" pos:column="38">line</name><op:operator pos:line="273" pos:column="42">.</op:operator><name pos:line="273" pos:column="43">Split</name></name><argument_list pos:line="273" pos:column="48">(<argument><expr><lit:literal type="char" pos:line="273" pos:column="49">'\t'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="274" pos:column="21">string</name></type> <name pos:line="274" pos:column="28">_domain</name> =<init pos:line="274" pos:column="37"> <expr><name><name pos:line="274" pos:column="38">words</name><index pos:line="274" pos:column="43">[<expr><lit:literal type="number" pos:line="274" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="275" pos:column="21">string</name></type> <name pos:line="275" pos:column="28">_type</name> =<init pos:line="275" pos:column="35"> <expr><name><name pos:line="275" pos:column="36">words</name><index pos:line="275" pos:column="41">[<expr><lit:literal type="number" pos:line="275" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="276" pos:column="21">int</name></type> <name pos:line="276" pos:column="25">_selection</name> =<init pos:line="276" pos:column="37"> <expr><call><name><name pos:line="276" pos:column="38">System</name><op:operator pos:line="276" pos:column="44">.</op:operator><name pos:line="276" pos:column="45">Convert</name><op:operator pos:line="276" pos:column="52">.</op:operator><name pos:line="276" pos:column="53">ToInt32</name></name><argument_list pos:line="276" pos:column="60">(<argument><expr><name><name pos:line="276" pos:column="61">words</name><index pos:line="276" pos:column="66">[<expr><lit:literal type="number" pos:line="276" pos:column="67">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line" pos:line="278" pos:column="21">//if (_domain == "")</comment>
                    <comment type="line" pos:line="279" pos:column="21">//    continue;</comment>

                     <if pos:line="281" pos:column="22">if <condition pos:line="281" pos:column="25">(<expr><name pos:line="281" pos:column="26">impacted</name> <op:operator pos:line="281" pos:column="35">==</op:operator> <name pos:line="281" pos:column="38">_selection</name></expr>)</condition><then pos:line="281" pos:column="49">
                     <block pos:line="282" pos:column="22">{
                         <expr_stmt><expr><call><name><name pos:line="283" pos:column="26">configImpacted</name><op:operator pos:line="283" pos:column="40">.</op:operator><name pos:line="283" pos:column="41">Add</name></name><argument_list pos:line="283" pos:column="44">(<argument><expr><name pos:line="283" pos:column="45">_domain</name> <op:operator pos:line="283" pos:column="53">+</op:operator> <lit:literal type="string" pos:line="283" pos:column="55">":"</lit:literal> <op:operator pos:line="283" pos:column="59">+</op:operator> <name pos:line="283" pos:column="61">_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="283" pos:column="69">//may contatin duplication</comment>
                         <break pos:line="284" pos:column="26">break;</break>
                     }</block></then></if>
                }</block></while>
                <expr_stmt><expr><call><name><name pos:line="287" pos:column="17">mapFile</name><op:operator pos:line="287" pos:column="24">.</op:operator><name pos:line="287" pos:column="25">Close</name></name><argument_list pos:line="287" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <return pos:line="290" pos:column="13">return <expr><lit:literal type="number" pos:line="290" pos:column="20">0</lit:literal></expr>;</return>

        }</block></function>         


        <function><type><specifier pos:line="295" pos:column="9">private</specifier> <name pos:line="295" pos:column="17">bool</name></type> <name pos:line="295" pos:column="22">genSingleConfigImp</name><parameter_list pos:line="295" pos:column="40">(<param><decl><type><name pos:line="295" pos:column="41">string</name></type> <name pos:line="295" pos:column="48">workspacePos</name></decl></param><op:operator pos:line="295" pos:column="60">,</op:operator> <param><decl><type><name pos:line="295" pos:column="62">int</name></type> <name pos:line="295" pos:column="66">configIndex</name></decl></param>)</parameter_list>
        <block pos:line="296" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">string</name></type> <name pos:line="297" pos:column="20">instruction</name> =<init pos:line="297" pos:column="33"> <expr><lit:literal type="string" pos:line="297" pos:column="34">"\""</lit:literal> <op:operator pos:line="297" pos:column="39">+</op:operator> <name pos:line="297" pos:column="41">workspacePos</name> <op:operator pos:line="297" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="297" pos:column="56">"\\"</lit:literal> <op:operator pos:line="297" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="297" pos:column="63">"ImpactCompare.exe"</lit:literal> <op:operator pos:line="297" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="297" pos:column="85">"\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="298" pos:column="13">string</name><index pos:line="298" pos:column="19">[]</index></name></type> <name pos:line="298" pos:column="22">parameters</name> =<init pos:line="298" pos:column="34"> <expr><op:operator pos:line="298" pos:column="35">new</op:operator> <name><name pos:line="298" pos:column="39">string</name><index pos:line="298" pos:column="45">[<expr><lit:literal type="number" pos:line="298" pos:column="46">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="299" pos:column="13">parameters</name><index pos:line="299" pos:column="23">[<expr><lit:literal type="number" pos:line="299" pos:column="24">0</lit:literal></expr>]</index></name> <op:operator pos:line="299" pos:column="27">=</op:operator> <lit:literal type="string" pos:line="299" pos:column="29">"\""</lit:literal> <op:operator pos:line="299" pos:column="34">+</op:operator> <name pos:line="299" pos:column="36">workspacePos</name> <op:operator pos:line="299" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="299" pos:column="51">"\\"</lit:literal> <op:operator pos:line="299" pos:column="56">+</op:operator> <call><name pos:line="299" pos:column="58">convertInt</name><argument_list pos:line="299" pos:column="68">(<argument><expr><name pos:line="299" pos:column="69">configIndex</name></expr></argument>)</argument_list></call> 
                <op:operator pos:line="300" pos:column="17">+</op:operator> <lit:literal type="string" pos:line="300" pos:column="19">"\\imp_linesImpacted.csv"</lit:literal> <op:operator pos:line="300" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="300" pos:column="47">"\""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="301" pos:column="13">parameters</name><index pos:line="301" pos:column="23">[<expr><lit:literal type="number" pos:line="301" pos:column="24">1</lit:literal></expr>]</index></name> <op:operator pos:line="301" pos:column="27">=</op:operator> <lit:literal type="string" pos:line="301" pos:column="29">"\""</lit:literal> <op:operator pos:line="301" pos:column="34">+</op:operator> <name pos:line="301" pos:column="36">code_change_imp_file</name> <op:operator pos:line="301" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="301" pos:column="59">"\""</lit:literal></expr>;</expr_stmt>                       

            <decl_stmt><decl><type><name pos:line="303" pos:column="13">Process</name></type> <name pos:line="303" pos:column="21">process</name> =<init pos:line="303" pos:column="30"> <expr><op:operator pos:line="303" pos:column="31">new</op:operator> <call><name pos:line="303" pos:column="35">Process</name><argument_list pos:line="303" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="304" pos:column="13">process</name><op:operator pos:line="304" pos:column="20">.</op:operator><name pos:line="304" pos:column="21">StartInfo</name><op:operator pos:line="304" pos:column="30">.</op:operator><name pos:line="304" pos:column="31">UseShellExecute</name></name> <op:operator pos:line="304" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="304" pos:column="49">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="305" pos:column="13">process</name><op:operator pos:line="305" pos:column="20">.</op:operator><name pos:line="305" pos:column="21">StartInfo</name><op:operator pos:line="305" pos:column="30">.</op:operator><name pos:line="305" pos:column="31">RedirectStandardOutput</name></name> <op:operator pos:line="305" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="305" pos:column="56">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="306" pos:column="13">process</name><op:operator pos:line="306" pos:column="20">.</op:operator><name pos:line="306" pos:column="21">StartInfo</name><op:operator pos:line="306" pos:column="30">.</op:operator><name pos:line="306" pos:column="31">RedirectStandardError</name></name> <op:operator pos:line="306" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="306" pos:column="55">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="307" pos:column="13">process</name><op:operator pos:line="307" pos:column="20">.</op:operator><name pos:line="307" pos:column="21">StartInfo</name><op:operator pos:line="307" pos:column="30">.</op:operator><name pos:line="307" pos:column="31">CreateNoWindow</name></name> <op:operator pos:line="307" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="307" pos:column="48">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="308" pos:column="13">process</name><op:operator pos:line="308" pos:column="20">.</op:operator><name pos:line="308" pos:column="21">StartInfo</name><op:operator pos:line="308" pos:column="30">.</op:operator><name pos:line="308" pos:column="31">FileName</name></name> <op:operator pos:line="308" pos:column="40">=</op:operator> <name pos:line="308" pos:column="42">instruction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="309" pos:column="13">process</name><op:operator pos:line="309" pos:column="20">.</op:operator><name pos:line="309" pos:column="21">StartInfo</name><op:operator pos:line="309" pos:column="30">.</op:operator><name pos:line="309" pos:column="31">Arguments</name></name> <op:operator pos:line="309" pos:column="41">=</op:operator> <call><name><name pos:line="309" pos:column="43">String</name><op:operator pos:line="309" pos:column="49">.</op:operator><name pos:line="309" pos:column="50">Join</name></name><argument_list pos:line="309" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="309" pos:column="55">" "</lit:literal></expr></argument><op:operator pos:line="309" pos:column="58">,</op:operator> <argument><expr><name pos:line="309" pos:column="60">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="310" pos:column="13">try
            <block pos:line="311" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="312" pos:column="17">process</name><op:operator pos:line="312" pos:column="24">.</op:operator><name pos:line="312" pos:column="25">Start</name></name><argument_list pos:line="312" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="314" pos:column="13">catch (<param><decl><type><name pos:line="314" pos:column="20">Exception</name></type> <name pos:line="314" pos:column="30">e</name></decl></param>)
            <block pos:line="315" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="316" pos:column="17">MessageBox</name><op:operator pos:line="316" pos:column="27">.</op:operator><name pos:line="316" pos:column="28">Show</name></name><argument_list pos:line="316" pos:column="32">(<argument><expr><name><name pos:line="316" pos:column="33">e</name><op:operator pos:line="316" pos:column="34">.</op:operator><name pos:line="316" pos:column="35">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="317" pos:column="17">//return false;</comment>
            }</block></catch></try>

            <while pos:line="320" pos:column="13">while <condition pos:line="320" pos:column="19">(<expr><op:operator pos:line="320" pos:column="20">!</op:operator><name><name pos:line="320" pos:column="21">process</name><op:operator pos:line="320" pos:column="28">.</op:operator><name pos:line="320" pos:column="29">HasExited</name></name></expr>)</condition>
            <block pos:line="321" pos:column="13">{
                <comment type="line" pos:line="322" pos:column="17">//    MessageBox.Show("a");</comment>
            }</block></while>
            
            <comment type="line" pos:line="325" pos:column="13">//string removeFile1 = workspacePos + "\\" + "imp_intersection_linesImpacted.csv";</comment>
            <comment type="line" pos:line="326" pos:column="13">//string removeFile2 = workspacePos + "\\" + "imp_impactCompare_statistics";</comment>
            <comment type="line" pos:line="327" pos:column="13">//string removeFile3 = workspacePos + "\\" + "imp_union_linesImpacted.csv";</comment>
            <decl_stmt><decl><type><name pos:line="328" pos:column="13">string</name></type> <name pos:line="328" pos:column="20">removeFile1</name> =<init pos:line="328" pos:column="33"> <expr><lit:literal type="string" pos:line="328" pos:column="34">"imp_intersection_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="329" pos:column="13">string</name></type> <name pos:line="329" pos:column="20">removeFile2</name> =<init pos:line="329" pos:column="33"> <expr><lit:literal type="string" pos:line="329" pos:column="34">"imp_impactCompare_statistics"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="330" pos:column="13">string</name></type> <name pos:line="330" pos:column="20">removeFile3</name> =<init pos:line="330" pos:column="33"> <expr><lit:literal type="string" pos:line="330" pos:column="34">"imp_union_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="331" pos:column="13">//File.Delete(removeFile1);</comment>
            <comment type="line" pos:line="332" pos:column="13">//File.Delete(removeFile2);</comment>
            <comment type="line" pos:line="333" pos:column="13">//File.Delete(removeFile3);</comment>

            <comment type="line" pos:line="335" pos:column="13">//readin "imp_impactCompare_statistics" file and see if the union is empty</comment>
            <if pos:line="336" pos:column="13">if <condition pos:line="336" pos:column="16">(<expr><op:operator pos:line="336" pos:column="17">!</op:operator><call><name><name pos:line="336" pos:column="18">File</name><op:operator pos:line="336" pos:column="22">.</op:operator><name pos:line="336" pos:column="23">Exists</name></name><argument_list pos:line="336" pos:column="29">(<argument><expr><name pos:line="336" pos:column="30">removeFile2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="43">
            <block pos:line="337" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="338" pos:column="17">MessageBox</name><op:operator pos:line="338" pos:column="27">.</op:operator><name pos:line="338" pos:column="28">Show</name></name><argument_list pos:line="338" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="338" pos:column="33">"Missing imp_impactCompare_statistics."</lit:literal></expr></argument><op:operator pos:line="338" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="338" pos:column="74">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="339" pos:column="17">return <expr><lit:literal type="boolean" pos:line="339" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="342" pos:column="13">StreamReader</name></type> <name pos:line="342" pos:column="26">statFile</name> =<init pos:line="342" pos:column="36"> <expr><op:operator pos:line="342" pos:column="37">new</op:operator> <call><name pos:line="342" pos:column="41">StreamReader</name><argument_list pos:line="342" pos:column="53">(<argument><expr><name pos:line="342" pos:column="54">removeFile2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="343" pos:column="13">string</name></type> <name pos:line="343" pos:column="20">line</name></decl>;</decl_stmt>
            <while pos:line="344" pos:column="13">while <condition pos:line="344" pos:column="19">(<expr><op:operator pos:line="344" pos:column="20">(</op:operator><name pos:line="344" pos:column="21">line</name> <op:operator pos:line="344" pos:column="26">=</op:operator> <call><name><name pos:line="344" pos:column="28">statFile</name><op:operator pos:line="344" pos:column="36">.</op:operator><name pos:line="344" pos:column="37">ReadLine</name></name><argument_list pos:line="344" pos:column="45">()</argument_list></call><op:operator pos:line="344" pos:column="47">)</op:operator> <op:operator pos:line="344" pos:column="49">!=</op:operator> <name pos:line="344" pos:column="52">null</name></expr>)</condition>
            <block pos:line="345" pos:column="13">{
                <if pos:line="346" pos:column="17">if <condition pos:line="346" pos:column="20">(<expr><call><name><name pos:line="346" pos:column="21">line</name><op:operator pos:line="346" pos:column="25">.</op:operator><name pos:line="346" pos:column="26">Contains</name></name><argument_list pos:line="346" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="346" pos:column="35">"Number of common files: "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="346" pos:column="63">
                <block pos:line="347" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="348" pos:column="21">int</name></type> <name pos:line="348" pos:column="25">idx</name> =<init pos:line="348" pos:column="30"> <expr><call><name><name pos:line="348" pos:column="31">line</name><op:operator pos:line="348" pos:column="35">.</op:operator><name pos:line="348" pos:column="36">IndexOf</name></name><argument_list pos:line="348" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="348" pos:column="44">':'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="349" pos:column="21">string</name></type> <name pos:line="349" pos:column="28">line2</name> =<init pos:line="349" pos:column="35"> <expr><call><name><name pos:line="349" pos:column="36">line</name><op:operator pos:line="349" pos:column="40">.</op:operator><name pos:line="349" pos:column="41">Substring</name></name><argument_list pos:line="349" pos:column="50">(<argument><expr><name pos:line="349" pos:column="51">idx</name> <op:operator pos:line="349" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="349" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="350" pos:column="21">line2</name><op:operator pos:line="350" pos:column="26">.</op:operator><name pos:line="350" pos:column="27">Trim</name></name><argument_list pos:line="350" pos:column="31">(<argument><expr><lit:literal type="char" pos:line="350" pos:column="32">'\n'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="351" pos:column="21">int</name></type> <name pos:line="351" pos:column="25">impCnt</name> =<init pos:line="351" pos:column="33"> <expr><call><name><name pos:line="351" pos:column="34">System</name><op:operator pos:line="351" pos:column="40">.</op:operator><name pos:line="351" pos:column="41">Convert</name><op:operator pos:line="351" pos:column="48">.</op:operator><name pos:line="351" pos:column="49">ToInt32</name></name><argument_list pos:line="351" pos:column="56">(<argument><expr><name pos:line="351" pos:column="57">line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name pos:line="353" pos:column="21">statFile</name><op:operator pos:line="353" pos:column="29">.</op:operator><name pos:line="353" pos:column="30">Close</name></name><argument_list pos:line="353" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="354" pos:column="21">File</name><op:operator pos:line="354" pos:column="25">.</op:operator><name pos:line="354" pos:column="26">Delete</name></name><argument_list pos:line="354" pos:column="32">(<argument><expr><name pos:line="354" pos:column="33">removeFile1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="355" pos:column="21">File</name><op:operator pos:line="355" pos:column="25">.</op:operator><name pos:line="355" pos:column="26">Delete</name></name><argument_list pos:line="355" pos:column="32">(<argument><expr><name pos:line="355" pos:column="33">removeFile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="356" pos:column="21">File</name><op:operator pos:line="356" pos:column="25">.</op:operator><name pos:line="356" pos:column="26">Delete</name></name><argument_list pos:line="356" pos:column="32">(<argument><expr><name pos:line="356" pos:column="33">removeFile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="358" pos:column="21">if <condition pos:line="358" pos:column="24">(<expr><name pos:line="358" pos:column="25">impCnt</name> <op:operator pos:line="358" pos:column="32">&gt;</op:operator> <lit:literal type="number" pos:line="358" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="358" pos:column="36">
                        <return pos:line="359" pos:column="25">return <expr><lit:literal type="boolean" pos:line="359" pos:column="32">true</lit:literal></expr>;</return></then>
                    <else pos:line="360" pos:column="21">else
                        <return pos:line="361" pos:column="25">return <expr><lit:literal type="boolean" pos:line="361" pos:column="32">false</lit:literal></expr>;</return></else></if>                   
                }</block></then></if>
            }</block></while>

            <expr_stmt><expr><call><name><name pos:line="365" pos:column="13">statFile</name><op:operator pos:line="365" pos:column="21">.</op:operator><name pos:line="365" pos:column="22">Close</name></name><argument_list pos:line="365" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="366" pos:column="13">MessageBox</name><op:operator pos:line="366" pos:column="23">.</op:operator><name pos:line="366" pos:column="24">Show</name></name><argument_list pos:line="366" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="29">"Wrong imp_impactCompare_statistics file."</lit:literal></expr></argument><op:operator pos:line="366" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="366" pos:column="73">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="368" pos:column="13">return <expr><lit:literal type="boolean" pos:line="368" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>
        
        <function><type><specifier pos:line="371" pos:column="9">private</specifier> <name pos:line="371" pos:column="17">void</name></type> <name pos:line="371" pos:column="22">genMultiSelectImp</name><parameter_list pos:line="371" pos:column="39">(<param><decl><type><name pos:line="371" pos:column="40">string</name></type> <name pos:line="371" pos:column="47">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="372" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="373" pos:column="13">string</name></type> <name pos:line="373" pos:column="20">instruction</name> =<init pos:line="373" pos:column="33"> <expr><lit:literal type="string" pos:line="373" pos:column="34">"\""</lit:literal> <op:operator pos:line="373" pos:column="39">+</op:operator> <name pos:line="373" pos:column="41">workspacePos</name> <op:operator pos:line="373" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="373" pos:column="56">"\\"</lit:literal> <op:operator pos:line="373" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="373" pos:column="63">"ImpactCompare.exe"</lit:literal> <op:operator pos:line="373" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="373" pos:column="85">"\""</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="375" pos:column="13">//progress bar</comment>
            <decl_stmt><decl><type><name pos:line="376" pos:column="13">var</name></type> <name pos:line="376" pos:column="17">prg</name> =<init pos:line="376" pos:column="22"> <expr><op:operator pos:line="376" pos:column="23">new</op:operator> <call><name pos:line="376" pos:column="27">Progress</name><argument_list pos:line="376" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>            
            <expr_stmt><expr><call><name><name pos:line="377" pos:column="13">prg</name><op:operator pos:line="377" pos:column="16">.</op:operator><name pos:line="377" pos:column="17">Show</name></name><argument_list pos:line="377" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="378" pos:column="13">prg</name><op:operator pos:line="378" pos:column="16">.</op:operator><name pos:line="378" pos:column="17">setProgressInvisible</name></name><argument_list pos:line="378" pos:column="37">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="380" pos:column="13">int</name></type> <name pos:line="380" pos:column="17">numOfPara</name> =<init pos:line="380" pos:column="28"> <expr><name><name pos:line="380" pos:column="29">allSelections</name><op:operator pos:line="380" pos:column="42">.</op:operator><name pos:line="380" pos:column="43">Count</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="381" pos:column="13">if <condition pos:line="381" pos:column="16">(<expr><name pos:line="381" pos:column="17">numOfPara</name> <op:operator pos:line="381" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="381" pos:column="29">2</lit:literal></expr>)</condition><then pos:line="381" pos:column="31">
            <block pos:line="382" pos:column="13">{
                <expr_stmt><expr><name pos:line="383" pos:column="17">numOfPara</name> <op:operator pos:line="383" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="383" pos:column="29">2</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="384" pos:column="17">allSelections</name><op:operator pos:line="384" pos:column="30">.</op:operator><name pos:line="384" pos:column="31">Add</name></name><argument_list pos:line="384" pos:column="34">(<argument><expr><name><name pos:line="384" pos:column="35">allSelections</name><index pos:line="384" pos:column="48">[<expr><lit:literal type="number" pos:line="384" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name><name pos:line="387" pos:column="13">string</name><index pos:line="387" pos:column="19">[]</index></name></type> <name pos:line="387" pos:column="22">parameters</name> =<init pos:line="387" pos:column="34"> <expr><op:operator pos:line="387" pos:column="35">new</op:operator> <name><name pos:line="387" pos:column="39">string</name><index pos:line="387" pos:column="45">[<expr><name pos:line="387" pos:column="46">numOfPara</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:line="389" pos:column="13">for (<init><decl><type><name pos:line="389" pos:column="18">int</name></type> <name pos:line="389" pos:column="22">i</name> =<init pos:line="389" pos:column="25"> <expr><lit:literal type="number" pos:line="389" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="389" pos:column="29">i</name> <op:operator pos:line="389" pos:column="31">&lt;</op:operator> <name pos:line="389" pos:column="33">numOfPara</name></expr>;</condition> <incr><expr><name pos:line="389" pos:column="44">i</name><op:operator pos:line="389" pos:column="45">++</op:operator></expr></incr>) <comment type="line" pos:line="389" pos:column="49">// allSelections.size() must &gt;0</comment>
            <block pos:line="390" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="391" pos:column="17">parameters</name><index pos:line="391" pos:column="27">[<expr><name pos:line="391" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="391" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="391" pos:column="33">"\""</lit:literal> <op:operator pos:line="391" pos:column="38">+</op:operator> <name pos:line="391" pos:column="40">workspacePos</name> <op:operator pos:line="391" pos:column="53">+</op:operator> <lit:literal type="string" pos:line="391" pos:column="55">"\\"</lit:literal> <op:operator pos:line="391" pos:column="60">+</op:operator> <call><name pos:line="391" pos:column="62">convertInt</name><argument_list pos:line="391" pos:column="72">(<argument><expr><name><name pos:line="391" pos:column="73">allSelections</name><index pos:line="391" pos:column="86">[<expr><name pos:line="391" pos:column="87">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="391" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="391" pos:column="93">"\\imp_linesImpacted.csv"</lit:literal> <op:operator pos:line="391" pos:column="119">+</op:operator> <lit:literal type="string" pos:line="391" pos:column="121">"\""</lit:literal></expr>;</expr_stmt>                
            }</block></for>
            
            <decl_stmt><decl><type><name pos:line="394" pos:column="13">Process</name></type> <name pos:line="394" pos:column="21">process</name> =<init pos:line="394" pos:column="30"> <expr><op:operator pos:line="394" pos:column="31">new</op:operator> <call><name pos:line="394" pos:column="35">Process</name><argument_list pos:line="394" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="395" pos:column="13">process</name><op:operator pos:line="395" pos:column="20">.</op:operator><name pos:line="395" pos:column="21">StartInfo</name><op:operator pos:line="395" pos:column="30">.</op:operator><name pos:line="395" pos:column="31">UseShellExecute</name></name> <op:operator pos:line="395" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="395" pos:column="49">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="396" pos:column="13">process</name><op:operator pos:line="396" pos:column="20">.</op:operator><name pos:line="396" pos:column="21">StartInfo</name><op:operator pos:line="396" pos:column="30">.</op:operator><name pos:line="396" pos:column="31">RedirectStandardOutput</name></name> <op:operator pos:line="396" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="396" pos:column="56">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="397" pos:column="13">process</name><op:operator pos:line="397" pos:column="20">.</op:operator><name pos:line="397" pos:column="21">StartInfo</name><op:operator pos:line="397" pos:column="30">.</op:operator><name pos:line="397" pos:column="31">RedirectStandardError</name></name> <op:operator pos:line="397" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="397" pos:column="55">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="398" pos:column="13">process</name><op:operator pos:line="398" pos:column="20">.</op:operator><name pos:line="398" pos:column="21">StartInfo</name><op:operator pos:line="398" pos:column="30">.</op:operator><name pos:line="398" pos:column="31">CreateNoWindow</name></name> <op:operator pos:line="398" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="398" pos:column="48">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="399" pos:column="13">process</name><op:operator pos:line="399" pos:column="20">.</op:operator><name pos:line="399" pos:column="21">StartInfo</name><op:operator pos:line="399" pos:column="30">.</op:operator><name pos:line="399" pos:column="31">FileName</name></name> <op:operator pos:line="399" pos:column="40">=</op:operator> <name pos:line="399" pos:column="42">instruction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="400" pos:column="13">process</name><op:operator pos:line="400" pos:column="20">.</op:operator><name pos:line="400" pos:column="21">StartInfo</name><op:operator pos:line="400" pos:column="30">.</op:operator><name pos:line="400" pos:column="31">Arguments</name></name> <op:operator pos:line="400" pos:column="41">=</op:operator> <call><name><name pos:line="400" pos:column="43">String</name><op:operator pos:line="400" pos:column="49">.</op:operator><name pos:line="400" pos:column="50">Join</name></name><argument_list pos:line="400" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="400" pos:column="55">" "</lit:literal></expr></argument><op:operator pos:line="400" pos:column="58">,</op:operator> <argument><expr><name pos:line="400" pos:column="60">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="401" pos:column="13">try
            <block pos:line="402" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="403" pos:column="17">process</name><op:operator pos:line="403" pos:column="24">.</op:operator><name pos:line="403" pos:column="25">Start</name></name><argument_list pos:line="403" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="405" pos:column="13">catch (<param><decl><type><name pos:line="405" pos:column="20">Exception</name></type> <name pos:line="405" pos:column="30">e</name></decl></param>)
            <block pos:line="406" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="407" pos:column="17">MessageBox</name><op:operator pos:line="407" pos:column="27">.</op:operator><name pos:line="407" pos:column="28">Show</name></name><argument_list pos:line="407" pos:column="32">(<argument><expr><name><name pos:line="407" pos:column="33">e</name><op:operator pos:line="407" pos:column="34">.</op:operator><name pos:line="407" pos:column="35">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></catch></try>

            <while pos:line="410" pos:column="13">while <condition pos:line="410" pos:column="19">(<expr><op:operator pos:line="410" pos:column="20">!</op:operator><name><name pos:line="410" pos:column="21">process</name><op:operator pos:line="410" pos:column="28">.</op:operator><name pos:line="410" pos:column="29">HasExited</name></name></expr>)</condition>
            <block pos:line="411" pos:column="13">{
            <comment type="line" pos:line="412" pos:column="13">//    MessageBox.Show("a");</comment>
            }</block></while>

            <expr_stmt><expr><call><name><name pos:line="415" pos:column="13">System</name><op:operator pos:line="415" pos:column="19">.</op:operator><name pos:line="415" pos:column="20">Threading</name><op:operator pos:line="415" pos:column="29">.</op:operator><name pos:line="415" pos:column="30">Thread</name><op:operator pos:line="415" pos:column="36">.</op:operator><name pos:line="415" pos:column="37">Sleep</name></name><argument_list pos:line="415" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="415" pos:column="43">3000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="415" pos:column="50">//to avoid progress bar flashing (too short progress)</comment>
            <expr_stmt><expr><call><name><name pos:line="416" pos:column="13">prg</name><op:operator pos:line="416" pos:column="16">.</op:operator><name pos:line="416" pos:column="17">Close</name></name><argument_list pos:line="416" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>

	    <function><type><specifier pos:line="420" pos:column="13">private</specifier> <name pos:line="420" pos:column="21">int</name></type> <name pos:line="420" pos:column="25">getChangeSets</name><parameter_list pos:line="420" pos:column="38">(<param><decl><type><name pos:line="420" pos:column="39">string</name></type> <name pos:line="420" pos:column="46">workspacePos</name></decl></param><op:operator pos:line="420" pos:column="58">,</op:operator> <param><decl><type><name pos:line="420" pos:column="60">int</name></type> <name pos:line="420" pos:column="64">toolOpt</name></decl></param>)</parameter_list>  <comment type="line" pos:line="420" pos:column="74">//[IMPORTANT] this is system dependent !!!</comment>
        <block pos:line="421" pos:column="9">{
            <comment type="line" pos:line="422" pos:column="13">// look for configSelect in config-selection</comment>
            <comment type="line" pos:line="423" pos:column="13">// e.g. workspacePos + "\\config_select_mapping_robotics_rel5_11.0160.txt";</comment>
            <decl_stmt><decl><type><name pos:line="424" pos:column="13">string</name></type> <name pos:line="424" pos:column="20">fullmapFileName</name> =<init pos:line="424" pos:column="37"> <expr><lit:literal type="string" pos:line="424" pos:column="38">""</lit:literal></expr></init></decl>;</decl_stmt> 

            <comment type="line" pos:line="426" pos:column="13">//to avoid hard code</comment>
            <decl_stmt><decl><type><name><name pos:line="427" pos:column="13">string</name><index pos:line="427" pos:column="19">[]</index></name></type> <name pos:line="427" pos:column="22">files</name> =<init pos:line="427" pos:column="29"> <expr><call><name><name pos:line="427" pos:column="30">Directory</name><op:operator pos:line="427" pos:column="39">.</op:operator><name pos:line="427" pos:column="40">GetFiles</name></name><argument_list pos:line="427" pos:column="48">(<argument><expr><name pos:line="427" pos:column="49">workspacePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="428" pos:column="13">foreach (<init><decl><type><name pos:line="428" pos:column="22">string</name></type> <name pos:line="428" pos:column="29">file</name> <init pos:line="428" pos:column="34">in <expr><name pos:line="428" pos:column="37">files</name></expr></init></decl></init>)
            <block pos:line="429" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="430" pos:column="17">string</name></type> <name pos:line="430" pos:column="24">file2</name> =<init pos:line="430" pos:column="31"> <expr><call><name><name pos:line="430" pos:column="32">file</name><op:operator pos:line="430" pos:column="36">.</op:operator><name pos:line="430" pos:column="37">Substring</name></name><argument_list pos:line="430" pos:column="46">(<argument><expr><name><name pos:line="430" pos:column="47">workspacePos</name><op:operator pos:line="430" pos:column="59">.</op:operator><name pos:line="430" pos:column="60">Length</name></name><op:operator pos:line="430" pos:column="66">+</op:operator><lit:literal type="number" pos:line="430" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="431" pos:column="17">if <condition pos:line="431" pos:column="20">(<expr><call><name><name pos:line="431" pos:column="21">file2</name><op:operator pos:line="431" pos:column="26">.</op:operator><name pos:line="431" pos:column="27">StartsWith</name></name><argument_list pos:line="431" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="431" pos:column="38">"config_select_mapping"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="431" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="431" pos:column="66">file2</name><op:operator pos:line="431" pos:column="71">.</op:operator><name pos:line="431" pos:column="72">EndsWith</name></name><argument_list pos:line="431" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="431" pos:column="81">".txt"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="431" pos:column="89">
                <block pos:line="432" pos:column="17">{
                    <expr_stmt><expr><name pos:line="433" pos:column="21">fullmapFileName</name> <op:operator pos:line="433" pos:column="37">=</op:operator> <name pos:line="433" pos:column="39">file</name></expr>;</expr_stmt>
                    <break pos:line="434" pos:column="21">break;</break>
                }</block></then></if>
            }</block></foreach>

            <if pos:line="438" pos:column="13">if <condition pos:line="438" pos:column="16">(<expr><op:operator pos:line="438" pos:column="17">!</op:operator><call><name><name pos:line="438" pos:column="18">File</name><op:operator pos:line="438" pos:column="22">.</op:operator><name pos:line="438" pos:column="23">Exists</name></name><argument_list pos:line="438" pos:column="29">(<argument><expr><name pos:line="438" pos:column="30">fullmapFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="438" pos:column="47">
            <block pos:line="439" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="440" pos:column="17">MessageBox</name><op:operator pos:line="440" pos:column="27">.</op:operator><name pos:line="440" pos:column="28">Show</name></name><argument_list pos:line="440" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="440" pos:column="33">"Missing config-changeset-mapping file."</lit:literal></expr></argument><op:operator pos:line="440" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="440" pos:column="75">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="441" pos:column="17">return <expr><op:operator pos:line="441" pos:column="24">-</op:operator><lit:literal type="number" pos:line="441" pos:column="25">1</lit:literal></expr>;</return>
            }</block></then></if>
	        <decl_stmt><decl><type><name pos:line="443" pos:column="17">StreamReader</name></type> <name pos:line="443" pos:column="30">mapFile</name> =<init pos:line="443" pos:column="39"> <expr><op:operator pos:line="443" pos:column="40">new</op:operator> <call><name pos:line="443" pos:column="44">StreamReader</name><argument_list pos:line="443" pos:column="56">(<argument><expr><name pos:line="443" pos:column="57">fullmapFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>           
	
	        <decl_stmt><decl><type><name><name pos:line="445" pos:column="17">bool</name><index pos:line="445" pos:column="21">[]</index></name></type> <name pos:line="445" pos:column="24">isIdentifiedConfig</name> =<init pos:line="445" pos:column="44"> <expr><op:operator pos:line="445" pos:column="45">new</op:operator> <name><name pos:line="445" pos:column="49">bool</name><index pos:line="445" pos:column="53">[<expr><name><name pos:line="445" pos:column="54">configSelect</name><op:operator pos:line="445" pos:column="66">.</op:operator><name pos:line="445" pos:column="67">Count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="445" pos:column="75">//if there is corresponding mapping identified in code</comment>
	
	        <decl_stmt><decl><type><name pos:line="447" pos:column="17">string</name></type> <name pos:line="447" pos:column="24">dummyLine</name></decl>;</decl_stmt>
	        <expr_stmt><expr><name pos:line="448" pos:column="17">dummyLine</name> <op:operator pos:line="448" pos:column="27">=</op:operator> <call><name><name pos:line="448" pos:column="29">mapFile</name><op:operator pos:line="448" pos:column="36">.</op:operator><name pos:line="448" pos:column="37">ReadLine</name></name><argument_list pos:line="448" pos:column="45">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="450" pos:column="13">string</name></type> <name pos:line="450" pos:column="20">line</name></decl>;</decl_stmt>
            <while pos:line="451" pos:column="13">while<condition pos:line="451" pos:column="18">(<expr><op:operator pos:line="451" pos:column="19">(</op:operator><name pos:line="451" pos:column="20">line</name> <op:operator pos:line="451" pos:column="25">=</op:operator> <call><name><name pos:line="451" pos:column="27">mapFile</name><op:operator pos:line="451" pos:column="34">.</op:operator><name pos:line="451" pos:column="35">ReadLine</name></name><argument_list pos:line="451" pos:column="43">()</argument_list></call><op:operator pos:line="451" pos:column="45">)</op:operator> <op:operator pos:line="451" pos:column="47">!=</op:operator> <name pos:line="451" pos:column="50">null</name></expr>)</condition>
            <block pos:line="452" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="453" pos:column="17">string</name><index pos:line="453" pos:column="23">[]</index></name></type> <name pos:line="453" pos:column="26">words</name> =<init pos:line="453" pos:column="33"> <expr><call><name><name pos:line="453" pos:column="34">line</name><op:operator pos:line="453" pos:column="38">.</op:operator><name pos:line="453" pos:column="39">Split</name></name><argument_list pos:line="453" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="453" pos:column="45">'\t'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	            <decl_stmt><decl><type><name pos:line="454" pos:column="21">string</name></type> <name pos:line="454" pos:column="28">_domain</name> =<init pos:line="454" pos:column="37"> <expr><name><name pos:line="454" pos:column="38">words</name><index pos:line="454" pos:column="43">[<expr><lit:literal type="number" pos:line="454" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="455" pos:column="25">string</name></type> <name pos:line="455" pos:column="32">_type</name> =<init pos:line="455" pos:column="39"> <expr><name><name pos:line="455" pos:column="40">words</name><index pos:line="455" pos:column="45">[<expr><lit:literal type="number" pos:line="455" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="456" pos:column="25">int</name></type> <name pos:line="456" pos:column="29">_selection</name> =<init pos:line="456" pos:column="41"> <expr><call><name><name pos:line="456" pos:column="42">System</name><op:operator pos:line="456" pos:column="48">.</op:operator><name pos:line="456" pos:column="49">Convert</name><op:operator pos:line="456" pos:column="56">.</op:operator><name pos:line="456" pos:column="57">ToInt32</name></name><argument_list pos:line="456" pos:column="64">(<argument><expr><name><name pos:line="456" pos:column="65">words</name><index pos:line="456" pos:column="70">[<expr><lit:literal type="number" pos:line="456" pos:column="71">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		        <if pos:line="458" pos:column="25">if<condition pos:line="458" pos:column="27">(<expr><name pos:line="458" pos:column="28">_domain</name> <op:operator pos:line="458" pos:column="36">==</op:operator> <lit:literal type="string" pos:line="458" pos:column="39">""</lit:literal></expr>)</condition><then pos:line="458" pos:column="42">
			        <continue pos:line="459" pos:column="33">continue;</continue></then></if>

		        <for pos:line="461" pos:column="25">for(<init><decl><type><name pos:line="461" pos:column="29">int</name></type> <name pos:line="461" pos:column="33">i</name>=<init><expr><lit:literal type="number" pos:line="461" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="461" pos:column="38">i</name><op:operator pos:line="461" pos:column="39">&lt;</op:operator><name><name pos:line="461" pos:column="40">configSelect</name><op:operator pos:line="461" pos:column="52">.</op:operator><name pos:line="461" pos:column="53">Count</name></name></expr>;</condition> <incr><expr><name pos:line="461" pos:column="60">i</name><op:operator pos:line="461" pos:column="61">++</op:operator></expr></incr>)
		        <block pos:line="462" pos:column="25">{
			        <decl_stmt><decl><type><name pos:line="463" pos:column="33">string</name></type> <name pos:line="463" pos:column="40">select</name> =<init pos:line="463" pos:column="48"> <expr><name><name pos:line="463" pos:column="49">configSelect</name><index pos:line="463" pos:column="61">[<expr><name pos:line="463" pos:column="62">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			        <decl_stmt><decl><type><name pos:line="464" pos:column="33">int</name></type> <name pos:line="464" pos:column="37">pos</name> =<init pos:line="464" pos:column="42"> <expr><linq><select pos:line="464" pos:column="43">select<expr><op:operator pos:line="464" pos:column="49">.</op:operator><call><name pos:line="464" pos:column="50">IndexOf</name><argument_list pos:line="464" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="464" pos:column="58">":"</lit:literal></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
			        <decl_stmt><decl><type><name pos:line="465" pos:column="33">string</name></type> <name pos:line="465" pos:column="40">domain_sel</name> =<init pos:line="465" pos:column="52"> <expr><linq><select pos:line="465" pos:column="53">select<expr><op:operator pos:line="465" pos:column="59">.</op:operator><call><name pos:line="465" pos:column="60">Substring</name><argument_list pos:line="465" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="465" pos:column="70">0</lit:literal></expr></argument><op:operator pos:line="465" pos:column="71">,</op:operator><argument><expr><name pos:line="465" pos:column="72">pos</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
			        <decl_stmt><decl><type><name pos:line="466" pos:column="33">string</name></type> <name pos:line="466" pos:column="40">type_sel</name> =<init pos:line="466" pos:column="50"> <expr><linq><select pos:line="466" pos:column="51">select<expr><op:operator pos:line="466" pos:column="57">.</op:operator><call><name pos:line="466" pos:column="58">Substring</name><argument_list pos:line="466" pos:column="67">(<argument><expr><name pos:line="466" pos:column="68">pos</name><op:operator pos:line="466" pos:column="71">+</op:operator><lit:literal type="number" pos:line="466" pos:column="72">1</lit:literal></expr></argument><op:operator pos:line="466" pos:column="73">,</op:operator> <argument><expr><linq><select pos:line="466" pos:column="75">select<expr><op:operator pos:line="466" pos:column="81">.</op:operator><name pos:line="466" pos:column="82">Length</name> <op:operator pos:line="466" pos:column="89">-</op:operator><op:operator pos:line="466" pos:column="90">(</op:operator><name pos:line="466" pos:column="91">pos</name><op:operator pos:line="466" pos:column="94">+</op:operator><lit:literal type="number" pos:line="466" pos:column="95">1</lit:literal><op:operator pos:line="466" pos:column="96">)</op:operator></expr></select></linq></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
			        <if pos:line="467" pos:column="33">if<condition pos:line="467" pos:column="35">(<expr><op:operator pos:line="467" pos:column="36">(</op:operator><name pos:line="467" pos:column="37">_domain</name> <op:operator pos:line="467" pos:column="45">==</op:operator> <name pos:line="467" pos:column="48">domain_sel</name><op:operator pos:line="467" pos:column="58">)</op:operator> <op:operator pos:line="467" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="467" pos:column="63">(</op:operator><name pos:line="467" pos:column="64">_type</name> <op:operator pos:line="467" pos:column="70">==</op:operator> <name pos:line="467" pos:column="73">type_sel</name><op:operator pos:line="467" pos:column="81">)</op:operator></expr>)</condition><then pos:line="467" pos:column="83">
			        <block pos:line="468" pos:column="33">{
				        <expr_stmt><expr><name><name pos:line="469" pos:column="41">isIdentifiedConfig</name><index pos:line="469" pos:column="59">[<expr><name pos:line="469" pos:column="60">i</name></expr>]</index></name> <op:operator pos:line="469" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="469" pos:column="65">true</lit:literal></expr>;</expr_stmt>
				        <expr_stmt><expr><call><name><name pos:line="470" pos:column="41">allSelections</name><op:operator pos:line="470" pos:column="54">.</op:operator><name pos:line="470" pos:column="55">Add</name></name><argument_list pos:line="470" pos:column="58">(<argument><expr><name pos:line="470" pos:column="59">_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <break pos:line="471" pos:column="41">break;</break>  
			        }</block></then></if>
		        }</block></for>   

	        }</block></while>

	        <expr_stmt><expr><call><name><name pos:line="477" pos:column="17">mapFile</name><op:operator pos:line="477" pos:column="24">.</op:operator><name pos:line="477" pos:column="25">Close</name></name><argument_list pos:line="477" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

	        <for pos:line="479" pos:column="17">for(<init><decl><type><name pos:line="479" pos:column="21">int</name></type> <name pos:line="479" pos:column="25">i</name>=<init><expr><lit:literal type="number" pos:line="479" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="479" pos:column="30">i</name><op:operator pos:line="479" pos:column="31">&lt;</op:operator><name><name pos:line="479" pos:column="32">configSelect</name><op:operator pos:line="479" pos:column="44">.</op:operator><name pos:line="479" pos:column="45">Count</name></name></expr>;</condition> <incr><expr><name pos:line="479" pos:column="52">i</name><op:operator pos:line="479" pos:column="53">++</op:operator></expr></incr>)
	        <block pos:line="480" pos:column="17">{
		        <if pos:line="481" pos:column="25">if<condition pos:line="481" pos:column="27">(<expr><name><name pos:line="481" pos:column="28">isIdentifiedConfig</name><index pos:line="481" pos:column="46">[<expr><name pos:line="481" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="481" pos:column="50">==</op:operator> <lit:literal type="boolean" pos:line="481" pos:column="53">false</lit:literal></expr>)</condition><then pos:line="481" pos:column="59">
                <block pos:line="482" pos:column="17">{
			        <if pos:line="483" pos:column="33">if <condition pos:line="483" pos:column="36">(<expr><name pos:line="483" pos:column="37">toolOpt</name> <op:operator pos:line="483" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="483" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="483" pos:column="50">
			            <expr_stmt><expr><call><name><name pos:line="484" pos:column="37">MessageBox</name><op:operator pos:line="484" pos:column="47">.</op:operator><name pos:line="484" pos:column="48">Show</name></name><argument_list pos:line="484" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="484" pos:column="53">"Configurable Option "</lit:literal> <op:operator pos:line="484" pos:column="76">+</op:operator> <name><name pos:line="484" pos:column="78">configSelect</name><index pos:line="484" pos:column="90">[<expr><name pos:line="484" pos:column="91">i</name></expr>]</index></name> <op:operator pos:line="484" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="484" pos:column="96">" is not identified in code."</lit:literal></expr></argument><op:operator pos:line="484" pos:column="125">,</op:operator> <argument><expr><lit:literal type="string" pos:line="484" pos:column="127">"WARN"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
			        <comment type="line" pos:line="485" pos:column="33">//return -1;</comment>
		        }</block></then></if>
	        }</block></for>

	        <if pos:line="489" pos:column="17">if<condition pos:line="489" pos:column="19">(<expr><name><name pos:line="489" pos:column="20">allSelections</name><op:operator pos:line="489" pos:column="33">.</op:operator><name pos:line="489" pos:column="34">Count</name></name> <op:operator pos:line="489" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="489" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="489" pos:column="45">
	        <block pos:line="490" pos:column="17">{
		        <expr_stmt><expr><call><name><name pos:line="491" pos:column="25">MessageBox</name><op:operator pos:line="491" pos:column="35">.</op:operator><name pos:line="491" pos:column="36">Show</name></name><argument_list pos:line="491" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="491" pos:column="41">"No mapping to code."</lit:literal></expr></argument><op:operator pos:line="491" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="491" pos:column="64">"EXCEPTION"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <return pos:line="492" pos:column="25">return <expr><op:operator pos:line="492" pos:column="32">-</op:operator><lit:literal type="number" pos:line="492" pos:column="33">1</lit:literal></expr>;</return>
	        }</block></then></if>

	        <return pos:line="495" pos:column="17">return <expr><lit:literal type="number" pos:line="495" pos:column="24">0</lit:literal></expr>;</return>
         }</block></function>

	    <function><type><specifier pos:line="498" pos:column="13">private</specifier> <name pos:line="498" pos:column="21">int</name></type> <name pos:line="498" pos:column="25">getFileInBuild</name><parameter_list pos:line="498" pos:column="39">(<param><decl><type><name pos:line="498" pos:column="40">string</name></type> <name pos:line="498" pos:column="47">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="499" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="500" pos:column="13">string</name></type> <name pos:line="500" pos:column="20">filesInBuildFilePath</name> =<init pos:line="500" pos:column="42"> <expr><name pos:line="500" pos:column="43">workspacePos</name> <op:operator pos:line="500" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="500" pos:column="58">"\\"</lit:literal> <op:operator pos:line="500" pos:column="63">+</op:operator> <lit:literal type="string" pos:line="500" pos:column="65">"imp_filesInBuild.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="501" pos:column="13">if <condition pos:line="501" pos:column="16">(<expr><op:operator pos:line="501" pos:column="17">!</op:operator><call><name><name pos:line="501" pos:column="18">File</name><op:operator pos:line="501" pos:column="22">.</op:operator><name pos:line="501" pos:column="23">Exists</name></name><argument_list pos:line="501" pos:column="29">(<argument><expr><name pos:line="501" pos:column="30">filesInBuildFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="501" pos:column="52">
            <block pos:line="502" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="503" pos:column="17">MessageBox</name><op:operator pos:line="503" pos:column="27">.</op:operator><name pos:line="503" pos:column="28">Show</name></name><argument_list pos:line="503" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="503" pos:column="33">"Missing imp_filesInBuild.csv file."</lit:literal></expr></argument><op:operator pos:line="503" pos:column="69">,</op:operator> <argument><expr><lit:literal type="string" pos:line="503" pos:column="71">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="504" pos:column="17">return <expr><op:operator pos:line="504" pos:column="24">-</op:operator><lit:literal type="number" pos:line="504" pos:column="25">1</lit:literal></expr>;</return>
            }</block></then></if>
	        <decl_stmt><decl><type><name pos:line="506" pos:column="17">StreamReader</name></type> <name pos:line="506" pos:column="30">filesInBuildFile</name> =<init pos:line="506" pos:column="48"> <expr><op:operator pos:line="506" pos:column="49">new</op:operator> <call><name pos:line="506" pos:column="53">StreamReader</name><argument_list pos:line="506" pos:column="65">(<argument><expr><name pos:line="506" pos:column="66">filesInBuildFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        
            <expr_stmt><expr><call><name><name pos:line="508" pos:column="13">filesInBuildFile</name><op:operator pos:line="508" pos:column="29">.</op:operator><name pos:line="508" pos:column="30">ReadLine</name></name><argument_list pos:line="508" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	        
            <decl_stmt><decl><type><name pos:line="510" pos:column="13">string</name></type> <name pos:line="510" pos:column="20">fileLine</name> =<init pos:line="510" pos:column="30"> <expr><lit:literal type="string" pos:line="510" pos:column="31">""</lit:literal></expr></init></decl>;</decl_stmt>

	        <while pos:line="512" pos:column="17">while<condition pos:line="512" pos:column="22">( <expr><op:operator pos:line="512" pos:column="24">(</op:operator><name pos:line="512" pos:column="25">fileLine</name> <op:operator pos:line="512" pos:column="34">=</op:operator> <call><name><name pos:line="512" pos:column="36">filesInBuildFile</name><op:operator pos:line="512" pos:column="52">.</op:operator><name pos:line="512" pos:column="53">ReadLine</name></name><argument_list pos:line="512" pos:column="61">()</argument_list></call><op:operator pos:line="512" pos:column="63">)</op:operator> <op:operator pos:line="512" pos:column="65">!=</op:operator> <name pos:line="512" pos:column="68">null</name></expr>)</condition>
	        <block pos:line="513" pos:column="17">{
		        <if pos:line="514" pos:column="25">if<condition pos:line="514" pos:column="27">(<expr><name pos:line="514" pos:column="28">fileLine</name> <op:operator pos:line="514" pos:column="37">==</op:operator> <lit:literal type="string" pos:line="514" pos:column="40">""</lit:literal></expr>)</condition><then pos:line="514" pos:column="43">
			        <continue pos:line="515" pos:column="33">continue;</continue></then></if>

		        <decl_stmt><decl><type><name pos:line="517" pos:column="25">int</name></type> <name pos:line="517" pos:column="29">pos</name> =<init pos:line="517" pos:column="34"> <expr><call><name><name pos:line="517" pos:column="35">fileLine</name><op:operator pos:line="517" pos:column="43">.</op:operator><name pos:line="517" pos:column="44">IndexOf</name></name><argument_list pos:line="517" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="517" pos:column="52">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="518" pos:column="25">string</name></type> <name pos:line="518" pos:column="32">fileInBuild</name> =<init pos:line="518" pos:column="45"> <expr><call><name><name pos:line="518" pos:column="46">fileLine</name><op:operator pos:line="518" pos:column="54">.</op:operator><name pos:line="518" pos:column="55">Substring</name></name><argument_list pos:line="518" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="518" pos:column="65">0</lit:literal></expr></argument><op:operator pos:line="518" pos:column="66">,</op:operator><argument><expr><name pos:line="518" pos:column="67">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <expr_stmt><expr><call><name><name pos:line="519" pos:column="25">files_in_build</name><op:operator pos:line="519" pos:column="39">.</op:operator><name pos:line="519" pos:column="40">Add</name></name><argument_list pos:line="519" pos:column="43">(<argument><expr><name pos:line="519" pos:column="44">fileInBuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></while>

	        <expr_stmt><expr><call><name><name pos:line="522" pos:column="17">filesInBuildFile</name><op:operator pos:line="522" pos:column="33">.</op:operator><name pos:line="522" pos:column="34">Close</name></name><argument_list pos:line="522" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="523" pos:column="13">return <expr><lit:literal type="number" pos:line="523" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>
	    
        <function><type><specifier pos:line="526" pos:column="9">private</specifier> <name pos:line="526" pos:column="17">int</name></type> <name pos:line="526" pos:column="21">genFileImp</name><parameter_list pos:line="526" pos:column="31">(<param><decl><type><name pos:line="526" pos:column="32">string</name></type> <name pos:line="526" pos:column="39">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="527" pos:column="9">{
            <comment type="line" pos:line="528" pos:column="13">//[in] all files, total number of lines: imp_userInterestedFiles.csv (if not given, interest in all)</comment>
	        <comment type="line" pos:line="529" pos:column="17">//[in] files in build: vector "files_in_build"</comment>
	        <comment type="line" pos:line="530" pos:column="17">//[in] files impacted and its line numbers generated above: imp_union_filesImpacted.csv --&gt; vectors "fileImpacted" and "lineCntImpactedPerFile"</comment>
	        <comment type="line" pos:line="531" pos:column="17">//[out] file, in_build, # of lines, # of impacte lines, impact ratio</comment>
                       
            <decl_stmt><decl><type><name pos:line="533" pos:column="13">string</name></type> <name pos:line="533" pos:column="20">allFilesPath</name> =<init pos:line="533" pos:column="34"> <expr><name pos:line="533" pos:column="35">workspacePos</name> <op:operator pos:line="533" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="533" pos:column="50">"\\"</lit:literal> <op:operator pos:line="533" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="533" pos:column="57">"imp_userInterestedFiles.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="534" pos:column="13">if <condition pos:line="534" pos:column="16">(<expr><op:operator pos:line="534" pos:column="17">!</op:operator><call><name><name pos:line="534" pos:column="18">File</name><op:operator pos:line="534" pos:column="22">.</op:operator><name pos:line="534" pos:column="23">Exists</name></name><argument_list pos:line="534" pos:column="29">(<argument><expr><name pos:line="534" pos:column="30">allFilesPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="534" pos:column="44">
            <block pos:line="535" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="536" pos:column="17">MessageBox</name><op:operator pos:line="536" pos:column="27">.</op:operator><name pos:line="536" pos:column="28">Show</name></name><argument_list pos:line="536" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="536" pos:column="33">"Missing imp_userInterestedFiles.csv."</lit:literal></expr></argument><op:operator pos:line="536" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="536" pos:column="73">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="537" pos:column="17">return <expr><op:operator pos:line="537" pos:column="24">-</op:operator><lit:literal type="number" pos:line="537" pos:column="25">1</lit:literal></expr>;</return>                
            }</block></then></if>
	        <decl_stmt><decl><type><name pos:line="539" pos:column="17">StreamReader</name></type> <name pos:line="539" pos:column="30">allFiles</name> =<init pos:line="539" pos:column="40"> <expr><op:operator pos:line="539" pos:column="41">new</op:operator> <call><name pos:line="539" pos:column="45">StreamReader</name><argument_list pos:line="539" pos:column="57">(<argument><expr><name pos:line="539" pos:column="58">allFilesPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="541" pos:column="13">MessageBox</name><op:operator pos:line="541" pos:column="23">.</op:operator><name pos:line="541" pos:column="24">Show</name></name><argument_list pos:line="541" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="541" pos:column="29">"Generate File level impact ... Wait ..."</lit:literal></expr></argument><op:operator pos:line="541" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="541" pos:column="72">"Progress"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="543" pos:column="13">if <condition pos:line="543" pos:column="16">(<expr><op:operator pos:line="543" pos:column="17">!</op:operator><call><name><name pos:line="543" pos:column="18">Directory</name><op:operator pos:line="543" pos:column="27">.</op:operator><name pos:line="543" pos:column="28">Exists</name></name><argument_list pos:line="543" pos:column="34">(<argument><expr><name pos:line="543" pos:column="35">workspacePos</name> <op:operator pos:line="543" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="543" pos:column="50">"\\MosaiCodeInputs"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="543" pos:column="71">
                <expr_stmt><expr><call><name><name pos:line="544" pos:column="17">Directory</name><op:operator pos:line="544" pos:column="26">.</op:operator><name pos:line="544" pos:column="27">CreateDirectory</name></name><argument_list pos:line="544" pos:column="42">(<argument><expr><name pos:line="544" pos:column="43">workspacePos</name> <op:operator pos:line="544" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="544" pos:column="58">"\\MosaiCodeInputs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="546" pos:column="13">string</name></type> <name pos:line="546" pos:column="20">fileImpFilePath</name> =<init pos:line="546" pos:column="37"> <expr><name pos:line="546" pos:column="38">workspacePos</name> <op:operator pos:line="546" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="546" pos:column="53">"\\MosaiCodeInputs\\fileImpact_MasaicodeInput.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="547" pos:column="13">StreamWriter</name></type> <name pos:line="547" pos:column="26">fileImpFile</name> =<init pos:line="547" pos:column="39"> <expr><op:operator pos:line="547" pos:column="40">new</op:operator> <call><name pos:line="547" pos:column="44">StreamWriter</name><argument_list pos:line="547" pos:column="56">(<argument><expr><name pos:line="547" pos:column="57">fileImpFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="549" pos:column="13">fileImpFile</name><op:operator pos:line="549" pos:column="24">.</op:operator><name pos:line="549" pos:column="25">WriteLine</name></name><argument_list pos:line="549" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="549" pos:column="35">"ID,File,InBuild,NumOfLines,NumOfImpactedLines,ImpactRatio"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	        <decl_stmt><decl><type><name pos:line="551" pos:column="17">uint</name></type> <name pos:line="551" pos:column="22">count</name> =<init pos:line="551" pos:column="29"> <expr><lit:literal type="number" pos:line="551" pos:column="30">1</lit:literal></expr></init></decl>;</decl_stmt>
	
            <decl_stmt><decl><type><name pos:line="553" pos:column="13">string</name></type> <name pos:line="553" pos:column="20">line</name> =<init pos:line="553" pos:column="26"> <expr><lit:literal type="string" pos:line="553" pos:column="27">""</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="554" pos:column="13">while<condition pos:line="554" pos:column="18">( <expr><op:operator pos:line="554" pos:column="20">(</op:operator><name pos:line="554" pos:column="21">line</name> <op:operator pos:line="554" pos:column="26">=</op:operator> <call><name><name pos:line="554" pos:column="28">allFiles</name><op:operator pos:line="554" pos:column="36">.</op:operator><name pos:line="554" pos:column="37">ReadLine</name></name><argument_list pos:line="554" pos:column="45">()</argument_list></call><op:operator pos:line="554" pos:column="47">)</op:operator> <op:operator pos:line="554" pos:column="49">!=</op:operator> <name pos:line="554" pos:column="52">null</name></expr>)</condition>
	        <block pos:line="555" pos:column="17">{	 
                <if pos:line="556" pos:column="17">if <condition pos:line="556" pos:column="20">(<expr><name pos:line="556" pos:column="21">line</name> <op:operator pos:line="556" pos:column="26">==</op:operator> <lit:literal type="string" pos:line="556" pos:column="29">""</lit:literal></expr>)</condition><then pos:line="556" pos:column="32">
			        <continue pos:line="557" pos:column="33">continue;</continue></then></if>

                <decl_stmt><decl><type><name pos:line="559" pos:column="17">string</name></type> <name pos:line="559" pos:column="24">file</name> =<init pos:line="559" pos:column="30"> <expr><lit:literal type="string" pos:line="559" pos:column="31">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="560" pos:column="25">string</name></type> <name pos:line="560" pos:column="32">num_line</name> =<init pos:line="560" pos:column="42"> <expr><lit:literal type="string" pos:line="560" pos:column="43">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="561" pos:column="25">string</name></type> <name pos:line="561" pos:column="32">is_in_build</name> =<init pos:line="561" pos:column="45"> <expr><lit:literal type="string" pos:line="561" pos:column="46">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="562" pos:column="25">int</name></type> <name pos:line="562" pos:column="29">num_line_imp</name> =<init pos:line="562" pos:column="43"> <expr><lit:literal type="number" pos:line="562" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="563" pos:column="25">float</name></type> <name pos:line="563" pos:column="31">ratio_imp</name> =<init pos:line="563" pos:column="42"> <expr><lit:literal type="number" pos:line="563" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>
                
		        <decl_stmt><decl><type><name pos:line="565" pos:column="25">int</name></type> <name pos:line="565" pos:column="29">pos</name> =<init pos:line="565" pos:column="34"> <expr><call><name><name pos:line="565" pos:column="35">line</name><op:operator pos:line="565" pos:column="39">.</op:operator><name pos:line="565" pos:column="40">IndexOf</name></name><argument_list pos:line="565" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="565" pos:column="48">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <expr_stmt><expr><name pos:line="566" pos:column="25">file</name> <op:operator pos:line="566" pos:column="30">=</op:operator> <call><name><name pos:line="566" pos:column="32">line</name><op:operator pos:line="566" pos:column="36">.</op:operator><name pos:line="566" pos:column="37">Substring</name></name><argument_list pos:line="566" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="566" pos:column="47">0</lit:literal></expr></argument><op:operator pos:line="566" pos:column="48">,</op:operator><argument><expr><name pos:line="566" pos:column="49">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="567" pos:column="25">num_line</name> <op:operator pos:line="567" pos:column="34">=</op:operator> <call><name><name pos:line="567" pos:column="36">line</name><op:operator pos:line="567" pos:column="40">.</op:operator><name pos:line="567" pos:column="41">Substring</name></name><argument_list pos:line="567" pos:column="50">(<argument><expr><name pos:line="567" pos:column="51">pos</name><op:operator pos:line="567" pos:column="54">+</op:operator><lit:literal type="number" pos:line="567" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="569" pos:column="17">if<condition pos:line="569" pos:column="19">(<expr><call><name><name pos:line="569" pos:column="20">files_in_build</name><op:operator pos:line="569" pos:column="34">.</op:operator><name pos:line="569" pos:column="35">FindIndex</name></name><argument_list pos:line="569" pos:column="44">(<argument><expr><name pos:line="569" pos:column="45">item</name> <op:operator pos:line="569" pos:column="50">=&gt;</op:operator> <name pos:line="569" pos:column="53">item</name> <op:operator pos:line="569" pos:column="58">==</op:operator> <name pos:line="569" pos:column="61">file</name></expr></argument>)</argument_list></call><op:operator pos:line="569" pos:column="66">==</op:operator><op:operator pos:line="569" pos:column="68">-</op:operator><lit:literal type="number" pos:line="569" pos:column="69">1</lit:literal></expr>)</condition><then pos:line="569" pos:column="71">
                <block pos:line="570" pos:column="17">{
                    <expr_stmt><expr><name pos:line="571" pos:column="21">is_in_build</name> <op:operator pos:line="571" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="571" pos:column="35">"0"</lit:literal></expr>;</expr_stmt>
			        <expr_stmt><expr><name pos:line="572" pos:column="33">num_line_imp</name> <op:operator pos:line="572" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="572" pos:column="48">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="572" pos:column="51">//-1;</comment>
			        <expr_stmt><expr><name pos:line="573" pos:column="33">ratio_imp</name> <op:operator pos:line="573" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="573" pos:column="45">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="573" pos:column="48">//-1;</comment>
                }</block></then>
		        <else pos:line="575" pos:column="25">else <comment type="line" pos:line="575" pos:column="30">//is in build, look up for impact </comment>
		        <block pos:line="576" pos:column="25">{
			        <expr_stmt><expr><name pos:line="577" pos:column="33">is_in_build</name> <op:operator pos:line="577" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="577" pos:column="47">"1"</lit:literal></expr>;</expr_stmt>
			        <decl_stmt><decl><type><name pos:line="578" pos:column="33">int</name></type> <name pos:line="578" pos:column="37">it_strVec</name> =<init pos:line="578" pos:column="48"> <expr><call><name><name pos:line="578" pos:column="49">fileImpacted</name><op:operator pos:line="578" pos:column="61">.</op:operator><name pos:line="578" pos:column="62">FindIndex</name></name><argument_list pos:line="578" pos:column="71">(<argument><expr><name pos:line="578" pos:column="72">item</name> <op:operator pos:line="578" pos:column="77">=&gt;</op:operator> <name pos:line="578" pos:column="80">item</name> <op:operator pos:line="578" pos:column="85">==</op:operator> <name pos:line="578" pos:column="88">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                        
			        <if pos:line="579" pos:column="33">if<condition pos:line="579" pos:column="35">(<expr><name pos:line="579" pos:column="36">it_strVec</name> <op:operator pos:line="579" pos:column="46">==</op:operator> <op:operator pos:line="579" pos:column="49">-</op:operator><lit:literal type="number" pos:line="579" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="579" pos:column="52"> <comment type="line" pos:line="579" pos:column="53">//is not impacted</comment>
			        <block pos:line="580" pos:column="33">{
				        <expr_stmt><expr><name pos:line="581" pos:column="41">num_line_imp</name> <op:operator pos:line="581" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="581" pos:column="56">0</lit:literal></expr>;</expr_stmt>
				        <expr_stmt><expr><name pos:line="582" pos:column="41">ratio_imp</name> <op:operator pos:line="582" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="582" pos:column="53">0</lit:literal></expr>;</expr_stmt>
			        }</block></then>
			        <else pos:line="584" pos:column="33">else
			        <block pos:line="585" pos:column="33">{			         
				        <expr_stmt><expr><name pos:line="586" pos:column="41">num_line_imp</name> <op:operator pos:line="586" pos:column="54">=</op:operator> <name><name pos:line="586" pos:column="56">lineCntImpactedPerFile</name><index pos:line="586" pos:column="78">[<expr><name pos:line="586" pos:column="79">it_strVec</name></expr>]</index></name></expr>;</expr_stmt>
				        <expr_stmt><expr><name pos:line="587" pos:column="41">ratio_imp</name> <op:operator pos:line="587" pos:column="51">=</op:operator> <call pos:line="587" pos:column="53">(<name pos:line="587" pos:column="54">float</name>)<argument_list pos:line="587" pos:column="60">(<argument><expr><name pos:line="587" pos:column="61">num_line_imp</name></expr></argument>)</argument_list></call> <op:operator pos:line="587" pos:column="75">/</op:operator> <call><name><name pos:line="587" pos:column="77">float</name><op:operator pos:line="587" pos:column="82">.</op:operator><name pos:line="587" pos:column="83">Parse</name></name><argument_list pos:line="587" pos:column="88">(<argument><expr><name pos:line="587" pos:column="89">num_line</name></expr></argument>)</argument_list></call> <op:operator pos:line="587" pos:column="99">*</op:operator> <call pos:line="587" pos:column="101">(<name pos:line="587" pos:column="102">float</name>)<argument_list pos:line="587" pos:column="108">(<argument><expr><lit:literal type="number" pos:line="587" pos:column="109">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        }</block></else></if>

		        }</block></else></if>   

		        <expr_stmt><expr><name pos:line="592" pos:column="25">file</name> <op:operator pos:line="592" pos:column="30">=</op:operator> <call><name pos:line="592" pos:column="32">replaceCharInStr</name><argument_list pos:line="592" pos:column="48">(<argument><expr><name pos:line="592" pos:column="49">file</name></expr></argument><op:operator pos:line="592" pos:column="53">,</op:operator><argument><expr><lit:literal type="char" pos:line="592" pos:column="54">'\\'</lit:literal></expr></argument><op:operator pos:line="592" pos:column="58">,</op:operator><argument><expr><lit:literal type="char" pos:line="592" pos:column="59">'/'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
                <decl_stmt><decl><type><name pos:line="593" pos:column="17">string</name></type> <name pos:line="593" pos:column="24">count2</name> =<init pos:line="593" pos:column="32"> <expr><call><name><name pos:line="593" pos:column="33">System</name><op:operator pos:line="593" pos:column="39">.</op:operator><name pos:line="593" pos:column="40">Convert</name><op:operator pos:line="593" pos:column="47">.</op:operator><name pos:line="593" pos:column="48">ToString</name></name><argument_list pos:line="593" pos:column="56">(<argument><expr><name pos:line="593" pos:column="57">count</name><op:operator pos:line="593" pos:column="62">++</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="594" pos:column="17">fileImpFile</name><op:operator pos:line="594" pos:column="28">.</op:operator><name pos:line="594" pos:column="29">WriteLine</name></name><argument_list pos:line="594" pos:column="38">(<argument><expr><name pos:line="594" pos:column="39">count2</name><op:operator pos:line="594" pos:column="45">+</op:operator><lit:literal type="string" pos:line="594" pos:column="46">","</lit:literal><op:operator pos:line="594" pos:column="49">+</op:operator><name pos:line="594" pos:column="50">file</name><op:operator pos:line="594" pos:column="54">+</op:operator><lit:literal type="string" pos:line="594" pos:column="55">","</lit:literal><op:operator pos:line="594" pos:column="58">+</op:operator><name pos:line="594" pos:column="59">is_in_build</name><op:operator pos:line="594" pos:column="70">+</op:operator><lit:literal type="string" pos:line="594" pos:column="71">","</lit:literal><op:operator pos:line="594" pos:column="74">+</op:operator><name pos:line="594" pos:column="75">num_line</name><op:operator pos:line="594" pos:column="83">+</op:operator><lit:literal type="string" pos:line="594" pos:column="84">","</lit:literal><op:operator pos:line="594" pos:column="87">+</op:operator><name pos:line="594" pos:column="88">num_line_imp</name><op:operator pos:line="594" pos:column="100">+</op:operator><lit:literal type="string" pos:line="594" pos:column="101">","</lit:literal><op:operator pos:line="594" pos:column="104">+</op:operator><name pos:line="594" pos:column="105">ratio_imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        
	        }</block></while> <comment type="line" pos:line="596" pos:column="19">//end of browsing all files	</comment>

	        <expr_stmt><expr><call><name><name pos:line="598" pos:column="17">allFiles</name><op:operator pos:line="598" pos:column="25">.</op:operator><name pos:line="598" pos:column="26">Close</name></name><argument_list pos:line="598" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name pos:line="599" pos:column="17">fileImpFile</name><op:operator pos:line="599" pos:column="28">.</op:operator><name pos:line="599" pos:column="29">Close</name></name><argument_list pos:line="599" pos:column="34">()</argument_list></call></expr>;</expr_stmt>

            <return pos:line="601" pos:column="13">return <expr><lit:literal type="number" pos:line="601" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function> 
	    
        <function><type><specifier pos:line="604" pos:column="9">private</specifier> <name pos:line="604" pos:column="17">int</name></type> <name pos:line="604" pos:column="21">genFuncImp</name><parameter_list pos:line="604" pos:column="31">(<param><decl><type><name pos:line="604" pos:column="32">string</name></type> <name pos:line="604" pos:column="39">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="605" pos:column="9">{
            <comment type="line" pos:line="606" pos:column="13">//[in] all files, all funcs, total number of lines: imp_userInterestedFuncs.csv (not necessary)</comment>
	        <comment type="line" pos:line="607" pos:column="17">//[in] files in build: vector "files_in_build"</comment>
	        <comment type="line" pos:line="608" pos:column="17">//[in] files+funcs impacted and its line numbers generated above: imp_union_funcsImpacted.csv --&gt; vectors "funcImpacted" and "lineCntImpactedPerFunc"</comment>
	        <comment type="line" pos:line="609" pos:column="17">//[out] file, in_build, func, # of lines, # of impacte lines, impact ratio</comment>
		
	        <decl_stmt><decl><type><name pos:line="611" pos:column="17">string</name></type> <name pos:line="611" pos:column="24">allFuncsPath</name> =<init pos:line="611" pos:column="38"> <expr><name pos:line="611" pos:column="39">workspacePos</name> <op:operator pos:line="611" pos:column="52">+</op:operator> <lit:literal type="string" pos:line="611" pos:column="54">"\\"</lit:literal> <op:operator pos:line="611" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="611" pos:column="61">"imp_userInterestedFuncs.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="612" pos:column="13">if <condition pos:line="612" pos:column="16">(<expr><op:operator pos:line="612" pos:column="17">!</op:operator><call><name><name pos:line="612" pos:column="18">File</name><op:operator pos:line="612" pos:column="22">.</op:operator><name pos:line="612" pos:column="23">Exists</name></name><argument_list pos:line="612" pos:column="29">(<argument><expr><name pos:line="612" pos:column="30">allFuncsPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="612" pos:column="44">
            <block pos:line="613" pos:column="13">{
                <comment type="line" pos:line="614" pos:column="17">//MessageBox.Show("Missing imp_userInterestedFuncs.csv.", "WARNING");</comment>
                <return pos:line="615" pos:column="17">return <expr><op:operator pos:line="615" pos:column="24">-</op:operator><lit:literal type="number" pos:line="615" pos:column="25">2</lit:literal></expr>;</return>
            }</block></then></if>
	        <decl_stmt><decl><type><name pos:line="617" pos:column="17">StreamReader</name></type> <name pos:line="617" pos:column="30">allFuncs</name> =<init pos:line="617" pos:column="40"> <expr><op:operator pos:line="617" pos:column="41">new</op:operator> <call><name pos:line="617" pos:column="45">StreamReader</name><argument_list pos:line="617" pos:column="57">(<argument><expr><name pos:line="617" pos:column="58">allFuncsPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="618" pos:column="13">//if(! allFuncs.is_open())</comment>
            <comment type="line" pos:line="619" pos:column="13">//    return;</comment>

            <expr_stmt><expr><call><name><name pos:line="621" pos:column="13">MessageBox</name><op:operator pos:line="621" pos:column="23">.</op:operator><name pos:line="621" pos:column="24">Show</name></name><argument_list pos:line="621" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="621" pos:column="29">"Generate function level impact ... Wait ..."</lit:literal></expr></argument><op:operator pos:line="621" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="621" pos:column="76">"Progress"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="622" pos:column="13">//progress bar</comment>
            <comment type="line" pos:line="623" pos:column="13">//var prg = new Progress();</comment>
            <comment type="line" pos:line="624" pos:column="13">//prg.Show();</comment>

            <decl_stmt><decl><type><name pos:line="626" pos:column="13">string</name></type> <name pos:line="626" pos:column="20">funcImpFilePath</name> =<init pos:line="626" pos:column="37"> <expr><name pos:line="626" pos:column="38">workspacePos</name> <op:operator pos:line="626" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="626" pos:column="53">"\\MosaiCodeInputs\\funcImpact_MasaicodeInput.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="627" pos:column="13">StreamWriter</name></type> <name pos:line="627" pos:column="26">funcImpFile</name> =<init pos:line="627" pos:column="39"> <expr><op:operator pos:line="627" pos:column="40">new</op:operator> <call><name pos:line="627" pos:column="44">StreamWriter</name><argument_list pos:line="627" pos:column="56">(<argument><expr><name pos:line="627" pos:column="57">funcImpFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="628" pos:column="13">//if(! funcImpFile.is_open())</comment>
            <comment type="line" pos:line="629" pos:column="13">//    return;</comment>
            <expr_stmt><expr><call><name><name pos:line="630" pos:column="13">funcImpFile</name><op:operator pos:line="630" pos:column="24">.</op:operator><name pos:line="630" pos:column="25">WriteLine</name></name><argument_list pos:line="630" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="630" pos:column="35">"ID,File+Func,InBuild,NumOfLines,NumOfImpactedLines,ImpactRatio"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

	        <decl_stmt><decl><type><name pos:line="632" pos:column="17">int</name></type> <name pos:line="632" pos:column="21">count</name> =<init pos:line="632" pos:column="28"> <expr><lit:literal type="number" pos:line="632" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="633" pos:column="13">string</name></type> <name pos:line="633" pos:column="20">line</name> =<init pos:line="633" pos:column="26"> <expr><lit:literal type="string" pos:line="633" pos:column="27">""</lit:literal></expr></init></decl>;</decl_stmt>
	        <while pos:line="634" pos:column="17">while<condition pos:line="634" pos:column="22">( <expr><op:operator pos:line="634" pos:column="24">(</op:operator><name pos:line="634" pos:column="25">line</name> <op:operator pos:line="634" pos:column="30">=</op:operator> <call><name><name pos:line="634" pos:column="32">allFuncs</name><op:operator pos:line="634" pos:column="40">.</op:operator><name pos:line="634" pos:column="41">ReadLine</name></name><argument_list pos:line="634" pos:column="49">()</argument_list></call><op:operator pos:line="634" pos:column="51">)</op:operator> <op:operator pos:line="634" pos:column="53">!=</op:operator> <name pos:line="634" pos:column="56">null</name></expr>)</condition>
	        <block pos:line="635" pos:column="17">{
                <if pos:line="636" pos:column="17">if <condition pos:line="636" pos:column="20">(<expr><name pos:line="636" pos:column="21">line</name> <op:operator pos:line="636" pos:column="26">==</op:operator> <lit:literal type="string" pos:line="636" pos:column="29">""</lit:literal></expr>)</condition><then pos:line="636" pos:column="32">
        			<continue pos:line="637" pos:column="33">continue;</continue></then></if>
                
                <decl_stmt><decl><type><name pos:line="639" pos:column="17">string</name></type> <name pos:line="639" pos:column="24">fileAfunc</name> =<init pos:line="639" pos:column="35"> <expr><lit:literal type="string" pos:line="639" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="640" pos:column="25">string</name></type> <name pos:line="640" pos:column="32">file</name> =<init pos:line="640" pos:column="38"> <expr><lit:literal type="string" pos:line="640" pos:column="39">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="641" pos:column="25">string</name></type> <name pos:line="641" pos:column="32">func</name> =<init pos:line="641" pos:column="38"> <expr><lit:literal type="string" pos:line="641" pos:column="39">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="642" pos:column="25">string</name></type> <name pos:line="642" pos:column="32">num_line</name> =<init pos:line="642" pos:column="42"> <expr><lit:literal type="string" pos:line="642" pos:column="43">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="643" pos:column="25">string</name></type> <name pos:line="643" pos:column="32">is_in_build</name> =<init pos:line="643" pos:column="45"> <expr><lit:literal type="string" pos:line="643" pos:column="46">""</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="644" pos:column="25">int</name></type> <name pos:line="644" pos:column="29">num_line_imp</name> =<init pos:line="644" pos:column="43"> <expr><lit:literal type="number" pos:line="644" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="645" pos:column="25">float</name></type> <name pos:line="645" pos:column="31">ratio_imp</name> =<init pos:line="645" pos:column="42"> <expr><lit:literal type="number" pos:line="645" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		        <decl_stmt><decl><type><name pos:line="647" pos:column="25">int</name></type> <name pos:line="647" pos:column="29">pos</name> =<init pos:line="647" pos:column="34"> <expr><call><name><name pos:line="647" pos:column="35">line</name><op:operator pos:line="647" pos:column="39">.</op:operator><name pos:line="647" pos:column="40">LastIndexOf</name></name><argument_list pos:line="647" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="647" pos:column="52">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <expr_stmt><expr><name pos:line="648" pos:column="25">fileAfunc</name> <op:operator pos:line="648" pos:column="35">=</op:operator> <call><name><name pos:line="648" pos:column="37">line</name><op:operator pos:line="648" pos:column="41">.</op:operator><name pos:line="648" pos:column="42">Substring</name></name><argument_list pos:line="648" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="648" pos:column="52">0</lit:literal></expr></argument><op:operator pos:line="648" pos:column="53">,</op:operator><argument><expr><name pos:line="648" pos:column="54">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="649" pos:column="25">fileAfunc</name> <op:operator pos:line="649" pos:column="35">=</op:operator> <call><name pos:line="649" pos:column="37">removeCharInStr</name><argument_list pos:line="649" pos:column="52">(<argument><expr><name pos:line="649" pos:column="53">fileAfunc</name></expr></argument><op:operator pos:line="649" pos:column="62">,</op:operator><argument><expr><lit:literal type="char" pos:line="649" pos:column="63">'"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="649" pos:column="69">//function may be double quoted</comment>
		        <expr_stmt><expr><name pos:line="650" pos:column="25">num_line</name> <op:operator pos:line="650" pos:column="34">=</op:operator> <call><name><name pos:line="650" pos:column="36">line</name><op:operator pos:line="650" pos:column="40">.</op:operator><name pos:line="650" pos:column="41">Substring</name></name><argument_list pos:line="650" pos:column="50">(<argument><expr><name pos:line="650" pos:column="51">pos</name><op:operator pos:line="650" pos:column="54">+</op:operator><lit:literal type="number" pos:line="650" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="651" pos:column="25">pos</name> <op:operator pos:line="651" pos:column="29">=</op:operator> <call><name><name pos:line="651" pos:column="31">fileAfunc</name><op:operator pos:line="651" pos:column="40">.</op:operator><name pos:line="651" pos:column="41">IndexOf</name></name><argument_list pos:line="651" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="651" pos:column="49">","</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="652" pos:column="25">file</name> <op:operator pos:line="652" pos:column="30">=</op:operator> <call><name><name pos:line="652" pos:column="32">fileAfunc</name><op:operator pos:line="652" pos:column="41">.</op:operator><name pos:line="652" pos:column="42">Substring</name></name><argument_list pos:line="652" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="652" pos:column="52">0</lit:literal></expr></argument><op:operator pos:line="652" pos:column="53">,</op:operator><argument><expr><name pos:line="652" pos:column="54">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="653" pos:column="25">func</name> <op:operator pos:line="653" pos:column="30">=</op:operator> <call><name><name pos:line="653" pos:column="32">fileAfunc</name><op:operator pos:line="653" pos:column="41">.</op:operator><name pos:line="653" pos:column="42">Substring</name></name><argument_list pos:line="653" pos:column="51">(<argument><expr><name pos:line="653" pos:column="52">pos</name><op:operator pos:line="653" pos:column="55">+</op:operator><lit:literal type="number" pos:line="653" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		        <decl_stmt><decl><type><name pos:line="655" pos:column="25">int</name></type> <name pos:line="655" pos:column="29">it_strVec</name></decl>;</decl_stmt>
		        <if pos:line="656" pos:column="25">if<condition pos:line="656" pos:column="27">( <expr><op:operator pos:line="656" pos:column="29">(</op:operator><name pos:line="656" pos:column="30">it_strVec</name> <op:operator pos:line="656" pos:column="40">=</op:operator> <call><name><name pos:line="656" pos:column="42">files_in_build</name><op:operator pos:line="656" pos:column="56">.</op:operator><name pos:line="656" pos:column="57">FindIndex</name></name><argument_list pos:line="656" pos:column="66">(<argument><expr><name pos:line="656" pos:column="67">item</name> <op:operator pos:line="656" pos:column="72">=&gt;</op:operator> <name pos:line="656" pos:column="75">item</name> <op:operator pos:line="656" pos:column="80">==</op:operator> <name pos:line="656" pos:column="83">file</name></expr></argument>)</argument_list></call><op:operator pos:line="656" pos:column="88">)</op:operator> <op:operator pos:line="656" pos:column="90">==</op:operator> <op:operator pos:line="656" pos:column="93">-</op:operator><lit:literal type="number" pos:line="656" pos:column="94">1</lit:literal></expr>)</condition><then pos:line="656" pos:column="96"> <comment type="line" pos:line="656" pos:column="97">//is not in build</comment>
		        <block pos:line="657" pos:column="25">{
			        <expr_stmt><expr><name pos:line="658" pos:column="33">is_in_build</name> <op:operator pos:line="658" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="658" pos:column="47">"0"</lit:literal></expr>;</expr_stmt>
			        <expr_stmt><expr><name pos:line="659" pos:column="33">num_line_imp</name> <op:operator pos:line="659" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="659" pos:column="48">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="659" pos:column="51">//-1;</comment>
			        <expr_stmt><expr><name pos:line="660" pos:column="33">ratio_imp</name> <op:operator pos:line="660" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="660" pos:column="45">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="660" pos:column="48">//-1;</comment>
		        }</block></then>
		        <else pos:line="662" pos:column="25">else <comment type="line" pos:line="662" pos:column="30">//is in build, look up for impact </comment>
		        <block pos:line="663" pos:column="25">{
			        <expr_stmt><expr><name pos:line="664" pos:column="33">is_in_build</name> <op:operator pos:line="664" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="664" pos:column="47">"1"</lit:literal></expr>;</expr_stmt>
			        <expr_stmt><expr><name pos:line="665" pos:column="33">it_strVec</name> <op:operator pos:line="665" pos:column="43">=</op:operator> <call><name><name pos:line="665" pos:column="45">funcImpacted</name><op:operator pos:line="665" pos:column="57">.</op:operator><name pos:line="665" pos:column="58">FindIndex</name></name><argument_list pos:line="665" pos:column="67">(<argument><expr><name pos:line="665" pos:column="68">item</name> <op:operator pos:line="665" pos:column="73">=&gt;</op:operator> <name pos:line="665" pos:column="76">item</name> <op:operator pos:line="665" pos:column="81">==</op:operator> <name pos:line="665" pos:column="84">fileAfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        <if pos:line="666" pos:column="33">if<condition pos:line="666" pos:column="35">(<expr><name pos:line="666" pos:column="36">it_strVec</name> <op:operator pos:line="666" pos:column="46">==</op:operator> <op:operator pos:line="666" pos:column="49">-</op:operator><lit:literal type="number" pos:line="666" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="666" pos:column="52"> <comment type="line" pos:line="666" pos:column="53">//is not impacted</comment>
			        <block pos:line="667" pos:column="33">{
				        <expr_stmt><expr><name pos:line="668" pos:column="41">num_line_imp</name> <op:operator pos:line="668" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="668" pos:column="56">0</lit:literal></expr>;</expr_stmt>
				        <expr_stmt><expr><name pos:line="669" pos:column="41">ratio_imp</name> <op:operator pos:line="669" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="669" pos:column="53">0</lit:literal></expr>;</expr_stmt>
			        }</block></then>
			        <else pos:line="671" pos:column="33">else
			        <block pos:line="672" pos:column="33">{    
				        <expr_stmt><expr><name pos:line="673" pos:column="41">num_line_imp</name> <op:operator pos:line="673" pos:column="54">=</op:operator> <name><name pos:line="673" pos:column="56">lineCntImpactedPerFunc</name><index pos:line="673" pos:column="78">[<expr><name pos:line="673" pos:column="79">it_strVec</name></expr>]</index></name></expr>;</expr_stmt>
				        <expr_stmt><expr><name pos:line="674" pos:column="41">ratio_imp</name> <op:operator pos:line="674" pos:column="51">=</op:operator> <call pos:line="674" pos:column="53">(<name pos:line="674" pos:column="54">float</name>)<argument_list pos:line="674" pos:column="60">(<argument><expr><name pos:line="674" pos:column="61">num_line_imp</name></expr></argument>)</argument_list></call> <op:operator pos:line="674" pos:column="75">/</op:operator> <call><name><name pos:line="674" pos:column="77">float</name><op:operator pos:line="674" pos:column="82">.</op:operator><name pos:line="674" pos:column="83">Parse</name></name><argument_list pos:line="674" pos:column="88">(<argument><expr><name pos:line="674" pos:column="89">num_line</name></expr></argument>)</argument_list></call> <op:operator pos:line="674" pos:column="99">*</op:operator> <call pos:line="674" pos:column="101">(<name pos:line="674" pos:column="102">float</name>)<argument_list pos:line="674" pos:column="108">(<argument><expr><lit:literal type="number" pos:line="674" pos:column="109">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        }</block></else></if>

		        }</block></else></if>

		        <expr_stmt><expr><name pos:line="679" pos:column="25">file</name> <op:operator pos:line="679" pos:column="30">=</op:operator> <call><name pos:line="679" pos:column="32">replaceCharInStr</name><argument_list pos:line="679" pos:column="48">(<argument><expr><name pos:line="679" pos:column="49">file</name></expr></argument><op:operator pos:line="679" pos:column="53">,</op:operator><argument><expr><lit:literal type="char" pos:line="679" pos:column="54">'\\'</lit:literal></expr></argument><op:operator pos:line="679" pos:column="58">,</op:operator><argument><expr><lit:literal type="char" pos:line="679" pos:column="59">'/'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="680" pos:column="17">string</name></type> <name pos:line="680" pos:column="24">count2</name> =<init pos:line="680" pos:column="32"> <expr><call><name><name pos:line="680" pos:column="33">System</name><op:operator pos:line="680" pos:column="39">.</op:operator><name pos:line="680" pos:column="40">Convert</name><op:operator pos:line="680" pos:column="47">.</op:operator><name pos:line="680" pos:column="48">ToString</name></name><argument_list pos:line="680" pos:column="56">(<argument><expr><name pos:line="680" pos:column="57">count</name><op:operator pos:line="680" pos:column="62">++</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="681" pos:column="17">funcImpFile</name><op:operator pos:line="681" pos:column="28">.</op:operator><name pos:line="681" pos:column="29">WriteLine</name></name><argument_list pos:line="681" pos:column="38">(<argument><expr><name pos:line="681" pos:column="39">count2</name> <op:operator pos:line="681" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="48">","</lit:literal> <op:operator pos:line="681" pos:column="52">+</op:operator> <name pos:line="681" pos:column="54">file</name> <op:operator pos:line="681" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="61">"/"</lit:literal> <op:operator pos:line="681" pos:column="65">+</op:operator> <name pos:line="681" pos:column="67">func</name> <op:operator pos:line="681" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="74">","</lit:literal> <op:operator pos:line="681" pos:column="78">+</op:operator> <name pos:line="681" pos:column="80">is_in_build</name> <op:operator pos:line="681" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="94">","</lit:literal> <op:operator pos:line="681" pos:column="98">+</op:operator> <name pos:line="681" pos:column="100">num_line</name> <op:operator pos:line="681" pos:column="109">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="111">","</lit:literal> <op:operator pos:line="681" pos:column="115">+</op:operator> <name pos:line="681" pos:column="117">num_line_imp</name> <op:operator pos:line="681" pos:column="130">+</op:operator> <lit:literal type="string" pos:line="681" pos:column="132">","</lit:literal> <op:operator pos:line="681" pos:column="136">+</op:operator> <name pos:line="681" pos:column="138">ratio_imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

	        }</block></while> <comment type="line" pos:line="683" pos:column="19">//end of browsing all files+funcs</comment>
            
	        <expr_stmt><expr><call><name><name pos:line="685" pos:column="17">allFuncs</name><op:operator pos:line="685" pos:column="25">.</op:operator><name pos:line="685" pos:column="26">Close</name></name><argument_list pos:line="685" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name pos:line="686" pos:column="17">funcImpFile</name><op:operator pos:line="686" pos:column="28">.</op:operator><name pos:line="686" pos:column="29">Close</name></name><argument_list pos:line="686" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="687" pos:column="13">return <expr><lit:literal type="number" pos:line="687" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>
	    
        <function><type><specifier pos:line="690" pos:column="9">private</specifier> <name pos:line="690" pos:column="17">int</name></type> <name pos:line="690" pos:column="21">genImpUnionFile</name><parameter_list pos:line="690" pos:column="36">(<param><decl><type><name pos:line="690" pos:column="37">string</name></type> <name pos:line="690" pos:column="44">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="691" pos:column="9">{
            <comment type="line" pos:line="692" pos:column="13">//[in] imp_union_linesImpacted.csv</comment>
	        <comment type="line" pos:line="693" pos:column="17">//[out] imp_union_filesImpacted.csv</comment>

            <comment type="line" pos:line="695" pos:column="13">//MessageBox.Show("Generate file level impact ... Wait ...", "Progress");</comment>

	        <decl_stmt><decl><type><name><name pos:line="697" pos:column="17">List</name><argument_list pos:line="697" pos:column="21">&lt;<argument><name pos:line="697" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="697" pos:column="30">filesImpacted</name> =<init pos:line="697" pos:column="45"> <expr><op:operator pos:line="697" pos:column="46">new</op:operator> <call><name><name pos:line="697" pos:column="50">List</name><argument_list pos:line="697" pos:column="54">&lt;<argument><name pos:line="697" pos:column="55">string</name></argument>&gt;</argument_list></name><argument_list pos:line="697" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="698" pos:column="17">int</name></type> <name pos:line="698" pos:column="21">itFilesImpacted</name></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="699" pos:column="17">List</name><argument_list pos:line="699" pos:column="21">&lt;<argument><name pos:line="699" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="699" pos:column="27">numOfLineImpacted</name> =<init pos:line="699" pos:column="46"> <expr><op:operator pos:line="699" pos:column="47">new</op:operator> <call><name><name pos:line="699" pos:column="51">List</name><argument_list pos:line="699" pos:column="55">&lt;<argument><name pos:line="699" pos:column="56">int</name></argument>&gt;</argument_list></name><argument_list pos:line="699" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

	        <decl_stmt><decl><type><name pos:line="701" pos:column="17">string</name></type> <name pos:line="701" pos:column="24">unionLineFilePath</name> =<init pos:line="701" pos:column="43"> <expr><name pos:line="701" pos:column="44">workspacePos</name> <op:operator pos:line="701" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="701" pos:column="59">"\\"</lit:literal> <op:operator pos:line="701" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="701" pos:column="66">"imp_union_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>         
            <if pos:line="702" pos:column="13">if <condition pos:line="702" pos:column="16">(<expr><op:operator pos:line="702" pos:column="17">!</op:operator><call><name><name pos:line="702" pos:column="18">File</name><op:operator pos:line="702" pos:column="22">.</op:operator><name pos:line="702" pos:column="23">Exists</name></name><argument_list pos:line="702" pos:column="29">(<argument><expr><name pos:line="702" pos:column="30">unionLineFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="702" pos:column="49">
            <block pos:line="703" pos:column="13">{
                <expr_stmt><expr><name pos:line="704" pos:column="17">unionLineFilePath</name> <op:operator pos:line="704" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="704" pos:column="37">"imp_union_linesImpacted.csv"</lit:literal></expr>;</expr_stmt>
                <if pos:line="705" pos:column="17">if <condition pos:line="705" pos:column="20">(<expr><op:operator pos:line="705" pos:column="21">!</op:operator><call><name><name pos:line="705" pos:column="22">File</name><op:operator pos:line="705" pos:column="26">.</op:operator><name pos:line="705" pos:column="27">Exists</name></name><argument_list pos:line="705" pos:column="33">(<argument><expr><name pos:line="705" pos:column="34">unionLineFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="705" pos:column="53">
                <block pos:line="706" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="707" pos:column="21">MessageBox</name><op:operator pos:line="707" pos:column="31">.</op:operator><name pos:line="707" pos:column="32">Show</name></name><argument_list pos:line="707" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="707" pos:column="37">"Missing imp_union_linesImpacted.csv."</lit:literal></expr></argument><op:operator pos:line="707" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="707" pos:column="77">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="708" pos:column="21">return <expr><op:operator pos:line="708" pos:column="28">-</op:operator><lit:literal type="number" pos:line="708" pos:column="29">1</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

	        <decl_stmt><decl><type><name pos:line="712" pos:column="17">StreamReader</name></type> <name pos:line="712" pos:column="30">unionLineFile</name> =<init pos:line="712" pos:column="45"> <expr><op:operator pos:line="712" pos:column="46">new</op:operator> <call><name pos:line="712" pos:column="50">StreamReader</name><argument_list pos:line="712" pos:column="62">(<argument><expr><name pos:line="712" pos:column="63">unionLineFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	        
            <expr_stmt><expr><call><name><name pos:line="713" pos:column="13">unionLineFile</name><op:operator pos:line="713" pos:column="26">.</op:operator><name pos:line="713" pos:column="27">ReadLine</name></name><argument_list pos:line="713" pos:column="35">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="713" pos:column="39">// dummyLine</comment>
            <decl_stmt><decl><type><name pos:line="714" pos:column="13">string</name></type> <name pos:line="714" pos:column="20">line</name> =<init pos:line="714" pos:column="26"> <expr><lit:literal type="string" pos:line="714" pos:column="27">""</lit:literal></expr></init></decl>;</decl_stmt>
	        <while pos:line="715" pos:column="17">while<condition pos:line="715" pos:column="22">( <expr><op:operator pos:line="715" pos:column="24">(</op:operator><name pos:line="715" pos:column="25">line</name> <op:operator pos:line="715" pos:column="30">=</op:operator> <call><name><name pos:line="715" pos:column="32">unionLineFile</name><op:operator pos:line="715" pos:column="45">.</op:operator><name pos:line="715" pos:column="46">ReadLine</name></name><argument_list pos:line="715" pos:column="54">()</argument_list></call><op:operator pos:line="715" pos:column="56">)</op:operator> <op:operator pos:line="715" pos:column="58">!=</op:operator> <name pos:line="715" pos:column="61">null</name></expr>)</condition>
	        <block pos:line="716" pos:column="17">{
				<if pos:line="717" pos:column="33">if <condition pos:line="717" pos:column="36">(<expr><name pos:line="717" pos:column="37">line</name> <op:operator pos:line="717" pos:column="42">==</op:operator> <lit:literal type="string" pos:line="717" pos:column="45">""</lit:literal></expr>)</condition><then pos:line="717" pos:column="48">
		        	<continue pos:line="718" pos:column="33">continue;</continue></then></if>

		        <decl_stmt><decl><type><name pos:line="720" pos:column="25">int</name></type> <name pos:line="720" pos:column="29">pos</name> =<init pos:line="720" pos:column="34"> <expr><call><name><name pos:line="720" pos:column="35">line</name><op:operator pos:line="720" pos:column="39">.</op:operator><name pos:line="720" pos:column="40">IndexOf</name></name><argument_list pos:line="720" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="48">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="721" pos:column="25">string</name></type> <name pos:line="721" pos:column="32">fileName</name> =<init pos:line="721" pos:column="42"> <expr><call><name><name pos:line="721" pos:column="43">line</name><op:operator pos:line="721" pos:column="47">.</op:operator><name pos:line="721" pos:column="48">Substring</name></name><argument_list pos:line="721" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="721" pos:column="58">0</lit:literal></expr></argument><op:operator pos:line="721" pos:column="59">,</op:operator><argument><expr><name pos:line="721" pos:column="60">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		        <expr_stmt><expr><name pos:line="723" pos:column="25">itFilesImpacted</name> <op:operator pos:line="723" pos:column="41">=</op:operator> <call><name><name pos:line="723" pos:column="43">filesImpacted</name><op:operator pos:line="723" pos:column="56">.</op:operator><name pos:line="723" pos:column="57">FindIndex</name></name><argument_list pos:line="723" pos:column="66">(<argument><expr><name pos:line="723" pos:column="67">item</name> <op:operator pos:line="723" pos:column="72">=&gt;</op:operator> <name pos:line="723" pos:column="75">item</name> <op:operator pos:line="723" pos:column="80">==</op:operator> <name pos:line="723" pos:column="83">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
		        <if pos:line="724" pos:column="25">if <condition pos:line="724" pos:column="28">(<expr><name pos:line="724" pos:column="29">itFilesImpacted</name> <op:operator pos:line="724" pos:column="45">!=</op:operator> <op:operator pos:line="724" pos:column="48">-</op:operator><lit:literal type="number" pos:line="724" pos:column="49">1</lit:literal></expr>)</condition><then pos:line="724" pos:column="51"> <block pos:line="724" pos:column="52">{
				    <expr_stmt><expr><name><name pos:line="725" pos:column="37">numOfLineImpacted</name><index pos:line="725" pos:column="54">[<expr><name pos:line="725" pos:column="55">itFilesImpacted</name></expr>]</index></name><op:operator pos:line="725" pos:column="71">++</op:operator></expr>;</expr_stmt>
                }</block></then> <else pos:line="726" pos:column="19">else <block pos:line="726" pos:column="24">{
			        <expr_stmt><expr><call><name><name pos:line="727" pos:column="33">filesImpacted</name><op:operator pos:line="727" pos:column="46">.</op:operator><name pos:line="727" pos:column="47">Add</name></name><argument_list pos:line="727" pos:column="50">(<argument><expr><name pos:line="727" pos:column="51">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        <expr_stmt><expr><call><name><name pos:line="728" pos:column="33">numOfLineImpacted</name><op:operator pos:line="728" pos:column="50">.</op:operator><name pos:line="728" pos:column="51">Add</name></name><argument_list pos:line="728" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="728" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></while>
	        <expr_stmt><expr><call><name><name pos:line="731" pos:column="17">unionLineFile</name><op:operator pos:line="731" pos:column="30">.</op:operator><name pos:line="731" pos:column="31">Close</name></name><argument_list pos:line="731" pos:column="36">()</argument_list></call></expr>;</expr_stmt>

	        <decl_stmt><decl><type><name pos:line="733" pos:column="17">string</name></type> <name pos:line="733" pos:column="24">unionFileFilePath</name> =<init pos:line="733" pos:column="43"> <expr><name pos:line="733" pos:column="44">workspacePos</name> <op:operator pos:line="733" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="733" pos:column="59">"\\"</lit:literal> <op:operator pos:line="733" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="733" pos:column="66">"imp_union_filesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="734" pos:column="17">StreamWriter</name></type> <name pos:line="734" pos:column="30">unionFileFile</name> =<init pos:line="734" pos:column="45"> <expr><op:operator pos:line="734" pos:column="46">new</op:operator> <call><name pos:line="734" pos:column="50">StreamWriter</name><argument_list pos:line="734" pos:column="62">(<argument><expr><name pos:line="734" pos:column="63">unionFileFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        
	        <expr_stmt><expr><name pos:line="736" pos:column="17">fileImpacted</name> <op:operator pos:line="736" pos:column="30">=</op:operator> <name pos:line="736" pos:column="32">filesImpacted</name></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="737" pos:column="17">lineCntImpactedPerFile</name> <op:operator pos:line="737" pos:column="40">=</op:operator> <name pos:line="737" pos:column="42">numOfLineImpacted</name></expr>;</expr_stmt>

	        <expr_stmt><expr><call><name><name pos:line="739" pos:column="17">unionFileFile</name><op:operator pos:line="739" pos:column="30">.</op:operator><name pos:line="739" pos:column="31">WriteLine</name></name><argument_list pos:line="739" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="739" pos:column="41">"File_Name,Number_Line_Impacted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
            <for pos:line="741" pos:column="13">for(<init><decl><type><name pos:line="741" pos:column="17">int</name></type> <name pos:line="741" pos:column="21">i</name>=<init><expr><lit:literal type="number" pos:line="741" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="741" pos:column="26">i</name><op:operator pos:line="741" pos:column="27">&lt;</op:operator><name><name pos:line="741" pos:column="28">filesImpacted</name><op:operator pos:line="741" pos:column="41">.</op:operator><name pos:line="741" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><name pos:line="741" pos:column="49">i</name><op:operator pos:line="741" pos:column="50">++</op:operator></expr></incr>)
	        <block pos:line="742" pos:column="17">{
		        <expr_stmt><expr><call><name><name pos:line="743" pos:column="25">unionFileFile</name><op:operator pos:line="743" pos:column="38">.</op:operator><name pos:line="743" pos:column="39">WriteLine</name></name><argument_list pos:line="743" pos:column="48">(<argument><expr><name><name pos:line="743" pos:column="49">filesImpacted</name><index pos:line="743" pos:column="62">[<expr><name pos:line="743" pos:column="63">i</name></expr>]</index></name> <op:operator pos:line="743" pos:column="66">+</op:operator> <lit:literal type="string" pos:line="743" pos:column="68">","</lit:literal> <op:operator pos:line="743" pos:column="72">+</op:operator> <call><name><name pos:line="743" pos:column="74">System</name><op:operator pos:line="743" pos:column="80">.</op:operator><name pos:line="743" pos:column="81">Convert</name><op:operator pos:line="743" pos:column="88">.</op:operator><name pos:line="743" pos:column="89">ToString</name></name><argument_list pos:line="743" pos:column="97">(<argument><expr><name><name pos:line="743" pos:column="98">numOfLineImpacted</name><index pos:line="743" pos:column="115">[<expr><name pos:line="743" pos:column="116">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></for>
	 
	        <expr_stmt><expr><call><name><name pos:line="746" pos:column="17">unionFileFile</name><op:operator pos:line="746" pos:column="30">.</op:operator><name pos:line="746" pos:column="31">Close</name></name><argument_list pos:line="746" pos:column="36">()</argument_list></call></expr>;</expr_stmt>            

            <return pos:line="748" pos:column="13">return <expr><lit:literal type="number" pos:line="748" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>

	    
        <function><type><specifier pos:line="752" pos:column="9">private</specifier> <name pos:line="752" pos:column="17">int</name></type> <name pos:line="752" pos:column="21">genImpUnionFunc</name><parameter_list pos:line="752" pos:column="36">(<param><decl><type><name pos:line="752" pos:column="37">string</name></type> <name pos:line="752" pos:column="44">workspacePos</name></decl></param>)</parameter_list>
        <block pos:line="753" pos:column="9">{
            <comment type="line" pos:line="754" pos:column="13">//[in] imp_union_linesImpacted.csv</comment>
	        <comment type="line" pos:line="755" pos:column="17">//[out] imp_union_funcsImpacted.csv</comment>

	        <decl_stmt><decl><type><name><name pos:line="757" pos:column="17">List</name><argument_list pos:line="757" pos:column="21">&lt;<argument><name pos:line="757" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="757" pos:column="30">funcsImpacted</name> =<init pos:line="757" pos:column="45"> <expr><op:operator pos:line="757" pos:column="46">new</op:operator> <call><name><name pos:line="757" pos:column="50">List</name><argument_list pos:line="757" pos:column="54">&lt;<argument><name pos:line="757" pos:column="55">string</name></argument>&gt;</argument_list></name><argument_list pos:line="757" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="758" pos:column="17">int</name></type> <name pos:line="758" pos:column="21">itFuncsImpacted</name></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="759" pos:column="17">List</name><argument_list pos:line="759" pos:column="21">&lt;<argument><name pos:line="759" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="759" pos:column="27">numOfLineImpacted</name> =<init pos:line="759" pos:column="46"> <expr><op:operator pos:line="759" pos:column="47">new</op:operator> <call><name><name pos:line="759" pos:column="51">List</name><argument_list pos:line="759" pos:column="55">&lt;<argument><name pos:line="759" pos:column="56">int</name></argument>&gt;</argument_list></name><argument_list pos:line="759" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

	        <decl_stmt><decl><type><name pos:line="761" pos:column="17">string</name></type> <name pos:line="761" pos:column="24">unionLineFilePath</name> =<init pos:line="761" pos:column="43"> <expr><name pos:line="761" pos:column="44">workspacePos</name> <op:operator pos:line="761" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="761" pos:column="59">"\\"</lit:literal> <op:operator pos:line="761" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="761" pos:column="66">"imp_union_linesImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="762" pos:column="13">if <condition pos:line="762" pos:column="16">(<expr><op:operator pos:line="762" pos:column="17">!</op:operator><call><name><name pos:line="762" pos:column="18">File</name><op:operator pos:line="762" pos:column="22">.</op:operator><name pos:line="762" pos:column="23">Exists</name></name><argument_list pos:line="762" pos:column="29">(<argument><expr><name pos:line="762" pos:column="30">unionLineFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="762" pos:column="49">
            <block pos:line="763" pos:column="13">{
                <expr_stmt><expr><name pos:line="764" pos:column="17">unionLineFilePath</name> <op:operator pos:line="764" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="764" pos:column="37">"imp_union_linesImpacted.csv"</lit:literal></expr>;</expr_stmt>
                <if pos:line="765" pos:column="17">if <condition pos:line="765" pos:column="20">(<expr><op:operator pos:line="765" pos:column="21">!</op:operator><call><name><name pos:line="765" pos:column="22">File</name><op:operator pos:line="765" pos:column="26">.</op:operator><name pos:line="765" pos:column="27">Exists</name></name><argument_list pos:line="765" pos:column="33">(<argument><expr><name pos:line="765" pos:column="34">unionLineFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="765" pos:column="53">
                <block pos:line="766" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="767" pos:column="21">MessageBox</name><op:operator pos:line="767" pos:column="31">.</op:operator><name pos:line="767" pos:column="32">Show</name></name><argument_list pos:line="767" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="767" pos:column="37">"Missing imp_union_linesImpacted.csv."</lit:literal></expr></argument><op:operator pos:line="767" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="767" pos:column="77">"ERROR"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="768" pos:column="21">return <expr><op:operator pos:line="768" pos:column="28">-</op:operator><lit:literal type="number" pos:line="768" pos:column="29">1</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>


	        <decl_stmt><decl><type><name pos:line="773" pos:column="17">StreamReader</name></type> <name pos:line="773" pos:column="30">unionLineFile</name> =<init pos:line="773" pos:column="45"> <expr><op:operator pos:line="773" pos:column="46">new</op:operator> <call><name pos:line="773" pos:column="50">StreamReader</name><argument_list pos:line="773" pos:column="62">(<argument><expr><name pos:line="773" pos:column="63">unionLineFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><call><name><name pos:line="774" pos:column="17">unionLineFile</name><op:operator pos:line="774" pos:column="30">.</op:operator><name pos:line="774" pos:column="31">ReadLine</name></name><argument_list pos:line="774" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	        <decl_stmt><decl><type><name pos:line="775" pos:column="17">string</name></type> <name pos:line="775" pos:column="24">line</name> =<init pos:line="775" pos:column="30"> <expr><lit:literal type="string" pos:line="775" pos:column="31">""</lit:literal></expr></init></decl>;</decl_stmt>
	        <while pos:line="776" pos:column="17">while<condition pos:line="776" pos:column="22">( <expr><op:operator pos:line="776" pos:column="24">(</op:operator><name pos:line="776" pos:column="25">line</name> <op:operator pos:line="776" pos:column="30">=</op:operator> <call><name><name pos:line="776" pos:column="32">unionLineFile</name><op:operator pos:line="776" pos:column="45">.</op:operator><name pos:line="776" pos:column="46">ReadLine</name></name><argument_list pos:line="776" pos:column="54">()</argument_list></call><op:operator pos:line="776" pos:column="56">)</op:operator> <op:operator pos:line="776" pos:column="58">!=</op:operator> <name pos:line="776" pos:column="61">null</name></expr>)</condition>
	        <block pos:line="777" pos:column="17">{
				<if pos:line="778" pos:column="33">if <condition pos:line="778" pos:column="36">(<expr><name pos:line="778" pos:column="37">line</name> <op:operator pos:line="778" pos:column="42">==</op:operator> <lit:literal type="string" pos:line="778" pos:column="45">""</lit:literal></expr>)</condition><then pos:line="778" pos:column="48">
		        	<continue pos:line="779" pos:column="33">continue;</continue></then></if>
                
                <decl_stmt><decl><type><name pos:line="781" pos:column="17">int</name></type> <name pos:line="781" pos:column="21">pos0</name> =<init pos:line="781" pos:column="27"> <expr><call><name><name pos:line="781" pos:column="28">line</name><op:operator pos:line="781" pos:column="32">.</op:operator><name pos:line="781" pos:column="33">IndexOf</name></name><argument_list pos:line="781" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="781" pos:column="41">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="782" pos:column="25">int</name></type> <name pos:line="782" pos:column="29">pos</name> =<init pos:line="782" pos:column="34"> <expr><call><name><name pos:line="782" pos:column="35">line</name><op:operator pos:line="782" pos:column="39">.</op:operator><name pos:line="782" pos:column="40">IndexOf</name></name><argument_list pos:line="782" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="782" pos:column="48">","</lit:literal></expr></argument><op:operator pos:line="782" pos:column="51">,</op:operator><argument><expr><name pos:line="782" pos:column="52">pos0</name><op:operator pos:line="782" pos:column="56">+</op:operator><lit:literal type="number" pos:line="782" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="783" pos:column="25">string</name></type> <name pos:line="783" pos:column="32">fileAfuncName</name> =<init pos:line="783" pos:column="47"> <expr><call><name><name pos:line="783" pos:column="48">line</name><op:operator pos:line="783" pos:column="52">.</op:operator><name pos:line="783" pos:column="53">Substring</name></name><argument_list pos:line="783" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="783" pos:column="63">0</lit:literal></expr></argument><op:operator pos:line="783" pos:column="64">,</op:operator><argument><expr><name pos:line="783" pos:column="65">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <expr_stmt><expr><name pos:line="784" pos:column="25">fileAfuncName</name> <op:operator pos:line="784" pos:column="39">=</op:operator> <call><name pos:line="784" pos:column="41">removeCharInStr</name><argument_list pos:line="784" pos:column="56">(<argument><expr><name pos:line="784" pos:column="57">fileAfuncName</name></expr></argument><op:operator pos:line="784" pos:column="70">,</op:operator><argument><expr><lit:literal type="char" pos:line="784" pos:column="71">'"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="784" pos:column="77">//function name may be double quoted</comment>
		
		        <expr_stmt><expr><name pos:line="786" pos:column="25">itFuncsImpacted</name> <op:operator pos:line="786" pos:column="41">=</op:operator> <call><name><name pos:line="786" pos:column="43">funcsImpacted</name><op:operator pos:line="786" pos:column="56">.</op:operator><name pos:line="786" pos:column="57">FindIndex</name></name><argument_list pos:line="786" pos:column="66">(<argument><expr><name pos:line="786" pos:column="67">item</name> <op:operator pos:line="786" pos:column="72">=&gt;</op:operator> <name pos:line="786" pos:column="75">item</name> <op:operator pos:line="786" pos:column="80">==</op:operator> <name pos:line="786" pos:column="83">fileAfuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
		        <if pos:line="788" pos:column="25">if <condition pos:line="788" pos:column="28">(<expr><name pos:line="788" pos:column="29">itFuncsImpacted</name> <op:operator pos:line="788" pos:column="45">!=</op:operator> <op:operator pos:line="788" pos:column="48">-</op:operator><lit:literal type="number" pos:line="788" pos:column="49">1</lit:literal></expr>)</condition><then pos:line="788" pos:column="51"> <block pos:line="788" pos:column="52">{                
				    <expr_stmt><expr><name><name pos:line="789" pos:column="37">numOfLineImpacted</name><index pos:line="789" pos:column="54">[<expr><name pos:line="789" pos:column="55">itFuncsImpacted</name></expr>]</index></name><op:operator pos:line="789" pos:column="71">++</op:operator></expr>;</expr_stmt>
                 }</block></then> <else pos:line="790" pos:column="20">else <block pos:line="790" pos:column="25">{
			        <expr_stmt><expr><call><name><name pos:line="791" pos:column="33">funcsImpacted</name><op:operator pos:line="791" pos:column="46">.</op:operator><name pos:line="791" pos:column="47">Add</name></name><argument_list pos:line="791" pos:column="50">(<argument><expr><name pos:line="791" pos:column="51">fileAfuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        <expr_stmt><expr><call><name><name pos:line="792" pos:column="33">numOfLineImpacted</name><op:operator pos:line="792" pos:column="50">.</op:operator><name pos:line="792" pos:column="51">Add</name></name><argument_list pos:line="792" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="792" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></else></if>        
            }</block></while>
	        <expr_stmt><expr><call><name><name pos:line="795" pos:column="17">unionLineFile</name><op:operator pos:line="795" pos:column="30">.</op:operator><name pos:line="795" pos:column="31">Close</name></name><argument_list pos:line="795" pos:column="36">()</argument_list></call></expr>;</expr_stmt>


	        <decl_stmt><decl><type><name pos:line="798" pos:column="17">string</name></type> <name pos:line="798" pos:column="24">unionFuncFilePath</name> =<init pos:line="798" pos:column="43"> <expr><name pos:line="798" pos:column="44">workspacePos</name> <op:operator pos:line="798" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="798" pos:column="59">"\\"</lit:literal> <op:operator pos:line="798" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="798" pos:column="66">"imp_union_funcsImpacted.csv"</lit:literal></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="799" pos:column="17">StreamWriter</name></type> <name pos:line="799" pos:column="30">unionFuncFile</name> =<init pos:line="799" pos:column="45"> <expr><op:operator pos:line="799" pos:column="46">new</op:operator> <call><name pos:line="799" pos:column="50">StreamWriter</name><argument_list pos:line="799" pos:column="62">(<argument><expr><name pos:line="799" pos:column="63">unionFuncFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	        <expr_stmt><expr><name pos:line="801" pos:column="17">funcImpacted</name> <op:operator pos:line="801" pos:column="30">=</op:operator> <name pos:line="801" pos:column="32">funcsImpacted</name></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="802" pos:column="17">lineCntImpactedPerFunc</name> <op:operator pos:line="802" pos:column="40">=</op:operator> <name pos:line="802" pos:column="42">numOfLineImpacted</name></expr>;</expr_stmt>

	        <expr_stmt><expr><call><name><name pos:line="804" pos:column="17">unionFuncFile</name><op:operator pos:line="804" pos:column="30">.</op:operator><name pos:line="804" pos:column="31">WriteLine</name></name><argument_list pos:line="804" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="804" pos:column="41">"File_Name,Func_Name,Number_Line_Impacted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <for pos:line="805" pos:column="17">for(<init><decl><type><name pos:line="805" pos:column="21">int</name></type> <name pos:line="805" pos:column="25">i</name>=<init><expr><lit:literal type="number" pos:line="805" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="805" pos:column="30">i</name><op:operator pos:line="805" pos:column="31">&lt;</op:operator><name><name pos:line="805" pos:column="32">funcsImpacted</name><op:operator pos:line="805" pos:column="45">.</op:operator><name pos:line="805" pos:column="46">Count</name></name></expr>;</condition> <incr><expr><name pos:line="805" pos:column="53">i</name><op:operator pos:line="805" pos:column="54">++</op:operator></expr></incr>)
	        <block pos:line="806" pos:column="17">{
		        <decl_stmt><decl><type><name pos:line="807" pos:column="25">int</name></type> <name pos:line="807" pos:column="29">pos</name> =<init pos:line="807" pos:column="34"> <expr><name><name pos:line="807" pos:column="35">funcsImpacted</name><index pos:line="807" pos:column="48">[<expr><name pos:line="807" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="807" pos:column="51">.</op:operator><call><name pos:line="807" pos:column="52">IndexOf</name><argument_list pos:line="807" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="807" pos:column="60">","</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="808" pos:column="25">string</name></type> <name pos:line="808" pos:column="32">fileName</name> =<init pos:line="808" pos:column="42"> <expr><name><name pos:line="808" pos:column="43">funcsImpacted</name><index pos:line="808" pos:column="56">[<expr><name pos:line="808" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="808" pos:column="59">.</op:operator><call><name pos:line="808" pos:column="60">Substring</name><argument_list pos:line="808" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="808" pos:column="70">0</lit:literal></expr></argument><op:operator pos:line="808" pos:column="71">,</op:operator><argument><expr><name pos:line="808" pos:column="72">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="809" pos:column="25">string</name></type> <name pos:line="809" pos:column="32">funcName</name> =<init pos:line="809" pos:column="42"> <expr><name><name pos:line="809" pos:column="43">funcsImpacted</name><index pos:line="809" pos:column="56">[<expr><name pos:line="809" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="809" pos:column="59">.</op:operator><call><name pos:line="809" pos:column="60">Substring</name><argument_list pos:line="809" pos:column="69">(<argument><expr><name pos:line="809" pos:column="70">pos</name><op:operator pos:line="809" pos:column="73">+</op:operator><lit:literal type="number" pos:line="809" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <expr_stmt><expr><call><name><name pos:line="810" pos:column="25">unionFuncFile</name><op:operator pos:line="810" pos:column="38">.</op:operator><name pos:line="810" pos:column="39">WriteLine</name></name><argument_list pos:line="810" pos:column="48">(<argument><expr><name pos:line="810" pos:column="49">fileName</name> <op:operator pos:line="810" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="810" pos:column="60">","</lit:literal> <op:operator pos:line="810" pos:column="64">+</op:operator> <name pos:line="810" pos:column="66">funcName</name> <op:operator pos:line="810" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="810" pos:column="77">","</lit:literal> <op:operator pos:line="810" pos:column="81">+</op:operator> <call><name><name pos:line="810" pos:column="83">System</name><op:operator pos:line="810" pos:column="89">.</op:operator><name pos:line="810" pos:column="90">Convert</name><op:operator pos:line="810" pos:column="97">.</op:operator><name pos:line="810" pos:column="98">ToString</name></name><argument_list pos:line="810" pos:column="106">(<argument><expr><name><name pos:line="810" pos:column="107">numOfLineImpacted</name><index pos:line="810" pos:column="124">[<expr><name pos:line="810" pos:column="125">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></for>
	 
	        <expr_stmt><expr><call><name><name pos:line="813" pos:column="17">unionFuncFile</name><op:operator pos:line="813" pos:column="30">.</op:operator><name pos:line="813" pos:column="31">Close</name></name><argument_list pos:line="813" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="814" pos:column="13">return <expr><lit:literal type="number" pos:line="814" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>

    }</block></class>

}</block></namespace>








</unit>
