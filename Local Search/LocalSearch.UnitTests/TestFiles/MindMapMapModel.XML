<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="Local Search\LocalSearch.UnitTests\TestFiles\MindMapMapModel.java" pos:tabs="8" pos:line="1" pos:column="1">
<comment type="block" pos:line="2" pos:column="1">/*FreeMindget - A Program for creating and viewing Mindmaps
 *Copyright (C) 2000-2006  Joerg Mueller, Daniel Polansky, Christian Foltin and others.
 *See COPYING for Details
 *
 *This program is free software; you can redistribute it and/or
 *modify it under the terms of the GNU General Public License
 *as published by the Free Software Foundation; either version 2
 *of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program; if not, write to the Free Software
 *Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</comment>
<comment type="block" pos:line="20" pos:column="1">/* $Id: MindMapMapModel.java,v 1.36.14.16.2.39 2010/12/23 22:55:21 christianfoltin Exp $ */</comment>

<package pos:line="22" pos:column="1">package <name pos:line="22" pos:column="9">freemind</name>.<name pos:line="22" pos:column="18">modes</name>.<name pos:line="22" pos:column="24">mindmapmode</name>;</package>

<import pos:line="24" pos:column="1">import <name pos:line="24" pos:column="8">java</name>.<name pos:line="24" pos:column="13">awt</name>.<name pos:line="24" pos:column="17">Color</name>;</import>
<import pos:line="25" pos:column="1">import <name pos:line="25" pos:column="8">java</name>.<name pos:line="25" pos:column="13">awt</name>.<name pos:line="25" pos:column="17">EventQueue</name>;</import>
<import pos:line="26" pos:column="1">import <name pos:line="26" pos:column="8">java</name>.<name pos:line="26" pos:column="13">io</name>.<name pos:line="26" pos:column="16">BufferedReader</name>;</import>
<import pos:line="27" pos:column="1">import <name pos:line="27" pos:column="8">java</name>.<name pos:line="27" pos:column="13">io</name>.<name pos:line="27" pos:column="16">BufferedWriter</name>;</import>
<import pos:line="28" pos:column="1">import <name pos:line="28" pos:column="8">java</name>.<name pos:line="28" pos:column="13">io</name>.<name pos:line="28" pos:column="16">File</name>;</import>
<import pos:line="29" pos:column="1">import <name pos:line="29" pos:column="8">java</name>.<name pos:line="29" pos:column="13">io</name>.<name pos:line="29" pos:column="16">FileInputStream</name>;</import>
<import pos:line="30" pos:column="1">import <name pos:line="30" pos:column="8">java</name>.<name pos:line="30" pos:column="13">io</name>.<name pos:line="30" pos:column="16">FileNotFoundException</name>;</import>
<import pos:line="31" pos:column="1">import <name pos:line="31" pos:column="8">java</name>.<name pos:line="31" pos:column="13">io</name>.<name pos:line="31" pos:column="16">FileOutputStream</name>;</import>
<import pos:line="32" pos:column="1">import <name pos:line="32" pos:column="8">java</name>.<name pos:line="32" pos:column="13">io</name>.<name pos:line="32" pos:column="16">FileReader</name>;</import>
<import pos:line="33" pos:column="1">import <name pos:line="33" pos:column="8">java</name>.<name pos:line="33" pos:column="13">io</name>.<name pos:line="33" pos:column="16">IOException</name>;</import>
<import pos:line="34" pos:column="1">import <name pos:line="34" pos:column="8">java</name>.<name pos:line="34" pos:column="13">io</name>.<name pos:line="34" pos:column="16">InputStreamReader</name>;</import>
<import pos:line="35" pos:column="1">import <name pos:line="35" pos:column="8">java</name>.<name pos:line="35" pos:column="13">io</name>.<name pos:line="35" pos:column="16">OutputStreamWriter</name>;</import>
<import pos:line="36" pos:column="1">import <name pos:line="36" pos:column="8">java</name>.<name pos:line="36" pos:column="13">io</name>.<name pos:line="36" pos:column="16">Reader</name>;</import>
<import pos:line="37" pos:column="1">import <name pos:line="37" pos:column="8">java</name>.<name pos:line="37" pos:column="13">io</name>.<name pos:line="37" pos:column="16">StringReader</name>;</import>
<import pos:line="38" pos:column="1">import <name pos:line="38" pos:column="8">java</name>.<name pos:line="38" pos:column="13">io</name>.<name pos:line="38" pos:column="16">StringWriter</name>;</import>
<import pos:line="39" pos:column="1">import <name pos:line="39" pos:column="8">java</name>.<name pos:line="39" pos:column="13">io</name>.<name pos:line="39" pos:column="16">UnsupportedEncodingException</name>;</import>
<import pos:line="40" pos:column="1">import <name pos:line="40" pos:column="8">java</name>.<name pos:line="40" pos:column="13">io</name>.<name pos:line="40" pos:column="16">Writer</name>;</import>
<import pos:line="41" pos:column="1">import <name pos:line="41" pos:column="8">java</name>.<name pos:line="41" pos:column="13">lang</name>.<name pos:line="41" pos:column="18">reflect</name>.<name pos:line="41" pos:column="26">InvocationTargetException</name>;</import>
<import pos:line="42" pos:column="1">import <name pos:line="42" pos:column="8">java</name>.<name pos:line="42" pos:column="13">net</name>.<name pos:line="42" pos:column="17">URISyntaxException</name>;</import>
<import pos:line="43" pos:column="1">import <name pos:line="43" pos:column="8">java</name>.<name pos:line="43" pos:column="13">net</name>.<name pos:line="43" pos:column="17">URL</name>;</import>
<import pos:line="44" pos:column="1">import <name pos:line="44" pos:column="8">java</name>.<name pos:line="44" pos:column="13">nio</name>.<name pos:line="44" pos:column="17">channels</name>.<name pos:line="44" pos:column="26">FileLock</name>;</import>
<import pos:line="45" pos:column="1">import <name pos:line="45" pos:column="8">java</name>.<name pos:line="45" pos:column="13">util</name>.<name pos:line="45" pos:column="18">HashMap</name>;</import>
<import pos:line="46" pos:column="1">import <name pos:line="46" pos:column="8">java</name>.<name pos:line="46" pos:column="13">util</name>.<name pos:line="46" pos:column="18">HashSet</name>;</import>
<import pos:line="47" pos:column="1">import <name pos:line="47" pos:column="8">java</name>.<name pos:line="47" pos:column="13">util</name>.<name pos:line="47" pos:column="18">Iterator</name>;</import>
<import pos:line="48" pos:column="1">import <name pos:line="48" pos:column="8">java</name>.<name pos:line="48" pos:column="13">util</name>.<name pos:line="48" pos:column="18">List</name>;</import>
<import pos:line="49" pos:column="1">import <name pos:line="49" pos:column="8">java</name>.<name pos:line="49" pos:column="13">util</name>.<name pos:line="49" pos:column="18">ListIterator</name>;</import>
<import pos:line="50" pos:column="1">import <name pos:line="50" pos:column="8">java</name>.<name pos:line="50" pos:column="13">util</name>.<name pos:line="50" pos:column="18">Timer</name>;</import>
<import pos:line="51" pos:column="1">import <name pos:line="51" pos:column="8">java</name>.<name pos:line="51" pos:column="13">util</name>.<name pos:line="51" pos:column="18">TimerTask</name>;</import>
<import pos:line="52" pos:column="1">import <name pos:line="52" pos:column="8">java</name>.<name pos:line="52" pos:column="13">util</name>.<name pos:line="52" pos:column="18">Vector</name>;</import>

<import pos:line="54" pos:column="1">import <name pos:line="54" pos:column="8">javax</name>.<name pos:line="54" pos:column="14">swing</name>.<name pos:line="54" pos:column="20">JOptionPane</name>;</import>

<import pos:line="56" pos:column="1">import <name pos:line="56" pos:column="8">freemind</name>.<name pos:line="56" pos:column="17">common</name>.<name pos:line="56" pos:column="24">OptionalDontShowMeAgainDialog</name>;</import>
<import pos:line="57" pos:column="1">import <name pos:line="57" pos:column="8">freemind</name>.<name pos:line="57" pos:column="17">common</name>.<name pos:line="57" pos:column="24">UnicodeReader</name>;</import>
<import pos:line="58" pos:column="1">import <name pos:line="58" pos:column="8">freemind</name>.<name pos:line="58" pos:column="17">main</name>.<name pos:line="58" pos:column="22">FreeMind</name>;</import>
<import pos:line="59" pos:column="1">import <name pos:line="59" pos:column="8">freemind</name>.<name pos:line="59" pos:column="17">main</name>.<name pos:line="59" pos:column="22">FreeMindMain</name>;</import>
<import pos:line="60" pos:column="1">import <name pos:line="60" pos:column="8">freemind</name>.<name pos:line="60" pos:column="17">main</name>.<name pos:line="60" pos:column="22">HtmlTools</name>;</import>
<import pos:line="61" pos:column="1">import <name pos:line="61" pos:column="8">freemind</name>.<name pos:line="61" pos:column="17">main</name>.<name pos:line="61" pos:column="22">Resources</name>;</import>
<import pos:line="62" pos:column="1">import <name pos:line="62" pos:column="8">freemind</name>.<name pos:line="62" pos:column="17">main</name>.<name pos:line="62" pos:column="22">Tools</name>;</import>
<import pos:line="63" pos:column="1">import <name pos:line="63" pos:column="8">freemind</name>.<name pos:line="63" pos:column="17">main</name>.<name pos:line="63" pos:column="22">XMLParseException</name>;</import>
<import pos:line="64" pos:column="1">import <name pos:line="64" pos:column="8">freemind</name>.<name pos:line="64" pos:column="17">modes</name>.<name pos:line="64" pos:column="23">LinkRegistryAdapter</name>;</import>
<import pos:line="65" pos:column="1">import <name pos:line="65" pos:column="8">freemind</name>.<name pos:line="65" pos:column="17">modes</name>.<name pos:line="65" pos:column="23">MapAdapter</name>;</import>
<import pos:line="66" pos:column="1">import <name pos:line="66" pos:column="8">freemind</name>.<name pos:line="66" pos:column="17">modes</name>.<name pos:line="66" pos:column="23">MindMapLinkRegistry</name>;</import>
<import pos:line="67" pos:column="1">import <name pos:line="67" pos:column="8">freemind</name>.<name pos:line="67" pos:column="17">modes</name>.<name pos:line="67" pos:column="23">MindMapNode</name>;</import>
<import pos:line="68" pos:column="1">import <name pos:line="68" pos:column="8">freemind</name>.<name pos:line="68" pos:column="17">modes</name>.<name pos:line="68" pos:column="23">ModeController</name>;</import>
<import pos:line="69" pos:column="1">import <name pos:line="69" pos:column="8">freemind</name>.<name pos:line="69" pos:column="17">modes</name>.<name pos:line="69" pos:column="23">NodeAdapter</name>;</import>


<class><specifier pos:line="72" pos:column="1">public</specifier> class <name pos:line="72" pos:column="14">MindMapMapModel</name> <super><extends pos:line="72" pos:column="30">extends <name pos:line="72" pos:column="38">MapAdapter</name></extends></super>  <block pos:line="72" pos:column="50">{

    <decl_stmt><decl><type><specifier pos:line="74" pos:column="5">public</specifier> <specifier pos:line="74" pos:column="12">static</specifier> <specifier pos:line="74" pos:column="19">final</specifier> <name pos:line="74" pos:column="25">String</name></type> <name pos:line="74" pos:column="32">MAP_INITIAL_START</name> =<init pos:line="74" pos:column="51"> <expr><lit:literal type="string" pos:line="74" pos:column="52">"&lt;map version=\""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="75" pos:column="9">public</specifier> <specifier pos:line="75" pos:column="16">static</specifier> <specifier pos:line="75" pos:column="23">final</specifier> <name pos:line="75" pos:column="29">String</name></type> <name pos:line="75" pos:column="36">RESTORE_MODE_MIND_MAP</name> =<init pos:line="75" pos:column="59"> <expr><lit:literal type="string" pos:line="75" pos:column="60">"MindMap:"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="76" pos:column="9">private</specifier> <specifier pos:line="76" pos:column="17">static</specifier> <specifier pos:line="76" pos:column="24">final</specifier> <name pos:line="76" pos:column="30">String</name></type> <name pos:line="76" pos:column="37">FREEMIND_VERSION_UPDATER_XSLT</name> =<init pos:line="76" pos:column="68"> <expr><lit:literal type="string" pos:line="76" pos:column="69">"freemind/modes/mindmapmode/freemind_version_updater.xslt"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">LockManager</name></type> <name pos:line="77" pos:column="21">lockManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="78" pos:column="5">private</specifier> <name pos:line="78" pos:column="13">MindMapLinkRegistry</name></type> <name pos:line="78" pos:column="33">linkRegistry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="79" pos:column="5">private</specifier> <name pos:line="79" pos:column="13">Timer</name></type> <name pos:line="79" pos:column="19">timerForAutomaticSaving</name></decl>;</decl_stmt>
    <comment type="javadoc" pos:line="80" pos:column="5">/** The current version and all other version that don't need 
     * XML update for sure. */</comment>
    <decl_stmt><decl><type><specifier pos:line="82" pos:column="5">public</specifier> <specifier pos:line="82" pos:column="12">static</specifier> <specifier pos:line="82" pos:column="19">final</specifier> <name pos:line="82" pos:column="25">String</name></type> <name><name pos:line="82" pos:column="32">EXPECTED_START_STRINGS</name><index pos:line="82" pos:column="54">[]</index></name> =<init pos:line="82" pos:column="58"> <expr><block pos:line="82" pos:column="59">{
            <expr><name pos:line="83" pos:column="13">MAP_INITIAL_START</name> <op:operator pos:line="83" pos:column="31">+</op:operator> <name pos:line="83" pos:column="33">FreeMind</name><op:operator pos:line="83" pos:column="41">.</op:operator><name pos:line="83" pos:column="42">XML_VERSION</name> <op:operator pos:line="83" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="83" pos:column="56">"\""</lit:literal></expr>,
            <expr><name pos:line="84" pos:column="13">MAP_INITIAL_START</name> <op:operator pos:line="84" pos:column="31">+</op:operator>
            <lit:literal type="string" pos:line="85" pos:column="13">"0.7.1\""</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="87" pos:column="5">//</comment>
    <comment type="line" pos:line="88" pos:column="5">// Constructors</comment>
    <comment type="line" pos:line="89" pos:column="5">//</comment>

    <constructor><specifier pos:line="91" pos:column="5">public</specifier> <name pos:line="91" pos:column="12">MindMapMapModel</name><parameter_list pos:line="91" pos:column="27">(<param><decl><type><name pos:line="91" pos:column="28">FreeMindMain</name></type> <name pos:line="91" pos:column="41">frame</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="48">ModeController</name></type> <name pos:line="91" pos:column="63">modeController</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="79">{
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">this</name><argument_list pos:line="92" pos:column="13">(<argument><expr><name pos:line="92" pos:column="14">null</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="20">frame</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="27">modeController</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier pos:line="95" pos:column="5">public</specifier> <name pos:line="95" pos:column="12">MindMapMapModel</name><parameter_list pos:line="95" pos:column="27">( <param><decl><type><name pos:line="95" pos:column="29">MindMapNodeModel</name></type> <name pos:line="95" pos:column="46">root</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="52">FreeMindMain</name></type> <name pos:line="95" pos:column="65">frame</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="72">ModeController</name></type> <name pos:line="95" pos:column="87">modeController</name></decl></param> )</parameter_list> <block pos:line="95" pos:column="104">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">super</name><argument_list pos:line="96" pos:column="14">(<argument><expr><name pos:line="96" pos:column="15">frame</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="22">modeController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="97" pos:column="9">lockManager</name> <op:operator pos:line="97" pos:column="21">=</op:operator> <call><name><name pos:line="97" pos:column="23">Resources</name><op:operator pos:line="97" pos:column="32">.</op:operator><name pos:line="97" pos:column="33">getInstance</name></name><argument_list pos:line="97" pos:column="44">()</argument_list></call><op:operator pos:line="97" pos:column="46">.</op:operator><call><name pos:line="97" pos:column="47">getBoolProperty</name><argument_list pos:line="97" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="63">"experimental_file_locking_on"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="95">?</op:operator>
           <op:operator pos:line="98" pos:column="12">new</op:operator> <call><name pos:line="98" pos:column="16">LockManager</name><argument_list pos:line="98" pos:column="27">()</argument_list></call> <op:operator pos:line="98" pos:column="30">:</op:operator> <op:operator pos:line="98" pos:column="32">new</op:operator> <call><name pos:line="98" pos:column="36">DummyLockManager</name><argument_list pos:line="98" pos:column="52">()</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="100" pos:column="9">// register new LinkRegistryAdapter</comment>
        <expr_stmt><expr><name pos:line="101" pos:column="9">linkRegistry</name> <op:operator pos:line="101" pos:column="22">=</op:operator> <op:operator pos:line="101" pos:column="24">new</op:operator> <call><name pos:line="101" pos:column="28">LinkRegistryAdapter</name><argument_list pos:line="101" pos:column="47">()</argument_list></call></expr>;</expr_stmt>

        <if pos:line="103" pos:column="9">if<condition pos:line="103" pos:column="11">(<expr><name pos:line="103" pos:column="12">root</name> <op:operator pos:line="103" pos:column="17">==</op:operator> <name pos:line="103" pos:column="20">null</name></expr>)</condition><then pos:line="103" pos:column="25">
            <expr_stmt><expr><name pos:line="104" pos:column="13">root</name> <op:operator pos:line="104" pos:column="18">=</op:operator> <op:operator pos:line="104" pos:column="20">new</op:operator> <call><name pos:line="104" pos:column="24">MindMapNodeModel</name><argument_list pos:line="104" pos:column="40">( <argument><expr><call><name><name pos:line="104" pos:column="42">frame</name><op:operator pos:line="104" pos:column="47">.</op:operator><name pos:line="104" pos:column="48">getResourceString</name></name><argument_list pos:line="104" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="66">"new_mindmap"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="104" pos:column="82">frame</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="89">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">setRoot</name><argument_list pos:line="105" pos:column="16">(<argument><expr><name pos:line="105" pos:column="17">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="106" pos:column="9">readOnly</name> <op:operator pos:line="106" pos:column="18">=</op:operator> <name pos:line="106" pos:column="20">false</name></expr>;</expr_stmt>
        <comment type="line" pos:line="107" pos:column="9">// automatic save: start timer after the map is completely loaded</comment>
        <expr_stmt><expr><call><name><name pos:line="108" pos:column="9">EventQueue</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">invokeLater</name></name><argument_list pos:line="108" pos:column="31">(<argument><expr><op:operator pos:line="108" pos:column="32">new</op:operator> <class><super><name pos:line="108" pos:column="36">Runnable</name></super><argument_list pos:line="108" pos:column="44">()</argument_list><block pos:line="108" pos:column="46">{
	   
			<function><type><specifier pos:line="110" pos:column="25">public</specifier> <name pos:line="110" pos:column="32">void</name></type> <name pos:line="110" pos:column="37">run</name><parameter_list pos:line="110" pos:column="40">()</parameter_list> <block pos:line="110" pos:column="43">{
		       <expr_stmt><expr><call><name pos:line="111" pos:column="24">scheduleTimerForAutomaticSaving</name><argument_list pos:line="111" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			}</block></function>}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line" pos:line="115" pos:column="5">//</comment>

    <function><type><specifier pos:line="117" pos:column="5">public</specifier> <name pos:line="117" pos:column="12">MindMapLinkRegistry</name></type> <name pos:line="117" pos:column="32">getLinkRegistry</name><parameter_list pos:line="117" pos:column="47">()</parameter_list> <block pos:line="117" pos:column="50">{
        <return pos:line="118" pos:column="9">return <expr><name pos:line="118" pos:column="16">linkRegistry</name></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="121" pos:column="5">public</specifier> <name pos:line="121" pos:column="12">String</name></type> <name pos:line="121" pos:column="19">getRestoreable</name><parameter_list pos:line="121" pos:column="33">()</parameter_list> <block pos:line="121" pos:column="36">{
       <return pos:line="122" pos:column="8">return <expr><call><name pos:line="122" pos:column="15">getFile</name><argument_list pos:line="122" pos:column="22">()</argument_list></call><op:operator pos:line="122" pos:column="24">==</op:operator><name pos:line="122" pos:column="26">null</name> <op:operator pos:line="122" pos:column="31">?</op:operator> <name pos:line="122" pos:column="33">null</name> <op:operator pos:line="122" pos:column="38">:</op:operator> <name pos:line="122" pos:column="40">RESTORE_MODE_MIND_MAP</name><op:operator pos:line="122" pos:column="61">+</op:operator><call><name pos:line="122" pos:column="62">getFile</name><argument_list pos:line="122" pos:column="69">()</argument_list></call><op:operator pos:line="122" pos:column="71">.</op:operator><call><name pos:line="122" pos:column="72">getAbsolutePath</name><argument_list pos:line="122" pos:column="87">()</argument_list></call></expr>;</return> }</block></function>

    <function><type><specifier pos:line="124" pos:column="5">public</specifier> <name pos:line="124" pos:column="12">void</name></type> <name pos:line="124" pos:column="17">changeNode</name><parameter_list pos:line="124" pos:column="27">(<param><decl><type><name pos:line="124" pos:column="28">MindMapNode</name></type> <name pos:line="124" pos:column="40">node</name></decl></param>, <param><decl><type><name pos:line="124" pos:column="46">String</name></type> <name pos:line="124" pos:column="53">newText</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="62">{
       <if pos:line="125" pos:column="8">if <condition pos:line="125" pos:column="11">(<expr><call><name><name pos:line="125" pos:column="12">node</name><op:operator pos:line="125" pos:column="16">.</op:operator><name pos:line="125" pos:column="17">toString</name></name><argument_list pos:line="125" pos:column="25">()</argument_list></call><op:operator pos:line="125" pos:column="27">.</op:operator><call><name pos:line="125" pos:column="28">startsWith</name><argument_list pos:line="125" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="39">"&lt;html&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="49"> <block pos:line="125" pos:column="50">{
          <expr_stmt><expr><call><name><name pos:line="126" pos:column="11">node</name><op:operator pos:line="126" pos:column="15">.</op:operator><name pos:line="126" pos:column="16">setUserObject</name></name><argument_list pos:line="126" pos:column="29">(<argument><expr><call><name><name pos:line="126" pos:column="30">HtmlTools</name><op:operator pos:line="126" pos:column="39">.</op:operator><name pos:line="126" pos:column="40">unescapeHTMLUnicodeEntity</name></name><argument_list pos:line="126" pos:column="65">(<argument><expr><name pos:line="126" pos:column="66">newText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then>
       <else pos:line="127" pos:column="8">else <block pos:line="127" pos:column="13">{
          <expr_stmt><expr><call><name><name pos:line="128" pos:column="11">node</name><op:operator pos:line="128" pos:column="15">.</op:operator><name pos:line="128" pos:column="16">setUserObject</name></name><argument_list pos:line="128" pos:column="29">(<argument><expr><name pos:line="128" pos:column="30">newText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
       <expr_stmt><expr><call><name pos:line="129" pos:column="8">nodeChanged</name><argument_list pos:line="129" pos:column="19">(<argument><expr><name pos:line="129" pos:column="20">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

    <comment type="line" pos:line="131" pos:column="5">//</comment>
    <comment type="line" pos:line="132" pos:column="5">// Other methods</comment>
    <comment type="line" pos:line="133" pos:column="5">//</comment>

    <function><type><specifier pos:line="135" pos:column="5">public</specifier> <name pos:line="135" pos:column="12">String</name></type> <name pos:line="135" pos:column="19">toString</name><parameter_list pos:line="135" pos:column="27">()</parameter_list> <block pos:line="135" pos:column="30">{
       <return pos:line="136" pos:column="8">return <expr><call><name pos:line="136" pos:column="15">getFile</name><argument_list pos:line="136" pos:column="22">()</argument_list></call> <op:operator pos:line="136" pos:column="25">==</op:operator> <name pos:line="136" pos:column="28">null</name> <op:operator pos:line="136" pos:column="33">?</op:operator> <name pos:line="136" pos:column="35">null</name> <op:operator pos:line="136" pos:column="40">:</op:operator> <call><name pos:line="136" pos:column="42">getFile</name><argument_list pos:line="136" pos:column="49">()</argument_list></call><op:operator pos:line="136" pos:column="51">.</op:operator><call><name pos:line="136" pos:column="52">getName</name><argument_list pos:line="136" pos:column="59">()</argument_list></call></expr>;</return> }</block></function>

    <comment type="line" pos:line="138" pos:column="5">//</comment>
    <comment type="line" pos:line="139" pos:column="5">// Export and saving</comment>
    <comment type="line" pos:line="140" pos:column="5">//</comment>

   <function><type><specifier pos:line="142" pos:column="4">public</specifier> <name pos:line="142" pos:column="11">String</name></type> <name pos:line="142" pos:column="18">getAsHTML</name><parameter_list pos:line="142" pos:column="27">(<param><decl><type><name pos:line="142" pos:column="28">List</name></type> <name pos:line="142" pos:column="33">mindMapNodes</name></decl></param>)</parameter_list> <block pos:line="142" pos:column="47">{
       <comment type="line" pos:line="143" pos:column="8">// Returns success of the operation.</comment>
       <try pos:line="144" pos:column="8">try <block pos:line="144" pos:column="12">{
           <decl_stmt><decl><type><name pos:line="145" pos:column="12">StringWriter</name></type> <name pos:line="145" pos:column="25">stringWriter</name> =<init pos:line="145" pos:column="39"> <expr><op:operator pos:line="145" pos:column="40">new</op:operator> <call><name pos:line="145" pos:column="44">StringWriter</name><argument_list pos:line="145" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name pos:line="146" pos:column="12">BufferedWriter</name></type> <name pos:line="146" pos:column="27">fileout</name> =<init pos:line="146" pos:column="36"> <expr><op:operator pos:line="146" pos:column="37">new</op:operator> <call><name pos:line="146" pos:column="41">BufferedWriter</name><argument_list pos:line="146" pos:column="55">(<argument><expr><name pos:line="146" pos:column="56">stringWriter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name pos:line="147" pos:column="12">MindMapController</name><op:operator pos:line="147" pos:column="29">.</op:operator><name pos:line="147" pos:column="30">saveHTML</name></name><argument_list pos:line="147" pos:column="38">(<argument><expr><name pos:line="147" pos:column="39">mindMapNodes</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="53">fileout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="148" pos:column="12">fileout</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">close</name></name><argument_list pos:line="148" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
           
           <return pos:line="150" pos:column="12">return <expr><call><name><name pos:line="150" pos:column="19">stringWriter</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">toString</name></name><argument_list pos:line="150" pos:column="40">()</argument_list></call></expr>;</return>
       }</block> <catch pos:line="151" pos:column="10">catch(<param><decl><type><name pos:line="151" pos:column="16">Exception</name></type> <name pos:line="151" pos:column="26">e</name></decl></param>) <block pos:line="151" pos:column="29">{
           <expr_stmt><expr><call><name><name pos:line="152" pos:column="12">freemind</name><op:operator pos:line="152" pos:column="20">.</op:operator><name pos:line="152" pos:column="21">main</name><op:operator pos:line="152" pos:column="25">.</op:operator><name pos:line="152" pos:column="26">Resources</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">getInstance</name></name><argument_list pos:line="152" pos:column="47">()</argument_list></call><op:operator pos:line="152" pos:column="49">.</op:operator><call><name pos:line="152" pos:column="50">logException</name><argument_list pos:line="152" pos:column="62">(<argument><expr><name pos:line="152" pos:column="63">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return pos:line="153" pos:column="12">return <expr><name pos:line="153" pos:column="19">null</name></expr>;</return>
       }</block></catch></try>
   }</block></function>

    <function><type><specifier pos:line="157" pos:column="5">public</specifier> <name pos:line="157" pos:column="12">String</name></type> <name pos:line="157" pos:column="19">getAsPlainText</name><parameter_list pos:line="157" pos:column="33">(<param><decl><type><name pos:line="157" pos:column="34">List</name></type> <name pos:line="157" pos:column="39">mindMapNodes</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="53">{
        <comment type="line" pos:line="158" pos:column="9">// Returns success of the operation.</comment>
        <try pos:line="159" pos:column="9">try <block pos:line="159" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">StringWriter</name></type> <name pos:line="160" pos:column="26">stringWriter</name> =<init pos:line="160" pos:column="40"> <expr><op:operator pos:line="160" pos:column="41">new</op:operator> <call><name pos:line="160" pos:column="45">StringWriter</name><argument_list pos:line="160" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">BufferedWriter</name></type> <name pos:line="161" pos:column="28">fileout</name> =<init pos:line="161" pos:column="37"> <expr><op:operator pos:line="161" pos:column="38">new</op:operator> <call><name pos:line="161" pos:column="42">BufferedWriter</name><argument_list pos:line="161" pos:column="56">(<argument><expr><name pos:line="161" pos:column="57">stringWriter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="163" pos:column="13">for(<init><decl><type><name pos:line="163" pos:column="17">ListIterator</name></type> <name pos:line="163" pos:column="30">it</name>=<init><expr><call><name><name pos:line="163" pos:column="33">mindMapNodes</name><op:operator pos:line="163" pos:column="45">.</op:operator><name pos:line="163" pos:column="46">listIterator</name></name><argument_list pos:line="163" pos:column="58">()</argument_list></call></expr></init></decl>;</init><condition><expr><call><name><name pos:line="163" pos:column="61">it</name><op:operator pos:line="163" pos:column="63">.</op:operator><name pos:line="163" pos:column="64">hasNext</name></name><argument_list pos:line="163" pos:column="71">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="163" pos:column="76">{
               <expr_stmt><expr><op:operator pos:line="164" pos:column="16">(</op:operator><op:operator pos:line="164" pos:column="17">(</op:operator><name pos:line="164" pos:column="18">MindMapNodeModel</name><op:operator pos:line="164" pos:column="34">)</op:operator><call><name><name pos:line="164" pos:column="35">it</name><op:operator pos:line="164" pos:column="37">.</op:operator><name pos:line="164" pos:column="38">next</name></name><argument_list pos:line="164" pos:column="42">()</argument_list></call><op:operator pos:line="164" pos:column="44">)</op:operator><op:operator pos:line="164" pos:column="45">.</op:operator><call><name pos:line="164" pos:column="46">saveTXT</name><argument_list pos:line="164" pos:column="53">(<argument><expr><name pos:line="164" pos:column="54">fileout</name></expr></argument>,<comment type="block" pos:line="164" pos:column="62">/*depth=*/</comment><argument><expr><lit:literal type="number" pos:line="164" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>

            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">fileout</name><op:operator pos:line="166" pos:column="20">.</op:operator><name pos:line="166" pos:column="21">close</name></name><argument_list pos:line="166" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="167" pos:column="13">return <expr><call><name><name pos:line="167" pos:column="20">stringWriter</name><op:operator pos:line="167" pos:column="32">.</op:operator><name pos:line="167" pos:column="33">toString</name></name><argument_list pos:line="167" pos:column="41">()</argument_list></call></expr>;</return>

        }</block> <catch pos:line="169" pos:column="11">catch(<param><decl><type><name pos:line="169" pos:column="17">Exception</name></type> <name pos:line="169" pos:column="27">e</name></decl></param>) <block pos:line="169" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">freemind</name><op:operator pos:line="170" pos:column="21">.</op:operator><name pos:line="170" pos:column="22">main</name><op:operator pos:line="170" pos:column="26">.</op:operator><name pos:line="170" pos:column="27">Resources</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">getInstance</name></name><argument_list pos:line="170" pos:column="48">()</argument_list></call><op:operator pos:line="170" pos:column="50">.</op:operator><call><name pos:line="170" pos:column="51">logException</name><argument_list pos:line="170" pos:column="63">(<argument><expr><name pos:line="170" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="171" pos:column="13">return <expr><name pos:line="171" pos:column="20">null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

   <function><type><specifier pos:line="175" pos:column="4">public</specifier> <name pos:line="175" pos:column="11">boolean</name></type> <name pos:line="175" pos:column="19">saveTXT</name><parameter_list pos:line="175" pos:column="26">(<param><decl><type><name pos:line="175" pos:column="27">MindMapNodeModel</name></type> <name pos:line="175" pos:column="44">rootNodeOfBranch</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="62">File</name></type> <name pos:line="175" pos:column="67">file</name></decl></param>)</parameter_list> <block pos:line="175" pos:column="73">{
        <comment type="line" pos:line="176" pos:column="9">// Returns success of the operation.</comment>
        <try pos:line="177" pos:column="9">try <block pos:line="177" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="178" pos:column="13">BufferedWriter</name></type> <name pos:line="178" pos:column="28">fileout</name> =<init pos:line="178" pos:column="37"> <expr><op:operator pos:line="178" pos:column="38">new</op:operator> <call><name pos:line="178" pos:column="42">BufferedWriter</name><argument_list pos:line="178" pos:column="56">( <argument><expr><op:operator pos:line="178" pos:column="58">new</op:operator> <call><name pos:line="178" pos:column="62">OutputStreamWriter</name><argument_list pos:line="178" pos:column="80">( <argument><expr><op:operator pos:line="178" pos:column="82">new</op:operator> <call><name pos:line="178" pos:column="86">FileOutputStream</name><argument_list pos:line="178" pos:column="102">(<argument><expr><name pos:line="178" pos:column="103">file</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">rootNodeOfBranch</name><op:operator pos:line="179" pos:column="29">.</op:operator><name pos:line="179" pos:column="30">saveTXT</name></name><argument_list pos:line="179" pos:column="37">(<argument><expr><name pos:line="179" pos:column="38">fileout</name></expr></argument>,<comment type="block" pos:line="179" pos:column="46">/*depth=*/</comment><argument><expr><lit:literal type="number" pos:line="179" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">fileout</name><op:operator pos:line="180" pos:column="20">.</op:operator><name pos:line="180" pos:column="21">close</name></name><argument_list pos:line="180" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="181" pos:column="13">return <expr><name pos:line="181" pos:column="20">true</name></expr>;</return>

        }</block> <catch pos:line="183" pos:column="11">catch(<param><decl><type><name pos:line="183" pos:column="17">Exception</name></type> <name pos:line="183" pos:column="27">e</name></decl></param>) <block pos:line="183" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">System</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">err</name><op:operator pos:line="184" pos:column="23">.</op:operator><name pos:line="184" pos:column="24">println</name></name><argument_list pos:line="184" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="32">"Error in MindMapMapModel.saveTXT(): "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">freemind</name><op:operator pos:line="185" pos:column="21">.</op:operator><name pos:line="185" pos:column="22">main</name><op:operator pos:line="185" pos:column="26">.</op:operator><name pos:line="185" pos:column="27">Resources</name><op:operator pos:line="185" pos:column="36">.</op:operator><name pos:line="185" pos:column="37">getInstance</name></name><argument_list pos:line="185" pos:column="48">()</argument_list></call><op:operator pos:line="185" pos:column="50">.</op:operator><call><name pos:line="185" pos:column="51">logException</name><argument_list pos:line="185" pos:column="63">(<argument><expr><name pos:line="185" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="186" pos:column="13">return <expr><name pos:line="186" pos:column="20">false</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier pos:line="190" pos:column="5">public</specifier> <name pos:line="190" pos:column="12">String</name></type> <name pos:line="190" pos:column="19">getAsRTF</name><parameter_list pos:line="190" pos:column="27">(<param><decl><type><name pos:line="190" pos:column="28">List</name></type> <name pos:line="190" pos:column="33">mindMapNodes</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="47">{
        <comment type="line" pos:line="191" pos:column="9">// Returns success of the operation.</comment>
        <try pos:line="192" pos:column="9">try <block pos:line="192" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">StringWriter</name></type> <name pos:line="193" pos:column="26">stringWriter</name> =<init pos:line="193" pos:column="40"> <expr><op:operator pos:line="193" pos:column="41">new</op:operator> <call><name pos:line="193" pos:column="45">StringWriter</name><argument_list pos:line="193" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">BufferedWriter</name></type> <name pos:line="194" pos:column="28">fileout</name> =<init pos:line="194" pos:column="37"> <expr><op:operator pos:line="194" pos:column="38">new</op:operator> <call><name pos:line="194" pos:column="42">BufferedWriter</name><argument_list pos:line="194" pos:column="56">(<argument><expr><name pos:line="194" pos:column="57">stringWriter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="195" pos:column="13">saveRTF</name><argument_list pos:line="195" pos:column="20">(<argument><expr><name pos:line="195" pos:column="21">mindMapNodes</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="35">fileout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">fileout</name><op:operator pos:line="196" pos:column="20">.</op:operator><name pos:line="196" pos:column="21">close</name></name><argument_list pos:line="196" pos:column="26">()</argument_list></call></expr>;</expr_stmt>

            <return pos:line="198" pos:column="13">return <expr><call><name><name pos:line="198" pos:column="20">stringWriter</name><op:operator pos:line="198" pos:column="32">.</op:operator><name pos:line="198" pos:column="33">toString</name></name><argument_list pos:line="198" pos:column="41">()</argument_list></call></expr>;</return>
        }</block> <catch pos:line="199" pos:column="11">catch(<param><decl><type><name pos:line="199" pos:column="17">Exception</name></type> <name pos:line="199" pos:column="27">e</name></decl></param>) <block pos:line="199" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="200" pos:column="13">freemind</name><op:operator pos:line="200" pos:column="21">.</op:operator><name pos:line="200" pos:column="22">main</name><op:operator pos:line="200" pos:column="26">.</op:operator><name pos:line="200" pos:column="27">Resources</name><op:operator pos:line="200" pos:column="36">.</op:operator><name pos:line="200" pos:column="37">getInstance</name></name><argument_list pos:line="200" pos:column="48">()</argument_list></call><op:operator pos:line="200" pos:column="50">.</op:operator><call><name pos:line="200" pos:column="51">logException</name><argument_list pos:line="200" pos:column="63">(<argument><expr><name pos:line="200" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="201" pos:column="13">return <expr><name pos:line="201" pos:column="20">null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

   <function><type><specifier pos:line="205" pos:column="4">public</specifier> <name pos:line="205" pos:column="11">boolean</name></type> <name pos:line="205" pos:column="19">saveRTF</name><parameter_list pos:line="205" pos:column="26">(<param><decl><type><name pos:line="205" pos:column="27">List</name></type> <name pos:line="205" pos:column="32">mindMapNodes</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="46">BufferedWriter</name></type> <name pos:line="205" pos:column="61">fileout</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="70">{
        <comment type="line" pos:line="206" pos:column="9">// Returns success of the operation.</comment>
        <try pos:line="207" pos:column="9">try <block pos:line="207" pos:column="13">{

           <comment type="line" pos:line="209" pos:column="12">// First collect all used colors</comment>
           <decl_stmt><decl><type><name pos:line="210" pos:column="12">HashSet</name></type> <name pos:line="210" pos:column="20">colors</name> =<init pos:line="210" pos:column="28"> <expr><op:operator pos:line="210" pos:column="29">new</op:operator> <call><name pos:line="210" pos:column="33">HashSet</name><argument_list pos:line="210" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
           <for pos:line="211" pos:column="12">for(<init><decl><type><name pos:line="211" pos:column="16">ListIterator</name></type> <name pos:line="211" pos:column="29">it</name>=<init><expr><call><name><name pos:line="211" pos:column="32">mindMapNodes</name><op:operator pos:line="211" pos:column="44">.</op:operator><name pos:line="211" pos:column="45">listIterator</name></name><argument_list pos:line="211" pos:column="57">()</argument_list></call></expr></init></decl>;</init><condition><expr><call><name><name pos:line="211" pos:column="60">it</name><op:operator pos:line="211" pos:column="62">.</op:operator><name pos:line="211" pos:column="63">hasNext</name></name><argument_list pos:line="211" pos:column="70">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="211" pos:column="75">{
              <expr_stmt><expr><op:operator pos:line="212" pos:column="15">(</op:operator><op:operator pos:line="212" pos:column="16">(</op:operator><name pos:line="212" pos:column="17">MindMapNodeModel</name><op:operator pos:line="212" pos:column="33">)</op:operator><call><name><name pos:line="212" pos:column="34">it</name><op:operator pos:line="212" pos:column="36">.</op:operator><name pos:line="212" pos:column="37">next</name></name><argument_list pos:line="212" pos:column="41">()</argument_list></call><op:operator pos:line="212" pos:column="43">)</op:operator><op:operator pos:line="212" pos:column="44">.</op:operator><call><name pos:line="212" pos:column="45">collectColors</name><argument_list pos:line="212" pos:column="58">(<argument><expr><name pos:line="212" pos:column="59">colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>

           <comment type="line" pos:line="214" pos:column="12">// Prepare table of colors containing indices to color table</comment>
           <decl_stmt><decl><type><name pos:line="215" pos:column="12">String</name></type> <name pos:line="215" pos:column="19">colorTableString</name>=<init><expr><lit:literal type="string" pos:line="215" pos:column="36">"{\\colortbl;\\red0\\green0\\blue255;"</lit:literal></expr></init></decl>;</decl_stmt>
           <comment type="line" pos:line="216" pos:column="12">// 0 - Automatic, 1 - blue for links</comment>

           <decl_stmt><decl><type><name pos:line="218" pos:column="12">HashMap</name></type> <name pos:line="218" pos:column="20">colorTable</name> =<init pos:line="218" pos:column="32"> <expr><op:operator pos:line="218" pos:column="33">new</op:operator> <call><name pos:line="218" pos:column="37">HashMap</name><argument_list pos:line="218" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name pos:line="219" pos:column="12">int</name></type> <name pos:line="219" pos:column="16">colorPosition</name> =<init pos:line="219" pos:column="31"> <expr><lit:literal type="number" pos:line="219" pos:column="32">2</lit:literal></expr></init></decl>;</decl_stmt>
           <for pos:line="220" pos:column="12">for(<init><decl><type><name pos:line="220" pos:column="16">Iterator</name></type> <name pos:line="220" pos:column="25">it</name>=<init><expr><call><name><name pos:line="220" pos:column="28">colors</name><op:operator pos:line="220" pos:column="34">.</op:operator><name pos:line="220" pos:column="35">iterator</name></name><argument_list pos:line="220" pos:column="43">()</argument_list></call></expr></init></decl>;</init><condition><expr><call><name><name pos:line="220" pos:column="46">it</name><op:operator pos:line="220" pos:column="48">.</op:operator><name pos:line="220" pos:column="49">hasNext</name></name><argument_list pos:line="220" pos:column="56">()</argument_list></call></expr>;</condition><incr><expr><op:operator pos:line="220" pos:column="59">++</op:operator><name pos:line="220" pos:column="61">colorPosition</name></expr></incr>) <block pos:line="220" pos:column="76">{
              <decl_stmt><decl><type><name pos:line="221" pos:column="15">Color</name></type> <name pos:line="221" pos:column="21">color</name> =<init pos:line="221" pos:column="28"> <expr><op:operator pos:line="221" pos:column="29">(</op:operator><name pos:line="221" pos:column="30">Color</name><op:operator pos:line="221" pos:column="35">)</op:operator><call><name><name pos:line="221" pos:column="36">it</name><op:operator pos:line="221" pos:column="38">.</op:operator><name pos:line="221" pos:column="39">next</name></name><argument_list pos:line="221" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name pos:line="222" pos:column="15">colorTableString</name> <op:operator pos:line="222" pos:column="32">+=</op:operator> <lit:literal type="string" pos:line="222" pos:column="35">"\\red"</lit:literal><op:operator pos:line="222" pos:column="42">+</op:operator><call><name><name pos:line="222" pos:column="43">color</name><op:operator pos:line="222" pos:column="48">.</op:operator><name pos:line="222" pos:column="49">getRed</name></name><argument_list pos:line="222" pos:column="55">()</argument_list></call><op:operator pos:line="222" pos:column="57">+</op:operator><lit:literal type="string" pos:line="222" pos:column="58">"\\green"</lit:literal><op:operator pos:line="222" pos:column="67">+</op:operator><call><name><name pos:line="222" pos:column="68">color</name><op:operator pos:line="222" pos:column="73">.</op:operator><name pos:line="222" pos:column="74">getGreen</name></name><argument_list pos:line="222" pos:column="82">()</argument_list></call><op:operator pos:line="222" pos:column="84">+</op:operator>
                 <lit:literal type="string" pos:line="223" pos:column="18">"\\blue"</lit:literal><op:operator pos:line="223" pos:column="26">+</op:operator><call><name><name pos:line="223" pos:column="27">color</name><op:operator pos:line="223" pos:column="32">.</op:operator><name pos:line="223" pos:column="33">getBlue</name></name><argument_list pos:line="223" pos:column="40">()</argument_list></call><op:operator pos:line="223" pos:column="42">+</op:operator><lit:literal type="string" pos:line="223" pos:column="43">";"</lit:literal></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name pos:line="224" pos:column="15">colorTable</name><op:operator pos:line="224" pos:column="25">.</op:operator><name pos:line="224" pos:column="26">put</name></name><argument_list pos:line="224" pos:column="29">(<argument><expr><name pos:line="224" pos:column="30">color</name></expr></argument>,<argument><expr><op:operator pos:line="224" pos:column="36">new</op:operator> <call><name pos:line="224" pos:column="40">Integer</name><argument_list pos:line="224" pos:column="47">(<argument><expr><name pos:line="224" pos:column="48">colorPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>
           <expr_stmt><expr><name pos:line="225" pos:column="12">colorTableString</name> <op:operator pos:line="225" pos:column="29">+=</op:operator> <lit:literal type="string" pos:line="225" pos:column="32">"}"</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">fileout</name><op:operator pos:line="227" pos:column="20">.</op:operator><name pos:line="227" pos:column="21">write</name></name>
               <argument_list pos:line="228" pos:column="16">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="17">"{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fswiss\\fcharset0 Arial;}"</lit:literal><op:operator pos:line="228" pos:column="107">+</op:operator>
                <name pos:line="229" pos:column="17">colorTableString</name><op:operator pos:line="229" pos:column="33">+</op:operator>
                <lit:literal type="string" pos:line="230" pos:column="17">"}"</lit:literal><op:operator pos:line="230" pos:column="20">+</op:operator>
                <lit:literal type="string" pos:line="231" pos:column="17">"\\viewkind4\\uc1\\pard\\f0\\fs20{}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="232" pos:column="13">// ^ If \\ud is appended here, Unicode does not work in MS Word.</comment>

            <for pos:line="234" pos:column="13">for(<init><decl><type><name pos:line="234" pos:column="17">ListIterator</name></type> <name pos:line="234" pos:column="30">it</name>=<init><expr><call><name><name pos:line="234" pos:column="33">mindMapNodes</name><op:operator pos:line="234" pos:column="45">.</op:operator><name pos:line="234" pos:column="46">listIterator</name></name><argument_list pos:line="234" pos:column="58">()</argument_list></call></expr></init></decl>;</init><condition><expr><call><name><name pos:line="234" pos:column="61">it</name><op:operator pos:line="234" pos:column="63">.</op:operator><name pos:line="234" pos:column="64">hasNext</name></name><argument_list pos:line="234" pos:column="71">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="234" pos:column="76">{
               <expr_stmt><expr><op:operator pos:line="235" pos:column="16">(</op:operator><op:operator pos:line="235" pos:column="17">(</op:operator><name pos:line="235" pos:column="18">MindMapNodeModel</name><op:operator pos:line="235" pos:column="34">)</op:operator><call><name><name pos:line="235" pos:column="35">it</name><op:operator pos:line="235" pos:column="37">.</op:operator><name pos:line="235" pos:column="38">next</name></name><argument_list pos:line="235" pos:column="42">()</argument_list></call><op:operator pos:line="235" pos:column="44">)</op:operator><op:operator pos:line="235" pos:column="45">.</op:operator><call><name pos:line="235" pos:column="46">saveRTF</name><argument_list pos:line="235" pos:column="53">(<argument><expr><name pos:line="235" pos:column="54">fileout</name></expr></argument>,<comment type="block" pos:line="235" pos:column="62">/*depth=*/</comment><argument><expr><lit:literal type="number" pos:line="235" pos:column="72">0</lit:literal></expr></argument>,<argument><expr><name pos:line="235" pos:column="74">colorTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>

            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">fileout</name><op:operator pos:line="237" pos:column="20">.</op:operator><name pos:line="237" pos:column="21">write</name></name><argument_list pos:line="237" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="27">"}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="238" pos:column="13">return <expr><name pos:line="238" pos:column="20">true</name></expr>;</return> }</block>
        <catch pos:line="239" pos:column="9">catch(<param><decl><type><name pos:line="239" pos:column="15">Exception</name></type> <name pos:line="239" pos:column="25">e</name></decl></param>) <block pos:line="239" pos:column="28">{
            <expr_stmt><expr><call><name><name pos:line="240" pos:column="13">freemind</name><op:operator pos:line="240" pos:column="21">.</op:operator><name pos:line="240" pos:column="22">main</name><op:operator pos:line="240" pos:column="26">.</op:operator><name pos:line="240" pos:column="27">Resources</name><op:operator pos:line="240" pos:column="36">.</op:operator><name pos:line="240" pos:column="37">getInstance</name></name><argument_list pos:line="240" pos:column="48">()</argument_list></call><op:operator pos:line="240" pos:column="50">.</op:operator><call><name pos:line="240" pos:column="51">logException</name><argument_list pos:line="240" pos:column="63">(<argument><expr><name pos:line="240" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="241" pos:column="13">return <expr><name pos:line="241" pos:column="20">false</name></expr>;</return> }</block></catch></try>}</block></function>
    <comment type="javadoc" pos:line="242" pos:column="5">/**
     * Return the success of saving
     */</comment>
    <function><type><specifier pos:line="245" pos:column="5">public</specifier> <name pos:line="245" pos:column="12">boolean</name></type> <name pos:line="245" pos:column="20">save</name><parameter_list pos:line="245" pos:column="24">(<param><decl><type><name pos:line="245" pos:column="25">File</name></type> <name pos:line="245" pos:column="30">file</name></decl></param>)</parameter_list> <block pos:line="245" pos:column="36">{
        <return pos:line="246" pos:column="9">return <expr><call><name pos:line="246" pos:column="16">saveInternal</name><argument_list pos:line="246" pos:column="28">(<argument><expr><name pos:line="246" pos:column="29">file</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="35">false</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc" pos:line="249" pos:column="5">/** This method is intended to provide both normal save routines and saving of temporary (internal) files.*/</comment>
    <function><type><specifier pos:line="250" pos:column="5">private</specifier> <name pos:line="250" pos:column="13">boolean</name></type> <name pos:line="250" pos:column="21">saveInternal</name><parameter_list pos:line="250" pos:column="33">(<param><decl><type><name pos:line="250" pos:column="34">File</name></type> <name pos:line="250" pos:column="39">file</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="45">boolean</name></type> <name pos:line="250" pos:column="53">isInternal</name></decl></param>)</parameter_list> <block pos:line="250" pos:column="65">{
        <if pos:line="251" pos:column="9">if <condition pos:line="251" pos:column="12">(<expr><op:operator pos:line="251" pos:column="13">!</op:operator><name pos:line="251" pos:column="14">isInternal</name> <op:operator pos:line="251" pos:column="25">&amp;&amp;</op:operator> <name pos:line="251" pos:column="28">readOnly</name></expr>)</condition><then pos:line="251" pos:column="37"> <block pos:line="251" pos:column="38">{ <comment type="line" pos:line="251" pos:column="40">// unexpected situation, yet it's better to back it up</comment>
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">System</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">err</name><op:operator pos:line="252" pos:column="23">.</op:operator><name pos:line="252" pos:column="24">println</name></name><argument_list pos:line="252" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="32">"Attempt to save read-only map."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="253" pos:column="13">return <expr><name pos:line="253" pos:column="20">false</name></expr>;</return> }</block></then></if>
        <try pos:line="254" pos:column="9">try <block pos:line="254" pos:column="13">{
            <comment type="line" pos:line="255" pos:column="13">//Generating output Stream</comment>
        	<if pos:line="256" pos:column="17">if<condition pos:line="256" pos:column="19">(<expr><name pos:line="256" pos:column="20">timerForAutomaticSaving</name> <op:operator pos:line="256" pos:column="44">!=</op:operator> <name pos:line="256" pos:column="47">null</name></expr>)</condition><then pos:line="256" pos:column="52"> <block pos:line="256" pos:column="53">{
        		<expr_stmt><expr><call><name><name pos:line="257" pos:column="25">timerForAutomaticSaving</name><op:operator pos:line="257" pos:column="48">.</op:operator><name pos:line="257" pos:column="49">cancel</name></name><argument_list pos:line="257" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
        	}</block></then></if>
            <decl_stmt><decl><type><name pos:line="259" pos:column="13">BufferedWriter</name></type> <name pos:line="259" pos:column="28">fileout</name> =<init pos:line="259" pos:column="37"> <expr><op:operator pos:line="259" pos:column="38">new</op:operator> <call><name pos:line="259" pos:column="42">BufferedWriter</name><argument_list pos:line="259" pos:column="56">( <argument><expr><op:operator pos:line="259" pos:column="58">new</op:operator> <call><name pos:line="259" pos:column="62">OutputStreamWriter</name><argument_list pos:line="259" pos:column="80">( <argument><expr><op:operator pos:line="259" pos:column="82">new</op:operator> <call><name pos:line="259" pos:column="86">FileOutputStream</name><argument_list pos:line="259" pos:column="102">(<argument><expr><name pos:line="259" pos:column="103">file</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="260" pos:column="13">getXml</name><argument_list pos:line="260" pos:column="19">(<argument><expr><name pos:line="260" pos:column="20">fileout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="262" pos:column="13">if<condition pos:line="262" pos:column="15">(<expr><op:operator pos:line="262" pos:column="16">!</op:operator><name pos:line="262" pos:column="17">isInternal</name></expr>)</condition><then pos:line="262" pos:column="28"> <block pos:line="262" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="263" pos:column="17">setFile</name><argument_list pos:line="263" pos:column="24">(<argument><expr><name pos:line="263" pos:column="25">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="264" pos:column="17">setSaved</name><argument_list pos:line="264" pos:column="25">(<argument><expr><name pos:line="264" pos:column="26">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name pos:line="266" pos:column="13">scheduleTimerForAutomaticSaving</name><argument_list pos:line="266" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="267" pos:column="13">return <expr><name pos:line="267" pos:column="20">true</name></expr>;</return>
        }</block> <catch pos:line="268" pos:column="11">catch (<param><decl><type><name pos:line="268" pos:column="18">FileNotFoundException</name></type> <name pos:line="268" pos:column="40">e</name></decl></param> ) <block pos:line="268" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="269" pos:column="13">String</name></type> <name pos:line="269" pos:column="20">message</name> =<init pos:line="269" pos:column="29"> <expr><call><name><name pos:line="269" pos:column="30">Tools</name><op:operator pos:line="269" pos:column="35">.</op:operator><name pos:line="269" pos:column="36">expandPlaceholders</name></name><argument_list pos:line="269" pos:column="54">(<argument><expr><call><name pos:line="269" pos:column="55">getText</name><argument_list pos:line="269" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="63">"save_failed"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name pos:line="269" pos:column="78">file</name><op:operator pos:line="269" pos:column="82">.</op:operator><name pos:line="269" pos:column="83">getName</name></name><argument_list pos:line="269" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="270" pos:column="13">if<condition pos:line="270" pos:column="15">(<expr><op:operator pos:line="270" pos:column="16">!</op:operator><name pos:line="270" pos:column="17">isInternal</name></expr>)</condition><then pos:line="270" pos:column="28">
                <expr_stmt><expr><call><name pos:line="271" pos:column="17">getFrame</name><argument_list pos:line="271" pos:column="25">()</argument_list></call><op:operator pos:line="271" pos:column="27">.</op:operator><call><name pos:line="271" pos:column="28">getController</name><argument_list pos:line="271" pos:column="41">()</argument_list></call><op:operator pos:line="271" pos:column="43">.</op:operator><call><name pos:line="271" pos:column="44">errorMessage</name><argument_list pos:line="271" pos:column="56">(<argument><expr><name pos:line="271" pos:column="57">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="272" pos:column="13">else
                <expr_stmt><expr><call><name pos:line="273" pos:column="17">getFrame</name><argument_list pos:line="273" pos:column="25">()</argument_list></call><op:operator pos:line="273" pos:column="27">.</op:operator><call><name pos:line="273" pos:column="28">out</name><argument_list pos:line="273" pos:column="31">(<argument><expr><name pos:line="273" pos:column="32">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></catch> <catch pos:line="274" pos:column="11">catch(<param><decl><type><name pos:line="274" pos:column="17">Exception</name></type> <name pos:line="274" pos:column="27">e</name></decl></param>) <block pos:line="274" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="275" pos:column="13">logger</name><op:operator pos:line="275" pos:column="19">.</op:operator><name pos:line="275" pos:column="20">severe</name></name><argument_list pos:line="275" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="27">"Error in MindMapMapModel.save(): "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">freemind</name><op:operator pos:line="276" pos:column="21">.</op:operator><name pos:line="276" pos:column="22">main</name><op:operator pos:line="276" pos:column="26">.</op:operator><name pos:line="276" pos:column="27">Resources</name><op:operator pos:line="276" pos:column="36">.</op:operator><name pos:line="276" pos:column="37">getInstance</name></name><argument_list pos:line="276" pos:column="48">()</argument_list></call><op:operator pos:line="276" pos:column="50">.</op:operator><call><name pos:line="276" pos:column="51">logException</name><argument_list pos:line="276" pos:column="63">(<argument><expr><name pos:line="276" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name pos:line="278" pos:column="9">scheduleTimerForAutomaticSaving</name><argument_list pos:line="278" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="279" pos:column="9">return <expr><name pos:line="279" pos:column="16">false</name></expr>;</return>
    }</block></function>


    <comment type="javadoc" pos:line="283" pos:column="5">/** writes the content of the map to a writer.
	 * @throws IOException
	 */</comment>
	<function><type><specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">void</name></type> <name pos:line="286" pos:column="21">getXml</name><parameter_list pos:line="286" pos:column="27">(<param><decl><type><name pos:line="286" pos:column="28">Writer</name></type> <name pos:line="286" pos:column="35">fileout</name></decl></param>, <param><decl><type><name pos:line="286" pos:column="44">boolean</name></type> <name pos:line="286" pos:column="52">saveInvisible</name></decl></param>)</parameter_list> <throws pos:line="286" pos:column="67">throws <argument><expr><name pos:line="286" pos:column="74">IOException</name></expr></argument></throws> <block pos:line="286" pos:column="86">{
		<expr_stmt><expr><call><name pos:line="287" pos:column="17">getXml</name><argument_list pos:line="287" pos:column="23">(<argument><expr><name pos:line="287" pos:column="24">fileout</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="33">saveInvisible</name></expr></argument>, <argument><expr><call><name pos:line="287" pos:column="48">getRootNode</name><argument_list pos:line="287" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<comment type="javadoc" pos:line="289" pos:column="9">/** writes the content of the map to a writer.
	 * @throws IOException
	 */</comment>
	<function><type><specifier pos:line="292" pos:column="9">public</specifier> <name pos:line="292" pos:column="16">void</name></type> <name pos:line="292" pos:column="21">getXml</name><parameter_list pos:line="292" pos:column="27">(<param><decl><type><name pos:line="292" pos:column="28">Writer</name></type> <name pos:line="292" pos:column="35">fileout</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="44">boolean</name></type> <name pos:line="292" pos:column="52">saveInvisible</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="67">MindMapNode</name></type> <name pos:line="292" pos:column="79">pRootNode</name></decl></param>)</parameter_list> <throws pos:line="292" pos:column="90">throws <argument><expr><name pos:line="292" pos:column="97">IOException</name></expr></argument></throws> <block pos:line="292" pos:column="109">{
		<expr_stmt><expr><call><name><name pos:line="293" pos:column="17">fileout</name><op:operator pos:line="293" pos:column="24">.</op:operator><name pos:line="293" pos:column="25">write</name></name><argument_list pos:line="293" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="293" pos:column="31">"&lt;map "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="294" pos:column="17">fileout</name><op:operator pos:line="294" pos:column="24">.</op:operator><name pos:line="294" pos:column="25">write</name></name><argument_list pos:line="294" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="294" pos:column="31">"version=\""</lit:literal><op:operator pos:line="294" pos:column="43">+</op:operator><name pos:line="294" pos:column="44">FreeMind</name><op:operator pos:line="294" pos:column="52">.</op:operator><name pos:line="294" pos:column="53">XML_VERSION</name><op:operator pos:line="294" pos:column="64">+</op:operator><lit:literal type="string" pos:line="294" pos:column="65">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="295" pos:column="17">fileout</name><op:operator pos:line="295" pos:column="24">.</op:operator><name pos:line="295" pos:column="25">write</name></name><argument_list pos:line="295" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="295" pos:column="31">"&gt;\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="296" pos:column="17">fileout</name><op:operator pos:line="296" pos:column="24">.</op:operator><name pos:line="296" pos:column="25">write</name></name><argument_list pos:line="296" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="31">"&lt;!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net --&gt;\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="297" pos:column="17">getRegistry</name><argument_list pos:line="297" pos:column="28">()</argument_list></call><op:operator pos:line="297" pos:column="30">.</op:operator><call><name pos:line="297" pos:column="31">save</name><argument_list pos:line="297" pos:column="35">(<argument><expr><name pos:line="297" pos:column="36">fileout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="298" pos:column="17">pRootNode</name><op:operator pos:line="298" pos:column="26">.</op:operator><name pos:line="298" pos:column="27">save</name></name><argument_list pos:line="298" pos:column="31">(<argument><expr><name pos:line="298" pos:column="32">fileout</name></expr></argument>, <argument><expr><call><name><name pos:line="298" pos:column="41">this</name><op:operator pos:line="298" pos:column="45">.</op:operator><name pos:line="298" pos:column="46">getLinkRegistry</name></name><argument_list pos:line="298" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="298" pos:column="65">saveInvisible</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="80">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="299" pos:column="17">fileout</name><op:operator pos:line="299" pos:column="24">.</op:operator><name pos:line="299" pos:column="25">write</name></name><argument_list pos:line="299" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="299" pos:column="31">"&lt;/map&gt;\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="300" pos:column="17">fileout</name><op:operator pos:line="300" pos:column="24">.</op:operator><name pos:line="300" pos:column="25">close</name></name><argument_list pos:line="300" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <function><type><specifier pos:line="303" pos:column="5">public</specifier> <name pos:line="303" pos:column="12">void</name></type> <name pos:line="303" pos:column="17">getXml</name><parameter_list pos:line="303" pos:column="23">(<param><decl><type><name pos:line="303" pos:column="24">Writer</name></type> <name pos:line="303" pos:column="31">fileout</name></decl></param>)</parameter_list> <throws pos:line="303" pos:column="40">throws <argument><expr><name pos:line="303" pos:column="47">IOException</name></expr></argument></throws><block pos:line="303" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="304" pos:column="9">getXml</name><argument_list pos:line="304" pos:column="15">(<argument><expr><name pos:line="304" pos:column="16">fileout</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="25">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="307" pos:column="5">public</specifier> <name pos:line="307" pos:column="12">void</name></type> <name pos:line="307" pos:column="17">getFilteredXml</name><parameter_list pos:line="307" pos:column="31">(<param><decl><type><name pos:line="307" pos:column="32">Writer</name></type> <name pos:line="307" pos:column="39">fileout</name></decl></param>)</parameter_list> <throws pos:line="307" pos:column="48">throws <argument><expr><name pos:line="307" pos:column="55">IOException</name></expr></argument></throws><block pos:line="307" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="308" pos:column="9">getXml</name><argument_list pos:line="308" pos:column="15">(<argument><expr><name pos:line="308" pos:column="16">fileout</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="25">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<comment type="javadoc" pos:line="311" pos:column="9">/**
     * Attempts to lock the map using a semaphore file
     * @return If the map is locked, return the name of the locking user, otherwise return null.
     * @throws Exception, when the locking failed for other reasons than that the
     * file is being edited.
     */</comment>
    <function><type><specifier pos:line="317" pos:column="5">public</specifier> <name pos:line="317" pos:column="12">String</name></type> <name pos:line="317" pos:column="19">tryToLock</name><parameter_list pos:line="317" pos:column="28">(<param><decl><type><name pos:line="317" pos:column="29">File</name></type> <name pos:line="317" pos:column="34">file</name></decl></param>)</parameter_list> <throws pos:line="317" pos:column="40">throws <argument><expr><name pos:line="317" pos:column="47">Exception</name></expr></argument></throws> <block pos:line="317" pos:column="57">{
        <decl_stmt><decl><type><name pos:line="318" pos:column="9">String</name></type> <name pos:line="318" pos:column="16">lockingUser</name> =<init pos:line="318" pos:column="29"> <expr><call><name><name pos:line="318" pos:column="30">lockManager</name><op:operator pos:line="318" pos:column="41">.</op:operator><name pos:line="318" pos:column="42">tryToLock</name></name><argument_list pos:line="318" pos:column="51">(<argument><expr><name pos:line="318" pos:column="52">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="319" pos:column="9">String</name></type> <name pos:line="319" pos:column="16">lockingUserOfOldLock</name> =<init pos:line="319" pos:column="38"> <expr><call><name><name pos:line="319" pos:column="39">lockManager</name><op:operator pos:line="319" pos:column="50">.</op:operator><name pos:line="319" pos:column="51">popLockingUserOfOldLock</name></name><argument_list pos:line="319" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">lockingUserOfOldLock</name> <op:operator pos:line="320" pos:column="34">!=</op:operator> <name pos:line="320" pos:column="37">null</name></expr>)</condition><then pos:line="320" pos:column="42"> <block pos:line="320" pos:column="43">{
          <expr_stmt><expr><call><name pos:line="321" pos:column="11">getFrame</name><argument_list pos:line="321" pos:column="19">()</argument_list></call><op:operator pos:line="321" pos:column="21">.</op:operator><call><name pos:line="321" pos:column="22">getController</name><argument_list pos:line="321" pos:column="35">()</argument_list></call><op:operator pos:line="321" pos:column="37">.</op:operator><call><name pos:line="321" pos:column="38">informationMessage</name><argument_list pos:line="321" pos:column="56">(
            <argument><expr><call><name><name pos:line="322" pos:column="13">Tools</name><op:operator pos:line="322" pos:column="18">.</op:operator><name pos:line="322" pos:column="19">expandPlaceholders</name></name><argument_list pos:line="322" pos:column="37">(<argument><expr><call><name pos:line="322" pos:column="38">getText</name><argument_list pos:line="322" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="322" pos:column="46">"locking_old_lock_removed"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="322" pos:column="75">file</name><op:operator pos:line="322" pos:column="79">.</op:operator><name pos:line="322" pos:column="80">getName</name></name><argument_list pos:line="322" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="322" pos:column="91">lockingUserOfOldLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if pos:line="323" pos:column="9">if <condition pos:line="323" pos:column="12">(<expr><name pos:line="323" pos:column="13">lockingUser</name> <op:operator pos:line="323" pos:column="25">==</op:operator> <name pos:line="323" pos:column="28">null</name></expr>)</condition><then pos:line="323" pos:column="33"> <block pos:line="323" pos:column="34">{
          <expr_stmt><expr><name pos:line="324" pos:column="11">readOnly</name> <op:operator pos:line="324" pos:column="20">=</op:operator> <name pos:line="324" pos:column="22">false</name></expr>;</expr_stmt> }</block></then></if> <comment type="line" pos:line="324" pos:column="31">// The map sure is not read only when the locking suceeded.</comment>
        <return pos:line="325" pos:column="9">return <expr><name pos:line="325" pos:column="16">lockingUser</name></expr>;</return> }</block></function>

    <function><type><specifier pos:line="327" pos:column="5">public</specifier> <name pos:line="327" pos:column="12">void</name></type> <name pos:line="327" pos:column="17">load</name><parameter_list pos:line="327" pos:column="21">(<param><decl><type><name pos:line="327" pos:column="22">URL</name></type> <name pos:line="327" pos:column="26">url</name></decl></param>)</parameter_list> <throws pos:line="327" pos:column="31">throws <argument><expr><name pos:line="327" pos:column="38">FileNotFoundException</name></expr></argument>, <argument><expr><name pos:line="327" pos:column="61">IOException</name></expr></argument>, <argument><expr><name pos:line="327" pos:column="74">XMLParseException</name></expr></argument>, <argument><expr><name pos:line="327" pos:column="93">URISyntaxException</name></expr></argument></throws> <block pos:line="327" pos:column="112">{
    		<expr_stmt><expr><call><name><name pos:line="328" pos:column="17">logger</name><op:operator pos:line="328" pos:column="23">.</op:operator><name pos:line="328" pos:column="24">info</name></name><argument_list pos:line="328" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="328" pos:column="29">"Loading file: "</lit:literal> <op:operator pos:line="328" pos:column="46">+</op:operator> <call><name><name pos:line="328" pos:column="48">url</name><op:operator pos:line="328" pos:column="51">.</op:operator><name pos:line="328" pos:column="52">toString</name></name><argument_list pos:line="328" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name pos:line="329" pos:column="8">File</name></type> <name pos:line="329" pos:column="13">file</name> =<init pos:line="329" pos:column="19"> <expr><call><name><name pos:line="329" pos:column="20">Tools</name><op:operator pos:line="329" pos:column="25">.</op:operator><name pos:line="329" pos:column="26">urlToFile</name></name><argument_list pos:line="329" pos:column="35">(<argument><expr><name pos:line="329" pos:column="36">url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name pos:line="330" pos:column="8">load</name><argument_list pos:line="330" pos:column="12">(<argument><expr><name pos:line="330" pos:column="13">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<function><type><specifier pos:line="333" pos:column="9">public</specifier> <name pos:line="333" pos:column="16">void</name></type> <name pos:line="333" pos:column="21">load</name><parameter_list pos:line="333" pos:column="25">(<param><decl><type><name pos:line="333" pos:column="26">File</name></type> <name pos:line="333" pos:column="31">file</name></decl></param>)</parameter_list> <throws pos:line="333" pos:column="37">throws <argument><expr><name pos:line="333" pos:column="44">FileNotFoundException</name></expr></argument>, <argument><expr><name pos:line="333" pos:column="67">IOException</name></expr></argument></throws> <block pos:line="333" pos:column="79">{
		<if pos:line="334" pos:column="17">if <condition pos:line="334" pos:column="20">(<expr><op:operator pos:line="334" pos:column="21">!</op:operator><call><name><name pos:line="334" pos:column="22">file</name><op:operator pos:line="334" pos:column="26">.</op:operator><name pos:line="334" pos:column="27">exists</name></name><argument_list pos:line="334" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="334" pos:column="36"> <block pos:line="334" pos:column="37">{
		      <throw pos:line="335" pos:column="23">throw <expr><op:operator pos:line="335" pos:column="29">new</op:operator> <call><name pos:line="335" pos:column="33">FileNotFoundException</name><argument_list pos:line="335" pos:column="54">(<argument><expr><call><name><name pos:line="335" pos:column="55">Tools</name><op:operator pos:line="335" pos:column="60">.</op:operator><name pos:line="335" pos:column="61">expandPlaceholders</name></name><argument_list pos:line="335" pos:column="79">(<argument><expr><call><name pos:line="335" pos:column="80">getText</name><argument_list pos:line="335" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="335" pos:column="88">"file_not_found"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="335" pos:column="107">file</name><op:operator pos:line="335" pos:column="111">.</op:operator><name pos:line="335" pos:column="112">getPath</name></name><argument_list pos:line="335" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
		   <if pos:line="336" pos:column="20">if <condition pos:line="336" pos:column="23">(<expr><op:operator pos:line="336" pos:column="24">!</op:operator><call><name><name pos:line="336" pos:column="25">file</name><op:operator pos:line="336" pos:column="29">.</op:operator><name pos:line="336" pos:column="30">canWrite</name></name><argument_list pos:line="336" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="336" pos:column="41"> <block pos:line="336" pos:column="42">{
		      <expr_stmt><expr><name pos:line="337" pos:column="23">readOnly</name> <op:operator pos:line="337" pos:column="32">=</op:operator> <name pos:line="337" pos:column="34">true</name></expr>;</expr_stmt> }</block></then>
		   <else pos:line="338" pos:column="20">else <block pos:line="338" pos:column="25">{
		      <comment type="line" pos:line="339" pos:column="23">// try to lock the map</comment>
		      <try pos:line="340" pos:column="23">try <block pos:line="340" pos:column="27">{
		         <decl_stmt><decl><type><name pos:line="341" pos:column="26">String</name></type> <name pos:line="341" pos:column="33">lockingUser</name> =<init pos:line="341" pos:column="46"> <expr><call><name pos:line="341" pos:column="47">tryToLock</name><argument_list pos:line="341" pos:column="56">(<argument><expr><name pos:line="341" pos:column="57">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		         <if pos:line="342" pos:column="26">if <condition pos:line="342" pos:column="29">(<expr><name pos:line="342" pos:column="30">lockingUser</name> <op:operator pos:line="342" pos:column="42">!=</op:operator> <name pos:line="342" pos:column="45">null</name></expr>)</condition><then pos:line="342" pos:column="50"> <block pos:line="342" pos:column="51">{
		           <expr_stmt><expr><call><name pos:line="343" pos:column="28">getFrame</name><argument_list pos:line="343" pos:column="36">()</argument_list></call><op:operator pos:line="343" pos:column="38">.</op:operator><call><name pos:line="343" pos:column="39">getController</name><argument_list pos:line="343" pos:column="52">()</argument_list></call><op:operator pos:line="343" pos:column="54">.</op:operator><call><name pos:line="343" pos:column="55">informationMessage</name><argument_list pos:line="343" pos:column="73">(
		             <argument><expr><call><name><name pos:line="344" pos:column="30">Tools</name><op:operator pos:line="344" pos:column="35">.</op:operator><name pos:line="344" pos:column="36">expandPlaceholders</name></name><argument_list pos:line="344" pos:column="54">(<argument><expr><call><name pos:line="344" pos:column="55">getText</name><argument_list pos:line="344" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="63">"map_locked_by_open"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="344" pos:column="86">file</name><op:operator pos:line="344" pos:column="90">.</op:operator><name pos:line="344" pos:column="91">getName</name></name><argument_list pos:line="344" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="344" pos:column="102">lockingUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		           <expr_stmt><expr><name pos:line="345" pos:column="28">readOnly</name> <op:operator pos:line="345" pos:column="37">=</op:operator> <name pos:line="345" pos:column="39">true</name></expr>;</expr_stmt> }</block></then>
		         <else pos:line="346" pos:column="26">else <block pos:line="346" pos:column="31">{
		           <expr_stmt><expr><name pos:line="347" pos:column="28">readOnly</name> <op:operator pos:line="347" pos:column="37">=</op:operator> <name pos:line="347" pos:column="39">false</name></expr>;</expr_stmt> }</block></else></if>}</block>
		      <catch pos:line="348" pos:column="23">catch (<param><decl><type><name pos:line="348" pos:column="30">Exception</name></type> <name pos:line="348" pos:column="40">e</name></decl></param>)<block pos:line="348" pos:column="42">{ <comment type="line" pos:line="348" pos:column="44">// Throwed by tryToLock</comment>
		         <expr_stmt><expr><call><name><name pos:line="349" pos:column="26">freemind</name><op:operator pos:line="349" pos:column="34">.</op:operator><name pos:line="349" pos:column="35">main</name><op:operator pos:line="349" pos:column="39">.</op:operator><name pos:line="349" pos:column="40">Resources</name><op:operator pos:line="349" pos:column="49">.</op:operator><name pos:line="349" pos:column="50">getInstance</name></name><argument_list pos:line="349" pos:column="61">()</argument_list></call><op:operator pos:line="349" pos:column="63">.</op:operator><call><name pos:line="349" pos:column="64">logException</name><argument_list pos:line="349" pos:column="76">(<argument><expr><name pos:line="349" pos:column="77">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		         <expr_stmt><expr><call><name pos:line="350" pos:column="26">getFrame</name><argument_list pos:line="350" pos:column="34">()</argument_list></call><op:operator pos:line="350" pos:column="36">.</op:operator><call><name pos:line="350" pos:column="37">getController</name><argument_list pos:line="350" pos:column="50">()</argument_list></call><op:operator pos:line="350" pos:column="52">.</op:operator><call><name pos:line="350" pos:column="53">informationMessage</name><argument_list pos:line="350" pos:column="71">(
		           <argument><expr><call><name><name pos:line="351" pos:column="28">Tools</name><op:operator pos:line="351" pos:column="33">.</op:operator><name pos:line="351" pos:column="34">expandPlaceholders</name></name><argument_list pos:line="351" pos:column="52">(<argument><expr><call><name pos:line="351" pos:column="53">getText</name><argument_list pos:line="351" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="351" pos:column="61">"locking_failed_by_open"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="351" pos:column="88">file</name><op:operator pos:line="351" pos:column="92">.</op:operator><name pos:line="351" pos:column="93">getName</name></name><argument_list pos:line="351" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		         <expr_stmt><expr><name pos:line="352" pos:column="26">readOnly</name> <op:operator pos:line="352" pos:column="35">=</op:operator> <name pos:line="352" pos:column="37">true</name></expr>;</expr_stmt> }</block></catch></try>}</block></else></if>

		   <decl_stmt><decl><type><name pos:line="354" pos:column="20">MindMapNodeModel</name></type> <name pos:line="354" pos:column="37">root</name> =<init pos:line="354" pos:column="43"> <expr><call><name pos:line="354" pos:column="44">loadTree</name><argument_list pos:line="354" pos:column="52">(<argument><expr><name pos:line="354" pos:column="53">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		   <if pos:line="355" pos:column="20">if <condition pos:line="355" pos:column="23">(<expr><name pos:line="355" pos:column="24">root</name> <op:operator pos:line="355" pos:column="29">!=</op:operator> <name pos:line="355" pos:column="32">null</name></expr>)</condition><then pos:line="355" pos:column="37"> <block pos:line="355" pos:column="38">{
		      <expr_stmt><expr><call><name pos:line="356" pos:column="23">setRoot</name><argument_list pos:line="356" pos:column="30">(<argument><expr><name pos:line="356" pos:column="31">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><op:operator pos:line="357" pos:column="23">(</op:operator><op:operator pos:line="357" pos:column="24">(</op:operator><name pos:line="357" pos:column="25">MindMapController</name><op:operator pos:line="357" pos:column="42">)</op:operator> <name pos:line="357" pos:column="44">mModeController</name><op:operator pos:line="357" pos:column="59">)</op:operator><op:operator pos:line="357" pos:column="60">.</op:operator><call><name pos:line="357" pos:column="61">invokeHooksRecursively</name><argument_list pos:line="357" pos:column="83">(
		              <argument><expr><name pos:line="358" pos:column="31">root</name></expr></argument>, <argument><expr><name pos:line="358" pos:column="37">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		   }</block></then></if>
		   <expr_stmt><expr><call><name pos:line="361" pos:column="20">setFile</name><argument_list pos:line="361" pos:column="27">(<argument><expr><name pos:line="361" pos:column="28">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="javadoc" pos:line="364" pos:column="9">/** When a map is closed, this method is called. */</comment>
    <function><type><specifier pos:line="365" pos:column="5">public</specifier> <name pos:line="365" pos:column="12">void</name></type> <name pos:line="365" pos:column="17">destroy</name><parameter_list pos:line="365" pos:column="24">()</parameter_list> <block pos:line="365" pos:column="27">{
       <expr_stmt><expr><call><name><name pos:line="366" pos:column="8">super</name><op:operator pos:line="366" pos:column="13">.</op:operator><name pos:line="366" pos:column="14">destroy</name></name><argument_list pos:line="366" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name pos:line="367" pos:column="8">lockManager</name><op:operator pos:line="367" pos:column="19">.</op:operator><name pos:line="367" pos:column="20">releaseLock</name></name><argument_list pos:line="367" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name pos:line="368" pos:column="8">lockManager</name><op:operator pos:line="368" pos:column="19">.</op:operator><name pos:line="368" pos:column="20">releaseTimer</name></name><argument_list pos:line="368" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
       <comment type="block" pos:line="369" pos:column="8">/* cancel the timer, if map is closed. */</comment>
       <expr_stmt><expr><call><name><name pos:line="370" pos:column="8">timerForAutomaticSaving</name><op:operator pos:line="370" pos:column="31">.</op:operator><name pos:line="370" pos:column="32">cancel</name></name><argument_list pos:line="370" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name pos:line="372" pos:column="5">MindMapNodeModel</name></type> <name pos:line="372" pos:column="22">loadTree</name><parameter_list pos:line="372" pos:column="30">(<param><decl><type><specifier pos:line="372" pos:column="31">final</specifier> <name pos:line="372" pos:column="37">File</name></type> <name pos:line="372" pos:column="42">pFile</name></decl></param>)</parameter_list> <throws pos:line="372" pos:column="49">throws <argument><expr><name pos:line="372" pos:column="56">XMLParseException</name></expr></argument>, <argument><expr><name pos:line="372" pos:column="75">IOException</name></expr></argument></throws> <block pos:line="372" pos:column="87">{
    	<return pos:line="373" pos:column="9">return <expr><call><name pos:line="373" pos:column="16">loadTree</name><argument_list pos:line="373" pos:column="24">(<argument><expr><op:operator pos:line="373" pos:column="25">new</op:operator> <call><name pos:line="373" pos:column="29">FileReaderCreator</name><argument_list pos:line="373" pos:column="46">(<argument><expr><name pos:line="373" pos:column="47">pFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <class><specifier pos:line="376" pos:column="5">public</specifier> <specifier pos:line="376" pos:column="12">static</specifier> class <name pos:line="376" pos:column="25">StringReaderCreator</name> <super><implements pos:line="376" pos:column="45">implements <name pos:line="376" pos:column="56">ReaderCreator</name></implements></super> <block pos:line="376" pos:column="70">{
    	
    	<decl_stmt><decl><type><specifier pos:line="378" pos:column="9">private</specifier> <specifier pos:line="378" pos:column="17">final</specifier> <name pos:line="378" pos:column="23">String</name></type> <name pos:line="378" pos:column="30">mString</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="380" pos:column="17">public</specifier> <name pos:line="380" pos:column="24">StringReaderCreator</name><parameter_list pos:line="380" pos:column="43">(<param><decl><type><name pos:line="380" pos:column="44">String</name></type> <name pos:line="380" pos:column="51">pString</name></decl></param>)</parameter_list> <block pos:line="380" pos:column="60">{
			<expr_stmt><expr><name pos:line="381" pos:column="25">mString</name> <op:operator pos:line="381" pos:column="33">=</op:operator> <name pos:line="381" pos:column="35">pString</name></expr>;</expr_stmt>
    	}</block></constructor>
    	
    	<function><type><specifier pos:line="384" pos:column="9">public</specifier> <name pos:line="384" pos:column="16">Reader</name></type> <name pos:line="384" pos:column="23">createReader</name><parameter_list pos:line="384" pos:column="35">()</parameter_list> <throws pos:line="384" pos:column="38">throws <argument><expr><name pos:line="384" pos:column="45">FileNotFoundException</name></expr></argument></throws> <block pos:line="384" pos:column="67">{
    		<return pos:line="385" pos:column="17">return <expr><op:operator pos:line="385" pos:column="24">new</op:operator> <call><name pos:line="385" pos:column="28">StringReader</name><argument_list pos:line="385" pos:column="40">(<argument><expr><name pos:line="385" pos:column="41">mString</name></expr></argument>)</argument_list></call></expr>;</return>
    	}</block></function>
    	
    	<function><type><specifier pos:line="388" pos:column="9">public</specifier> <name pos:line="388" pos:column="16">String</name></type> <name pos:line="388" pos:column="23">toString</name><parameter_list pos:line="388" pos:column="31">()</parameter_list> <block pos:line="388" pos:column="34">{
    		<return pos:line="389" pos:column="17">return <expr><name pos:line="389" pos:column="24">mString</name></expr>;</return>
    	}</block></function>
    }</block></class>
    <class><specifier pos:line="392" pos:column="5">private</specifier> <specifier pos:line="392" pos:column="13">static</specifier> class <name pos:line="392" pos:column="26">FileReaderCreator</name> <super><implements pos:line="392" pos:column="44">implements <name pos:line="392" pos:column="55">ReaderCreator</name></implements></super> <block pos:line="392" pos:column="69">{
		<decl_stmt><decl><type><specifier pos:line="393" pos:column="17">private</specifier> <specifier pos:line="393" pos:column="25">final</specifier> <name pos:line="393" pos:column="31">File</name></type> <name pos:line="393" pos:column="36">mFile</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="395" pos:column="17">public</specifier> <name pos:line="395" pos:column="24">FileReaderCreator</name><parameter_list pos:line="395" pos:column="41">(<param><decl><type><name pos:line="395" pos:column="42">File</name></type> <name pos:line="395" pos:column="47">pFile</name></decl></param>)</parameter_list> <block pos:line="395" pos:column="54">{
			<expr_stmt><expr><name pos:line="396" pos:column="25">mFile</name> <op:operator pos:line="396" pos:column="31">=</op:operator> <name pos:line="396" pos:column="33">pFile</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="399" pos:column="17">public</specifier> <name pos:line="399" pos:column="24">Reader</name></type> <name pos:line="399" pos:column="31">createReader</name><parameter_list pos:line="399" pos:column="43">()</parameter_list> <throws pos:line="399" pos:column="46">throws <argument><expr><name pos:line="399" pos:column="53">FileNotFoundException</name></expr></argument></throws> <block pos:line="399" pos:column="75">{
			<return pos:line="400" pos:column="25">return <expr><op:operator pos:line="400" pos:column="32">new</op:operator> <call><name pos:line="400" pos:column="36">UnicodeReader</name><argument_list pos:line="400" pos:column="49">(<argument><expr><op:operator pos:line="400" pos:column="50">new</op:operator> <call><name pos:line="400" pos:column="54">FileInputStream</name><argument_list pos:line="400" pos:column="69">(<argument><expr><name pos:line="400" pos:column="70">mFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="400" pos:column="78">"UTF-8"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="403" pos:column="17">public</specifier> <name pos:line="403" pos:column="24">String</name></type> <name pos:line="403" pos:column="31">toString</name><parameter_list pos:line="403" pos:column="39">()</parameter_list> <block pos:line="403" pos:column="42">{
			<return pos:line="404" pos:column="25">return <expr><call><name><name pos:line="404" pos:column="32">mFile</name><op:operator pos:line="404" pos:column="37">.</op:operator><name pos:line="404" pos:column="38">getName</name></name><argument_list pos:line="404" pos:column="45">()</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
	<class type="interface"><specifier pos:line="407" pos:column="9">public</specifier> interface <name pos:line="407" pos:column="26">ReaderCreator</name><block pos:line="407" pos:column="39">{
    	<function_decl><type><name pos:line="408" pos:column="9">Reader</name></type> <name pos:line="408" pos:column="16">createReader</name><parameter_list pos:line="408" pos:column="28">()</parameter_list> <throws pos:line="408" pos:column="31">throws <argument><expr><name pos:line="408" pos:column="38">FileNotFoundException</name></expr></argument></throws>;</function_decl>
    }</block></class>
	<function><type><name pos:line="410" pos:column="9">MindMapNodeModel</name></type> <name pos:line="410" pos:column="26">loadTree</name><parameter_list pos:line="410" pos:column="34">(<param><decl><type><name pos:line="410" pos:column="35">ReaderCreator</name></type> <name pos:line="410" pos:column="49">pReaderCreator</name></decl></param>)</parameter_list> <throws pos:line="410" pos:column="65">throws <argument><expr><name pos:line="410" pos:column="72">XMLParseException</name></expr></argument>, <argument><expr><name pos:line="410" pos:column="91">IOException</name></expr></argument></throws> <block pos:line="410" pos:column="103">{
		<return pos:line="411" pos:column="17">return <expr><call><name pos:line="411" pos:column="24">loadTree</name><argument_list pos:line="411" pos:column="32">(<argument><expr><name pos:line="411" pos:column="33">pReaderCreator</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="49">true</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
    <function><type><name pos:line="413" pos:column="5">MindMapNodeModel</name></type> <name pos:line="413" pos:column="22">loadTree</name><parameter_list pos:line="413" pos:column="30">(<param><decl><type><name pos:line="413" pos:column="31">ReaderCreator</name></type> <name pos:line="413" pos:column="45">pReaderCreator</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="61">boolean</name></type> <name pos:line="413" pos:column="69">pAskUserBeforeUpdate</name></decl></param>)</parameter_list> <throws pos:line="413" pos:column="91">throws <argument><expr><name pos:line="413" pos:column="98">XMLParseException</name></expr></argument>, <argument><expr><name pos:line="413" pos:column="117">IOException</name></expr></argument></throws> <block pos:line="413" pos:column="129">{
        <decl_stmt><decl><type><name pos:line="414" pos:column="9">int</name></type> <name pos:line="414" pos:column="13">versionInfoLength</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="415" pos:column="17">versionInfoLength</name> <op:operator pos:line="415" pos:column="35">=</op:operator> <name><name pos:line="415" pos:column="37">EXPECTED_START_STRINGS</name><index pos:line="415" pos:column="59">[<expr><lit:literal type="number" pos:line="415" pos:column="60">0</lit:literal></expr>]</index></name><op:operator pos:line="415" pos:column="62">.</op:operator><call><name pos:line="415" pos:column="63">length</name><argument_list pos:line="415" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="416" pos:column="9">// reading the start of the file:</comment>
        <decl_stmt><decl><type><name pos:line="417" pos:column="9">StringBuffer</name></type> <name pos:line="417" pos:column="22">buffer</name> =<init pos:line="417" pos:column="30"> <expr><call><name pos:line="417" pos:column="31">readFileStart</name><argument_list pos:line="417" pos:column="44">(<argument><expr><call><name><name pos:line="417" pos:column="45">pReaderCreator</name><op:operator pos:line="417" pos:column="59">.</op:operator><name pos:line="417" pos:column="60">createReader</name></name><argument_list pos:line="417" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="417" pos:column="76">versionInfoLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="418" pos:column="9">// the resulting file is accessed by the reader:</comment>
        <decl_stmt><decl><type><name pos:line="419" pos:column="9">Reader</name></type> <name pos:line="419" pos:column="16">reader</name> =<init pos:line="419" pos:column="24"> <expr><name pos:line="419" pos:column="25">null</name></expr></init></decl>;</decl_stmt>
        <for pos:line="420" pos:column="9">for(<init><decl><type><name pos:line="420" pos:column="13">int</name></type> <name pos:line="420" pos:column="17">i</name> =<init pos:line="420" pos:column="20"> <expr><lit:literal type="number" pos:line="420" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="420" pos:column="24">i</name> <op:operator pos:line="420" pos:column="26">&lt;</op:operator> <name pos:line="420" pos:column="28">EXPECTED_START_STRINGS</name><op:operator pos:line="420" pos:column="50">.</op:operator><name pos:line="420" pos:column="51">length</name></expr>;</condition> <incr><expr><name pos:line="420" pos:column="59">i</name><op:operator pos:line="420" pos:column="60">++</op:operator></expr></incr>)<block pos:line="420" pos:column="63">{
        	<expr_stmt><expr><name pos:line="421" pos:column="17">versionInfoLength</name> <op:operator pos:line="421" pos:column="35">=</op:operator> <name><name pos:line="421" pos:column="37">EXPECTED_START_STRINGS</name><index pos:line="421" pos:column="59">[<expr><name pos:line="421" pos:column="60">i</name></expr>]</index></name><op:operator pos:line="421" pos:column="62">.</op:operator><call><name pos:line="421" pos:column="63">length</name><argument_list pos:line="421" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
        	<decl_stmt><decl><type><name pos:line="422" pos:column="17">String</name></type> <name pos:line="422" pos:column="24">mapStart</name> =<init pos:line="422" pos:column="34"> <expr><lit:literal type="string" pos:line="422" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
        	<if pos:line="423" pos:column="17">if<condition pos:line="423" pos:column="19">(<expr><call><name><name pos:line="423" pos:column="20">buffer</name><op:operator pos:line="423" pos:column="26">.</op:operator><name pos:line="423" pos:column="27">length</name></name><argument_list pos:line="423" pos:column="33">()</argument_list></call> <op:operator pos:line="423" pos:column="36">&gt;=</op:operator> <name pos:line="423" pos:column="39">versionInfoLength</name></expr>)</condition><then><block pos:line="423" pos:column="57">{
        		<expr_stmt><expr><name pos:line="424" pos:column="25">mapStart</name> <op:operator pos:line="424" pos:column="34">=</op:operator> <call><name><name pos:line="424" pos:column="36">buffer</name><op:operator pos:line="424" pos:column="42">.</op:operator><name pos:line="424" pos:column="43">substring</name></name><argument_list pos:line="424" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="424" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="424" pos:column="56">versionInfoLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then></if>
            <if pos:line="426" pos:column="13">if <condition pos:line="426" pos:column="16">(<expr><call><name><name pos:line="426" pos:column="17">mapStart</name><op:operator pos:line="426" pos:column="25">.</op:operator><name pos:line="426" pos:column="26">startsWith</name></name><argument_list pos:line="426" pos:column="36">(<argument><expr><name><name pos:line="426" pos:column="37">EXPECTED_START_STRINGS</name><index pos:line="426" pos:column="59">[<expr><name pos:line="426" pos:column="60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="426" pos:column="64"> <block pos:line="426" pos:column="65">{
                <comment type="line" pos:line="427" pos:column="17">// actual version:</comment>
                <expr_stmt><expr><name pos:line="428" pos:column="17">reader</name> <op:operator pos:line="428" pos:column="24">=</op:operator> <call><name><name pos:line="428" pos:column="26">Tools</name><op:operator pos:line="428" pos:column="31">.</op:operator><name pos:line="428" pos:column="32">getActualReader</name></name><argument_list pos:line="428" pos:column="47">(<argument><expr><call><name><name pos:line="428" pos:column="48">pReaderCreator</name><op:operator pos:line="428" pos:column="62">.</op:operator><name pos:line="428" pos:column="63">createReader</name></name><argument_list pos:line="428" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:line="429" pos:column="17">break;</break>
            }</block></then></if>
        }</block></for>
        <if pos:line="432" pos:column="9">if <condition pos:line="432" pos:column="12">(<expr><name pos:line="432" pos:column="13">reader</name> <op:operator pos:line="432" pos:column="20">==</op:operator> <name pos:line="432" pos:column="23">null</name></expr>)</condition><then pos:line="432" pos:column="28"> <block pos:line="432" pos:column="29">{
        	<if pos:line="433" pos:column="17">if<condition pos:line="433" pos:column="19">(<expr><name pos:line="433" pos:column="20">pAskUserBeforeUpdate</name></expr>)</condition><then pos:line="433" pos:column="41"> <block pos:line="433" pos:column="42">{
	            <decl_stmt><decl><type><name pos:line="434" pos:column="21">int</name></type> <name pos:line="434" pos:column="25">showResult</name> =<init pos:line="434" pos:column="37"> <expr><op:operator pos:line="434" pos:column="38">new</op:operator> <call><name pos:line="434" pos:column="42">OptionalDontShowMeAgainDialog</name><argument_list pos:line="434" pos:column="71">(<argument><expr><call><name><name pos:line="434" pos:column="72">mModeController</name>
						<op:operator pos:line="435" pos:column="49">.</op:operator><name pos:line="435" pos:column="50">getFrame</name></name><argument_list pos:line="435" pos:column="58">()</argument_list></call><op:operator pos:line="435" pos:column="60">.</op:operator><call><name pos:line="435" pos:column="61">getJFrame</name><argument_list pos:line="435" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="435" pos:column="74">mModeController</name><op:operator pos:line="435" pos:column="89">.</op:operator><name pos:line="435" pos:column="90">getSelectedView</name></name><argument_list pos:line="435" pos:column="105">()</argument_list></call></expr></argument>,
						<argument><expr><lit:literal type="string" pos:line="436" pos:column="49">"really_convert_to_current_version2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="436" pos:column="87">"confirmation"</lit:literal></expr></argument>, <argument><expr><name pos:line="436" pos:column="103">mModeController</name></expr></argument>,
						<argument><expr><op:operator pos:line="437" pos:column="49">new</op:operator> <call><name><name pos:line="437" pos:column="53">OptionalDontShowMeAgainDialog</name><op:operator pos:line="437" pos:column="82">.</op:operator><name pos:line="437" pos:column="83">StandardPropertyHandler</name></name><argument_list pos:line="437" pos:column="106">(
								<argument><expr><call><name><name pos:line="438" pos:column="65">mModeController</name><op:operator pos:line="438" pos:column="80">.</op:operator><name pos:line="438" pos:column="81">getController</name></name><argument_list pos:line="438" pos:column="94">()</argument_list></call></expr></argument>,
								<argument><expr><name pos:line="439" pos:column="65">FreeMind</name><op:operator pos:line="439" pos:column="73">.</op:operator><name pos:line="439" pos:column="74">RESOURCES_CONVERT_TO_CURRENT_VERSION</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name pos:line="440" pos:column="49">OptionalDontShowMeAgainDialog</name><op:operator pos:line="440" pos:column="78">.</op:operator><name pos:line="440" pos:column="79">ONLY_OK_SELECTION_IS_STORED</name></expr></argument>)</argument_list></call>
						<op:operator pos:line="441" pos:column="49">.</op:operator><call><name pos:line="441" pos:column="50">show</name><argument_list pos:line="441" pos:column="54">()</argument_list></call><op:operator pos:line="441" pos:column="56">.</op:operator><call><name pos:line="441" pos:column="57">getResult</name><argument_list pos:line="441" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="442" pos:column="33">if<condition pos:line="442" pos:column="35">(<expr><name pos:line="442" pos:column="36">showResult</name> <op:operator pos:line="442" pos:column="47">!=</op:operator> <name pos:line="442" pos:column="50">JOptionPane</name><op:operator pos:line="442" pos:column="61">.</op:operator><name pos:line="442" pos:column="62">OK_OPTION</name></expr>)</condition><then pos:line="442" pos:column="72"> <block pos:line="442" pos:column="73">{
					<throw pos:line="443" pos:column="41">throw <expr><op:operator pos:line="443" pos:column="47">new</op:operator> <call><name pos:line="443" pos:column="51">IllegalArgumentException</name><argument_list pos:line="443" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="76">"We should not open the reader "</lit:literal> <op:operator pos:line="443" pos:column="109">+</op:operator> <name pos:line="443" pos:column="111">pReaderCreator</name></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></then></if>
        	}</block></then></if>
			<expr_stmt><expr><name pos:line="446" pos:column="25">reader</name> <op:operator pos:line="446" pos:column="32">=</op:operator> <call><name><name pos:line="446" pos:column="34">Tools</name><op:operator pos:line="446" pos:column="39">.</op:operator><name pos:line="446" pos:column="40">getUpdateReader</name></name><argument_list pos:line="446" pos:column="55">(<argument><expr><call><name><name pos:line="446" pos:column="56">pReaderCreator</name><op:operator pos:line="446" pos:column="70">.</op:operator><name pos:line="446" pos:column="71">createReader</name></name><argument_list pos:line="446" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="446" pos:column="87">FREEMIND_VERSION_UPDATER_XSLT</name></expr></argument>, <argument><expr><call><name pos:line="446" pos:column="118">getFrame</name><argument_list pos:line="446" pos:column="126">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="447" pos:column="25">if<condition pos:line="447" pos:column="27">(<expr><name pos:line="447" pos:column="28">reader</name> <op:operator pos:line="447" pos:column="35">==</op:operator> <name pos:line="447" pos:column="38">null</name></expr>)</condition><then pos:line="447" pos:column="43"> <block pos:line="447" pos:column="44">{
				<comment type="line" pos:line="448" pos:column="33">// something went wrong on update:</comment>
				<comment type="line" pos:line="449" pos:column="33">// FIXME: Translate me.</comment>
				<expr_stmt><expr><call><name><name pos:line="450" pos:column="33">this</name><op:operator pos:line="450" pos:column="37">.</op:operator><name pos:line="450" pos:column="38">getModeController</name></name><argument_list pos:line="450" pos:column="55">()</argument_list></call><op:operator pos:line="450" pos:column="57">.</op:operator><call><name pos:line="450" pos:column="58">getFrame</name><argument_list pos:line="450" pos:column="66">()</argument_list></call><op:operator pos:line="450" pos:column="68">.</op:operator><call><name pos:line="450" pos:column="69">out</name><argument_list pos:line="450" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="450" pos:column="73">"Error on conversion. Continue without conversion. Some elements may be lost!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="451" pos:column="33">reader</name> <op:operator pos:line="451" pos:column="40">=</op:operator> <call><name><name pos:line="451" pos:column="42">Tools</name><op:operator pos:line="451" pos:column="47">.</op:operator><name pos:line="451" pos:column="48">getActualReader</name></name><argument_list pos:line="451" pos:column="63">(<argument><expr><call><name><name pos:line="451" pos:column="64">pReaderCreator</name><op:operator pos:line="451" pos:column="78">.</op:operator><name pos:line="451" pos:column="79">createReader</name></name><argument_list pos:line="451" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
        }</block></then></if>
        <try pos:line="454" pos:column="9">try <block pos:line="454" pos:column="13">{
        	<decl_stmt><decl><type><name pos:line="455" pos:column="17">HashMap</name></type> <name pos:line="455" pos:column="25">IDToTarget</name> =<init pos:line="455" pos:column="37"> <expr><op:operator pos:line="455" pos:column="38">new</op:operator> <call><name pos:line="455" pos:column="42">HashMap</name><argument_list pos:line="455" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
        	<return pos:line="456" pos:column="17">return <expr><op:operator pos:line="456" pos:column="24">(</op:operator><name pos:line="456" pos:column="25">MindMapNodeModel</name><op:operator pos:line="456" pos:column="41">)</op:operator> <call><name><name pos:line="456" pos:column="43">mModeController</name><op:operator pos:line="456" pos:column="58">.</op:operator><name pos:line="456" pos:column="59">createNodeTreeFromXml</name></name><argument_list pos:line="456" pos:column="80">(<argument><expr><name pos:line="456" pos:column="81">reader</name></expr></argument>, <argument><expr><name pos:line="456" pos:column="89">IDToTarget</name></expr></argument>)</argument_list></call></expr>;</return>
<comment type="line" pos:line="457" pos:column="1">//	        	MindMapXMLElement mapElement = new MindMapXMLElement(mModeController);</comment>
<comment type="line" pos:line="458" pos:column="1">//            mapElement.parseFromReader(reader);</comment>
<comment type="line" pos:line="459" pos:column="1">//            // complete the arrow links:</comment>
<comment type="line" pos:line="460" pos:column="1">//            mapElement.processUnfinishedLinks(getLinkRegistry());</comment>
<comment type="line" pos:line="461" pos:column="1">//            // we wait with "invokeHooksRecursively" until the map is fully</comment>
<comment type="line" pos:line="462" pos:column="1">//            // registered.</comment>
<comment type="line" pos:line="463" pos:column="1">//            return (MindMapNodeModel) mapElement.getMapChild();</comment>
        }</block> <catch pos:line="464" pos:column="11">catch (<param><decl><type><name pos:line="464" pos:column="18">Exception</name></type> <name pos:line="464" pos:column="28">ex</name></decl></param>) <block pos:line="464" pos:column="32">{
            <decl_stmt><decl><type><name pos:line="465" pos:column="13">String</name></type> <name pos:line="465" pos:column="20">errorMessage</name> =<init pos:line="465" pos:column="34"> <expr><lit:literal type="string" pos:line="465" pos:column="35">"Error while parsing file:"</lit:literal> <op:operator pos:line="465" pos:column="63">+</op:operator> <name pos:line="465" pos:column="65">ex</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="466" pos:column="13">System</name><op:operator pos:line="466" pos:column="19">.</op:operator><name pos:line="466" pos:column="20">err</name><op:operator pos:line="466" pos:column="23">.</op:operator><name pos:line="466" pos:column="24">println</name></name><argument_list pos:line="466" pos:column="31">(<argument><expr><name pos:line="466" pos:column="32">errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="467" pos:column="13">freemind</name><op:operator pos:line="467" pos:column="21">.</op:operator><name pos:line="467" pos:column="22">main</name><op:operator pos:line="467" pos:column="26">.</op:operator><name pos:line="467" pos:column="27">Resources</name><op:operator pos:line="467" pos:column="36">.</op:operator><name pos:line="467" pos:column="37">getInstance</name></name><argument_list pos:line="467" pos:column="48">()</argument_list></call><op:operator pos:line="467" pos:column="50">.</op:operator><call><name pos:line="467" pos:column="51">logException</name><argument_list pos:line="467" pos:column="63">(<argument><expr><name pos:line="467" pos:column="64">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="468" pos:column="13">MindMapXMLElement</name></type> <name pos:line="468" pos:column="31">mapElement</name> =<init pos:line="468" pos:column="43"> <expr><op:operator pos:line="468" pos:column="44">new</op:operator> <call><name pos:line="468" pos:column="48">MindMapXMLElement</name><argument_list pos:line="468" pos:column="65">(<argument><expr><name pos:line="468" pos:column="66">mModeController</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="469" pos:column="13">NodeAdapter</name></type> <name pos:line="469" pos:column="25">result</name> =<init pos:line="469" pos:column="33"> <expr><call><name><name pos:line="469" pos:column="34">mapElement</name><op:operator pos:line="469" pos:column="44">.</op:operator><name pos:line="469" pos:column="45">createNodeAdapter</name></name><argument_list pos:line="469" pos:column="62">(<argument><expr><call><name pos:line="469" pos:column="63">getFrame</name><argument_list pos:line="469" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="469" pos:column="75">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="470" pos:column="13">result</name><op:operator pos:line="470" pos:column="19">.</op:operator><name pos:line="470" pos:column="20">setText</name></name><argument_list pos:line="470" pos:column="27">(<argument><expr><name pos:line="470" pos:column="28">errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="471" pos:column="13">return <expr><op:operator pos:line="471" pos:column="20">(</op:operator><name pos:line="471" pos:column="21">MindMapNodeModel</name><op:operator pos:line="471" pos:column="37">)</op:operator> <name pos:line="471" pos:column="39">result</name></expr>;</return>
        }</block></catch> <finally pos:line="472" pos:column="11">finally <block pos:line="472" pos:column="19">{
            <if pos:line="473" pos:column="13">if <condition pos:line="473" pos:column="16">(<expr><name pos:line="473" pos:column="17">reader</name> <op:operator pos:line="473" pos:column="24">!=</op:operator> <name pos:line="473" pos:column="27">null</name></expr>)</condition><then pos:line="473" pos:column="32"> <block pos:line="473" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="474" pos:column="17">reader</name><op:operator pos:line="474" pos:column="23">.</op:operator><name pos:line="474" pos:column="24">close</name></name><argument_list pos:line="474" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc" pos:line="479" pos:column="5">/** Returns pMinimumLength bytes of the files content.
     * @return an empty string buffer, if something fails.
     */</comment>
    <function><type><specifier pos:line="482" pos:column="5">private</specifier> <name pos:line="482" pos:column="13">StringBuffer</name></type> <name pos:line="482" pos:column="26">readFileStart</name><parameter_list pos:line="482" pos:column="39">(<param><decl><type><name pos:line="482" pos:column="40">Reader</name></type> <name pos:line="482" pos:column="47">pReader</name></decl></param>, <param><decl><type><name pos:line="482" pos:column="56">int</name></type> <name pos:line="482" pos:column="60">pMinimumLength</name></decl></param>)</parameter_list> <block pos:line="482" pos:column="76">{
    	<decl_stmt><decl><type><name pos:line="483" pos:column="9">BufferedReader</name></type> <name pos:line="483" pos:column="24">in</name>=<init><expr><name pos:line="483" pos:column="27">null</name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name pos:line="484" pos:column="9">StringBuffer</name></type> <name pos:line="484" pos:column="22">buffer</name> =<init pos:line="484" pos:column="30"> <expr><op:operator pos:line="484" pos:column="31">new</op:operator> <call><name pos:line="484" pos:column="35">StringBuffer</name><argument_list pos:line="484" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try pos:line="485" pos:column="9">try <block pos:line="485" pos:column="13">{
			<comment type="line" pos:line="486" pos:column="25">// get the file start into the memory:</comment>
			<expr_stmt><expr><name pos:line="487" pos:column="25">in</name> <op:operator pos:line="487" pos:column="28">=</op:operator> <op:operator pos:line="487" pos:column="30">new</op:operator> <call><name pos:line="487" pos:column="34">BufferedReader</name><argument_list pos:line="487" pos:column="48">(<argument><expr><name pos:line="487" pos:column="49">pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="488" pos:column="25">String</name></type> <name pos:line="488" pos:column="32">str</name></decl>;</decl_stmt>
			<while pos:line="489" pos:column="25">while <condition pos:line="489" pos:column="31">(<expr><op:operator pos:line="489" pos:column="32">(</op:operator><name pos:line="489" pos:column="33">str</name> <op:operator pos:line="489" pos:column="37">=</op:operator> <call><name><name pos:line="489" pos:column="39">in</name><op:operator pos:line="489" pos:column="41">.</op:operator><name pos:line="489" pos:column="42">readLine</name></name><argument_list pos:line="489" pos:column="50">()</argument_list></call><op:operator pos:line="489" pos:column="52">)</op:operator> <op:operator pos:line="489" pos:column="54">!=</op:operator> <name pos:line="489" pos:column="57">null</name></expr>)</condition> <block pos:line="489" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="490" pos:column="33">buffer</name><op:operator pos:line="490" pos:column="39">.</op:operator><name pos:line="490" pos:column="40">append</name></name><argument_list pos:line="490" pos:column="46">(<argument><expr><name pos:line="490" pos:column="47">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="491" pos:column="33">if <condition pos:line="491" pos:column="36">(<expr><call><name><name pos:line="491" pos:column="37">buffer</name><op:operator pos:line="491" pos:column="43">.</op:operator><name pos:line="491" pos:column="44">length</name></name><argument_list pos:line="491" pos:column="50">()</argument_list></call> <op:operator pos:line="491" pos:column="53">&gt;=</op:operator> <name pos:line="491" pos:column="56">pMinimumLength</name></expr>)</condition><then pos:line="491" pos:column="71">
					<break pos:line="492" pos:column="41">break;</break></then></if>
			}</block></while>
			<expr_stmt><expr><call><name><name pos:line="494" pos:column="25">in</name><op:operator pos:line="494" pos:column="27">.</op:operator><name pos:line="494" pos:column="28">close</name></name><argument_list pos:line="494" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="495" pos:column="19">catch (<param><decl><type><name pos:line="495" pos:column="26">Exception</name></type> <name pos:line="495" pos:column="36">e</name></decl></param>) <block pos:line="495" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="496" pos:column="25">freemind</name><op:operator pos:line="496" pos:column="33">.</op:operator><name pos:line="496" pos:column="34">main</name><op:operator pos:line="496" pos:column="38">.</op:operator><name pos:line="496" pos:column="39">Resources</name><op:operator pos:line="496" pos:column="48">.</op:operator><name pos:line="496" pos:column="49">getInstance</name></name><argument_list pos:line="496" pos:column="60">()</argument_list></call><op:operator pos:line="496" pos:column="62">.</op:operator><call><name pos:line="496" pos:column="63">logException</name><argument_list pos:line="496" pos:column="75">(<argument><expr><name pos:line="496" pos:column="76">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="497" pos:column="25">return <expr><op:operator pos:line="497" pos:column="32">new</op:operator> <call><name pos:line="497" pos:column="36">StringBuffer</name><argument_list pos:line="497" pos:column="48">()</argument_list></call></expr>;</return>
		}</block></catch></try>
		<return pos:line="499" pos:column="17">return <expr><name pos:line="499" pos:column="24">buffer</name></expr>;</return>
    }</block></function>



    <function><type><specifier pos:line="504" pos:column="5">private</specifier> <name pos:line="504" pos:column="13">void</name></type> <name pos:line="504" pos:column="18">scheduleTimerForAutomaticSaving</name><parameter_list pos:line="504" pos:column="49">()</parameter_list> <block pos:line="504" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="505" pos:column="17">int</name></type> <name pos:line="505" pos:column="21">numberOfTempFiles</name> =<init pos:line="505" pos:column="40"> <expr><call><name><name pos:line="505" pos:column="41">Integer</name><op:operator pos:line="505" pos:column="48">.</op:operator><name pos:line="505" pos:column="49">parseInt</name></name><argument_list pos:line="505" pos:column="57">(<argument><expr><call><name pos:line="505" pos:column="58">getFrame</name><argument_list pos:line="505" pos:column="66">()</argument_list></call><op:operator pos:line="505" pos:column="68">.</op:operator><call><name pos:line="505" pos:column="69">getProperty</name><argument_list pos:line="505" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="505" pos:column="81">"number_of_different_files_for_automatic_save"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="506" pos:column="17">boolean</name></type> <name pos:line="506" pos:column="25">filesShouldBeDeletedAfterShutdown</name> =<init pos:line="506" pos:column="60"> <expr><call><name><name pos:line="506" pos:column="61">Resources</name><op:operator pos:line="506" pos:column="70">.</op:operator><name pos:line="506" pos:column="71">getInstance</name></name><argument_list pos:line="506" pos:column="82">()</argument_list></call><op:operator pos:line="506" pos:column="84">.</op:operator><call><name pos:line="506" pos:column="85">getBoolProperty</name><argument_list pos:line="506" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="506" pos:column="101">"delete_automatic_saves_at_exit"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="507" pos:column="17">String</name></type> <name pos:line="507" pos:column="24">path</name> =<init pos:line="507" pos:column="30"> <expr><call><name pos:line="507" pos:column="31">getFrame</name><argument_list pos:line="507" pos:column="39">()</argument_list></call><op:operator pos:line="507" pos:column="41">.</op:operator><call><name pos:line="507" pos:column="42">getProperty</name><argument_list pos:line="507" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="507" pos:column="54">"path_to_automatic_saves"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block" pos:line="508" pos:column="17">/* two standard values: */</comment>
		<if pos:line="509" pos:column="17">if<condition pos:line="509" pos:column="19">(<expr><call><name><name pos:line="509" pos:column="20">Tools</name><op:operator pos:line="509" pos:column="25">.</op:operator><name pos:line="509" pos:column="26">safeEquals</name></name><argument_list pos:line="509" pos:column="36">(<argument><expr><name pos:line="509" pos:column="37">path</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="509" pos:column="43">"default"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="509" pos:column="54"> <block pos:line="509" pos:column="55">{
		    <expr_stmt><expr><name pos:line="510" pos:column="21">path</name> <op:operator pos:line="510" pos:column="26">=</op:operator> <name pos:line="510" pos:column="28">null</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="512" pos:column="17">if<condition pos:line="512" pos:column="19">(<expr><call><name><name pos:line="512" pos:column="20">Tools</name><op:operator pos:line="512" pos:column="25">.</op:operator><name pos:line="512" pos:column="26">safeEquals</name></name><argument_list pos:line="512" pos:column="36">(<argument><expr><name pos:line="512" pos:column="37">path</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="512" pos:column="43">"freemind_home"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="512" pos:column="60"> <block pos:line="512" pos:column="61">{
		    <expr_stmt><expr><name pos:line="513" pos:column="21">path</name> <op:operator pos:line="513" pos:column="26">=</op:operator> <call><name pos:line="513" pos:column="28">getFrame</name><argument_list pos:line="513" pos:column="36">()</argument_list></call><op:operator pos:line="513" pos:column="38">.</op:operator><call><name pos:line="513" pos:column="39">getFreemindDirectory</name><argument_list pos:line="513" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="515" pos:column="17">int</name></type> <name pos:line="515" pos:column="21">delay</name> =<init pos:line="515" pos:column="28"> <expr><call><name><name pos:line="515" pos:column="29">Integer</name><op:operator pos:line="515" pos:column="36">.</op:operator><name pos:line="515" pos:column="37">parseInt</name></name><argument_list pos:line="515" pos:column="45">(<argument><expr><call><name pos:line="515" pos:column="46">getFrame</name><argument_list pos:line="515" pos:column="54">()</argument_list></call><op:operator pos:line="515" pos:column="56">.</op:operator><call><name pos:line="515" pos:column="57">getProperty</name><argument_list pos:line="515" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="515" pos:column="69">"time_for_automatic_save"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="516" pos:column="17">File</name></type> <name pos:line="516" pos:column="22">dirToStore</name> =<init pos:line="516" pos:column="34"> <expr><name pos:line="516" pos:column="35">null</name></expr></init></decl>;</decl_stmt>
		<if pos:line="517" pos:column="17">if<condition pos:line="517" pos:column="19">(<expr><name pos:line="517" pos:column="20">path</name><op:operator pos:line="517" pos:column="24">!=</op:operator><name pos:line="517" pos:column="26">null</name></expr>)</condition><then pos:line="517" pos:column="31"> <block pos:line="517" pos:column="32">{
		    <expr_stmt><expr><name pos:line="518" pos:column="21">dirToStore</name> <op:operator pos:line="518" pos:column="32">=</op:operator> <op:operator pos:line="518" pos:column="34">new</op:operator> <call><name pos:line="518" pos:column="38">File</name><argument_list pos:line="518" pos:column="42">(<argument><expr><name pos:line="518" pos:column="43">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block" pos:line="519" pos:column="21">/* existence? */</comment>
		    <if pos:line="520" pos:column="21">if<condition pos:line="520" pos:column="23">(<expr><op:operator pos:line="520" pos:column="24">!</op:operator> <call><name><name pos:line="520" pos:column="26">dirToStore</name><op:operator pos:line="520" pos:column="36">.</op:operator><name pos:line="520" pos:column="37">isDirectory</name></name><argument_list pos:line="520" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="520" pos:column="51"> <block pos:line="520" pos:column="52">{
		        <expr_stmt><expr><name pos:line="521" pos:column="25">dirToStore</name> <op:operator pos:line="521" pos:column="36">=</op:operator> <name pos:line="521" pos:column="38">null</name></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name pos:line="522" pos:column="25">System</name><op:operator pos:line="522" pos:column="31">.</op:operator><name pos:line="522" pos:column="32">err</name><op:operator pos:line="522" pos:column="35">.</op:operator><name pos:line="522" pos:column="36">println</name></name><argument_list pos:line="522" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="522" pos:column="44">"Temporary directory "</lit:literal> <op:operator pos:line="522" pos:column="67">+</op:operator> <name pos:line="522" pos:column="69">path</name> <op:operator pos:line="522" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="522" pos:column="76">" not found. Disabling automatic store."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name pos:line="523" pos:column="25">delay</name> <op:operator pos:line="523" pos:column="31">=</op:operator> <name pos:line="523" pos:column="33">Integer</name><op:operator pos:line="523" pos:column="40">.</op:operator><name pos:line="523" pos:column="41">MAX_VALUE</name></expr>;</expr_stmt>
		        <return pos:line="524" pos:column="25">return;</return>
		    }</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="527" pos:column="17">timerForAutomaticSaving</name> <op:operator pos:line="527" pos:column="41">=</op:operator> <op:operator pos:line="527" pos:column="43">new</op:operator> <call><name pos:line="527" pos:column="47">Timer</name><argument_list pos:line="527" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="528" pos:column="17">timerForAutomaticSaving</name><op:operator pos:line="528" pos:column="40">.</op:operator><name pos:line="528" pos:column="41">schedule</name></name><argument_list pos:line="528" pos:column="49">(<argument><expr><op:operator pos:line="528" pos:column="50">new</op:operator> <call><name pos:line="528" pos:column="54">DoAutomaticSave</name><argument_list pos:line="528" pos:column="69">(<argument><expr><name pos:line="528" pos:column="70">MindMapMapModel</name><op:operator pos:line="528" pos:column="85">.</op:operator><name pos:line="528" pos:column="86">this</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="92">numberOfTempFiles</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="111">filesShouldBeDeletedAfterShutdown</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="146">dirToStore</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="528" pos:column="159">delay</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="166">delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>



	<class><specifier pos:line="533" pos:column="9">private</specifier> class <name pos:line="533" pos:column="23">LockManager</name> <super><extends pos:line="533" pos:column="35">extends <name pos:line="533" pos:column="43">TimerTask</name></extends></super> <block pos:line="533" pos:column="53">{
        <decl_stmt><decl><type><name pos:line="534" pos:column="9">File</name></type> <name pos:line="534" pos:column="14">lockedSemaphoreFile</name> =<init pos:line="534" pos:column="35"> <expr><name pos:line="534" pos:column="36">null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="535" pos:column="9">Timer</name></type> <name pos:line="535" pos:column="15">lockTimer</name> =<init pos:line="535" pos:column="26"> <expr><name pos:line="535" pos:column="27">null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="536" pos:column="9">final</specifier> <name pos:line="536" pos:column="15">long</name></type> <name pos:line="536" pos:column="20">lockUpdatePeriod</name> =<init pos:line="536" pos:column="38"> <expr><lit:literal type="number" pos:line="536" pos:column="39">4</lit:literal><op:operator pos:line="536" pos:column="40">*</op:operator><lit:literal type="number" pos:line="536" pos:column="41">60</lit:literal><op:operator pos:line="536" pos:column="43">*</op:operator><lit:literal type="number" pos:line="536" pos:column="44">1000</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="536" pos:column="50">// four minutes</comment>
        <decl_stmt><decl><type><specifier pos:line="537" pos:column="9">final</specifier> <name pos:line="537" pos:column="15">long</name></type> <name pos:line="537" pos:column="20">lockSafetyPeriod</name> =<init pos:line="537" pos:column="38"> <expr><lit:literal type="number" pos:line="537" pos:column="39">5</lit:literal><op:operator pos:line="537" pos:column="40">*</op:operator><lit:literal type="number" pos:line="537" pos:column="41">60</lit:literal><op:operator pos:line="537" pos:column="43">*</op:operator><lit:literal type="number" pos:line="537" pos:column="44">1000</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="537" pos:column="50">// five minutes</comment>
        <decl_stmt><decl><type><name pos:line="538" pos:column="9">String</name></type> <name pos:line="538" pos:column="16">lockingUserOfOldLock</name> =<init pos:line="538" pos:column="38"> <expr><name pos:line="538" pos:column="39">null</name></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="540" pos:column="9">private</specifier> <name pos:line="540" pos:column="17">File</name></type> <name pos:line="540" pos:column="22">getSemaphoreFile</name><parameter_list pos:line="540" pos:column="38">(<param><decl><type><name pos:line="540" pos:column="39">File</name></type> <name pos:line="540" pos:column="44">mapFile</name></decl></param>)</parameter_list> <block pos:line="540" pos:column="53">{
            <return pos:line="541" pos:column="13">return <expr><op:operator pos:line="541" pos:column="20">new</op:operator> <call><name pos:line="541" pos:column="24">File</name><argument_list pos:line="541" pos:column="28">(<argument><expr><call><name><name pos:line="541" pos:column="29">mapFile</name><op:operator pos:line="541" pos:column="36">.</op:operator><name pos:line="541" pos:column="37">getParent</name></name><argument_list pos:line="541" pos:column="46">()</argument_list></call><op:operator pos:line="541" pos:column="48">+</op:operator><call><name><name pos:line="541" pos:column="49">System</name><op:operator pos:line="541" pos:column="55">.</op:operator><name pos:line="541" pos:column="56">getProperty</name></name><argument_list pos:line="541" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="541" pos:column="68">"file.separator"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="541" pos:column="85">+</op:operator>
                            <lit:literal type="string" pos:line="542" pos:column="29">"$~"</lit:literal><op:operator pos:line="542" pos:column="33">+</op:operator><call><name><name pos:line="542" pos:column="34">mapFile</name><op:operator pos:line="542" pos:column="41">.</op:operator><name pos:line="542" pos:column="42">getName</name></name><argument_list pos:line="542" pos:column="49">()</argument_list></call><op:operator pos:line="542" pos:column="51">+</op:operator><lit:literal type="string" pos:line="542" pos:column="52">"~"</lit:literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <function><type><specifier pos:line="544" pos:column="9">public</specifier> <name pos:line="544" pos:column="16">synchronized</name> <name pos:line="544" pos:column="29">String</name></type> <name pos:line="544" pos:column="36">popLockingUserOfOldLock</name><parameter_list pos:line="544" pos:column="59">()</parameter_list> <block pos:line="544" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="545" pos:column="13">String</name></type> <name pos:line="545" pos:column="20">toReturn</name> =<init pos:line="545" pos:column="30"> <expr><name pos:line="545" pos:column="31">lockingUserOfOldLock</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="546" pos:column="13">lockingUserOfOldLock</name> <op:operator pos:line="546" pos:column="34">=</op:operator> <name pos:line="546" pos:column="36">null</name></expr>;</expr_stmt>
            <return pos:line="547" pos:column="13">return <expr><name pos:line="547" pos:column="20">toReturn</name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="549" pos:column="9">private</specifier> <name pos:line="549" pos:column="17">void</name></type> <name pos:line="549" pos:column="22">writeSemaphoreFile</name><parameter_list pos:line="549" pos:column="40">(<param><decl><type><name pos:line="549" pos:column="41">File</name></type> <name pos:line="549" pos:column="46">inSemaphoreFile</name></decl></param>)</parameter_list> <throws pos:line="549" pos:column="63">throws <argument><expr><name pos:line="549" pos:column="70">Exception</name></expr></argument></throws> <block pos:line="549" pos:column="80">{
            <decl_stmt><decl><type><name pos:line="550" pos:column="13">FileOutputStream</name></type> <name pos:line="550" pos:column="30">semaphoreOutputStream</name> =<init pos:line="550" pos:column="53"> <expr><op:operator pos:line="550" pos:column="54">new</op:operator> <call><name pos:line="550" pos:column="58">FileOutputStream</name><argument_list pos:line="550" pos:column="74">(<argument><expr><name pos:line="550" pos:column="75">inSemaphoreFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="551" pos:column="13">FileLock</name></type> <name pos:line="551" pos:column="22">lock</name> =<init pos:line="551" pos:column="28"> <expr><name pos:line="551" pos:column="29">null</name></expr></init></decl>;</decl_stmt>
            <try pos:line="552" pos:column="13">try <block pos:line="552" pos:column="17">{
               <expr_stmt><expr><name pos:line="553" pos:column="16">lock</name> <op:operator pos:line="553" pos:column="21">=</op:operator> <call><name><name pos:line="553" pos:column="23">semaphoreOutputStream</name><op:operator pos:line="553" pos:column="44">.</op:operator><name pos:line="553" pos:column="45">getChannel</name></name><argument_list pos:line="553" pos:column="55">()</argument_list></call><op:operator pos:line="553" pos:column="57">.</op:operator><call><name pos:line="553" pos:column="58">tryLock</name><argument_list pos:line="553" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
               <if pos:line="554" pos:column="16">if <condition pos:line="554" pos:column="19">(<expr><name pos:line="554" pos:column="20">lock</name> <op:operator pos:line="554" pos:column="25">==</op:operator> <name pos:line="554" pos:column="28">null</name></expr>)</condition><then pos:line="554" pos:column="33"> <block pos:line="554" pos:column="34">{
                  <expr_stmt><expr><call><name><name pos:line="555" pos:column="19">semaphoreOutputStream</name><op:operator pos:line="555" pos:column="40">.</op:operator><name pos:line="555" pos:column="41">close</name></name><argument_list pos:line="555" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name pos:line="556" pos:column="19">System</name><op:operator pos:line="556" pos:column="25">.</op:operator><name pos:line="556" pos:column="26">err</name><op:operator pos:line="556" pos:column="29">.</op:operator><name pos:line="556" pos:column="30">println</name></name><argument_list pos:line="556" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="556" pos:column="38">"Locking failed."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <throw pos:line="557" pos:column="19">throw <expr><op:operator pos:line="557" pos:column="25">new</op:operator> <call><name pos:line="557" pos:column="29">Exception</name><argument_list pos:line="557" pos:column="38">()</argument_list></call></expr>;</throw> }</block></then></if>}</block> <comment type="line" pos:line="557" pos:column="45">// locking failed</comment>
            <catch pos:line="558" pos:column="13">catch (<param><decl><type><name pos:line="558" pos:column="20">UnsatisfiedLinkError</name></type> <name pos:line="558" pos:column="41">eUle</name></decl></param>) <block pos:line="558" pos:column="47">{}</block></catch>  <comment type="line" pos:line="558" pos:column="51">// This may come with Windows95. We don't insist on detailed locking in that case.</comment>
            <catch pos:line="559" pos:column="13">catch (<param><decl><type><name pos:line="559" pos:column="20">NoClassDefFoundError</name></type> <name pos:line="559" pos:column="41">eDcdf</name></decl></param>) <block pos:line="559" pos:column="48">{}</block></catch></try> <comment type="line" pos:line="559" pos:column="51">// ^ just like above.</comment>
            <comment type="line" pos:line="560" pos:column="13">// ^ On Windows95, the necessary libraries are missing.</comment>
            <expr_stmt><expr><call><name><name pos:line="561" pos:column="13">semaphoreOutputStream</name><op:operator pos:line="561" pos:column="34">.</op:operator><name pos:line="561" pos:column="35">write</name></name><argument_list pos:line="561" pos:column="40">(<argument><expr><call><name><name pos:line="561" pos:column="41">System</name><op:operator pos:line="561" pos:column="47">.</op:operator><name pos:line="561" pos:column="48">getProperty</name></name><argument_list pos:line="561" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="561" pos:column="60">"user.name"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="561" pos:column="72">.</op:operator><call><name pos:line="561" pos:column="73">getBytes</name><argument_list pos:line="561" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="562" pos:column="13">semaphoreOutputStream</name><op:operator pos:line="562" pos:column="34">.</op:operator><name pos:line="562" pos:column="35">write</name></name><argument_list pos:line="562" pos:column="40">(<argument><expr><lit:literal type="char" pos:line="562" pos:column="41">'\n'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="563" pos:column="13">semaphoreOutputStream</name><op:operator pos:line="563" pos:column="34">.</op:operator><name pos:line="563" pos:column="35">write</name></name><argument_list pos:line="563" pos:column="40">(<argument><expr><call><name><name pos:line="563" pos:column="41">String</name><op:operator pos:line="563" pos:column="47">.</op:operator><name pos:line="563" pos:column="48">valueOf</name></name><argument_list pos:line="563" pos:column="55">(<argument><expr><call><name><name pos:line="563" pos:column="56">System</name><op:operator pos:line="563" pos:column="62">.</op:operator><name pos:line="563" pos:column="63">currentTimeMillis</name></name><argument_list pos:line="563" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="563" pos:column="83">.</op:operator><call><name pos:line="563" pos:column="84">getBytes</name><argument_list pos:line="563" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="564" pos:column="13">semaphoreOutputStream</name><op:operator pos:line="564" pos:column="34">.</op:operator><name pos:line="564" pos:column="35">close</name></name><argument_list pos:line="564" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="565" pos:column="13">semaphoreOutputStream</name> <op:operator pos:line="565" pos:column="35">=</op:operator> <name pos:line="565" pos:column="37">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="566" pos:column="13">Tools</name><op:operator pos:line="566" pos:column="18">.</op:operator><name pos:line="566" pos:column="19">setHidden</name></name><argument_list pos:line="566" pos:column="28">(<argument><expr><name pos:line="566" pos:column="29">inSemaphoreFile</name></expr></argument>, <argument><expr><name pos:line="566" pos:column="46">true</name></expr></argument>, <comment type="block" pos:line="566" pos:column="52">/*synchro=*/</comment><argument><expr><name pos:line="566" pos:column="64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="566" pos:column="72">// Exception free</comment>
            <if pos:line="567" pos:column="13">if <condition pos:line="567" pos:column="16">(<expr><name pos:line="567" pos:column="17">lock</name> <op:operator pos:line="567" pos:column="22">!=</op:operator> <name pos:line="567" pos:column="25">null</name></expr>)</condition><then pos:line="567" pos:column="30"> <expr_stmt><expr><call><name><name pos:line="567" pos:column="31">lock</name><op:operator pos:line="567" pos:column="35">.</op:operator><name pos:line="567" pos:column="36">release</name></name><argument_list pos:line="567" pos:column="43">()</argument_list></call></expr>;</expr_stmt></then></if> }</block></function>

        <function><type><specifier pos:line="569" pos:column="9">public</specifier> <name pos:line="569" pos:column="16">synchronized</name> <name pos:line="569" pos:column="29">String</name></type> <name pos:line="569" pos:column="36">tryToLock</name><parameter_list pos:line="569" pos:column="45">(<param><decl><type><name pos:line="569" pos:column="46">File</name></type> <name pos:line="569" pos:column="51">file</name></decl></param>)</parameter_list> <throws pos:line="569" pos:column="57">throws <argument><expr><name pos:line="569" pos:column="64">Exception</name></expr></argument></throws> <block pos:line="569" pos:column="74">{
            <comment type="line" pos:line="570" pos:column="13">// Locking should work for opening as well as for saving as.</comment>
            <comment type="line" pos:line="571" pos:column="13">// We are especially carefull when it comes to exclusivity of writing.</comment>

            <decl_stmt><decl><type><name pos:line="573" pos:column="13">File</name></type> <name pos:line="573" pos:column="18">semaphoreFile</name> =<init pos:line="573" pos:column="33"> <expr><call><name pos:line="573" pos:column="34">getSemaphoreFile</name><argument_list pos:line="573" pos:column="50">(<argument><expr><name pos:line="573" pos:column="51">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="574" pos:column="13">if <condition pos:line="574" pos:column="16">(<expr><name pos:line="574" pos:column="17">semaphoreFile</name> <op:operator pos:line="574" pos:column="31">==</op:operator> <name pos:line="574" pos:column="34">lockedSemaphoreFile</name></expr>)</condition><then pos:line="574" pos:column="54"> <block pos:line="574" pos:column="55">{
                <return pos:line="575" pos:column="17">return <expr><name pos:line="575" pos:column="24">null</name></expr> ;</return> }</block></then></if>
            <try pos:line="576" pos:column="13">try <block pos:line="576" pos:column="17">{
               <decl_stmt><decl><type><name pos:line="577" pos:column="16">BufferedReader</name></type> <name pos:line="577" pos:column="31">semaphoreReader</name> =<init pos:line="577" pos:column="48"> <expr><op:operator pos:line="577" pos:column="49">new</op:operator> <call><name pos:line="577" pos:column="53">BufferedReader</name><argument_list pos:line="577" pos:column="67">(<argument><expr><op:operator pos:line="577" pos:column="68">new</op:operator> <call><name pos:line="577" pos:column="72">FileReader</name><argument_list pos:line="577" pos:column="82">(<argument><expr><name pos:line="577" pos:column="83">semaphoreFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="578" pos:column="16">String</name></type> <name pos:line="578" pos:column="23">lockingUser</name> =<init pos:line="578" pos:column="36"> <expr><call><name><name pos:line="578" pos:column="37">semaphoreReader</name><op:operator pos:line="578" pos:column="52">.</op:operator><name pos:line="578" pos:column="53">readLine</name></name><argument_list pos:line="578" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

               <decl_stmt><decl><type><name pos:line="580" pos:column="16">long</name></type> <name pos:line="580" pos:column="21">lockTime</name> =<init pos:line="580" pos:column="31"> <expr><op:operator pos:line="580" pos:column="32">new</op:operator> <call><name pos:line="580" pos:column="36">Long</name> <argument_list pos:line="580" pos:column="41">(<argument><expr><call><name><name pos:line="580" pos:column="42">semaphoreReader</name><op:operator pos:line="580" pos:column="57">.</op:operator><name pos:line="580" pos:column="58">readLine</name></name><argument_list pos:line="580" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="580" pos:column="69">.</op:operator><call><name pos:line="580" pos:column="70">longValue</name><argument_list pos:line="580" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="581" pos:column="16">long</name></type> <name pos:line="581" pos:column="21">timeDifference</name> =<init pos:line="581" pos:column="37"> <expr><call><name><name pos:line="581" pos:column="38">System</name><op:operator pos:line="581" pos:column="44">.</op:operator><name pos:line="581" pos:column="45">currentTimeMillis</name></name><argument_list pos:line="581" pos:column="62">()</argument_list></call> <op:operator pos:line="581" pos:column="65">-</op:operator> <name pos:line="581" pos:column="67">lockTime</name></expr></init></decl>;</decl_stmt>
               <comment type="line" pos:line="582" pos:column="16">//catch (NumberFormatException enf) {} // This means that the time was not written at all - lock is corrupt</comment>
               <if pos:line="583" pos:column="16">if <condition pos:line="583" pos:column="19">(<expr><name pos:line="583" pos:column="20">timeDifference</name> <op:operator pos:line="583" pos:column="35">&gt;</op:operator> <name pos:line="583" pos:column="37">lockSafetyPeriod</name></expr>)</condition><then pos:line="583" pos:column="54"> <block pos:line="583" pos:column="55">{ <comment type="line" pos:line="583" pos:column="57">// the lock is old</comment>
                  <expr_stmt><expr><call><name><name pos:line="584" pos:column="19">semaphoreReader</name><op:operator pos:line="584" pos:column="34">.</op:operator><name pos:line="584" pos:column="35">close</name></name><argument_list pos:line="584" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name pos:line="585" pos:column="19">lockingUserOfOldLock</name> <op:operator pos:line="585" pos:column="40">=</op:operator> <name pos:line="585" pos:column="42">lockingUser</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name pos:line="586" pos:column="19">semaphoreFile</name><op:operator pos:line="586" pos:column="32">.</op:operator><name pos:line="586" pos:column="33">delete</name></name><argument_list pos:line="586" pos:column="39">()</argument_list></call></expr>;</expr_stmt> }</block></then>
               <else pos:line="587" pos:column="16">else <return pos:line="587" pos:column="21">return <expr><name pos:line="587" pos:column="28">lockingUser</name></expr>;</return></else></if> }</block>
            <catch pos:line="588" pos:column="13">catch (<param><decl><type><name pos:line="588" pos:column="20">FileNotFoundException</name></type> <name pos:line="588" pos:column="42">e</name></decl></param>) <block pos:line="588" pos:column="45">{}</block></catch></try>

            <expr_stmt><expr><call><name pos:line="590" pos:column="13">writeSemaphoreFile</name><argument_list pos:line="590" pos:column="31">(<argument><expr><name pos:line="590" pos:column="32">semaphoreFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="592" pos:column="13">if <condition pos:line="592" pos:column="16">(<expr><name pos:line="592" pos:column="17">lockTimer</name> <op:operator pos:line="592" pos:column="27">==</op:operator> <name pos:line="592" pos:column="30">null</name></expr>)</condition><then pos:line="592" pos:column="35"> <block pos:line="592" pos:column="36">{
              <expr_stmt><expr><name pos:line="593" pos:column="15">lockTimer</name> <op:operator pos:line="593" pos:column="25">=</op:operator> <op:operator pos:line="593" pos:column="27">new</op:operator> <call><name pos:line="593" pos:column="31">Timer</name><argument_list pos:line="593" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name pos:line="594" pos:column="15">lockTimer</name><op:operator pos:line="594" pos:column="24">.</op:operator><name pos:line="594" pos:column="25">schedule</name></name><argument_list pos:line="594" pos:column="33">(<argument><expr><name pos:line="594" pos:column="34">this</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="40">lockUpdatePeriod</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="58">lockUpdatePeriod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <expr_stmt><expr><call><name pos:line="595" pos:column="13">releaseLock</name><argument_list pos:line="595" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="596" pos:column="13">lockedSemaphoreFile</name> <op:operator pos:line="596" pos:column="33">=</op:operator> <name pos:line="596" pos:column="35">semaphoreFile</name></expr>;</expr_stmt>
            <return pos:line="597" pos:column="13">return <expr><name pos:line="597" pos:column="20">null</name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="599" pos:column="9">public</specifier> <name pos:line="599" pos:column="16">synchronized</name> <name pos:line="599" pos:column="29">void</name></type> <name pos:line="599" pos:column="34">releaseLock</name><parameter_list pos:line="599" pos:column="45">()</parameter_list> <block pos:line="599" pos:column="48">{
           <if pos:line="600" pos:column="12">if <condition pos:line="600" pos:column="15">(<expr><name pos:line="600" pos:column="16">lockedSemaphoreFile</name> <op:operator pos:line="600" pos:column="36">!=</op:operator> <name pos:line="600" pos:column="39">null</name></expr>)</condition><then pos:line="600" pos:column="44"> <block pos:line="600" pos:column="45">{
              <expr_stmt><expr><call><name><name pos:line="601" pos:column="15">lockedSemaphoreFile</name><op:operator pos:line="601" pos:column="34">.</op:operator><name pos:line="601" pos:column="35">delete</name></name><argument_list pos:line="601" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name pos:line="602" pos:column="15">lockedSemaphoreFile</name> <op:operator pos:line="602" pos:column="35">=</op:operator> <name pos:line="602" pos:column="37">null</name></expr>;</expr_stmt> }</block></then></if>}</block></function> <comment type="line" pos:line="602" pos:column="46">// this may fail, TODO: ensure real deletion</comment>

        <function><type><specifier pos:line="604" pos:column="9">public</specifier> <name pos:line="604" pos:column="16">synchronized</name> <name pos:line="604" pos:column="29">void</name></type> <name pos:line="604" pos:column="34">releaseTimer</name><parameter_list pos:line="604" pos:column="46">()</parameter_list> <block pos:line="604" pos:column="49">{
            <if pos:line="605" pos:column="13">if <condition pos:line="605" pos:column="16">(<expr><name pos:line="605" pos:column="17">lockTimer</name> <op:operator pos:line="605" pos:column="27">!=</op:operator> <name pos:line="605" pos:column="30">null</name></expr>)</condition><then pos:line="605" pos:column="35"> <block pos:line="605" pos:column="36">{
              <expr_stmt><expr><call><name><name pos:line="606" pos:column="15">lockTimer</name><op:operator pos:line="606" pos:column="24">.</op:operator><name pos:line="606" pos:column="25">cancel</name></name><argument_list pos:line="606" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name pos:line="607" pos:column="15">lockTimer</name> <op:operator pos:line="607" pos:column="25">=</op:operator> <name pos:line="607" pos:column="27">null</name></expr>;</expr_stmt> }</block></then></if>}</block></function>

        <function><type><specifier pos:line="609" pos:column="9">public</specifier> <name pos:line="609" pos:column="16">synchronized</name> <name pos:line="609" pos:column="29">void</name></type> <name pos:line="609" pos:column="34">run</name><parameter_list pos:line="609" pos:column="37">()</parameter_list> <block pos:line="609" pos:column="40">{ <comment type="line" pos:line="609" pos:column="42">// update semaphore file</comment>
            <if pos:line="610" pos:column="13">if <condition pos:line="610" pos:column="16">(<expr><name pos:line="610" pos:column="17">lockedSemaphoreFile</name> <op:operator pos:line="610" pos:column="37">==</op:operator> <name pos:line="610" pos:column="40">null</name></expr>)</condition><then pos:line="610" pos:column="45"> <block pos:line="610" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="611" pos:column="17">System</name><op:operator pos:line="611" pos:column="23">.</op:operator><name pos:line="611" pos:column="24">err</name><op:operator pos:line="611" pos:column="27">.</op:operator><name pos:line="611" pos:column="28">println</name></name><argument_list pos:line="611" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="611" pos:column="36">"unexpected: lockedSemaphoreFile is null upon lock update"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="612" pos:column="17">return;</return> }</block></then></if>
            <try pos:line="613" pos:column="13">try <block pos:line="613" pos:column="17">{
               <expr_stmt><expr><call><name><name pos:line="614" pos:column="16">Tools</name><op:operator pos:line="614" pos:column="21">.</op:operator><name pos:line="614" pos:column="22">setHidden</name></name><argument_list pos:line="614" pos:column="31">(<argument><expr><name pos:line="614" pos:column="32">lockedSemaphoreFile</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="53">false</name></expr></argument>, <comment type="block" pos:line="614" pos:column="60">/*synchro=*/</comment><argument><expr><name pos:line="614" pos:column="72">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="614" pos:column="79">// Exception free</comment>
               <comment type="line" pos:line="615" pos:column="16">// ^ We unhide the file before overwriting because JavaRE1.4.2 does</comment>
               <comment type="line" pos:line="616" pos:column="16">// not let us open hidden files for writing. This is a workaround for Java bug,</comment>
               <comment type="line" pos:line="617" pos:column="16">// I guess.</comment>

               <expr_stmt><expr><call><name pos:line="619" pos:column="16">writeSemaphoreFile</name><argument_list pos:line="619" pos:column="34">(<argument><expr><name pos:line="619" pos:column="35">lockedSemaphoreFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block>
            <catch pos:line="620" pos:column="13">catch (<param><decl><type><name pos:line="620" pos:column="20">Exception</name></type> <name pos:line="620" pos:column="30">e</name></decl></param>) <block pos:line="620" pos:column="33">{<expr_stmt><expr><call><name><name pos:line="620" pos:column="34">freemind</name><op:operator pos:line="620" pos:column="42">.</op:operator><name pos:line="620" pos:column="43">main</name><op:operator pos:line="620" pos:column="47">.</op:operator><name pos:line="620" pos:column="48">Resources</name><op:operator pos:line="620" pos:column="57">.</op:operator><name pos:line="620" pos:column="58">getInstance</name></name><argument_list pos:line="620" pos:column="69">()</argument_list></call><op:operator pos:line="620" pos:column="71">.</op:operator><call><name pos:line="620" pos:column="72">logException</name><argument_list pos:line="620" pos:column="84">(<argument><expr><name pos:line="620" pos:column="85">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></catch></try>}</block></function>
    }</block></class>
    <class><specifier pos:line="622" pos:column="5">private</specifier> class <name pos:line="622" pos:column="19">DummyLockManager</name> <super><extends pos:line="622" pos:column="36">extends <name pos:line="622" pos:column="44">LockManager</name></extends></super> <block pos:line="622" pos:column="56">{
        <function><type><specifier pos:line="623" pos:column="9">public</specifier> <name pos:line="623" pos:column="16">synchronized</name> <name pos:line="623" pos:column="29">String</name></type> <name pos:line="623" pos:column="36">popLockingUserOfOldLock</name><parameter_list pos:line="623" pos:column="59">()</parameter_list> <block pos:line="623" pos:column="62">{
            <return pos:line="624" pos:column="13">return <expr><name pos:line="624" pos:column="20">null</name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="626" pos:column="9">public</specifier> <name pos:line="626" pos:column="16">synchronized</name> <name pos:line="626" pos:column="29">String</name></type> <name pos:line="626" pos:column="36">tryToLock</name><parameter_list pos:line="626" pos:column="45">(<param><decl><type><name pos:line="626" pos:column="46">File</name></type> <name pos:line="626" pos:column="51">file</name></decl></param>)</parameter_list> <throws pos:line="626" pos:column="57">throws <argument><expr><name pos:line="626" pos:column="64">Exception</name></expr></argument></throws> <block pos:line="626" pos:column="74">{
            <return pos:line="627" pos:column="13">return <expr><name pos:line="627" pos:column="20">null</name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="629" pos:column="9">public</specifier> <name pos:line="629" pos:column="16">synchronized</name> <name pos:line="629" pos:column="29">void</name></type> <name pos:line="629" pos:column="34">releaseLock</name><parameter_list pos:line="629" pos:column="45">()</parameter_list> <block pos:line="629" pos:column="48">{}</block></function>

        <function><type><specifier pos:line="631" pos:column="9">public</specifier> <name pos:line="631" pos:column="16">synchronized</name> <name pos:line="631" pos:column="29">void</name></type> <name pos:line="631" pos:column="34">releaseTimer</name><parameter_list pos:line="631" pos:column="46">()</parameter_list> <block pos:line="631" pos:column="49">{}</block></function>

        <function><type><specifier pos:line="633" pos:column="9">public</specifier> <name pos:line="633" pos:column="16">synchronized</name> <name pos:line="633" pos:column="29">void</name></type> <name pos:line="633" pos:column="34">run</name><parameter_list pos:line="633" pos:column="37">()</parameter_list> <block pos:line="633" pos:column="40">{}</block></function>
    }</block></class>

    <class><specifier pos:line="636" pos:column="5">static</specifier> <specifier pos:line="636" pos:column="12">private</specifier> class <name pos:line="636" pos:column="26">DoAutomaticSave</name>  <super><extends pos:line="636" pos:column="43">extends <name pos:line="636" pos:column="51">TimerTask</name></extends></super> <block pos:line="636" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="637" pos:column="9">private</specifier> <name pos:line="637" pos:column="17">MindMapMapModel</name></type> <name pos:line="637" pos:column="33">model</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="638" pos:column="9">private</specifier> <name pos:line="638" pos:column="17">Vector</name></type> <name pos:line="638" pos:column="24">tempFileStack</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="639" pos:column="9">private</specifier> <name pos:line="639" pos:column="17">int</name></type> <name pos:line="639" pos:column="21">numberOfFiles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="640" pos:column="9">private</specifier> <name pos:line="640" pos:column="17">boolean</name></type> <name pos:line="640" pos:column="25">filesShouldBeDeletedAfterShutdown</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="641" pos:column="9">private</specifier> <name pos:line="641" pos:column="17">File</name></type> <name pos:line="641" pos:column="22">pathToStore</name></decl>;</decl_stmt>
        <comment type="javadoc" pos:line="642" pos:column="9">/** This value is compared with the result of getNumberOfChangesSinceLastSave(). If the values coincide, no further automatic
            saving is performed until the value changes again.*/</comment>
        <decl_stmt><decl><type><specifier pos:line="644" pos:column="9">private</specifier> <name pos:line="644" pos:column="17">int</name></type> <name pos:line="644" pos:column="21">changeState</name></decl>;</decl_stmt>
        <constructor><name pos:line="645" pos:column="9">DoAutomaticSave</name><parameter_list pos:line="645" pos:column="24">(<param><decl><type><name pos:line="645" pos:column="25">MindMapMapModel</name></type> <name pos:line="645" pos:column="41">model</name></decl></param>, <param><decl><type><name pos:line="645" pos:column="48">int</name></type> <name pos:line="645" pos:column="52">numberOfTempFiles</name></decl></param>, <param><decl><type><name pos:line="645" pos:column="71">boolean</name></type> <name pos:line="645" pos:column="79">filesShouldBeDeletedAfterShutdown</name></decl></param>, <param><decl><type><name pos:line="645" pos:column="114">File</name></type> <name pos:line="645" pos:column="119">pathToStore</name></decl></param>)</parameter_list> <block pos:line="645" pos:column="132">{
            <expr_stmt><expr><name pos:line="646" pos:column="13">this</name><op:operator pos:line="646" pos:column="17">.</op:operator><name pos:line="646" pos:column="18">model</name> <op:operator pos:line="646" pos:column="24">=</op:operator> <name pos:line="646" pos:column="26">model</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="647" pos:column="13">tempFileStack</name> <op:operator pos:line="647" pos:column="27">=</op:operator> <op:operator pos:line="647" pos:column="29">new</op:operator> <call><name pos:line="647" pos:column="33">Vector</name><argument_list pos:line="647" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="648" pos:column="13">numberOfFiles</name> <op:operator pos:line="648" pos:column="27">=</op:operator> <op:operator pos:line="648" pos:column="29">(</op:operator><op:operator pos:line="648" pos:column="30">(</op:operator><name pos:line="648" pos:column="31">numberOfTempFiles</name> <op:operator pos:line="648" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="648" pos:column="51">0</lit:literal><op:operator pos:line="648" pos:column="52">)</op:operator><op:operator pos:line="648" pos:column="53">?</op:operator> <name pos:line="648" pos:column="55">numberOfTempFiles</name><op:operator pos:line="648" pos:column="72">:</op:operator> <lit:literal type="number" pos:line="648" pos:column="74">1</lit:literal><op:operator pos:line="648" pos:column="75">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="649" pos:column="13">this</name><op:operator pos:line="649" pos:column="17">.</op:operator><name pos:line="649" pos:column="18">filesShouldBeDeletedAfterShutdown</name> <op:operator pos:line="649" pos:column="52">=</op:operator> <name pos:line="649" pos:column="54">filesShouldBeDeletedAfterShutdown</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="650" pos:column="13">this</name><op:operator pos:line="650" pos:column="17">.</op:operator><name pos:line="650" pos:column="18">pathToStore</name> <op:operator pos:line="650" pos:column="30">=</op:operator> <name pos:line="650" pos:column="32">pathToStore</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="651" pos:column="13">changeState</name> <op:operator pos:line="651" pos:column="25">=</op:operator> <call><name><name pos:line="651" pos:column="27">model</name><op:operator pos:line="651" pos:column="32">.</op:operator><name pos:line="651" pos:column="33">getNumberOfChangesSinceLastSave</name></name><argument_list pos:line="651" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier pos:line="653" pos:column="9">public</specifier> <name pos:line="653" pos:column="16">void</name></type> <name pos:line="653" pos:column="21">run</name><parameter_list pos:line="653" pos:column="24">()</parameter_list> <block pos:line="653" pos:column="27">{
            <comment type="block" pos:line="654" pos:column="13">/* Map is dirty enough? */</comment>
            <if pos:line="655" pos:column="13">if<condition pos:line="655" pos:column="15">(<expr><call><name><name pos:line="655" pos:column="16">model</name><op:operator pos:line="655" pos:column="21">.</op:operator><name pos:line="655" pos:column="22">getNumberOfChangesSinceLastSave</name></name><argument_list pos:line="655" pos:column="53">()</argument_list></call> <op:operator pos:line="655" pos:column="56">==</op:operator> <name pos:line="655" pos:column="59">changeState</name></expr>)</condition><then pos:line="655" pos:column="71">
                <return pos:line="656" pos:column="17">return;</return></then></if>
            <expr_stmt><expr><name pos:line="657" pos:column="13">changeState</name> <op:operator pos:line="657" pos:column="25">=</op:operator> <call><name><name pos:line="657" pos:column="27">model</name><op:operator pos:line="657" pos:column="32">.</op:operator><name pos:line="657" pos:column="33">getNumberOfChangesSinceLastSave</name></name><argument_list pos:line="657" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="658" pos:column="13">if<condition pos:line="658" pos:column="15">(<expr><name pos:line="658" pos:column="16">changeState</name> <op:operator pos:line="658" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="658" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="658" pos:column="33"> <block pos:line="658" pos:column="34">{
                <comment type="block" pos:line="659" pos:column="17">/* map was recently saved.*/</comment>
                <return pos:line="660" pos:column="17">return;</return>
            }</block></then></if>
            <try pos:line="662" pos:column="13">try <block pos:line="662" pos:column="17">{
            	<expr_stmt><expr><call><name pos:line="663" pos:column="17">cancel</name><argument_list pos:line="663" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="664" pos:column="17">EventQueue</name><op:operator pos:line="664" pos:column="27">.</op:operator><name pos:line="664" pos:column="28">invokeAndWait</name></name><argument_list pos:line="664" pos:column="41">(<argument><expr><op:operator pos:line="664" pos:column="42">new</op:operator> <class><super><name pos:line="664" pos:column="46">Runnable</name></super><argument_list pos:line="664" pos:column="54">()</argument_list><block pos:line="664" pos:column="56">{
                    <function><type><specifier pos:line="665" pos:column="21">public</specifier> <name pos:line="665" pos:column="28">void</name></type> <name pos:line="665" pos:column="33">run</name><parameter_list pos:line="665" pos:column="36">()</parameter_list> <block pos:line="665" pos:column="39">{
                        <comment type="block" pos:line="666" pos:column="25">/* Now, it is dirty, we save it.*/</comment>
                        <decl_stmt><decl><type><name pos:line="667" pos:column="25">File</name></type> <name pos:line="667" pos:column="30">tempFile</name></decl>;</decl_stmt>
                        <if pos:line="668" pos:column="25">if<condition pos:line="668" pos:column="27">(<expr><call><name><name pos:line="668" pos:column="28">tempFileStack</name><op:operator pos:line="668" pos:column="41">.</op:operator><name pos:line="668" pos:column="42">size</name></name><argument_list pos:line="668" pos:column="46">()</argument_list></call> <op:operator pos:line="668" pos:column="49">&gt;=</op:operator> <name pos:line="668" pos:column="52">numberOfFiles</name></expr>)</condition><then pos:line="668" pos:column="66">
                            <expr_stmt><expr><name pos:line="669" pos:column="29">tempFile</name> <op:operator pos:line="669" pos:column="38">=</op:operator> <op:operator pos:line="669" pos:column="40">(</op:operator><name pos:line="669" pos:column="41">File</name><op:operator pos:line="669" pos:column="45">)</op:operator> <call><name><name pos:line="669" pos:column="47">tempFileStack</name><op:operator pos:line="669" pos:column="60">.</op:operator><name pos:line="669" pos:column="61">remove</name></name><argument_list pos:line="669" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="669" pos:column="68">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then> <comment type="line" pos:line="669" pos:column="72">// pop</comment>
                        <else pos:line="670" pos:column="25">else <block pos:line="670" pos:column="30">{
                            <try pos:line="671" pos:column="29">try <block pos:line="671" pos:column="33">{
                                <expr_stmt><expr><name pos:line="672" pos:column="33">tempFile</name> <op:operator pos:line="672" pos:column="42">=</op:operator> <call><name><name pos:line="672" pos:column="44">File</name><op:operator pos:line="672" pos:column="48">.</op:operator><name pos:line="672" pos:column="49">createTempFile</name></name><argument_list pos:line="672" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="672" pos:column="64">"FM_"</lit:literal><op:operator pos:line="672" pos:column="69">+</op:operator><op:operator pos:line="672" pos:column="70">(</op:operator><op:operator pos:line="672" pos:column="71">(</op:operator><call><name><name pos:line="672" pos:column="72">model</name><op:operator pos:line="672" pos:column="77">.</op:operator><name pos:line="672" pos:column="78">toString</name></name><argument_list pos:line="672" pos:column="86">()</argument_list></call><op:operator pos:line="672" pos:column="88">==</op:operator><name pos:line="672" pos:column="90">null</name><op:operator pos:line="672" pos:column="94">)</op:operator><op:operator pos:line="672" pos:column="95">?</op:operator><lit:literal type="string" pos:line="672" pos:column="96">"unnamed"</lit:literal><op:operator pos:line="672" pos:column="105">:</op:operator><call><name><name pos:line="672" pos:column="106">model</name><op:operator pos:line="672" pos:column="111">.</op:operator><name pos:line="672" pos:column="112">toString</name></name><argument_list pos:line="672" pos:column="120">()</argument_list></call><op:operator pos:line="672" pos:column="122">)</op:operator></expr></argument>, <argument><expr><name pos:line="672" pos:column="125">freemind</name><op:operator pos:line="672" pos:column="133">.</op:operator><name pos:line="672" pos:column="134">main</name><op:operator pos:line="672" pos:column="138">.</op:operator><name pos:line="672" pos:column="139">FreeMindCommon</name><op:operator pos:line="672" pos:column="153">.</op:operator><name pos:line="672" pos:column="154">FREEMIND_FILE_EXTENSION</name></expr></argument>, <argument><expr><name pos:line="672" pos:column="179">pathToStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if pos:line="673" pos:column="33">if<condition pos:line="673" pos:column="35">(<expr><name pos:line="673" pos:column="36">filesShouldBeDeletedAfterShutdown</name></expr>)</condition><then pos:line="673" pos:column="70">
                                    <expr_stmt><expr><call><name><name pos:line="674" pos:column="37">tempFile</name><op:operator pos:line="674" pos:column="45">.</op:operator><name pos:line="674" pos:column="46">deleteOnExit</name></name><argument_list pos:line="674" pos:column="58">()</argument_list></call></expr>;</expr_stmt></then></if>
                            }</block> <catch pos:line="675" pos:column="31">catch (<param><decl><type><name pos:line="675" pos:column="38">Exception</name></type> <name pos:line="675" pos:column="48">e</name></decl></param>) <block pos:line="675" pos:column="51">{
                                <expr_stmt><expr><call><name><name pos:line="676" pos:column="33">System</name><op:operator pos:line="676" pos:column="39">.</op:operator><name pos:line="676" pos:column="40">err</name><op:operator pos:line="676" pos:column="43">.</op:operator><name pos:line="676" pos:column="44">println</name></name><argument_list pos:line="676" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="676" pos:column="52">"Error in automatic MindMapMapModel.save(): "</lit:literal><op:operator pos:line="676" pos:column="97">+</op:operator><call><name><name pos:line="676" pos:column="98">e</name><op:operator pos:line="676" pos:column="99">.</op:operator><name pos:line="676" pos:column="100">getMessage</name></name><argument_list pos:line="676" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name pos:line="677" pos:column="33">freemind</name><op:operator pos:line="677" pos:column="41">.</op:operator><name pos:line="677" pos:column="42">main</name><op:operator pos:line="677" pos:column="46">.</op:operator><name pos:line="677" pos:column="47">Resources</name><op:operator pos:line="677" pos:column="56">.</op:operator><name pos:line="677" pos:column="57">getInstance</name></name><argument_list pos:line="677" pos:column="68">()</argument_list></call><op:operator pos:line="677" pos:column="70">.</op:operator><call><name pos:line="677" pos:column="71">logException</name><argument_list pos:line="677" pos:column="83">(<argument><expr><name pos:line="677" pos:column="84">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return pos:line="678" pos:column="33">return;</return>
                            }</block></catch></try>
                        }</block></else></if>
                        <try pos:line="681" pos:column="25">try <block pos:line="681" pos:column="29">{
                            <expr_stmt><expr><call><name><name pos:line="682" pos:column="29">model</name><op:operator pos:line="682" pos:column="34">.</op:operator><name pos:line="682" pos:column="35">saveInternal</name></name><argument_list pos:line="682" pos:column="47">(<argument><expr><name pos:line="682" pos:column="48">tempFile</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="58">true</name></expr></argument> <comment type="block" pos:line="682" pos:column="63">/*=internal call*/</comment>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="683" pos:column="29">model</name><op:operator pos:line="683" pos:column="34">.</op:operator><name pos:line="683" pos:column="35">getFrame</name></name><argument_list pos:line="683" pos:column="43">()</argument_list></call><op:operator pos:line="683" pos:column="45">.</op:operator><call><name pos:line="683" pos:column="46">out</name><argument_list pos:line="683" pos:column="49">(<argument><expr><call><name><name pos:line="683" pos:column="50">Resources</name><op:operator pos:line="683" pos:column="59">.</op:operator><name pos:line="683" pos:column="60">getInstance</name></name><argument_list pos:line="683" pos:column="71">()</argument_list></call><op:operator pos:line="683" pos:column="73">.</op:operator><call><name pos:line="683" pos:column="74">format</name><argument_list pos:line="683" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="683" pos:column="81">"automatically_save_message"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="683" pos:column="111">new</op:operator> <name><name pos:line="683" pos:column="115">Object</name><index pos:line="683" pos:column="121">[]</index></name><block pos:line="683" pos:column="123">{<expr><call><name><name pos:line="683" pos:column="124">tempFile</name><op:operator pos:line="683" pos:column="132">.</op:operator><name pos:line="683" pos:column="133">toString</name></name><argument_list pos:line="683" pos:column="141">()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch pos:line="684" pos:column="27">catch (<param><decl><type><name pos:line="684" pos:column="34">Exception</name></type> <name pos:line="684" pos:column="44">e</name></decl></param>) <block pos:line="684" pos:column="47">{
                            <expr_stmt><expr><call><name><name pos:line="685" pos:column="29">System</name><op:operator pos:line="685" pos:column="35">.</op:operator><name pos:line="685" pos:column="36">err</name><op:operator pos:line="685" pos:column="39">.</op:operator><name pos:line="685" pos:column="40">println</name></name><argument_list pos:line="685" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="685" pos:column="48">"Error in automatic MindMapMapModel.save(): "</lit:literal><op:operator pos:line="685" pos:column="93">+</op:operator><call><name><name pos:line="685" pos:column="94">e</name><op:operator pos:line="685" pos:column="95">.</op:operator><name pos:line="685" pos:column="96">getMessage</name></name><argument_list pos:line="685" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="686" pos:column="29">freemind</name><op:operator pos:line="686" pos:column="37">.</op:operator><name pos:line="686" pos:column="38">main</name><op:operator pos:line="686" pos:column="42">.</op:operator><name pos:line="686" pos:column="43">Resources</name><op:operator pos:line="686" pos:column="52">.</op:operator><name pos:line="686" pos:column="53">getInstance</name></name><argument_list pos:line="686" pos:column="64">()</argument_list></call><op:operator pos:line="686" pos:column="66">.</op:operator><call><name pos:line="686" pos:column="67">logException</name><argument_list pos:line="686" pos:column="79">(<argument><expr><name pos:line="686" pos:column="80">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                        <expr_stmt><expr><call><name><name pos:line="688" pos:column="25">tempFileStack</name><op:operator pos:line="688" pos:column="38">.</op:operator><name pos:line="688" pos:column="39">add</name></name><argument_list pos:line="688" pos:column="42">(<argument><expr><name pos:line="688" pos:column="43">tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="688" pos:column="54">// add at the back.</comment>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="691" pos:column="15">catch (<param><decl><type><name pos:line="691" pos:column="22">InterruptedException</name></type> <name pos:line="691" pos:column="43">e</name></decl></param>) <block pos:line="691" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="692" pos:column="17">freemind</name><op:operator pos:line="692" pos:column="25">.</op:operator><name pos:line="692" pos:column="26">main</name><op:operator pos:line="692" pos:column="30">.</op:operator><name pos:line="692" pos:column="31">Resources</name><op:operator pos:line="692" pos:column="40">.</op:operator><name pos:line="692" pos:column="41">getInstance</name></name><argument_list pos:line="692" pos:column="52">()</argument_list></call><op:operator pos:line="692" pos:column="54">.</op:operator><call><name pos:line="692" pos:column="55">logException</name><argument_list pos:line="692" pos:column="67">(<argument><expr><name pos:line="692" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <catch pos:line="693" pos:column="15">catch (<param><decl><type><name pos:line="693" pos:column="22">InvocationTargetException</name></type> <name pos:line="693" pos:column="48">e</name></decl></param>) <block pos:line="693" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="694" pos:column="17">freemind</name><op:operator pos:line="694" pos:column="25">.</op:operator><name pos:line="694" pos:column="26">main</name><op:operator pos:line="694" pos:column="30">.</op:operator><name pos:line="694" pos:column="31">Resources</name><op:operator pos:line="694" pos:column="40">.</op:operator><name pos:line="694" pos:column="41">getInstance</name></name><argument_list pos:line="694" pos:column="52">()</argument_list></call><op:operator pos:line="694" pos:column="54">.</op:operator><call><name pos:line="694" pos:column="55">logException</name><argument_list pos:line="694" pos:column="67">(<argument><expr><name pos:line="694" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>
     }</block></class>
}</block></class>
</unit>
