namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}
namespace Sando.Parser
{
	public enum LanguageEnum
	{
		Java,
		C,
		CSharp
	};

    public class SrcMLGenerator
    {
		
    	private const string Src2SrcmlExe = "\\src2srcml.exe";
    	private String SrcMLFolderPath;
    	private LanguageEnum Language;

		public SrcMLGenerator()
		{
			Language = LanguageEnum.Java;
		}

		public void SetLanguage(LanguageEnum language)
		{
			Language = language;
			//temporary
			if(language==LanguageEnum.CSharp)
				Language = LanguageEnum.Java;
		}

		public void SetSrcMLLocation(String location)
		{
			SrcMLFolderPath = location;

			if(!System.IO.File.Exists(SrcMLFolderPath+Src2SrcmlExe))
			{
				throw new ParserException("sr2srcml.exe cannot be found. looking in: " + SrcMLFolderPath);
			}
		}
		

		//
		// run srcML and return the generated sourceXML as a string
		//
		public String GenerateSrcML(String filename)
		{
			//check whether filename exists
			if(!System.IO.File.Exists(filename))
			{
				throw new ParserException("parser input file name does not exist: " + filename);
			}

			return LaunchSrcML(filename);
		}

		
		private String LaunchSrcML(String filename)
		{
			string srcML = "";

			ProcessStartInfo startInfo = new ProcessStartInfo();
			startInfo.CreateNoWindow = true;
			startInfo.UseShellExecute = false;
			startInfo.RedirectStandardOutput = true;
			startInfo.FileName = SrcMLFolderPath + Src2SrcmlExe;
			startInfo.WindowStyle = ProcessWindowStyle.Hidden;
			startInfo.Arguments = "-l "+Language.ToString()+" " + filename ;

			try
			{
				using (Process exeProcess = Process.Start(startInfo))
				{
					System.IO.StreamReader sOut = exeProcess.StandardOutput;
					srcML = sOut.ReadToEnd();
					exeProcess.WaitForExit();
				}
			}
			catch
			{
				throw new ParserException("sr2srcml.exe execution error, check parameters");
			}

			return srcML;
		}


    }
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}

namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}


namespace Sando.UI.UnitTests.Monitoring
{
	[TestFixture]
	public class BackgroundWorkersManagerTest
	{
		//[Test]
		//public void BackgroundWorkersManager_RunsOnlyGivenNumberOfWorkersAtOneTime()
		//{
		//    int totalBackgroundWorkers = 11;
		//    int maxNrOfParallelWorkers = 5;

		//    BackgroundWorker queueEmptyEventWorker = new BackgroundWorker();
		//    queueEmptyEventWorker.DoWork += new DoWorkEventHandler(queueEmptyEventWorker_DoWork);
		//    BackgroundWorkersManager<int> backgroundWorkersManager = new BackgroundWorkersManager<int>(maxNrOfParallelWorkers, queueEmptyEventWorker);
		//    for(int i = 0; i < totalBackgroundWorkers; ++i)
		//    {
		//        BackgroundWorker worker = new BackgroundWorker();
		//        worker.DoWork += new DoWorkEventHandler(worker_DoWork);
		//        backgroundWorkersManager.AddWorker(worker, i);
		//        Thread.Sleep(100);
		//    }
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() <= maxNrOfParallelWorkers, "BackgroundWorkersManager currently running workers number too high!");
		//    while(counter < totalBackgroundWorkers)
		//    {
		//    }
		//    Thread.Sleep(1000);
		//    Assert.True(backgroundWorkersManager.GetNumberOfCurrentlyRunningWorkers() == 0, "BackgroundWorkersManager currently running workers does not equal 0!");
		//    if(!allElementsProcessed)
		//        Assert.Fail("queueEmptyEventWorker have not been called!");
		//}

		void queueEmptyEventWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			allElementsProcessed = true;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			Thread.Sleep(2000);
			++counter;
		}

		[SetUp]
		[TearDown]
		public void PrepareCounter()
		{
			counter = 0;
		}

		private int counter;
		private bool allElementsProcessed;
	}
}
