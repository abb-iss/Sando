<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\Search\AllElementSearchTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Searching</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Criteria</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">UI</name><op:operator pos:line="15" pos:column="15">.</op:operator><name pos:line="15" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="16" pos:column="1">using <name pos:line="16" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Recommender</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">VisualStudio</name><op:operator pos:line="18" pos:column="29">.</op:operator><name pos:line="18" pos:column="30">SolutionMonitor</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">Sando</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">IntegrationTests</name><op:operator pos:line="20" pos:column="33">.</op:operator><name pos:line="20" pos:column="34">Search</name></name>
<block pos:line="21" pos:column="1">{
	<class><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">TestFixture</name></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">AllElementsSearchTest</name> <super pos:line="23" pos:column="40">: <name pos:line="23" pos:column="42">AutomaticallyIndexingTestClass</name></super>
	<block pos:line="24" pos:column="9">{
		<function><type><attribute pos:line="25" pos:column="17">[<expr><name pos:line="25" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="26" pos:column="17">public</specifier> <name pos:line="26" pos:column="24">void</name></type> <name pos:line="26" pos:column="29">SearchRespectsAccessLevelCriteria</name><parameter_list pos:line="26" pos:column="62">()</parameter_list>
		<block pos:line="27" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">codeSearcher</name> =<init pos:line="28" pos:column="31"> <expr><op:operator pos:line="28" pos:column="32">new</op:operator> <call><name pos:line="28" pos:column="36">CodeSearcher</name><argument_list pos:line="28" pos:column="48">(<argument><expr><op:operator pos:line="28" pos:column="49">new</op:operator> <call><name pos:line="28" pos:column="53">IndexerSearcher</name><argument_list pos:line="28" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">string</name></type> <name pos:line="29" pos:column="32">keywords</name> =<init pos:line="29" pos:column="42"> <expr><lit:literal type="string" pos:line="29" pos:column="43">"usage type"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">SearchCriteria</name></type> <name pos:line="30" pos:column="40">searchCriteria</name> =<init pos:line="30" pos:column="56"> <expr><op:operator pos:line="30" pos:column="57">new</op:operator> <call><name pos:line="30" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="30" pos:column="81">()</argument_list></call>
			<block pos:line="31" pos:column="25">{
				<expr><name pos:line="32" pos:column="33">AccessLevels</name> <op:operator pos:line="32" pos:column="46">=</op:operator> <op:operator pos:line="32" pos:column="48">new</op:operator> <call><name><name pos:line="32" pos:column="52">SortedSet</name><argument_list pos:line="32" pos:column="61">&lt;<argument><name pos:line="32" pos:column="62">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="74">()</argument_list></call> <block pos:line="32" pos:column="77">{ <expr><name><name pos:line="32" pos:column="79">AccessLevel</name><op:operator pos:line="32" pos:column="90">.</op:operator><name pos:line="32" pos:column="91">Private</name></name></expr> }</block></expr><op:operator pos:line="32" pos:column="100">,</op:operator>
				<expr><name pos:line="33" pos:column="33">SearchByAccessLevel</name> <op:operator pos:line="33" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="33" pos:column="55">true</lit:literal></expr><op:operator pos:line="33" pos:column="59">,</op:operator>
				<expr><name pos:line="34" pos:column="33">SearchTerms</name> <op:operator pos:line="34" pos:column="45">=</op:operator> <op:operator pos:line="34" pos:column="47">new</op:operator> <call><name><name pos:line="34" pos:column="51">SortedSet</name><argument_list pos:line="34" pos:column="60">&lt;<argument><name pos:line="34" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="68">(<argument><expr><call><name><name pos:line="34" pos:column="69">keywords</name><op:operator pos:line="34" pos:column="77">.</op:operator><name pos:line="34" pos:column="78">Split</name></name><argument_list pos:line="34" pos:column="83">(<argument><expr><lit:literal type="char" pos:line="34" pos:column="84">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="36" pos:column="25">List</name><argument_list pos:line="36" pos:column="29">&lt;<argument><name pos:line="36" pos:column="30">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="48">codeSearchResults</name> =<init pos:line="36" pos:column="67"> <expr><call><name><name pos:line="36" pos:column="68">codeSearcher</name><op:operator pos:line="36" pos:column="80">.</op:operator><name pos:line="36" pos:column="81">Search</name></name><argument_list pos:line="36" pos:column="87">(<argument><expr><name pos:line="36" pos:column="88">searchCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="37" pos:column="25">Assert</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">AreEqual</name></name><argument_list pos:line="37" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="41">3</lit:literal></expr></argument><op:operator pos:line="37" pos:column="42">,</op:operator> <argument><expr><name><name pos:line="37" pos:column="44">codeSearchResults</name><op:operator pos:line="37" pos:column="61">.</op:operator><name pos:line="37" pos:column="62">Count</name></name></expr></argument><op:operator pos:line="37" pos:column="67">,</op:operator> <argument><expr><lit:literal type="string" pos:line="37" pos:column="69">"Invalid results number"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">var</name></type> <name pos:line="38" pos:column="29">methodSearchResult</name> =<init pos:line="38" pos:column="49"> <expr><call><name><name pos:line="38" pos:column="50">codeSearchResults</name><op:operator pos:line="38" pos:column="67">.</op:operator><name pos:line="38" pos:column="68">Find</name></name><argument_list pos:line="38" pos:column="72">(<argument><expr><name pos:line="38" pos:column="73">el</name> <op:operator pos:line="38" pos:column="76">=&gt;</op:operator>
																<name><name pos:line="39" pos:column="129">el</name><op:operator pos:line="39" pos:column="131">.</op:operator><name pos:line="39" pos:column="132">ProgramElement</name><op:operator pos:line="39" pos:column="146">.</op:operator><name pos:line="39" pos:column="147">ProgramElementType</name></name> <op:operator pos:line="39" pos:column="166">==</op:operator> <name><name pos:line="39" pos:column="169">ProgramElementType</name><op:operator pos:line="39" pos:column="187">.</op:operator><name pos:line="39" pos:column="188">Method</name></name> <op:operator pos:line="39" pos:column="195">&amp;&amp;</op:operator>
																<op:operator pos:line="40" pos:column="129">(</op:operator><name><name pos:line="40" pos:column="130">el</name><op:operator pos:line="40" pos:column="132">.</op:operator><name pos:line="40" pos:column="133">ProgramElement</name><op:operator pos:line="40" pos:column="147">.</op:operator><name pos:line="40" pos:column="148">Name</name></name> <op:operator pos:line="40" pos:column="153">==</op:operator> <lit:literal type="string" pos:line="40" pos:column="156">"UsageTypeCriteriaToString"</lit:literal><op:operator pos:line="40" pos:column="183">)</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="41" pos:column="25">if<condition pos:line="41" pos:column="27">(<expr><name pos:line="41" pos:column="28">methodSearchResult</name> <op:operator pos:line="41" pos:column="47">==</op:operator> <name pos:line="41" pos:column="50">null</name></expr>)</condition><then pos:line="41" pos:column="55">
			<block pos:line="42" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="43" pos:column="33">Assert</name><op:operator pos:line="43" pos:column="39">.</op:operator><name pos:line="43" pos:column="40">Fail</name></name><argument_list pos:line="43" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="45">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="43" pos:column="98">+</op:operator> <name pos:line="43" pos:column="100">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">var</name></type> <name pos:line="45" pos:column="29">method</name> =<init pos:line="45" pos:column="37"> <expr><name><name pos:line="45" pos:column="38">methodSearchResult</name><op:operator pos:line="45" pos:column="56">.</op:operator><name pos:line="45" pos:column="57">ProgramElement</name></name> <op:operator pos:line="45" pos:column="72">as</op:operator> <name pos:line="45" pos:column="75">MethodElement</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">Assert</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">AreEqual</name></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name><name pos:line="46" pos:column="41">method</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">AccessLevel</name></name></expr></argument><op:operator pos:line="46" pos:column="59">,</op:operator> <argument><expr><name><name pos:line="46" pos:column="61">AccessLevel</name><op:operator pos:line="46" pos:column="72">.</op:operator><name pos:line="46" pos:column="73">Private</name></name></expr></argument><op:operator pos:line="46" pos:column="80">,</op:operator> <argument><expr><lit:literal type="string" pos:line="46" pos:column="82">"Method access level differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">Assert</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">AreEqual</name></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name><name pos:line="47" pos:column="41">method</name><op:operator pos:line="47" pos:column="47">.</op:operator><name pos:line="47" pos:column="48">Arguments</name></name></expr></argument><op:operator pos:line="47" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="47" pos:column="59">"StringBuilder stringBuilder bool searchByUsageType"</lit:literal></expr></argument><op:operator pos:line="47" pos:column="111">,</op:operator> <argument><expr><lit:literal type="string" pos:line="47" pos:column="113">"Method arguments differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">Assert</name><op:operator pos:line="48" pos:column="31">.</op:operator><name pos:line="48" pos:column="32">NotNull</name></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name><name pos:line="48" pos:column="40">method</name><op:operator pos:line="48" pos:column="46">.</op:operator><name pos:line="48" pos:column="47">Body</name></name></expr></argument><op:operator pos:line="48" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="48" pos:column="53">"Method body is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="49" pos:column="25">//Assert.True(method.ClassId != null &amp;&amp; method.ClassId != Guid.Empty, "Class id is invalid!");</comment>
			<comment type="line" pos:line="50" pos:column="25">//Assert.AreEqual(method.ClassName, "SimpleSearchCriteria", "Method class name differs!");</comment>
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">Assert</name><op:operator pos:line="51" pos:column="31">.</op:operator><name pos:line="51" pos:column="32">AreEqual</name></name><argument_list pos:line="51" pos:column="40">(<argument><expr><name><name pos:line="51" pos:column="41">method</name><op:operator pos:line="51" pos:column="47">.</op:operator><name pos:line="51" pos:column="48">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="51" pos:column="68">,</op:operator> <argument><expr><lit:literal type="number" pos:line="51" pos:column="70">96</lit:literal></expr></argument><op:operator pos:line="51" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="51" pos:column="74">"Method definition line number differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">Assert</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">True</name></name><argument_list pos:line="52" pos:column="36">(<argument><expr><call><name><name pos:line="52" pos:column="37">method</name><op:operator pos:line="52" pos:column="43">.</op:operator><name pos:line="52" pos:column="44">FullFilePath</name><op:operator pos:line="52" pos:column="56">.</op:operator><name pos:line="52" pos:column="57">EndsWith</name></name><argument_list pos:line="52" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="66">"\\TestFiles\\MethodElementTestFiles\\Searcher.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="52" pos:column="117">,</op:operator> <argument><expr><lit:literal type="string" pos:line="52" pos:column="119">"Method full file path is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">Assert</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">AreEqual</name></name><argument_list pos:line="53" pos:column="40">(<argument><expr><name><name pos:line="53" pos:column="41">method</name><op:operator pos:line="53" pos:column="47">.</op:operator><name pos:line="53" pos:column="48">Name</name></name></expr></argument><op:operator pos:line="53" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="53" pos:column="54">"UsageTypeCriteriaToString"</lit:literal></expr></argument><op:operator pos:line="53" pos:column="81">,</op:operator> <argument><expr><lit:literal type="string" pos:line="53" pos:column="83">"Method name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">Assert</name><op:operator pos:line="54" pos:column="31">.</op:operator><name pos:line="54" pos:column="32">AreEqual</name></name><argument_list pos:line="54" pos:column="40">(<argument><expr><name><name pos:line="54" pos:column="41">method</name><op:operator pos:line="54" pos:column="47">.</op:operator><name pos:line="54" pos:column="48">ProgramElementType</name></name></expr></argument><op:operator pos:line="54" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="54" pos:column="68">ProgramElementType</name><op:operator pos:line="54" pos:column="86">.</op:operator><name pos:line="54" pos:column="87">Method</name></name></expr></argument><op:operator pos:line="54" pos:column="93">,</op:operator> <argument><expr><lit:literal type="string" pos:line="54" pos:column="95">"Program element type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="55" pos:column="25">Assert</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">AreEqual</name></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name><name pos:line="55" pos:column="41">method</name><op:operator pos:line="55" pos:column="47">.</op:operator><name pos:line="55" pos:column="48">ReturnType</name></name></expr></argument><op:operator pos:line="55" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="55" pos:column="60">"void"</lit:literal></expr></argument><op:operator pos:line="55" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="55" pos:column="68">"Method return type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="56" pos:column="25">Assert</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">False</name></name><argument_list pos:line="56" pos:column="37">(<argument><expr><call><name><name pos:line="56" pos:column="38">String</name><op:operator pos:line="56" pos:column="44">.</op:operator><name pos:line="56" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="56" pos:column="63">(<argument><expr><name><name pos:line="56" pos:column="64">method</name><op:operator pos:line="56" pos:column="70">.</op:operator><name pos:line="56" pos:column="71">RawSource</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="56" pos:column="81">,</op:operator> <argument><expr><lit:literal type="string" pos:line="56" pos:column="83">"Method snippet is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="58" pos:column="25">methodSearchResult</name> <op:operator pos:line="58" pos:column="44">=</op:operator> <call><name><name pos:line="58" pos:column="46">codeSearchResults</name><op:operator pos:line="58" pos:column="63">.</op:operator><name pos:line="58" pos:column="64">Find</name></name><argument_list pos:line="58" pos:column="68">(<argument><expr><name pos:line="58" pos:column="69">el</name> <op:operator pos:line="58" pos:column="72">=&gt;</op:operator>
															<name><name pos:line="59" pos:column="121">el</name><op:operator pos:line="59" pos:column="123">.</op:operator><name pos:line="59" pos:column="124">ProgramElement</name><op:operator pos:line="59" pos:column="138">.</op:operator><name pos:line="59" pos:column="139">ProgramElementType</name></name> <op:operator pos:line="59" pos:column="158">==</op:operator> <name><name pos:line="59" pos:column="161">ProgramElementType</name><op:operator pos:line="59" pos:column="179">.</op:operator><name pos:line="59" pos:column="180">Method</name></name> <op:operator pos:line="59" pos:column="187">&amp;&amp;</op:operator>
															<op:operator pos:line="60" pos:column="121">(</op:operator><name><name pos:line="60" pos:column="122">el</name><op:operator pos:line="60" pos:column="124">.</op:operator><name pos:line="60" pos:column="125">ProgramElement</name><op:operator pos:line="60" pos:column="139">.</op:operator><name pos:line="60" pos:column="140">Name</name></name> <op:operator pos:line="60" pos:column="145">==</op:operator> <lit:literal type="string" pos:line="60" pos:column="148">"SingleUsageTypeCriteriaToString"</lit:literal><op:operator pos:line="60" pos:column="181">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="61" pos:column="25">if<condition pos:line="61" pos:column="27">(<expr><name pos:line="61" pos:column="28">methodSearchResult</name> <op:operator pos:line="61" pos:column="47">==</op:operator> <name pos:line="61" pos:column="50">null</name></expr>)</condition><then pos:line="61" pos:column="55">
			<block pos:line="62" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">Assert</name><op:operator pos:line="63" pos:column="39">.</op:operator><name pos:line="63" pos:column="40">Fail</name></name><argument_list pos:line="63" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="45">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="63" pos:column="98">+</op:operator> <name pos:line="63" pos:column="100">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="65" pos:column="25">method</name> <op:operator pos:line="65" pos:column="32">=</op:operator> <name><name pos:line="65" pos:column="34">methodSearchResult</name><op:operator pos:line="65" pos:column="52">.</op:operator><name pos:line="65" pos:column="53">ProgramElement</name></name> <op:operator pos:line="65" pos:column="68">as</op:operator> <name pos:line="65" pos:column="71">MethodElement</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">Assert</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">AreEqual</name></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name><name pos:line="66" pos:column="41">method</name><op:operator pos:line="66" pos:column="47">.</op:operator><name pos:line="66" pos:column="48">AccessLevel</name></name></expr></argument><op:operator pos:line="66" pos:column="59">,</op:operator> <argument><expr><name><name pos:line="66" pos:column="61">AccessLevel</name><op:operator pos:line="66" pos:column="72">.</op:operator><name pos:line="66" pos:column="73">Private</name></name></expr></argument><op:operator pos:line="66" pos:column="80">,</op:operator> <argument><expr><lit:literal type="string" pos:line="66" pos:column="82">"Method access level differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="67" pos:column="25">Assert</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">AreEqual</name></name><argument_list pos:line="67" pos:column="40">(<argument><expr><name><name pos:line="67" pos:column="41">method</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">Arguments</name></name></expr></argument><op:operator pos:line="67" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="67" pos:column="59">"StringBuilder stringBuilder UsageType usageType"</lit:literal></expr></argument><op:operator pos:line="67" pos:column="108">,</op:operator> <argument><expr><lit:literal type="string" pos:line="67" pos:column="110">"Method arguments differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">Assert</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">NotNull</name></name><argument_list pos:line="68" pos:column="39">(<argument><expr><name><name pos:line="68" pos:column="40">method</name><op:operator pos:line="68" pos:column="46">.</op:operator><name pos:line="68" pos:column="47">Body</name></name></expr></argument><op:operator pos:line="68" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="68" pos:column="53">"Method body is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="69" pos:column="25">//Assert.True(method.ClassId != null &amp;&amp; method.ClassId != Guid.Empty, "Class id is invalid!");</comment>
			<comment type="line" pos:line="70" pos:column="25">//Assert.AreEqual(method.ClassName, "SimpleSearchCriteria", "Method class name differs!");</comment>
			<expr_stmt><expr><call><name><name pos:line="71" pos:column="25">Assert</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">AreEqual</name></name><argument_list pos:line="71" pos:column="40">(<argument><expr><name><name pos:line="71" pos:column="41">method</name><op:operator pos:line="71" pos:column="47">.</op:operator><name pos:line="71" pos:column="48">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="71" pos:column="68">,</op:operator> <argument><expr><lit:literal type="number" pos:line="71" pos:column="70">141</lit:literal></expr></argument><op:operator pos:line="71" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="71" pos:column="75">"Method definition line number differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="72" pos:column="25">Assert</name><op:operator pos:line="72" pos:column="31">.</op:operator><name pos:line="72" pos:column="32">True</name></name><argument_list pos:line="72" pos:column="36">(<argument><expr><call><name><name pos:line="72" pos:column="37">method</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">FullFilePath</name><op:operator pos:line="72" pos:column="56">.</op:operator><name pos:line="72" pos:column="57">EndsWith</name></name><argument_list pos:line="72" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="66">"\\TestFiles\\MethodElementTestFiles\\Searcher.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="72" pos:column="117">,</op:operator> <argument><expr><lit:literal type="string" pos:line="72" pos:column="119">"Method full file path is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">Assert</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">AreEqual</name></name><argument_list pos:line="73" pos:column="40">(<argument><expr><name><name pos:line="73" pos:column="41">method</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">Name</name></name></expr></argument><op:operator pos:line="73" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="73" pos:column="54">"SingleUsageTypeCriteriaToString"</lit:literal></expr></argument><op:operator pos:line="73" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="73" pos:column="89">"Method name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="74" pos:column="25">Assert</name><op:operator pos:line="74" pos:column="31">.</op:operator><name pos:line="74" pos:column="32">AreEqual</name></name><argument_list pos:line="74" pos:column="40">(<argument><expr><name><name pos:line="74" pos:column="41">method</name><op:operator pos:line="74" pos:column="47">.</op:operator><name pos:line="74" pos:column="48">ProgramElementType</name></name></expr></argument><op:operator pos:line="74" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="74" pos:column="68">ProgramElementType</name><op:operator pos:line="74" pos:column="86">.</op:operator><name pos:line="74" pos:column="87">Method</name></name></expr></argument><op:operator pos:line="74" pos:column="93">,</op:operator> <argument><expr><lit:literal type="string" pos:line="74" pos:column="95">"Program element type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="75" pos:column="25">Assert</name><op:operator pos:line="75" pos:column="31">.</op:operator><name pos:line="75" pos:column="32">AreEqual</name></name><argument_list pos:line="75" pos:column="40">(<argument><expr><name><name pos:line="75" pos:column="41">method</name><op:operator pos:line="75" pos:column="47">.</op:operator><name pos:line="75" pos:column="48">ReturnType</name></name></expr></argument><op:operator pos:line="75" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="75" pos:column="60">"void"</lit:literal></expr></argument><op:operator pos:line="75" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="75" pos:column="68">"Method return type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">Assert</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">False</name></name><argument_list pos:line="76" pos:column="37">(<argument><expr><call><name><name pos:line="76" pos:column="38">String</name><op:operator pos:line="76" pos:column="44">.</op:operator><name pos:line="76" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="76" pos:column="63">(<argument><expr><name><name pos:line="76" pos:column="64">method</name><op:operator pos:line="76" pos:column="70">.</op:operator><name pos:line="76" pos:column="71">RawSource</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="76" pos:column="81">,</op:operator> <argument><expr><lit:literal type="string" pos:line="76" pos:column="83">"Method snippet is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="79" pos:column="17">[<expr><name pos:line="79" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="80" pos:column="17">public</specifier> <name pos:line="80" pos:column="24">void</name></type> <name pos:line="80" pos:column="29">SearchWorksNormallyForTermsWhichEndsWithSpace</name><parameter_list pos:line="80" pos:column="74">()</parameter_list>
		<block pos:line="81" pos:column="17">{
			<try pos:line="82" pos:column="25">try
			<block pos:line="83" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="84" pos:column="33">var</name></type> <name pos:line="84" pos:column="37">codeSearcher</name> =<init pos:line="84" pos:column="51"> <expr><op:operator pos:line="84" pos:column="52">new</op:operator> <call><name pos:line="84" pos:column="56">CodeSearcher</name><argument_list pos:line="84" pos:column="68">(<argument><expr><op:operator pos:line="84" pos:column="69">new</op:operator> <call><name pos:line="84" pos:column="73">IndexerSearcher</name><argument_list pos:line="84" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="85" pos:column="33">string</name></type> <name pos:line="85" pos:column="40">keywords</name> =<init pos:line="85" pos:column="50"> <expr><lit:literal type="string" pos:line="85" pos:column="51">"  usage "</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name pos:line="86" pos:column="33">List</name><argument_list pos:line="86" pos:column="37">&lt;<argument><name pos:line="86" pos:column="38">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="56">codeSearchResults</name> =<init pos:line="86" pos:column="75"> <expr><call><name><name pos:line="86" pos:column="76">codeSearcher</name><op:operator pos:line="86" pos:column="88">.</op:operator><name pos:line="86" pos:column="89">Search</name></name><argument_list pos:line="86" pos:column="95">(<argument><expr><name pos:line="86" pos:column="96">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="88" pos:column="25">catch(<param><decl><type><name pos:line="88" pos:column="31">Exception</name></type> <name pos:line="88" pos:column="41">ex</name></decl></param>)
			<block pos:line="89" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="90" pos:column="33">Assert</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">Fail</name></name><argument_list pos:line="90" pos:column="44">(<argument><expr><name><name pos:line="90" pos:column="45">ex</name><op:operator pos:line="90" pos:column="47">.</op:operator><name pos:line="90" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="94" pos:column="17">[<expr><name pos:line="94" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="95" pos:column="17">public</specifier> <name pos:line="95" pos:column="24">void</name></type> <name pos:line="95" pos:column="29">SearchReturnsElementsUsingCrossFieldMatching</name><parameter_list pos:line="95" pos:column="73">()</parameter_list>
		<block pos:line="96" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="97" pos:column="25">var</name></type> <name pos:line="97" pos:column="29">codeSearcher</name> =<init pos:line="97" pos:column="43"> <expr><op:operator pos:line="97" pos:column="44">new</op:operator> <call><name pos:line="97" pos:column="48">CodeSearcher</name><argument_list pos:line="97" pos:column="60">(<argument><expr><op:operator pos:line="97" pos:column="61">new</op:operator> <call><name pos:line="97" pos:column="65">IndexerSearcher</name><argument_list pos:line="97" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">string</name></type> <name pos:line="98" pos:column="32">keywords</name> =<init pos:line="98" pos:column="42"> <expr><lit:literal type="string" pos:line="98" pos:column="43">"fetch output argument"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="99" pos:column="25">SearchCriteria</name></type> <name pos:line="99" pos:column="40">searchCriteria</name> =<init pos:line="99" pos:column="56"> <expr><op:operator pos:line="99" pos:column="57">new</op:operator> <call><name pos:line="99" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="99" pos:column="81">()</argument_list></call>
			<block pos:line="100" pos:column="25">{
				<expr><name pos:line="101" pos:column="33">SearchTerms</name> <op:operator pos:line="101" pos:column="45">=</op:operator> <op:operator pos:line="101" pos:column="47">new</op:operator> <call><name><name pos:line="101" pos:column="51">SortedSet</name><argument_list pos:line="101" pos:column="60">&lt;<argument><name pos:line="101" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="68">(<argument><expr><call><name><name pos:line="101" pos:column="69">keywords</name><op:operator pos:line="101" pos:column="77">.</op:operator><name pos:line="101" pos:column="78">Split</name></name><argument_list pos:line="101" pos:column="83">(<argument><expr><lit:literal type="char" pos:line="101" pos:column="84">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="103" pos:column="25">List</name><argument_list pos:line="103" pos:column="29">&lt;<argument><name pos:line="103" pos:column="30">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="48">codeSearchResults</name> =<init pos:line="103" pos:column="67"> <expr><call><name><name pos:line="103" pos:column="68">codeSearcher</name><op:operator pos:line="103" pos:column="80">.</op:operator><name pos:line="103" pos:column="81">Search</name></name><argument_list pos:line="103" pos:column="87">(<argument><expr><name pos:line="103" pos:column="88">searchCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="105" pos:column="25">var</name></type> <name pos:line="105" pos:column="29">methodSearchResult</name> =<init pos:line="105" pos:column="49"> <expr><call><name><name pos:line="105" pos:column="50">codeSearchResults</name><op:operator pos:line="105" pos:column="67">.</op:operator><name pos:line="105" pos:column="68">Find</name></name><argument_list pos:line="105" pos:column="72">(<argument><expr><name pos:line="105" pos:column="73">el</name> <op:operator pos:line="105" pos:column="76">=&gt;</op:operator>
																<name><name pos:line="106" pos:column="129">el</name><op:operator pos:line="106" pos:column="131">.</op:operator><name pos:line="106" pos:column="132">ProgramElement</name><op:operator pos:line="106" pos:column="146">.</op:operator><name pos:line="106" pos:column="147">ProgramElementType</name></name> <op:operator pos:line="106" pos:column="166">==</op:operator> <name><name pos:line="106" pos:column="169">ProgramElementType</name><op:operator pos:line="106" pos:column="187">.</op:operator><name pos:line="106" pos:column="188">Method</name></name> <op:operator pos:line="106" pos:column="195">&amp;&amp;</op:operator>
																<op:operator pos:line="107" pos:column="129">(</op:operator><name><name pos:line="107" pos:column="130">el</name><op:operator pos:line="107" pos:column="132">.</op:operator><name pos:line="107" pos:column="133">ProgramElement</name><op:operator pos:line="107" pos:column="147">.</op:operator><name pos:line="107" pos:column="148">Name</name></name> <op:operator pos:line="107" pos:column="153">==</op:operator> <lit:literal type="string" pos:line="107" pos:column="156">"FetchOutputStream"</lit:literal><op:operator pos:line="107" pos:column="175">)</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="108" pos:column="25">if<condition pos:line="108" pos:column="27">(<expr><name pos:line="108" pos:column="28">methodSearchResult</name> <op:operator pos:line="108" pos:column="47">==</op:operator> <name pos:line="108" pos:column="50">null</name></expr>)</condition><then pos:line="108" pos:column="55">
			<block pos:line="109" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">Assert</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">Fail</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="45">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="110" pos:column="98">+</op:operator> <name pos:line="110" pos:column="100">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">var</name></type> <name pos:line="112" pos:column="29">method</name> =<init pos:line="112" pos:column="37"> <expr><name><name pos:line="112" pos:column="38">methodSearchResult</name><op:operator pos:line="112" pos:column="56">.</op:operator><name pos:line="112" pos:column="57">ProgramElement</name></name> <op:operator pos:line="112" pos:column="72">as</op:operator> <name pos:line="112" pos:column="75">MethodElement</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="113" pos:column="25">Assert</name><op:operator pos:line="113" pos:column="31">.</op:operator><name pos:line="113" pos:column="32">AreEqual</name></name><argument_list pos:line="113" pos:column="40">(<argument><expr><name><name pos:line="113" pos:column="41">method</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">AccessLevel</name></name></expr></argument><op:operator pos:line="113" pos:column="59">,</op:operator> <argument><expr><name><name pos:line="113" pos:column="61">AccessLevel</name><op:operator pos:line="113" pos:column="72">.</op:operator><name pos:line="113" pos:column="73">Public</name></name></expr></argument><op:operator pos:line="113" pos:column="79">,</op:operator> <argument><expr><lit:literal type="string" pos:line="113" pos:column="81">"Method access level differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="114" pos:column="25">Assert</name><op:operator pos:line="114" pos:column="31">.</op:operator><name pos:line="114" pos:column="32">AreEqual</name></name><argument_list pos:line="114" pos:column="40">(<argument><expr><name><name pos:line="114" pos:column="41">method</name><op:operator pos:line="114" pos:column="47">.</op:operator><name pos:line="114" pos:column="48">Arguments</name></name></expr></argument><op:operator pos:line="114" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="114" pos:column="59">"A B string fileName Image image"</lit:literal></expr></argument><op:operator pos:line="114" pos:column="92">,</op:operator> <argument><expr><lit:literal type="string" pos:line="114" pos:column="94">"Method arguments differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="115" pos:column="25">Assert</name><op:operator pos:line="115" pos:column="31">.</op:operator><name pos:line="115" pos:column="32">NotNull</name></name><argument_list pos:line="115" pos:column="39">(<argument><expr><name><name pos:line="115" pos:column="40">method</name><op:operator pos:line="115" pos:column="46">.</op:operator><name pos:line="115" pos:column="47">Body</name></name></expr></argument><op:operator pos:line="115" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="115" pos:column="53">"Method body is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">Assert</name><op:operator pos:line="116" pos:column="31">.</op:operator><name pos:line="116" pos:column="32">True</name></name><argument_list pos:line="116" pos:column="36">(<argument><expr><name><name pos:line="116" pos:column="37">method</name><op:operator pos:line="116" pos:column="43">.</op:operator><name pos:line="116" pos:column="44">ClassId</name></name> <op:operator pos:line="116" pos:column="52">!=</op:operator> <name pos:line="116" pos:column="55">null</name> <op:operator pos:line="116" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="116" pos:column="63">method</name><op:operator pos:line="116" pos:column="69">.</op:operator><name pos:line="116" pos:column="70">ClassId</name></name> <op:operator pos:line="116" pos:column="78">!=</op:operator> <name><name pos:line="116" pos:column="81">Guid</name><op:operator pos:line="116" pos:column="85">.</op:operator><name pos:line="116" pos:column="86">Empty</name></name></expr></argument><op:operator pos:line="116" pos:column="91">,</op:operator> <argument><expr><lit:literal type="string" pos:line="116" pos:column="93">"Class id is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">Assert</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">AreEqual</name></name><argument_list pos:line="117" pos:column="28">(<argument><expr><name><name pos:line="117" pos:column="29">method</name><op:operator pos:line="117" pos:column="35">.</op:operator><name pos:line="117" pos:column="36">ClassName</name></name></expr></argument><op:operator pos:line="117" pos:column="45">,</op:operator> <argument><expr><lit:literal type="string" pos:line="117" pos:column="47">"ImageCapture"</lit:literal></expr></argument><op:operator pos:line="117" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="117" pos:column="63">"Method class name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="118" pos:column="25">Assert</name><op:operator pos:line="118" pos:column="31">.</op:operator><name pos:line="118" pos:column="32">AreEqual</name></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name><name pos:line="118" pos:column="41">method</name><op:operator pos:line="118" pos:column="47">.</op:operator><name pos:line="118" pos:column="48">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="118" pos:column="68">,</op:operator> <argument><expr><lit:literal type="number" pos:line="118" pos:column="70">83</lit:literal></expr></argument><op:operator pos:line="118" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="118" pos:column="74">"Method definition line number differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="119" pos:column="25">Assert</name><op:operator pos:line="119" pos:column="31">.</op:operator><name pos:line="119" pos:column="32">True</name></name><argument_list pos:line="119" pos:column="36">(<argument><expr><call><name><name pos:line="119" pos:column="37">method</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">FullFilePath</name><op:operator pos:line="119" pos:column="56">.</op:operator><name pos:line="119" pos:column="57">EndsWith</name></name><argument_list pos:line="119" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="66">"\\TestFiles\\MethodElementTestFiles\\ImageCapture.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="119" pos:column="121">,</op:operator> <argument><expr><lit:literal type="string" pos:line="119" pos:column="123">"Method full file path is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="120" pos:column="25">Assert</name><op:operator pos:line="120" pos:column="31">.</op:operator><name pos:line="120" pos:column="32">AreEqual</name></name><argument_list pos:line="120" pos:column="40">(<argument><expr><name><name pos:line="120" pos:column="41">method</name><op:operator pos:line="120" pos:column="47">.</op:operator><name pos:line="120" pos:column="48">Name</name></name></expr></argument><op:operator pos:line="120" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="120" pos:column="54">"FetchOutputStream"</lit:literal></expr></argument><op:operator pos:line="120" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="120" pos:column="75">"Method name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">Assert</name><op:operator pos:line="121" pos:column="31">.</op:operator><name pos:line="121" pos:column="32">AreEqual</name></name><argument_list pos:line="121" pos:column="40">(<argument><expr><name><name pos:line="121" pos:column="41">method</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">ProgramElementType</name></name></expr></argument><op:operator pos:line="121" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="121" pos:column="68">ProgramElementType</name><op:operator pos:line="121" pos:column="86">.</op:operator><name pos:line="121" pos:column="87">Method</name></name></expr></argument><op:operator pos:line="121" pos:column="93">,</op:operator> <argument><expr><lit:literal type="string" pos:line="121" pos:column="95">"Program element type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="122" pos:column="25">Assert</name><op:operator pos:line="122" pos:column="31">.</op:operator><name pos:line="122" pos:column="32">AreEqual</name></name><argument_list pos:line="122" pos:column="40">(<argument><expr><name><name pos:line="122" pos:column="41">method</name><op:operator pos:line="122" pos:column="47">.</op:operator><name pos:line="122" pos:column="48">ReturnType</name></name></expr></argument><op:operator pos:line="122" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="122" pos:column="60">"void"</lit:literal></expr></argument><op:operator pos:line="122" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="122" pos:column="68">"Method return type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="123" pos:column="25">Assert</name><op:operator pos:line="123" pos:column="31">.</op:operator><name pos:line="123" pos:column="32">False</name></name><argument_list pos:line="123" pos:column="37">(<argument><expr><call><name><name pos:line="123" pos:column="38">String</name><op:operator pos:line="123" pos:column="44">.</op:operator><name pos:line="123" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="123" pos:column="63">(<argument><expr><name><name pos:line="123" pos:column="64">method</name><op:operator pos:line="123" pos:column="70">.</op:operator><name pos:line="123" pos:column="71">RawSource</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="123" pos:column="81">,</op:operator> <argument><expr><lit:literal type="string" pos:line="123" pos:column="83">"Method snippet is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><specifier pos:line="126" pos:column="9">public</specifier> <specifier pos:line="126" pos:column="16">override</specifier> <name pos:line="126" pos:column="25">string</name></type> <name pos:line="126" pos:column="32">GetIndexDirName</name><parameter_list pos:line="126" pos:column="47">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <return pos:line="128" pos:column="13">return <expr><lit:literal type="string" pos:line="128" pos:column="20">"AllElementSearchTest"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="131" pos:column="9">public</specifier> <specifier pos:line="131" pos:column="16">override</specifier> <name pos:line="131" pos:column="25">string</name></type> <name pos:line="131" pos:column="32">GetFilesDirectory</name><parameter_list pos:line="131" pos:column="49">()</parameter_list>
        <block pos:line="132" pos:column="9">{
            <return pos:line="133" pos:column="13">return <expr><lit:literal type="string" pos:line="133" pos:column="20">"..\\..\\IntegrationTests\\TestFiles\\MethodElementTestFiles"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="136" pos:column="9">public</specifier> <specifier pos:line="136" pos:column="16">override</specifier> <name pos:line="136" pos:column="25">TimeSpan</name><type:modifier pos:line="136" pos:column="33">?</type:modifier></type> <name pos:line="136" pos:column="35">GetTimeToCommit</name><parameter_list pos:line="136" pos:column="50">()</parameter_list>
        <block pos:line="137" pos:column="9">{
            <return pos:line="138" pos:column="13">return <expr><call><name><name pos:line="138" pos:column="20">TimeSpan</name><op:operator pos:line="138" pos:column="28">.</op:operator><name pos:line="138" pos:column="29">FromSeconds</name></name><argument_list pos:line="138" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="138" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
		



		<decl_stmt><decl><type><specifier pos:line="144" pos:column="17">private</specifier> <name pos:line="144" pos:column="25">string</name></type> <name pos:line="144" pos:column="32">indexPath</name></decl>;</decl_stmt>
		<comment type="line" pos:line="145" pos:column="17">//private static SolutionMonitor monitor;</comment>
		<decl_stmt><decl><type><specifier pos:line="146" pos:column="17">private</specifier> <specifier pos:line="146" pos:column="25">static</specifier> <name pos:line="146" pos:column="32">SolutionKey</name></type> <name pos:line="146" pos:column="44">key</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
