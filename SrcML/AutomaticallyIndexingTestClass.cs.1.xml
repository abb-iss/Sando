<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\Search\AutomaticallyIndexingTestClass.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Indexer</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Indexer</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">Searching</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">UI</name><op:operator pos:line="12" pos:column="15">.</op:operator><name pos:line="12" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Recommender</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">Indexer</name><op:operator pos:line="15" pos:column="20">.</op:operator><name pos:line="15" pos:column="21">IndexFiltering</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">UI</name><op:operator pos:line="16" pos:column="15">.</op:operator><name pos:line="16" pos:column="16">Options</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Configuration</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">OptionsPages</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">VisualStudio</name><op:operator pos:line="18" pos:column="29">.</op:operator><name pos:line="18" pos:column="30">SolutionMonitor</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Threading</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">Sando</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">Core</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Tools</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">ABB</name><op:operator pos:line="22" pos:column="10">.</op:operator><name pos:line="22" pos:column="11">SrcML</name><op:operator pos:line="22" pos:column="16">.</op:operator><name pos:line="22" pos:column="17">VisualStudio</name><op:operator pos:line="22" pos:column="29">.</op:operator><name pos:line="22" pos:column="30">SrcMLService</name></name>;</using>

<namespace pos:line="24" pos:column="1">namespace <name><name pos:line="24" pos:column="11">Sando</name><op:operator pos:line="24" pos:column="16">.</op:operator><name pos:line="24" pos:column="17">IntegrationTests</name><op:operator pos:line="24" pos:column="33">.</op:operator><name pos:line="24" pos:column="34">Search</name></name>
<block pos:line="25" pos:column="1">{
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">AutomaticallyIndexingTestClass</name> <super pos:line="26" pos:column="49">: <name pos:line="26" pos:column="51">ISrcMLGlobalService</name></super>
    <block pos:line="27" pos:column="5">{

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">Setup</name><parameter_list pos:line="30" pos:column="26">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">IndexSpecifiedFiles</name><argument_list pos:line="32" pos:column="32">(<argument><expr><call><name pos:line="32" pos:column="33">GetFilesDirectory</name><argument_list pos:line="32" pos:column="50">()</argument_list></call></expr></argument><op:operator pos:line="32" pos:column="52">,</op:operator> <argument><expr><call><name pos:line="32" pos:column="54">GetIndexDirName</name><argument_list pos:line="32" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">virtual</specifier> <name pos:line="35" pos:column="24">string</name></type> <name pos:line="35" pos:column="31">GetIndexDirName</name><parameter_list pos:line="35" pos:column="46">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <throw pos:line="37" pos:column="13">throw <expr><op:operator pos:line="37" pos:column="19">new</op:operator> <call><name pos:line="37" pos:column="23">NotImplementedException</name><argument_list pos:line="37" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">virtual</specifier> <name pos:line="40" pos:column="24">string</name></type> <name pos:line="40" pos:column="31">GetFilesDirectory</name><parameter_list pos:line="40" pos:column="48">()</parameter_list>
        <block pos:line="41" pos:column="9">{
            <throw pos:line="42" pos:column="13">throw <expr><op:operator pos:line="42" pos:column="19">new</op:operator> <call><name><name pos:line="42" pos:column="23">System</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">NotImplementedException</name></name><argument_list pos:line="42" pos:column="53">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">private</specifier> <name pos:line="45" pos:column="17">void</name></type> <name pos:line="45" pos:column="22">IndexSpecifiedFiles</name><parameter_list pos:line="45" pos:column="41">(<param><decl><type><name pos:line="45" pos:column="42">string</name></type> <name pos:line="45" pos:column="49">filesInThisDirectory</name></decl></param><op:operator pos:line="45" pos:column="69">,</op:operator> <param><decl><type><name pos:line="45" pos:column="71">string</name></type> <name pos:line="45" pos:column="78">indexDirName</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><name pos:line="47" pos:column="13">filesInThisDirectory</name> <op:operator pos:line="47" pos:column="34">=</op:operator> <call><name><name pos:line="47" pos:column="36">Path</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">GetFullPath</name></name><argument_list pos:line="47" pos:column="52">(<argument><expr><name pos:line="47" pos:column="53">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">CreateSystemWideDefaults</name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">indexDirName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">CreateKey</name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">CreateIndexer</name><argument_list pos:line="50" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
<comment type="line" pos:line="51" pos:column="1">////            SolutionMonitorFactory.CreateMonitor();            </comment>
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">CreateArchive</name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">CreateSwum</name><argument_list pos:line="53" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="55" pos:column="13">//start the monitoring and wait for the initial indexing to finish before preceeding            </comment>
            
            <comment type="line" pos:line="57" pos:column="13">// Subscribe events from Solution Monitor</comment>
            <expr_stmt><expr><name pos:line="58" pos:column="13">handler</name> <op:operator pos:line="58" pos:column="21">=</op:operator> <op:operator pos:line="58" pos:column="23">new</op:operator> <call><name pos:line="58" pos:column="27">SrcMLArchiveEventsHandlers</name><argument_list pos:line="58" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">files</name> =<init pos:line="59" pos:column="24"> <expr><call><name pos:line="59" pos:column="25">GetFileList</name><argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="60" pos:column="13">foreach (<init><decl><type><name pos:line="60" pos:column="22">var</name></type> <name pos:line="60" pos:column="26">file</name> <init pos:line="60" pos:column="31">in <expr><name pos:line="60" pos:column="34">files</name></expr></init></decl></init>)
            <block pos:line="61" pos:column="13">{
                <if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><call><name><name pos:line="62" pos:column="21">Path</name><op:operator pos:line="62" pos:column="25">.</op:operator><name pos:line="62" pos:column="26">GetExtension</name></name><argument_list pos:line="62" pos:column="38">(<argument><expr><call><name><name pos:line="62" pos:column="39">Path</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">GetFullPath</name></name><argument_list pos:line="62" pos:column="55">(<argument><expr><name pos:line="62" pos:column="56">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="62">.</op:operator><call><name pos:line="62" pos:column="63">Equals</name><argument_list pos:line="62" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="70">".cs"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="77">
                    <expr_stmt><expr><call><name><name pos:line="63" pos:column="21">handler</name><op:operator pos:line="63" pos:column="28">.</op:operator><name pos:line="63" pos:column="29">SourceFileChanged</name></name><argument_list pos:line="63" pos:column="46">(<argument><expr><name pos:line="63" pos:column="47">this</name></expr></argument><op:operator pos:line="63" pos:column="51">,</op:operator> <argument><expr><op:operator pos:line="63" pos:column="53">new</op:operator> <call><name pos:line="63" pos:column="57">FileEventRaisedArgs</name><argument_list pos:line="63" pos:column="76">(<argument><expr><name><name pos:line="63" pos:column="77">FileEventType</name><op:operator pos:line="63" pos:column="90">.</op:operator><name pos:line="63" pos:column="91">FileAdded</name></name></expr></argument><op:operator pos:line="63" pos:column="100">,</op:operator> <argument><expr><name pos:line="63" pos:column="102">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>

            <comment type="line" pos:line="66" pos:column="13">// Start monitoring</comment>
            

            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><call><name pos:line="69" pos:column="17">GetTimeToCommit</name><argument_list pos:line="69" pos:column="32">()</argument_list></call> <op:operator pos:line="69" pos:column="35">!=</op:operator> <name pos:line="69" pos:column="38">null</name></expr>)</condition><then pos:line="69" pos:column="43">
            <block pos:line="70" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="71" pos:column="17">Thread</name><op:operator pos:line="71" pos:column="23">.</op:operator><name pos:line="71" pos:column="24">Sleep</name></name><argument_list pos:line="71" pos:column="29">(<argument><expr><call><name><name pos:line="71" pos:column="30">Convert</name><op:operator pos:line="71" pos:column="37">.</op:operator><name pos:line="71" pos:column="38">ToInt32</name></name><argument_list pos:line="71" pos:column="45">(<argument><expr><call><name pos:line="71" pos:column="46">GetTimeToCommit</name><argument_list pos:line="71" pos:column="61">()</argument_list></call><op:operator pos:line="71" pos:column="63">.</op:operator><call><name pos:line="71" pos:column="64">GetValueOrDefault</name><argument_list pos:line="71" pos:column="81">()</argument_list></call><op:operator pos:line="71" pos:column="83">.</op:operator><name pos:line="71" pos:column="84">TotalMilliseconds</name><op:operator pos:line="71" pos:column="101">*</op:operator><lit:literal type="number" pos:line="71" pos:column="102">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="75" pos:column="9">private</specifier> <name><name pos:line="75" pos:column="17">List</name><argument_list pos:line="75" pos:column="21">&lt;<argument><name pos:line="75" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="30">GetFileList</name><parameter_list pos:line="75" pos:column="41">(<param><decl><type><name pos:line="75" pos:column="42">string</name></type> <name pos:line="75" pos:column="49">filesInThisDirectory</name></decl></param><op:operator pos:line="75" pos:column="69">,</op:operator> <param><decl><type><name><name pos:line="75" pos:column="71">List</name><argument_list pos:line="75" pos:column="75">&lt;<argument><name pos:line="75" pos:column="76">string</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="84">incoming</name> =<init pos:line="75" pos:column="94"> <expr><name pos:line="75" pos:column="95">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="76" pos:column="9">{
            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><name pos:line="77" pos:column="17">incoming</name> <op:operator pos:line="77" pos:column="26">==</op:operator> <name pos:line="77" pos:column="29">null</name></expr>)</condition><then pos:line="77" pos:column="34">
                <expr_stmt><expr><name pos:line="78" pos:column="17">incoming</name> <op:operator pos:line="78" pos:column="26">=</op:operator> <op:operator pos:line="78" pos:column="28">new</op:operator> <call><name><name pos:line="78" pos:column="32">List</name><argument_list pos:line="78" pos:column="36">&lt;<argument><name pos:line="78" pos:column="37">string</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="44">()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">incoming</name><op:operator pos:line="79" pos:column="21">.</op:operator><name pos:line="79" pos:column="22">AddRange</name></name><argument_list pos:line="79" pos:column="30">(<argument><expr><call><name><name pos:line="79" pos:column="31">Directory</name><op:operator pos:line="79" pos:column="40">.</op:operator><name pos:line="79" pos:column="41">EnumerateFiles</name></name><argument_list pos:line="79" pos:column="55">(<argument><expr><name pos:line="79" pos:column="56">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">dirs</name> =<init pos:line="80" pos:column="23"> <expr><op:operator pos:line="80" pos:column="24">new</op:operator> <call><name><name pos:line="80" pos:column="28">List</name><argument_list pos:line="80" pos:column="32">&lt;<argument><name pos:line="80" pos:column="33">string</name></argument>&gt;</argument_list></name><argument_list pos:line="80" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">dirs</name><op:operator pos:line="81" pos:column="17">.</op:operator><name pos:line="81" pos:column="18">AddRange</name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><call><name><name pos:line="81" pos:column="27">Directory</name><op:operator pos:line="81" pos:column="36">.</op:operator><name pos:line="81" pos:column="37">EnumerateDirectories</name></name><argument_list pos:line="81" pos:column="57">(<argument><expr><name pos:line="81" pos:column="58">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="82" pos:column="13">foreach (<init><decl><type><name pos:line="82" pos:column="22">var</name></type> <name pos:line="82" pos:column="26">dir</name> <init pos:line="82" pos:column="30">in <expr><name pos:line="82" pos:column="33">dirs</name></expr></init></decl></init>)
                <expr_stmt><expr><call><name pos:line="83" pos:column="17">GetFileList</name><argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">dir</name></expr></argument><op:operator pos:line="83" pos:column="32">,</op:operator> <argument><expr><name pos:line="83" pos:column="34">incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
            <return pos:line="84" pos:column="13">return <expr><name pos:line="84" pos:column="20">incoming</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="87" pos:column="9">private</specifier> <name pos:line="87" pos:column="17">void</name></type> <name pos:line="87" pos:column="22">CreateSwum</name><parameter_list pos:line="87" pos:column="32">()</parameter_list>
        <block pos:line="88" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">SwumManager</name><op:operator pos:line="89" pos:column="24">.</op:operator><name pos:line="89" pos:column="25">Instance</name><op:operator pos:line="89" pos:column="33">.</op:operator><name pos:line="89" pos:column="34">Initialize</name></name><argument_list pos:line="89" pos:column="44">(<argument><expr><call><name><name pos:line="89" pos:column="45">PathManager</name><op:operator pos:line="89" pos:column="56">.</op:operator><name pos:line="89" pos:column="57">Instance</name><op:operator pos:line="89" pos:column="65">.</op:operator><name pos:line="89" pos:column="66">GetIndexPath</name></name><argument_list pos:line="89" pos:column="78">(<argument><expr><call><name><name pos:line="89" pos:column="79">ServiceLocator</name><op:operator pos:line="89" pos:column="93">.</op:operator><name><name pos:line="89" pos:column="94">Resolve</name><argument_list pos:line="89" pos:column="101">&lt;<argument><name pos:line="89" pos:column="102">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="89" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="89" pos:column="117">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="89" pos:column="119">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">SwumManager</name><op:operator pos:line="90" pos:column="24">.</op:operator><name pos:line="90" pos:column="25">Instance</name><op:operator pos:line="90" pos:column="33">.</op:operator><name pos:line="90" pos:column="34">Archive</name></name> <op:operator pos:line="90" pos:column="42">=</op:operator> <name pos:line="90" pos:column="44">_srcMLArchive</name></expr>;</expr_stmt>
        }</block></function>


        <function><type><specifier pos:line="94" pos:column="9">private</specifier> <name pos:line="94" pos:column="17">void</name></type> <name pos:line="94" pos:column="22">CreateArchive</name><parameter_list pos:line="94" pos:column="35">(<param><decl><type><name pos:line="94" pos:column="36">string</name></type> <name pos:line="94" pos:column="43">filesInThisDirectory</name></decl></param>)</parameter_list>
        <block pos:line="95" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">srcMlArchiveFolder</name> =<init pos:line="96" pos:column="37"> <expr><call><name><name pos:line="96" pos:column="38">Path</name><op:operator pos:line="96" pos:column="42">.</op:operator><name pos:line="96" pos:column="43">Combine</name></name><argument_list pos:line="96" pos:column="50">(<argument><expr><name pos:line="96" pos:column="51">_indexPath</name></expr></argument><op:operator pos:line="96" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="96" pos:column="63">"archive"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">srcMLFolder</name> =<init pos:line="97" pos:column="30"> <expr><call><name><name pos:line="97" pos:column="31">Path</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">Combine</name></name><argument_list pos:line="97" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="44">"."</lit:literal></expr></argument><op:operator pos:line="97" pos:column="47">,</op:operator> <argument><expr><lit:literal type="string" pos:line="97" pos:column="49">"SrcML"</lit:literal></expr></argument><op:operator pos:line="97" pos:column="56">,</op:operator> <argument><expr><lit:literal type="string" pos:line="97" pos:column="58">"CSharp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Directory</name><op:operator pos:line="98" pos:column="22">.</op:operator><name pos:line="98" pos:column="23">CreateDirectory</name></name><argument_list pos:line="98" pos:column="38">(<argument><expr><name pos:line="98" pos:column="39">srcMlArchiveFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">generator</name> =<init pos:line="99" pos:column="28"> <expr><op:operator pos:line="99" pos:column="29">new</op:operator> <call><name pos:line="99" pos:column="33">SrcMLGenerator</name><argument_list pos:line="99" pos:column="47">(<argument><expr><call><name><name pos:line="99" pos:column="48">Path</name><op:operator pos:line="99" pos:column="52">.</op:operator><name pos:line="99" pos:column="53">GetFullPath</name></name><argument_list pos:line="99" pos:column="64">(<argument><expr><name pos:line="99" pos:column="65">srcMLFolder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="100" pos:column="13">_srcMLArchive</name> <op:operator pos:line="100" pos:column="27">=</op:operator> <op:operator pos:line="100" pos:column="29">new</op:operator> <call><name pos:line="100" pos:column="33">SrcMLArchive</name><argument_list pos:line="100" pos:column="45">(<argument><expr><call><name><name pos:line="100" pos:column="46">Path</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">GetFullPath</name></name><argument_list pos:line="100" pos:column="62">(<argument><expr><name pos:line="100" pos:column="63">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="100" pos:column="84">,</op:operator>  <argument><expr><lit:literal type="boolean" pos:line="100" pos:column="87">false</lit:literal></expr></argument><op:operator pos:line="100" pos:column="92">,</op:operator> <argument><expr><name pos:line="100" pos:column="94">generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <function><type><specifier pos:line="105" pos:column="9">private</specifier> <name pos:line="105" pos:column="17">void</name></type> <name pos:line="105" pos:column="22">CreateIndexer</name><parameter_list pos:line="105" pos:column="35">()</parameter_list>
        <block pos:line="106" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">ServiceLocator</name><op:operator pos:line="107" pos:column="27">.</op:operator><name pos:line="107" pos:column="28">RegisterInstance</name></name><argument_list pos:line="107" pos:column="44">(<argument><expr><op:operator pos:line="107" pos:column="45">new</op:operator> <call><name pos:line="107" pos:column="49">IndexFilterManager</name><argument_list pos:line="107" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">ServiceLocator</name><op:operator pos:line="108" pos:column="27">.</op:operator><name><name pos:line="108" pos:column="28">RegisterInstance</name><argument_list pos:line="108" pos:column="44">&lt;<argument><name pos:line="108" pos:column="45">Analyzer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="54">(<argument><expr><op:operator pos:line="108" pos:column="55">new</op:operator> <call><name pos:line="108" pos:column="59">SnowballAnalyzer</name><argument_list pos:line="108" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="76">"English"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">currentIndexer</name> =<init pos:line="109" pos:column="33"> <expr><op:operator pos:line="109" pos:column="34">new</op:operator> <call><name pos:line="109" pos:column="38">DocumentIndexer</name><argument_list pos:line="109" pos:column="53">(<argument><expr><call><name><name pos:line="109" pos:column="54">TimeSpan</name><op:operator pos:line="109" pos:column="62">.</op:operator><name pos:line="109" pos:column="63">FromSeconds</name></name><argument_list pos:line="109" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="109" pos:column="75">10</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="109" pos:column="78">,</op:operator> <argument><expr><call><name pos:line="109" pos:column="80">GetTimeToCommit</name><argument_list pos:line="109" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">ServiceLocator</name><op:operator pos:line="110" pos:column="27">.</op:operator><name pos:line="110" pos:column="28">RegisterInstance</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">currentIndexer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">ServiceLocator</name><op:operator pos:line="111" pos:column="27">.</op:operator><name pos:line="111" pos:column="28">RegisterInstance</name></name><argument_list pos:line="111" pos:column="44">(<argument><expr><op:operator pos:line="111" pos:column="45">new</op:operator> <call><name pos:line="111" pos:column="49">IndexUpdateManager</name><argument_list pos:line="111" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">currentIndexer</name><op:operator pos:line="112" pos:column="27">.</op:operator><name pos:line="112" pos:column="28">ClearIndex</name></name><argument_list pos:line="112" pos:column="38">()</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">ServiceLocator</name><op:operator pos:line="113" pos:column="27">.</op:operator><name><name pos:line="113" pos:column="28">Resolve</name><argument_list pos:line="113" pos:column="35">&lt;<argument><name pos:line="113" pos:column="36">InitialIndexingWatcher</name></argument>&gt;</argument_list></name></name><argument_list pos:line="113" pos:column="59">()</argument_list></call><op:operator pos:line="113" pos:column="61">.</op:operator><call><name pos:line="113" pos:column="62">InitialIndexingStarted</name><argument_list pos:line="113" pos:column="84">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="116" pos:column="9">public</specifier> <specifier pos:line="116" pos:column="16">virtual</specifier> <name pos:line="116" pos:column="24">TimeSpan</name><type:modifier pos:line="116" pos:column="32">?</type:modifier></type> <name pos:line="116" pos:column="34">GetTimeToCommit</name><parameter_list pos:line="116" pos:column="49">()</parameter_list>
        <block pos:line="117" pos:column="9">{
            <return pos:line="118" pos:column="13">return <expr><name pos:line="118" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="121" pos:column="9">private</specifier> <name pos:line="121" pos:column="17">void</name></type> <name pos:line="121" pos:column="22">CreateKey</name><parameter_list pos:line="121" pos:column="31">(<param><decl><type><name pos:line="121" pos:column="32">string</name></type> <name pos:line="121" pos:column="39">filesInThisDirectory</name></decl></param>)</parameter_list>
        <block pos:line="122" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Directory</name><op:operator pos:line="123" pos:column="22">.</op:operator><name pos:line="123" pos:column="23">CreateDirectory</name></name><argument_list pos:line="123" pos:column="38">(<argument><expr><name pos:line="123" pos:column="39">_indexPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">key</name> =<init pos:line="124" pos:column="22"> <expr><op:operator pos:line="124" pos:column="23">new</op:operator> <call><name pos:line="124" pos:column="27">SolutionKey</name><argument_list pos:line="124" pos:column="38">(<argument><expr><call><name><name pos:line="124" pos:column="39">Guid</name><op:operator pos:line="124" pos:column="43">.</op:operator><name pos:line="124" pos:column="44">NewGuid</name></name><argument_list pos:line="124" pos:column="51">()</argument_list></call></expr></argument><op:operator pos:line="124" pos:column="53">,</op:operator> <argument><expr><name pos:line="124" pos:column="55">filesInThisDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">ServiceLocator</name><op:operator pos:line="125" pos:column="27">.</op:operator><name pos:line="125" pos:column="28">RegisterInstance</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="128" pos:column="9">private</specifier> <name pos:line="128" pos:column="17">void</name></type> <name pos:line="128" pos:column="22">CreateSystemWideDefaults</name><parameter_list pos:line="128" pos:column="46">(<param><decl><type><name pos:line="128" pos:column="47">string</name></type> <name pos:line="128" pos:column="54">indexDirName</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <expr_stmt><expr><name pos:line="130" pos:column="13">_indexPath</name> <op:operator pos:line="130" pos:column="24">=</op:operator> <call><name><name pos:line="130" pos:column="26">Path</name><op:operator pos:line="130" pos:column="30">.</op:operator><name pos:line="130" pos:column="31">Combine</name></name><argument_list pos:line="130" pos:column="38">(<argument><expr><call><name><name pos:line="130" pos:column="39">Path</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">GetTempPath</name></name><argument_list pos:line="130" pos:column="55">()</argument_list></call></expr></argument><op:operator pos:line="130" pos:column="57">,</op:operator> <argument><expr><name pos:line="130" pos:column="59">indexDirName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">TestUtils</name><op:operator pos:line="131" pos:column="22">.</op:operator><name pos:line="131" pos:column="23">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="131" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">ServiceLocator</name><op:operator pos:line="132" pos:column="27">.</op:operator><name><name pos:line="132" pos:column="28">RegisterInstance</name><argument_list pos:line="132" pos:column="44">&lt;<argument><name pos:line="132" pos:column="45">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="67">(<argument><expr><op:operator pos:line="132" pos:column="68">new</op:operator> <call><name pos:line="132" pos:column="72">SandoOptionsProvider</name><argument_list pos:line="132" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">ServiceLocator</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">RegisterInstance</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><op:operator pos:line="133" pos:column="45">new</op:operator> <call><name pos:line="133" pos:column="49">SrcMLArchiveEventsHandlers</name><argument_list pos:line="133" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">ServiceLocator</name><op:operator pos:line="134" pos:column="27">.</op:operator><name pos:line="134" pos:column="28">RegisterInstance</name></name><argument_list pos:line="134" pos:column="44">(<argument><expr><op:operator pos:line="134" pos:column="45">new</op:operator> <call><name pos:line="134" pos:column="49">InitialIndexingWatcher</name><argument_list pos:line="134" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="138" pos:column="9">[<expr><name pos:line="138" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">void</name></type> <name pos:line="139" pos:column="21">TearDown</name><parameter_list pos:line="139" pos:column="29">()</parameter_list>
        <block pos:line="140" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">_srcMLArchive</name><op:operator pos:line="141" pos:column="26">.</op:operator><name pos:line="141" pos:column="27">Dispose</name></name><argument_list pos:line="141" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">ServiceLocator</name><op:operator pos:line="142" pos:column="27">.</op:operator><name><name pos:line="142" pos:column="28">Resolve</name><argument_list pos:line="142" pos:column="35">&lt;<argument><name pos:line="142" pos:column="36">IndexFilterManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="142" pos:column="55">()</argument_list></call><op:operator pos:line="142" pos:column="57">.</op:operator><call><name pos:line="142" pos:column="58">Dispose</name><argument_list pos:line="142" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">ServiceLocator</name><op:operator pos:line="143" pos:column="27">.</op:operator><name><name pos:line="143" pos:column="28">Resolve</name><argument_list pos:line="143" pos:column="35">&lt;<argument><name pos:line="143" pos:column="36">DocumentIndexer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="143" pos:column="52">()</argument_list></call><op:operator pos:line="143" pos:column="54">.</op:operator><call><name pos:line="143" pos:column="55">Dispose</name><argument_list pos:line="143" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Directory</name><op:operator pos:line="144" pos:column="22">.</op:operator><name pos:line="144" pos:column="23">Delete</name></name><argument_list pos:line="144" pos:column="29">(<argument><expr><name pos:line="144" pos:column="30">_indexPath</name></expr></argument><op:operator pos:line="144" pos:column="40">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="144" pos:column="42">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="147" pos:column="9">private</specifier> <name pos:line="147" pos:column="17">string</name></type> <name pos:line="147" pos:column="24">_indexPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="148" pos:column="9">private</specifier> <name pos:line="148" pos:column="17">SrcMLArchive</name></type> <name pos:line="148" pos:column="30">_srcMLArchive</name></decl>;</decl_stmt>

        <function><type><specifier pos:line="150" pos:column="9">protected</specifier> <name><name pos:line="150" pos:column="19">List</name><argument_list pos:line="150" pos:column="23">&lt;<argument><name pos:line="150" pos:column="24">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="42">EnsureRankingPrettyGood</name><parameter_list pos:line="150" pos:column="65">(<param><decl><type><name pos:line="150" pos:column="66">string</name></type> <name pos:line="150" pos:column="73">keywords</name></decl></param><op:operator pos:line="150" pos:column="81">,</op:operator> <param><decl><type><name><name pos:line="150" pos:column="83">Predicate</name><argument_list pos:line="150" pos:column="92">&lt;<argument><name pos:line="150" pos:column="93">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="111">predicate</name></decl></param><op:operator pos:line="150" pos:column="120">,</op:operator> <param><decl><type><name pos:line="150" pos:column="122">int</name></type> <name pos:line="150" pos:column="126">expectedLowestRank</name></decl></param>)</parameter_list>
        <block pos:line="151" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">codeSearcher</name> =<init pos:line="152" pos:column="31"> <expr><op:operator pos:line="152" pos:column="32">new</op:operator> <call><name pos:line="152" pos:column="36">CodeSearcher</name><argument_list pos:line="152" pos:column="48">(<argument><expr><op:operator pos:line="152" pos:column="49">new</op:operator> <call><name pos:line="152" pos:column="53">IndexerSearcher</name><argument_list pos:line="152" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="153" pos:column="13">List</name><argument_list pos:line="153" pos:column="17">&lt;<argument><name pos:line="153" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="153" pos:column="36">codeSearchResults</name> =<init pos:line="153" pos:column="55"> <expr><call><name><name pos:line="153" pos:column="56">codeSearcher</name><op:operator pos:line="153" pos:column="68">.</op:operator><name pos:line="153" pos:column="69">Search</name></name><argument_list pos:line="153" pos:column="75">(<argument><expr><name pos:line="153" pos:column="76">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">methodSearchResult</name> =<init pos:line="154" pos:column="37"> <expr><call><name><name pos:line="154" pos:column="38">codeSearchResults</name><op:operator pos:line="154" pos:column="55">.</op:operator><name pos:line="154" pos:column="56">Find</name></name><argument_list pos:line="154" pos:column="60">(<argument><expr><name pos:line="154" pos:column="61">predicate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="155" pos:column="13">if <condition pos:line="155" pos:column="16">(<expr><name pos:line="155" pos:column="17">methodSearchResult</name> <op:operator pos:line="155" pos:column="36">==</op:operator> <name pos:line="155" pos:column="39">null</name></expr>)</condition><then pos:line="155" pos:column="44">
            <block pos:line="156" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="157" pos:column="17">Assert</name><op:operator pos:line="157" pos:column="23">.</op:operator><name pos:line="157" pos:column="24">Fail</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="29">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="157" pos:column="82">+</op:operator> <name pos:line="157" pos:column="84">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">rank</name> =<init pos:line="160" pos:column="23"> <expr><call><name><name pos:line="160" pos:column="24">codeSearchResults</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">IndexOf</name></name><argument_list pos:line="160" pos:column="49">(<argument><expr><name pos:line="160" pos:column="50">methodSearchResult</name></expr></argument>)</argument_list></call> <op:operator pos:line="160" pos:column="70">+</op:operator> <lit:literal type="number" pos:line="160" pos:column="72">1</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">IsTrue</name></name><argument_list pos:line="161" pos:column="26">(<argument><expr><name pos:line="161" pos:column="27">rank</name> <op:operator pos:line="161" pos:column="32">&lt;=</op:operator> <name pos:line="161" pos:column="35">expectedLowestRank</name></expr></argument><op:operator pos:line="161" pos:column="53">,</op:operator>
                          <argument><expr><lit:literal type="string" pos:line="162" pos:column="27">"Searching for "</lit:literal> <op:operator pos:line="162" pos:column="44">+</op:operator> <name pos:line="162" pos:column="46">keywords</name> <op:operator pos:line="162" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="162" pos:column="57">" doesn't return a result in the top "</lit:literal> <op:operator pos:line="162" pos:column="96">+</op:operator> <name pos:line="162" pos:column="98">expectedLowestRank</name> <op:operator pos:line="162" pos:column="117">+</op:operator> <lit:literal type="string" pos:line="162" pos:column="119">"; rank="</lit:literal> <op:operator pos:line="162" pos:column="129">+</op:operator>
                          <name pos:line="163" pos:column="27">rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="165" pos:column="13">return <expr><name pos:line="165" pos:column="20">codeSearchResults</name></expr>;</return>
        }</block></function>



        <function><type><specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">SrcMLArchive</name></type> <name pos:line="170" pos:column="29">GetSrcMLArchive</name><parameter_list pos:line="170" pos:column="44">()</parameter_list>
        <block pos:line="171" pos:column="9">{
            <throw pos:line="172" pos:column="13">throw <expr><op:operator pos:line="172" pos:column="19">new</op:operator> <call><name pos:line="172" pos:column="23">NotImplementedException</name><argument_list pos:line="172" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="175" pos:column="9">public</specifier> <name><name pos:line="175" pos:column="16">System</name><op:operator pos:line="175" pos:column="22">.</op:operator><name pos:line="175" pos:column="23">Xml</name><op:operator pos:line="175" pos:column="26">.</op:operator><name pos:line="175" pos:column="27">Linq</name><op:operator pos:line="175" pos:column="31">.</op:operator><name pos:line="175" pos:column="32">XElement</name></name></type> <name pos:line="175" pos:column="41">GetXElementForSourceFile</name><parameter_list pos:line="175" pos:column="65">(<param><decl><type><name pos:line="175" pos:column="66">string</name></type> <name pos:line="175" pos:column="73">sourceFilePath</name></decl></param>)</parameter_list>
        <block pos:line="176" pos:column="9">{
            <return pos:line="177" pos:column="13">return <expr><call><name><name pos:line="177" pos:column="20">_srcMLArchive</name><op:operator pos:line="177" pos:column="33">.</op:operator><name pos:line="177" pos:column="34">GenerateXmlAndXElementForSource</name></name><argument_list pos:line="177" pos:column="65">(<argument><expr><name pos:line="177" pos:column="66">sourceFilePath</name></expr></argument>)</argument_list></call></expr>;</return>            
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="180" pos:column="9">public</specifier> <specifier pos:line="180" pos:column="16">event</specifier> <name><name pos:line="180" pos:column="22">EventHandler</name><argument_list pos:line="180" pos:column="34">&lt;<argument><name pos:line="180" pos:column="35">EventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="180" pos:column="46">MonitoringStopped</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="182" pos:column="9">public</specifier> <specifier pos:line="182" pos:column="16">event</specifier> <name><name pos:line="182" pos:column="22">EventHandler</name><argument_list pos:line="182" pos:column="34">&lt;<argument><name pos:line="182" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="182" pos:column="56">SourceFileChanged</name></decl>;</decl_stmt>

        <function><type><specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">StartMonitoring</name><parameter_list pos:line="184" pos:column="36">(<param><decl><type><name pos:line="184" pos:column="37">string</name></type> <name pos:line="184" pos:column="44">srcMlArchiveDirectory</name></decl></param><op:operator pos:line="184" pos:column="65">,</op:operator> <param><decl><type><name pos:line="184" pos:column="67">bool</name></type> <name pos:line="184" pos:column="72">useExistingSrcML</name></decl></param><op:operator pos:line="184" pos:column="88">,</op:operator> <param><decl><type><name pos:line="184" pos:column="90">string</name></type> <name pos:line="184" pos:column="97">srcMLBinaryDirectory</name></decl></param>)</parameter_list>
        <block pos:line="185" pos:column="9">{
            <throw pos:line="186" pos:column="13">throw <expr><op:operator pos:line="186" pos:column="19">new</op:operator> <call><name pos:line="186" pos:column="23">NotImplementedException</name><argument_list pos:line="186" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="189" pos:column="9">public</specifier> <name pos:line="189" pos:column="16">void</name></type> <name pos:line="189" pos:column="21">StartMonitoring</name><parameter_list pos:line="189" pos:column="36">()</parameter_list>
        <block pos:line="190" pos:column="9">{
            <throw pos:line="191" pos:column="13">throw <expr><op:operator pos:line="191" pos:column="19">new</op:operator> <call><name pos:line="191" pos:column="23">NotImplementedException</name><argument_list pos:line="191" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="194" pos:column="9">public</specifier> <specifier pos:line="194" pos:column="16">event</specifier> <name><name pos:line="194" pos:column="22">EventHandler</name><argument_list pos:line="194" pos:column="34">&lt;<argument><name pos:line="194" pos:column="35">EventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="46">StartupCompleted</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="195" pos:column="9">private</specifier> <name pos:line="195" pos:column="17">SrcMLArchiveEventsHandlers</name></type> <name pos:line="195" pos:column="44">handler</name></decl>;</decl_stmt>

        <function><type><specifier pos:line="197" pos:column="9">public</specifier> <name pos:line="197" pos:column="16">void</name></type> <name pos:line="197" pos:column="21">StopMonitoring</name><parameter_list pos:line="197" pos:column="35">()</parameter_list>
        <block pos:line="198" pos:column="9">{
            <throw pos:line="199" pos:column="13">throw <expr><op:operator pos:line="199" pos:column="19">new</op:operator> <call><name pos:line="199" pos:column="23">NotImplementedException</name><argument_list pos:line="199" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
