<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\CSharpParserTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">NUnit</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">ABB</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Parser</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">UnitTests</name></name>
<block pos:line="10" pos:column="1">{
	<class><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="12" pos:column="9">public</specifier> class <name pos:line="12" pos:column="22">CSharpParserTest</name>
	<block pos:line="13" pos:column="9">{
		
		<decl_stmt><decl><type><specifier pos:line="15" pos:column="17">private</specifier> <name pos:line="15" pos:column="25">SrcMLGenerator</name></type> <name pos:line="15" pos:column="40">generator</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">FixtureSetUp</name><parameter_list pos:line="18" pos:column="33">()</parameter_list> <block pos:line="18" pos:column="36">{
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">TestUtils</name><op:operator pos:line="19" pos:column="22">.</op:operator><name pos:line="19" pos:column="23">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="19" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">generator</name> <op:operator pos:line="20" pos:column="23">=</op:operator> <op:operator pos:line="20" pos:column="25">new</op:operator> <call><name pos:line="20" pos:column="29">SrcMLGenerator</name><argument_list pos:line="20" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="44">@"LIBS\SrcML"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="23" pos:column="17">[<expr><name pos:line="23" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">void</name></type> <name pos:line="24" pos:column="29">GenerateSrcMLShortestFileTest</name><parameter_list pos:line="24" pos:column="58">()</parameter_list> <block pos:line="24" pos:column="61">{
		    <decl_stmt><decl><type><name pos:line="25" pos:column="21">var</name></type> <name pos:line="25" pos:column="25">parser</name> =<init pos:line="25" pos:column="33"> <expr><op:operator pos:line="25" pos:column="34">new</op:operator> <call><name pos:line="25" pos:column="38">SrcMLCSharpParser</name><argument_list pos:line="25" pos:column="55">(<argument><expr><name pos:line="25" pos:column="56">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">srcML</name> =<init pos:line="26" pos:column="24"> <expr><call><name><name pos:line="26" pos:column="25">parser</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">Parse</name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="38">"TestFiles\\ShortestCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="27" pos:column="25">Assert</name><op:operator pos:line="27" pos:column="31">.</op:operator><name pos:line="27" pos:column="32">IsTrue</name></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name pos:line="27" pos:column="39">srcML</name><op:operator pos:line="27" pos:column="44">!=</op:operator><name pos:line="27" pos:column="46">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ParsePossiblyFailingFile</name><parameter_list pos:line="31" pos:column="45">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">parser</name> =<init pos:line="33" pos:column="25"> <expr><op:operator pos:line="33" pos:column="26">new</op:operator> <call><name pos:line="33" pos:column="30">SrcMLCSharpParser</name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">elements</name> =<init pos:line="34" pos:column="27"> <expr><call><name><name pos:line="34" pos:column="28">parser</name><op:operator pos:line="34" pos:column="34">.</op:operator><name pos:line="34" pos:column="35">Parse</name></name><argument_list pos:line="34" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="41">"TestFiles\\MESTParsingFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">IsNotNull</name></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">IsTrue</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name><name pos:line="36" pos:column="27">elements</name><op:operator pos:line="36" pos:column="35">.</op:operator><name pos:line="36" pos:column="36">Count</name></name> <op:operator pos:line="36" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

	    <function><type><attribute pos:line="40" pos:column="13">[<expr><name pos:line="40" pos:column="14">Test</name></expr>]</attribute>
		<specifier pos:line="41" pos:column="17">public</specifier> <name pos:line="41" pos:column="24">void</name></type> <name pos:line="41" pos:column="29">ParseMethodTest</name><parameter_list pos:line="41" pos:column="44">()</parameter_list>
		<block pos:line="42" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">var</name></type> <name pos:line="43" pos:column="29">parser</name> =<init pos:line="43" pos:column="37"> <expr><op:operator pos:line="43" pos:column="38">new</op:operator> <call><name pos:line="43" pos:column="42">SrcMLCSharpParser</name><argument_list pos:line="43" pos:column="59">(<argument><expr><name pos:line="43" pos:column="60">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="44" pos:column="25">var</name></type> <name pos:line="44" pos:column="29">elements</name> =<init pos:line="44" pos:column="39"> <expr><call><name><name pos:line="44" pos:column="40">parser</name><op:operator pos:line="44" pos:column="46">.</op:operator><name pos:line="44" pos:column="47">Parse</name></name><argument_list pos:line="44" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="53">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">Assert</name><op:operator pos:line="45" pos:column="31">.</op:operator><name pos:line="45" pos:column="32">IsNotNull</name></name><argument_list pos:line="45" pos:column="41">(<argument><expr><name pos:line="45" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">Assert</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">IsTrue</name></name><argument_list pos:line="46" pos:column="38">(<argument><expr><name><name pos:line="46" pos:column="39">elements</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">Count</name></name><op:operator pos:line="46" pos:column="53">&gt;</op:operator><lit:literal type="number" pos:line="46" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="48" pos:column="13">CheckParseOfShortCSharpFile</name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">ParseMethodWithAlternativeParserTest</name><parameter_list pos:line="52" pos:column="57">()</parameter_list>
        <block pos:line="53" pos:column="9">{            
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">parser</name> =<init pos:line="54" pos:column="25"> <expr><op:operator pos:line="54" pos:column="26">new</op:operator> <call><name pos:line="54" pos:column="30">MySrcMLCSharpParser</name><argument_list pos:line="54" pos:column="49">(<argument><expr><name pos:line="54" pos:column="50">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">elements</name> =<init pos:line="55" pos:column="27"> <expr><call><name><name pos:line="55" pos:column="28">parser</name><op:operator pos:line="55" pos:column="34">.</op:operator><name pos:line="55" pos:column="35">Parse</name></name><argument_list pos:line="55" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="41">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">IsNotNull</name></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsTrue</name></name><argument_list pos:line="57" pos:column="26">(<argument><expr><name><name pos:line="57" pos:column="27">elements</name><op:operator pos:line="57" pos:column="35">.</op:operator><name pos:line="57" pos:column="36">Count</name></name> <op:operator pos:line="57" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="57" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="59" pos:column="13">CheckParseOfShortCSharpFile</name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">bool</name></type> <name pos:line="60" pos:column="18">seenOne</name> =<init pos:line="60" pos:column="27"> <expr><lit:literal type="boolean" pos:line="60" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="61" pos:column="13">foreach (<init><decl><type><name pos:line="61" pos:column="22">var</name></type> <name pos:line="61" pos:column="26">programElement</name> <init pos:line="61" pos:column="41">in <expr><name pos:line="61" pos:column="44">elements</name></expr></init></decl></init>)
            <block pos:line="62" pos:column="13">{
                <if pos:line="63" pos:column="17">if<condition pos:line="63" pos:column="19">(<expr><name pos:line="63" pos:column="20">programElement</name> <op:operator pos:line="63" pos:column="35">as</op:operator> <name pos:line="63" pos:column="38">MyCSharpMethodElement</name> <op:operator pos:line="63" pos:column="60">!=</op:operator><name pos:line="63" pos:column="62">null</name></expr>)</condition><then pos:line="63" pos:column="67">
                <block pos:line="64" pos:column="17">{
                    <expr_stmt><expr><name pos:line="65" pos:column="21">seenOne</name> <op:operator pos:line="65" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="65" pos:column="31">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="66" pos:column="21">Assert</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">IsTrue</name></name><argument_list pos:line="66" pos:column="34">(<argument><expr><op:operator pos:line="66" pos:column="35">(</op:operator><name pos:line="66" pos:column="36">programElement</name> <op:operator pos:line="66" pos:column="51">as</op:operator> <name pos:line="66" pos:column="54">MyCSharpMethodElement</name><op:operator pos:line="66" pos:column="75">)</op:operator><op:operator pos:line="66" pos:column="76">.</op:operator><call><name><name pos:line="66" pos:column="77">CustomCrazyStuff</name><op:operator pos:line="66" pos:column="93">.</op:operator><name pos:line="66" pos:column="94">Equals</name></name><argument_list pos:line="66" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="101">"wow"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">IsTrue</name></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">seenOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

	    <function><type><specifier pos:line="72" pos:column="13">private</specifier> <specifier pos:line="72" pos:column="21">static</specifier> <name pos:line="72" pos:column="28">void</name></type> <name pos:line="72" pos:column="33">CheckParseOfShortCSharpFile</name><parameter_list pos:line="72" pos:column="60">(<param><decl><type><name><name pos:line="72" pos:column="61">List</name><argument_list pos:line="72" pos:column="65">&lt;<argument><name pos:line="72" pos:column="66">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="82">elements</name></decl></param>)</parameter_list>
	    <block pos:line="73" pos:column="13">{
	        <decl_stmt><decl><type><name pos:line="74" pos:column="17">bool</name></type> <name pos:line="74" pos:column="22">seenSetLanguageMethod</name> =<init pos:line="74" pos:column="45"> <expr><lit:literal type="boolean" pos:line="74" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
	        <foreach pos:line="75" pos:column="17">foreach (<init><decl><type><name pos:line="75" pos:column="26">ProgramElement</name></type> <name pos:line="75" pos:column="41">pe</name> <init pos:line="75" pos:column="44">in <expr><name pos:line="75" pos:column="47">elements</name></expr></init></decl></init>)
	        <block pos:line="76" pos:column="17">{
	            <if pos:line="77" pos:column="21">if <condition pos:line="77" pos:column="24">(<expr><name pos:line="77" pos:column="25">pe</name> <op:operator pos:line="77" pos:column="28">is</op:operator> <name pos:line="77" pos:column="31">MethodElement</name></expr>)</condition><then pos:line="77" pos:column="45">
	            <block pos:line="78" pos:column="21">{
	                <decl_stmt><decl><type><name pos:line="79" pos:column="25">MethodElement</name></type> <name pos:line="79" pos:column="39">method</name> =<init pos:line="79" pos:column="47"> <expr><op:operator pos:line="79" pos:column="48">(</op:operator><name pos:line="79" pos:column="49">MethodElement</name><op:operator pos:line="79" pos:column="62">)</op:operator> <name pos:line="79" pos:column="64">pe</name></expr></init></decl>;</decl_stmt>
	                <if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name><name pos:line="80" pos:column="29">method</name><op:operator pos:line="80" pos:column="35">.</op:operator><name pos:line="80" pos:column="36">Name</name></name> <op:operator pos:line="80" pos:column="41">==</op:operator> <lit:literal type="string" pos:line="80" pos:column="44">"SetLanguage"</lit:literal></expr>)</condition><then pos:line="80" pos:column="58">
	                <block pos:line="81" pos:column="25">{
	                    <expr_stmt><expr><name pos:line="82" pos:column="29">seenSetLanguageMethod</name> <op:operator pos:line="82" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="53">true</lit:literal></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="83" pos:column="29">Assert</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">AreEqual</name></name><argument_list pos:line="83" pos:column="44">(<argument><expr><name><name pos:line="83" pos:column="45">method</name><op:operator pos:line="83" pos:column="51">.</op:operator><name pos:line="83" pos:column="52">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="83" pos:column="72">,</op:operator> <argument><expr><lit:literal type="number" pos:line="83" pos:column="74">26</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="84" pos:column="29">Assert</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">AreEqual</name></name><argument_list pos:line="84" pos:column="44">(<argument><expr><name><name pos:line="84" pos:column="45">method</name><op:operator pos:line="84" pos:column="51">.</op:operator><name pos:line="84" pos:column="52">ReturnType</name></name></expr></argument><op:operator pos:line="84" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="84" pos:column="64">"void"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="85" pos:column="29">Assert</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">AreEqual</name></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name><name pos:line="85" pos:column="45">method</name><op:operator pos:line="85" pos:column="51">.</op:operator><name pos:line="85" pos:column="52">AccessLevel</name></name></expr></argument><op:operator pos:line="85" pos:column="63">,</op:operator> <argument><expr><name><name pos:line="85" pos:column="65">AccessLevel</name><op:operator pos:line="85" pos:column="76">.</op:operator><name pos:line="85" pos:column="77">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="86" pos:column="29">Assert</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">AreEqual</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name><name pos:line="86" pos:column="45">method</name><op:operator pos:line="86" pos:column="51">.</op:operator><name pos:line="86" pos:column="52">Arguments</name></name></expr></argument><op:operator pos:line="86" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="86" pos:column="63">"LanguageEnum language"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="87" pos:column="29">Assert</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">AreEqual</name></name><argument_list pos:line="87" pos:column="44">(<argument><expr><call><name><name pos:line="87" pos:column="45">method</name><op:operator pos:line="87" pos:column="51">.</op:operator><name pos:line="87" pos:column="52">Body</name><op:operator pos:line="87" pos:column="56">.</op:operator><name pos:line="87" pos:column="57">Trim</name></name><argument_list pos:line="87" pos:column="61">()</argument_list></call></expr></argument><op:operator pos:line="87" pos:column="63">,</op:operator>
                                        <argument><expr><lit:literal type="string" pos:line="88" pos:column="41">"temporary Language   language language  LanguageEnum CSharp Language   LanguageEnum Java"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="89" pos:column="29">Assert</name><op:operator pos:line="89" pos:column="35">.</op:operator><name pos:line="89" pos:column="36">AreNotEqual</name></name><argument_list pos:line="89" pos:column="47">(<argument><expr><name><name pos:line="89" pos:column="48">method</name><op:operator pos:line="89" pos:column="54">.</op:operator><name pos:line="89" pos:column="55">ClassId</name></name></expr></argument><op:operator pos:line="89" pos:column="62">,</op:operator> <argument><expr><name><name pos:line="89" pos:column="64">System</name><op:operator pos:line="89" pos:column="70">.</op:operator><name pos:line="89" pos:column="71">Guid</name><op:operator pos:line="89" pos:column="75">.</op:operator><name pos:line="89" pos:column="76">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                }</block></then></if>
                    <if pos:line="91" pos:column="21">if <condition pos:line="91" pos:column="24">(<expr><name><name pos:line="91" pos:column="25">method</name><op:operator pos:line="91" pos:column="31">.</op:operator><name pos:line="91" pos:column="32">Name</name></name> <op:operator pos:line="91" pos:column="37">==</op:operator> <lit:literal type="string" pos:line="91" pos:column="40">"GenerateSrcML"</lit:literal></expr>)</condition><then pos:line="91" pos:column="56">
                    <block pos:line="92" pos:column="21">{
                        <expr_stmt><expr><name pos:line="93" pos:column="25">seenSetLanguageMethod</name> <op:operator pos:line="93" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="93" pos:column="49">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="94" pos:column="25">Assert</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">AreEqual</name></name><argument_list pos:line="94" pos:column="40">(<argument><expr><call><name><name pos:line="94" pos:column="41">method</name><op:operator pos:line="94" pos:column="47">.</op:operator><name pos:line="94" pos:column="48">Body</name><op:operator pos:line="94" pos:column="52">.</op:operator><name pos:line="94" pos:column="53">Trim</name></name><argument_list pos:line="94" pos:column="57">()</argument_list></call></expr></argument><op:operator pos:line="94" pos:column="59">,</op:operator>
                                        <argument><expr><lit:literal type="string" pos:line="95" pos:column="41">"check whether filename exists  System IO File Exists filename  filename new ParserException  parser input file name does not exist      filename   parser input file name does not exist      filename LaunchSrcML filename  filename"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="96" pos:column="25">Assert</name><op:operator pos:line="96" pos:column="31">.</op:operator><name pos:line="96" pos:column="32">AreNotEqual</name></name><argument_list pos:line="96" pos:column="43">(<argument><expr><name><name pos:line="96" pos:column="44">method</name><op:operator pos:line="96" pos:column="50">.</op:operator><name pos:line="96" pos:column="51">ClassId</name></name></expr></argument><op:operator pos:line="96" pos:column="58">,</op:operator> <argument><expr><name><name pos:line="96" pos:column="60">System</name><op:operator pos:line="96" pos:column="66">.</op:operator><name pos:line="96" pos:column="67">Guid</name><op:operator pos:line="96" pos:column="71">.</op:operator><name pos:line="96" pos:column="72">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

	            }</block></then></if>
	        }</block></foreach>
	        <expr_stmt><expr><call><name><name pos:line="101" pos:column="17">Assert</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">IsTrue</name></name><argument_list pos:line="101" pos:column="30">(<argument><expr><name pos:line="101" pos:column="31">seenSetLanguageMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></function>

	    <function><type><attribute pos:line="104" pos:column="13">[<expr><name pos:line="104" pos:column="14">Test</name></expr>]</attribute>
		<specifier pos:line="105" pos:column="17">public</specifier> <name pos:line="105" pos:column="24">void</name></type> <name pos:line="105" pos:column="29">RunIterativeMethodTest</name><parameter_list pos:line="105" pos:column="51">()</parameter_list>
		<block pos:line="106" pos:column="17">{
			<for pos:line="107" pos:column="25">for(<init><decl><type><name pos:line="107" pos:column="29">int</name></type> <name pos:line="107" pos:column="33">i</name> =<init pos:line="107" pos:column="36"> <expr><lit:literal type="number" pos:line="107" pos:column="37">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="107" pos:column="40">i</name> <op:operator pos:line="107" pos:column="42">&lt;</op:operator> <lit:literal type="number" pos:line="107" pos:column="44">500</lit:literal></expr>;</condition> <incr><expr><name pos:line="107" pos:column="49">i</name><op:operator pos:line="107" pos:column="50">++</op:operator></expr></incr>)
			<block pos:line="108" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="109" pos:column="33">ParseMethodTest</name><argument_list pos:line="109" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
			}</block></for>

		}</block></function>

		<function><type><attribute pos:line="114" pos:column="17">[<expr><name pos:line="114" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="115" pos:column="17">public</specifier> <name pos:line="115" pos:column="24">void</name></type> <name pos:line="115" pos:column="29">ParseClassTest</name><parameter_list pos:line="115" pos:column="43">()</parameter_list>
		<block pos:line="116" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="117" pos:column="25">bool</name></type> <name pos:line="117" pos:column="30">seenClass</name> =<init pos:line="117" pos:column="41"> <expr><lit:literal type="boolean" pos:line="117" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="118" pos:column="25">var</name></type> <name pos:line="118" pos:column="29">parser</name> =<init pos:line="118" pos:column="37"> <expr><op:operator pos:line="118" pos:column="38">new</op:operator> <call><name pos:line="118" pos:column="42">SrcMLCSharpParser</name><argument_list pos:line="118" pos:column="59">(<argument><expr><name pos:line="118" pos:column="60">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">var</name></type> <name pos:line="119" pos:column="29">elements</name> =<init pos:line="119" pos:column="39"> <expr><call><name><name pos:line="119" pos:column="40">parser</name><op:operator pos:line="119" pos:column="46">.</op:operator><name pos:line="119" pos:column="47">Parse</name></name><argument_list pos:line="119" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="53">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="120" pos:column="25">Assert</name><op:operator pos:line="120" pos:column="31">.</op:operator><name pos:line="120" pos:column="32">IsNotNull</name></name><argument_list pos:line="120" pos:column="41">(<argument><expr><name pos:line="120" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">Assert</name><op:operator pos:line="121" pos:column="31">.</op:operator><name pos:line="121" pos:column="32">IsTrue</name></name><argument_list pos:line="121" pos:column="38">(<argument><expr><name><name pos:line="121" pos:column="39">elements</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">Count</name></name> <op:operator pos:line="121" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="121" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="122" pos:column="25">foreach(<init><decl><type><name pos:line="122" pos:column="33">ProgramElement</name></type> <name pos:line="122" pos:column="48">pe</name> <init pos:line="122" pos:column="51">in <expr><name pos:line="122" pos:column="54">elements</name></expr></init></decl></init>)
			<block pos:line="123" pos:column="25">{
				<if pos:line="124" pos:column="33">if<condition pos:line="124" pos:column="35">(<expr><name pos:line="124" pos:column="36">pe</name> <op:operator pos:line="124" pos:column="39">is</op:operator> <name pos:line="124" pos:column="42">ClassElement</name></expr>)</condition><then pos:line="124" pos:column="55">
				<block pos:line="125" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="126" pos:column="41">ClassElement</name></type> <name pos:line="126" pos:column="54">classElem</name> =<init pos:line="126" pos:column="65"> <expr><op:operator pos:line="126" pos:column="66">(</op:operator><name pos:line="126" pos:column="67">ClassElement</name><op:operator pos:line="126" pos:column="79">)</op:operator><name pos:line="126" pos:column="80">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="127" pos:column="41">if<condition pos:line="127" pos:column="43">(<expr><name><name pos:line="127" pos:column="44">classElem</name><op:operator pos:line="127" pos:column="53">.</op:operator><name pos:line="127" pos:column="54">Name</name></name> <op:operator pos:line="127" pos:column="59">==</op:operator> <lit:literal type="string" pos:line="127" pos:column="62">"SrcMLGenerator"</lit:literal></expr>)</condition><then pos:line="127" pos:column="79">
					<block pos:line="128" pos:column="41">{
						<expr_stmt><expr><name pos:line="129" pos:column="49">seenClass</name> <op:operator pos:line="129" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="129" pos:column="61">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="130" pos:column="49">Assert</name><op:operator pos:line="130" pos:column="55">.</op:operator><name pos:line="130" pos:column="56">AreEqual</name></name><argument_list pos:line="130" pos:column="64">(<argument><expr><name><name pos:line="130" pos:column="65">classElem</name><op:operator pos:line="130" pos:column="74">.</op:operator><name pos:line="130" pos:column="75">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="130" pos:column="95">,</op:operator> <argument><expr><lit:literal type="number" pos:line="130" pos:column="97">14</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="131" pos:column="49">Assert</name><op:operator pos:line="131" pos:column="55">.</op:operator><name pos:line="131" pos:column="56">AreEqual</name></name><argument_list pos:line="131" pos:column="64">(<argument><expr><name><name pos:line="131" pos:column="65">classElem</name><op:operator pos:line="131" pos:column="74">.</op:operator><name pos:line="131" pos:column="75">AccessLevel</name></name></expr></argument><op:operator pos:line="131" pos:column="86">,</op:operator> <argument><expr><name><name pos:line="131" pos:column="88">AccessLevel</name><op:operator pos:line="131" pos:column="99">.</op:operator><name pos:line="131" pos:column="100">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="132" pos:column="49">Assert</name><op:operator pos:line="132" pos:column="55">.</op:operator><name pos:line="132" pos:column="56">AreEqual</name></name><argument_list pos:line="132" pos:column="64">(<argument><expr><name><name pos:line="132" pos:column="65">classElem</name><op:operator pos:line="132" pos:column="74">.</op:operator><name pos:line="132" pos:column="75">Namespace</name></name></expr></argument><op:operator pos:line="132" pos:column="84">,</op:operator> <argument><expr><lit:literal type="string" pos:line="132" pos:column="86">"Sando.Parser"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="133" pos:column="49">Assert</name><op:operator pos:line="133" pos:column="55">.</op:operator><name pos:line="133" pos:column="56">True</name></name><argument_list pos:line="133" pos:column="60">(<argument><expr><call><name><name pos:line="133" pos:column="61">classElem</name><op:operator pos:line="133" pos:column="70">.</op:operator><name pos:line="133" pos:column="71">FullFilePath</name><op:operator pos:line="133" pos:column="83">.</op:operator><name pos:line="133" pos:column="84">EndsWith</name></name><argument_list pos:line="133" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="93">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="137" pos:column="25">Assert</name><op:operator pos:line="137" pos:column="31">.</op:operator><name pos:line="137" pos:column="32">IsTrue</name></name><argument_list pos:line="137" pos:column="38">(<argument><expr><name pos:line="137" pos:column="39">seenClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	

		<function><type><attribute pos:line="142" pos:column="17">[<expr><name pos:line="142" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="143" pos:column="17">public</specifier> <name pos:line="143" pos:column="24">void</name></type> <name pos:line="143" pos:column="29">BasicParserTest</name><parameter_list pos:line="143" pos:column="44">()</parameter_list>
		<block pos:line="144" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="145" pos:column="25">SrcMLCSharpParser</name></type> <name pos:line="145" pos:column="43">parser</name> =<init pos:line="145" pos:column="51"> <expr><op:operator pos:line="145" pos:column="52">new</op:operator> <call><name pos:line="145" pos:column="56">SrcMLCSharpParser</name><argument_list pos:line="145" pos:column="73">(<argument><expr><name pos:line="145" pos:column="74">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="146" pos:column="25">var</name></type> <name pos:line="146" pos:column="29">elements</name> =<init pos:line="146" pos:column="39"> <expr><call><name><name pos:line="146" pos:column="40">parser</name><op:operator pos:line="146" pos:column="46">.</op:operator><name pos:line="146" pos:column="47">Parse</name></name><argument_list pos:line="146" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="53">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">Assert</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">IsNotNull</name></name><argument_list pos:line="147" pos:column="41">(<argument><expr><name pos:line="147" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="148" pos:column="25">Assert</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">IsTrue</name></name><argument_list pos:line="148" pos:column="38">(<argument><expr><name><name pos:line="148" pos:column="39">elements</name><op:operator pos:line="148" pos:column="47">.</op:operator><name pos:line="148" pos:column="48">Count</name></name><op:operator pos:line="148" pos:column="53">&gt;</op:operator><lit:literal type="number" pos:line="148" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="149" pos:column="25">bool</name></type> <name pos:line="149" pos:column="30">hasClass</name>=<init><expr><lit:literal type="boolean" pos:line="149" pos:column="39">false</lit:literal></expr></init><op:operator pos:line="149" pos:column="44">,</op:operator> <name pos:line="149" pos:column="46">hasMethod</name>=<init><expr><lit:literal type="boolean" pos:line="149" pos:column="56">false</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="150" pos:column="25">foreach (<init><decl><type><name pos:line="150" pos:column="34">var</name></type> <name pos:line="150" pos:column="38">programElement</name> <init pos:line="150" pos:column="53">in <expr><name pos:line="150" pos:column="56">elements</name></expr></init></decl></init>)
			<block pos:line="151" pos:column="25">{
				<if pos:line="152" pos:column="33">if<condition pos:line="152" pos:column="35">(<expr><name pos:line="152" pos:column="36">programElement</name> <op:operator pos:line="152" pos:column="51">as</op:operator> <name pos:line="152" pos:column="54">MethodElement</name> <op:operator pos:line="152" pos:column="68">!=</op:operator> <name pos:line="152" pos:column="71">null</name></expr>)</condition><then pos:line="152" pos:column="76">
					<expr_stmt><expr><name pos:line="153" pos:column="41">hasMethod</name> <op:operator pos:line="153" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="153" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="154" pos:column="33">if<condition pos:line="154" pos:column="35">(<expr><name pos:line="154" pos:column="36">programElement</name> <op:operator pos:line="154" pos:column="51">as</op:operator> <name pos:line="154" pos:column="54">ClassElement</name> <op:operator pos:line="154" pos:column="67">!=</op:operator> <name pos:line="154" pos:column="70">null</name></expr>)</condition><then pos:line="154" pos:column="75">
					<expr_stmt><expr><name pos:line="155" pos:column="41">hasClass</name> <op:operator pos:line="155" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="155" pos:column="52">true</lit:literal></expr>;</expr_stmt></then></if>

				<expr_stmt><expr><call><name><name pos:line="157" pos:column="33">Assert</name><op:operator pos:line="157" pos:column="39">.</op:operator><name pos:line="157" pos:column="40">IsTrue</name></name><argument_list pos:line="157" pos:column="46">(<argument><expr><name><name pos:line="157" pos:column="47">programElement</name><op:operator pos:line="157" pos:column="61">.</op:operator><name pos:line="157" pos:column="62">RawSource</name></name> <op:operator pos:line="157" pos:column="72">!=</op:operator> <name pos:line="157" pos:column="75">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="159" pos:column="25">Assert</name><op:operator pos:line="159" pos:column="31">.</op:operator><name pos:line="159" pos:column="32">IsTrue</name></name><argument_list pos:line="159" pos:column="38">(<argument><expr><name pos:line="159" pos:column="39">hasClass</name> <op:operator pos:line="159" pos:column="48">&amp;&amp;</op:operator> <name pos:line="159" pos:column="51">hasMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="162" pos:column="17">[<expr><name pos:line="162" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="163" pos:column="17">public</specifier> <name pos:line="163" pos:column="24">void</name></type> <name pos:line="163" pos:column="29">EnumParserTest</name><parameter_list pos:line="163" pos:column="43">()</parameter_list>
		<block pos:line="164" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="165" pos:column="25">SrcMLCSharpParser</name></type> <name pos:line="165" pos:column="43">parser</name> =<init pos:line="165" pos:column="51"> <expr><op:operator pos:line="165" pos:column="52">new</op:operator> <call><name pos:line="165" pos:column="56">SrcMLCSharpParser</name><argument_list pos:line="165" pos:column="73">(<argument><expr><name pos:line="165" pos:column="74">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="166" pos:column="25">var</name></type> <name pos:line="166" pos:column="29">elements</name> =<init pos:line="166" pos:column="39"> <expr><call><name><name pos:line="166" pos:column="40">parser</name><op:operator pos:line="166" pos:column="46">.</op:operator><name pos:line="166" pos:column="47">Parse</name></name><argument_list pos:line="166" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="53">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="167" pos:column="25">bool</name></type> <name pos:line="167" pos:column="30">hasEnum</name> =<init pos:line="167" pos:column="39"> <expr><lit:literal type="boolean" pos:line="167" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="168" pos:column="25">foreach(<init><decl><type><name pos:line="168" pos:column="33">var</name></type> <name pos:line="168" pos:column="37">programElement</name> <init pos:line="168" pos:column="52">in <expr><name pos:line="168" pos:column="55">elements</name></expr></init></decl></init>)
			<block pos:line="169" pos:column="25">{
				<if pos:line="170" pos:column="33">if<condition pos:line="170" pos:column="35">(<expr><name pos:line="170" pos:column="36">programElement</name> <op:operator pos:line="170" pos:column="51">as</op:operator> <name pos:line="170" pos:column="54">EnumElement</name> <op:operator pos:line="170" pos:column="66">!=</op:operator> <name pos:line="170" pos:column="69">null</name></expr>)</condition><then pos:line="170" pos:column="74">
				<block pos:line="171" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="172" pos:column="41">EnumElement</name></type> <name pos:line="172" pos:column="53">enumElem</name> =<init pos:line="172" pos:column="63"> <expr><op:operator pos:line="172" pos:column="64">(</op:operator><name pos:line="172" pos:column="65">EnumElement</name><op:operator pos:line="172" pos:column="76">)</op:operator><name pos:line="172" pos:column="77">programElement</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="173" pos:column="41">Assert</name><op:operator pos:line="173" pos:column="47">.</op:operator><name pos:line="173" pos:column="48">AreEqual</name></name><argument_list pos:line="173" pos:column="56">(<argument><expr><name><name pos:line="173" pos:column="57">enumElem</name><op:operator pos:line="173" pos:column="65">.</op:operator><name pos:line="173" pos:column="66">Name</name></name></expr></argument><op:operator pos:line="173" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="173" pos:column="72">"LanguageEnum"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">Assert</name><op:operator pos:line="174" pos:column="47">.</op:operator><name pos:line="174" pos:column="48">AreEqual</name></name><argument_list pos:line="174" pos:column="56">(<argument><expr><name><name pos:line="174" pos:column="57">enumElem</name><op:operator pos:line="174" pos:column="65">.</op:operator><name pos:line="174" pos:column="66">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="174" pos:column="86">,</op:operator> <argument><expr><lit:literal type="number" pos:line="174" pos:column="88">7</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="175" pos:column="41">Assert</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">AreEqual</name></name><argument_list pos:line="175" pos:column="56">(<argument><expr><name><name pos:line="175" pos:column="57">enumElem</name><op:operator pos:line="175" pos:column="65">.</op:operator><name pos:line="175" pos:column="66">Namespace</name></name></expr></argument><op:operator pos:line="175" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="175" pos:column="77">"Sando.Parser"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">Assert</name><op:operator pos:line="176" pos:column="47">.</op:operator><name pos:line="176" pos:column="48">AreEqual</name></name><argument_list pos:line="176" pos:column="56">(<argument><expr><name><name pos:line="176" pos:column="57">enumElem</name><op:operator pos:line="176" pos:column="65">.</op:operator><name pos:line="176" pos:column="66">Body</name></name></expr></argument><op:operator pos:line="176" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="176" pos:column="72">"Java C CSharp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="177" pos:column="41">Assert</name><op:operator pos:line="177" pos:column="47">.</op:operator><name pos:line="177" pos:column="48">AreEqual</name></name><argument_list pos:line="177" pos:column="56">(<argument><expr><name><name pos:line="177" pos:column="57">enumElem</name><op:operator pos:line="177" pos:column="65">.</op:operator><name pos:line="177" pos:column="66">AccessLevel</name></name></expr></argument><op:operator pos:line="177" pos:column="77">,</op:operator> <argument><expr><name><name pos:line="177" pos:column="79">AccessLevel</name><op:operator pos:line="177" pos:column="90">.</op:operator><name pos:line="177" pos:column="91">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="178" pos:column="41">Assert</name><op:operator pos:line="178" pos:column="47">.</op:operator><name pos:line="178" pos:column="48">True</name></name><argument_list pos:line="178" pos:column="52">(<argument><expr><call><name><name pos:line="178" pos:column="53">enumElem</name><op:operator pos:line="178" pos:column="61">.</op:operator><name pos:line="178" pos:column="62">FullFilePath</name><op:operator pos:line="178" pos:column="74">.</op:operator><name pos:line="178" pos:column="75">EndsWith</name></name><argument_list pos:line="178" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="84">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="179" pos:column="41">hasEnum</name> <op:operator pos:line="179" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="51">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="182" pos:column="25">Assert</name><op:operator pos:line="182" pos:column="31">.</op:operator><name pos:line="182" pos:column="32">IsTrue</name></name><argument_list pos:line="182" pos:column="38">(<argument><expr><name pos:line="182" pos:column="39">hasEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="185" pos:column="9">[<expr><name pos:line="185" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">CSharpStructParserTest</name><parameter_list pos:line="186" pos:column="43">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">SrcMLCSharpParser</name></type> <name pos:line="188" pos:column="31">parser</name> =<init pos:line="188" pos:column="39"> <expr><op:operator pos:line="188" pos:column="40">new</op:operator> <call><name pos:line="188" pos:column="44">SrcMLCSharpParser</name><argument_list pos:line="188" pos:column="61">(<argument><expr><name pos:line="188" pos:column="62">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">var</name></type> <name pos:line="189" pos:column="17">elements</name> =<init pos:line="189" pos:column="27"> <expr><call><name><name pos:line="189" pos:column="28">parser</name><op:operator pos:line="189" pos:column="34">.</op:operator><name pos:line="189" pos:column="35">Parse</name></name><argument_list pos:line="189" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="41">"TestFiles\\Struct1.cs.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">bool</name></type> <name pos:line="190" pos:column="18">hasStruct</name> =<init pos:line="190" pos:column="29"> <expr><lit:literal type="boolean" pos:line="190" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="191" pos:column="13">foreach (<init><decl><type><name pos:line="191" pos:column="22">var</name></type> <name pos:line="191" pos:column="26">programElement</name> <init pos:line="191" pos:column="41">in <expr><name pos:line="191" pos:column="44">elements</name></expr></init></decl></init>)
            <block pos:line="192" pos:column="13">{
                <if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><name pos:line="193" pos:column="21">programElement</name> <op:operator pos:line="193" pos:column="36">as</op:operator> <name pos:line="193" pos:column="39">StructElement</name> <op:operator pos:line="193" pos:column="53">!=</op:operator> <name pos:line="193" pos:column="56">null</name></expr>)</condition><then pos:line="193" pos:column="61">
                <block pos:line="194" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="195" pos:column="21">StructElement</name></type> <name pos:line="195" pos:column="35">structElem</name> =<init pos:line="195" pos:column="47"> <expr><op:operator pos:line="195" pos:column="48">(</op:operator><name pos:line="195" pos:column="49">StructElement</name><op:operator pos:line="195" pos:column="62">)</op:operator><name pos:line="195" pos:column="63">programElement</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="196" pos:column="21">Assert</name><op:operator pos:line="196" pos:column="27">.</op:operator><name pos:line="196" pos:column="28">AreEqual</name></name><argument_list pos:line="196" pos:column="36">(<argument><expr><name><name pos:line="196" pos:column="37">structElem</name><op:operator pos:line="196" pos:column="47">.</op:operator><name pos:line="196" pos:column="48">Name</name></name></expr></argument><op:operator pos:line="196" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="196" pos:column="54">"SimpleStruct"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="197" pos:column="21">Assert</name><op:operator pos:line="197" pos:column="27">.</op:operator><name pos:line="197" pos:column="28">AreEqual</name></name><argument_list pos:line="197" pos:column="36">(<argument><expr><name><name pos:line="197" pos:column="37">structElem</name><op:operator pos:line="197" pos:column="47">.</op:operator><name pos:line="197" pos:column="48">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="197" pos:column="68">,</op:operator> <argument><expr><lit:literal type="number" pos:line="197" pos:column="70">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="198" pos:column="21">Assert</name><op:operator pos:line="198" pos:column="27">.</op:operator><name pos:line="198" pos:column="28">AreEqual</name></name><argument_list pos:line="198" pos:column="36">(<argument><expr><name><name pos:line="198" pos:column="37">structElem</name><op:operator pos:line="198" pos:column="47">.</op:operator><name pos:line="198" pos:column="48">Namespace</name></name></expr></argument><op:operator pos:line="198" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="198" pos:column="59">"SimpleNamespace"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="199" pos:column="21">Assert</name><op:operator pos:line="199" pos:column="27">.</op:operator><name pos:line="199" pos:column="28">AreEqual</name></name><argument_list pos:line="199" pos:column="36">(<argument><expr><name><name pos:line="199" pos:column="37">structElem</name><op:operator pos:line="199" pos:column="47">.</op:operator><name pos:line="199" pos:column="48">AccessLevel</name></name></expr></argument><op:operator pos:line="199" pos:column="59">,</op:operator> <argument><expr><name><name pos:line="199" pos:column="61">AccessLevel</name><op:operator pos:line="199" pos:column="72">.</op:operator><name pos:line="199" pos:column="73">Internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="200" pos:column="21">Assert</name><op:operator pos:line="200" pos:column="27">.</op:operator><name pos:line="200" pos:column="28">True</name></name><argument_list pos:line="200" pos:column="32">(<argument><expr><call><name><name pos:line="200" pos:column="33">structElem</name><op:operator pos:line="200" pos:column="43">.</op:operator><name pos:line="200" pos:column="44">FullFilePath</name><op:operator pos:line="200" pos:column="56">.</op:operator><name pos:line="200" pos:column="57">EndsWith</name></name><argument_list pos:line="200" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="66">"TestFiles\\Struct1.cs.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="201" pos:column="21">hasStruct</name> <op:operator pos:line="201" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="201" pos:column="33">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">Assert</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">IsTrue</name></name><argument_list pos:line="204" pos:column="26">(<argument><expr><name pos:line="204" pos:column="27">hasStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="207" pos:column="17">[<expr><name pos:line="207" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="208" pos:column="17">public</specifier> <name pos:line="208" pos:column="24">void</name></type> <name pos:line="208" pos:column="29">CSharpRegionTest</name><parameter_list pos:line="208" pos:column="45">()</parameter_list>
		<block pos:line="209" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="210" pos:column="25">SrcMLCSharpParser</name></type> <name pos:line="210" pos:column="43">parser</name> =<init pos:line="210" pos:column="51"> <expr><op:operator pos:line="210" pos:column="52">new</op:operator> <call><name pos:line="210" pos:column="56">SrcMLCSharpParser</name><argument_list pos:line="210" pos:column="73">(<argument><expr><name pos:line="210" pos:column="74">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="211" pos:column="25">var</name></type> <name pos:line="211" pos:column="29">elements</name> =<init pos:line="211" pos:column="39"> <expr><call><name><name pos:line="211" pos:column="40">parser</name><op:operator pos:line="211" pos:column="46">.</op:operator><name pos:line="211" pos:column="47">Parse</name></name><argument_list pos:line="211" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="53">"TestFiles\\RegionTest.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="212" pos:column="25">Assert</name><op:operator pos:line="212" pos:column="31">.</op:operator><name pos:line="212" pos:column="32">IsNotNull</name></name><argument_list pos:line="212" pos:column="41">(<argument><expr><name pos:line="212" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="213" pos:column="25">Assert</name><op:operator pos:line="213" pos:column="31">.</op:operator><name pos:line="213" pos:column="32">IsTrue</name></name><argument_list pos:line="213" pos:column="38">(<argument><expr><name><name pos:line="213" pos:column="39">elements</name><op:operator pos:line="213" pos:column="47">.</op:operator><name pos:line="213" pos:column="48">Count</name></name> <op:operator pos:line="213" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="213" pos:column="57">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="214" pos:column="25">bool</name></type> <name pos:line="214" pos:column="30">hasClass</name> =<init pos:line="214" pos:column="40"> <expr><lit:literal type="boolean" pos:line="214" pos:column="41">false</lit:literal></expr></init><op:operator pos:line="214" pos:column="46">,</op:operator> <name pos:line="214" pos:column="48">hasMethod</name> =<init pos:line="214" pos:column="59"> <expr><lit:literal type="boolean" pos:line="214" pos:column="60">false</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="215" pos:column="25">foreach(<init><decl><type><name pos:line="215" pos:column="33">var</name></type> <name pos:line="215" pos:column="37">programElement</name> <init pos:line="215" pos:column="52">in <expr><name pos:line="215" pos:column="55">elements</name></expr></init></decl></init>)
			<block pos:line="216" pos:column="25">{
				<if pos:line="217" pos:column="33">if<condition pos:line="217" pos:column="35">(<expr><name pos:line="217" pos:column="36">programElement</name> <op:operator pos:line="217" pos:column="51">as</op:operator> <name pos:line="217" pos:column="54">MethodElement</name> <op:operator pos:line="217" pos:column="68">!=</op:operator> <name pos:line="217" pos:column="71">null</name></expr>)</condition><then pos:line="217" pos:column="76">
					<expr_stmt><expr><name pos:line="218" pos:column="41">hasMethod</name> <op:operator pos:line="218" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="218" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="219" pos:column="33">if<condition pos:line="219" pos:column="35">(<expr><name pos:line="219" pos:column="36">programElement</name> <op:operator pos:line="219" pos:column="51">as</op:operator> <name pos:line="219" pos:column="54">ClassElement</name> <op:operator pos:line="219" pos:column="67">!=</op:operator> <name pos:line="219" pos:column="70">null</name></expr>)</condition><then pos:line="219" pos:column="75">
					<expr_stmt><expr><name pos:line="220" pos:column="41">hasClass</name> <op:operator pos:line="220" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="220" pos:column="52">true</lit:literal></expr>;</expr_stmt></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">Assert</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">IsTrue</name></name><argument_list pos:line="222" pos:column="38">(<argument><expr><name pos:line="222" pos:column="39">hasClass</name> <op:operator pos:line="222" pos:column="48">&amp;&amp;</op:operator> <name pos:line="222" pos:column="51">hasMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="225" pos:column="17">[<expr><name pos:line="225" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="226" pos:column="17">public</specifier> <name pos:line="226" pos:column="24">void</name></type> <name pos:line="226" pos:column="29">MethodLinksToClassTest</name><parameter_list pos:line="226" pos:column="51">()</parameter_list>
		<block pos:line="227" pos:column="17">{
		    <return pos:line="228" pos:column="21">return;</return>

            <comment type="line" pos:line="230" pos:column="13">//NOTE: this test fails because of a bug in srcML</comment>
            <comment type="line" pos:line="231" pos:column="13">//please turn this test back on once we receive a fix </comment>
            <comment type="line" pos:line="232" pos:column="13">//from the srcML guys</comment>
			<decl_stmt><decl><type><name pos:line="233" pos:column="25">SrcMLCSharpParser</name></type> <name pos:line="233" pos:column="43">parser</name> =<init pos:line="233" pos:column="51"> <expr><op:operator pos:line="233" pos:column="52">new</op:operator> <call><name pos:line="233" pos:column="56">SrcMLCSharpParser</name><argument_list pos:line="233" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="234" pos:column="25">var</name></type> <name pos:line="234" pos:column="29">elements</name> =<init pos:line="234" pos:column="39"> <expr><call><name><name pos:line="234" pos:column="40">parser</name><op:operator pos:line="234" pos:column="46">.</op:operator><name pos:line="234" pos:column="47">Parse</name></name><argument_list pos:line="234" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="53">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\ImageCaptureCS.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="235" pos:column="25">ClassElement</name></type> <name pos:line="235" pos:column="38">ImageCaptureClassElement</name> =<init pos:line="235" pos:column="64"> <expr><name pos:line="235" pos:column="65">null</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="236" pos:column="25">bool</name></type> <name pos:line="236" pos:column="30">foundMethod</name> =<init pos:line="236" pos:column="43"> <expr><lit:literal type="boolean" pos:line="236" pos:column="44">false</lit:literal></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="238" pos:column="25">// first find the class element</comment>
			<foreach pos:line="239" pos:column="25">foreach(<init><decl><type><name pos:line="239" pos:column="33">ProgramElement</name></type> <name pos:line="239" pos:column="48">pe</name> <init pos:line="239" pos:column="51">in <expr><name pos:line="239" pos:column="54">elements</name></expr></init></decl></init>)
			<block pos:line="240" pos:column="25">{
				<if pos:line="241" pos:column="33">if<condition pos:line="241" pos:column="35">(<expr><name pos:line="241" pos:column="36">pe</name> <op:operator pos:line="241" pos:column="39">is</op:operator> <name pos:line="241" pos:column="42">ClassElement</name></expr>)</condition><then pos:line="241" pos:column="55">
				<block pos:line="242" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="243" pos:column="41">ClassElement</name></type> <name pos:line="243" pos:column="54">cls</name> =<init pos:line="243" pos:column="59"> <expr><op:operator pos:line="243" pos:column="60">(</op:operator><name pos:line="243" pos:column="61">ClassElement</name><op:operator pos:line="243" pos:column="73">)</op:operator><name pos:line="243" pos:column="74">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="244" pos:column="41">if<condition pos:line="244" pos:column="43">(<expr><name><name pos:line="244" pos:column="44">cls</name><op:operator pos:line="244" pos:column="47">.</op:operator><name pos:line="244" pos:column="48">Name</name></name> <op:operator pos:line="244" pos:column="53">==</op:operator> <lit:literal type="string" pos:line="244" pos:column="56">"ImageCapture"</lit:literal></expr>)</condition><then pos:line="244" pos:column="71">
					<block pos:line="245" pos:column="41">{
						<expr_stmt><expr><name pos:line="246" pos:column="49">ImageCaptureClassElement</name> <op:operator pos:line="246" pos:column="74">=</op:operator> <name pos:line="246" pos:column="76">cls</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>

			<comment type="line" pos:line="251" pos:column="25">// then the method element that should link to it</comment>
			<foreach pos:line="252" pos:column="25">foreach(<init><decl><type><name pos:line="252" pos:column="33">ProgramElement</name></type> <name pos:line="252" pos:column="48">pe</name> <init pos:line="252" pos:column="51">in <expr><name pos:line="252" pos:column="54">elements</name></expr></init></decl></init>) 
			<block pos:line="253" pos:column="25">{
				<if pos:line="254" pos:column="33">if<condition pos:line="254" pos:column="35">(<expr><name pos:line="254" pos:column="36">pe</name> <op:operator pos:line="254" pos:column="39">is</op:operator> <name pos:line="254" pos:column="42">MethodElement</name></expr>)</condition><then pos:line="254" pos:column="56">
				<block pos:line="255" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="256" pos:column="41">MethodElement</name></type> <name pos:line="256" pos:column="55">method</name> =<init pos:line="256" pos:column="63"> <expr><op:operator pos:line="256" pos:column="64">(</op:operator><name pos:line="256" pos:column="65">MethodElement</name><op:operator pos:line="256" pos:column="78">)</op:operator><name pos:line="256" pos:column="79">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="257" pos:column="41">if<condition pos:line="257" pos:column="43">(<expr><name><name pos:line="257" pos:column="44">method</name><op:operator pos:line="257" pos:column="50">.</op:operator><name pos:line="257" pos:column="51">Name</name></name> <op:operator pos:line="257" pos:column="56">==</op:operator> <lit:literal type="string" pos:line="257" pos:column="59">"CaptureByHdc"</lit:literal></expr>)</condition><then pos:line="257" pos:column="74">
					<block pos:line="258" pos:column="41">{
						<expr_stmt><expr><name pos:line="259" pos:column="49">foundMethod</name> <op:operator pos:line="259" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="259" pos:column="63">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="260" pos:column="49">Assert</name><op:operator pos:line="260" pos:column="55">.</op:operator><name pos:line="260" pos:column="56">AreEqual</name></name><argument_list pos:line="260" pos:column="64">(<argument><expr><name><name pos:line="260" pos:column="65">method</name><op:operator pos:line="260" pos:column="71">.</op:operator><name pos:line="260" pos:column="72">ClassId</name></name></expr></argument><op:operator pos:line="260" pos:column="79">,</op:operator> <argument><expr><name><name pos:line="260" pos:column="81">ImageCaptureClassElement</name><op:operator pos:line="260" pos:column="105">.</op:operator><name pos:line="260" pos:column="106">Id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="261" pos:column="49">Assert</name><op:operator pos:line="261" pos:column="55">.</op:operator><name pos:line="261" pos:column="56">AreEqual</name></name><argument_list pos:line="261" pos:column="64">(<argument><expr><name><name pos:line="261" pos:column="65">method</name><op:operator pos:line="261" pos:column="71">.</op:operator><name pos:line="261" pos:column="72">ClassName</name></name></expr></argument><op:operator pos:line="261" pos:column="81">,</op:operator> <argument><expr><name><name pos:line="261" pos:column="83">ImageCaptureClassElement</name><op:operator pos:line="261" pos:column="107">.</op:operator><name pos:line="261" pos:column="108">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>

			<expr_stmt><expr><call><name><name pos:line="266" pos:column="25">Assert</name><op:operator pos:line="266" pos:column="31">.</op:operator><name pos:line="266" pos:column="32">IsTrue</name></name><argument_list pos:line="266" pos:column="38">(<argument><expr><name pos:line="266" pos:column="39">foundMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	    <function><type><attribute pos:line="269" pos:column="13">[<expr><name pos:line="269" pos:column="14">Test</name></expr>]</attribute>
		<specifier pos:line="270" pos:column="17">public</specifier> <name pos:line="270" pos:column="24">void</name></type> <name pos:line="270" pos:column="29">ParseConstructorTest</name><parameter_list pos:line="270" pos:column="49">()</parameter_list>
		<block pos:line="271" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="272" pos:column="25">bool</name></type> <name pos:line="272" pos:column="30">hasConstructor</name> =<init pos:line="272" pos:column="46"> <expr><lit:literal type="boolean" pos:line="272" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="273" pos:column="25">var</name></type> <name pos:line="273" pos:column="29">parser</name> =<init pos:line="273" pos:column="37"> <expr><op:operator pos:line="273" pos:column="38">new</op:operator> <call><name pos:line="273" pos:column="42">SrcMLCSharpParser</name><argument_list pos:line="273" pos:column="59">(<argument><expr><name pos:line="273" pos:column="60">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="274" pos:column="25">var</name></type> <name pos:line="274" pos:column="29">elements</name> =<init pos:line="274" pos:column="39"> <expr><call><name><name pos:line="274" pos:column="40">parser</name><op:operator pos:line="274" pos:column="46">.</op:operator><name pos:line="274" pos:column="47">Parse</name></name><argument_list pos:line="274" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="53">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="275" pos:column="25">Assert</name><op:operator pos:line="275" pos:column="31">.</op:operator><name pos:line="275" pos:column="32">IsNotNull</name></name><argument_list pos:line="275" pos:column="41">(<argument><expr><name pos:line="275" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="276" pos:column="25">foreach(<init><decl><type><name pos:line="276" pos:column="33">ProgramElement</name></type> <name pos:line="276" pos:column="48">pe</name> <init pos:line="276" pos:column="51">in <expr><name pos:line="276" pos:column="54">elements</name></expr></init></decl></init>)
			<block pos:line="277" pos:column="25">{
				<if pos:line="278" pos:column="33">if<condition pos:line="278" pos:column="35">(<expr><name pos:line="278" pos:column="36">pe</name> <op:operator pos:line="278" pos:column="39">is</op:operator> <name pos:line="278" pos:column="42">MethodElement</name></expr>)</condition><then pos:line="278" pos:column="56">
				<block pos:line="279" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="280" pos:column="41">var</name></type> <name pos:line="280" pos:column="45">methodElement</name> =<init pos:line="280" pos:column="60"> <expr><op:operator pos:line="280" pos:column="61">(</op:operator><name pos:line="280" pos:column="62">MethodElement</name><op:operator pos:line="280" pos:column="75">)</op:operator><name pos:line="280" pos:column="76">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="281" pos:column="41">if<condition pos:line="281" pos:column="43">(<expr><name><name pos:line="281" pos:column="44">methodElement</name><op:operator pos:line="281" pos:column="57">.</op:operator><name pos:line="281" pos:column="58">IsConstructor</name></name></expr>)</condition><then pos:line="281" pos:column="72">
					<block pos:line="282" pos:column="41">{
						<expr_stmt><expr><name pos:line="283" pos:column="49">hasConstructor</name> <op:operator pos:line="283" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="283" pos:column="66">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="284" pos:column="49">Assert</name><op:operator pos:line="284" pos:column="55">.</op:operator><name pos:line="284" pos:column="56">AreEqual</name></name><argument_list pos:line="284" pos:column="64">(<argument><expr><name><name pos:line="284" pos:column="65">methodElement</name><op:operator pos:line="284" pos:column="78">.</op:operator><name pos:line="284" pos:column="79">Name</name></name></expr></argument><op:operator pos:line="284" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="284" pos:column="85">"SrcMLGenerator"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="285" pos:column="49">Assert</name><op:operator pos:line="285" pos:column="55">.</op:operator><name pos:line="285" pos:column="56">AreEqual</name></name><argument_list pos:line="285" pos:column="64">(<argument><expr><name><name pos:line="285" pos:column="65">methodElement</name><op:operator pos:line="285" pos:column="78">.</op:operator><name pos:line="285" pos:column="79">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="285" pos:column="99">,</op:operator> <argument><expr><lit:literal type="number" pos:line="285" pos:column="101">21</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="286" pos:column="49">Assert</name><op:operator pos:line="286" pos:column="55">.</op:operator><name pos:line="286" pos:column="56">AreEqual</name></name><argument_list pos:line="286" pos:column="64">(<argument><expr><name><name pos:line="286" pos:column="65">methodElement</name><op:operator pos:line="286" pos:column="78">.</op:operator><name pos:line="286" pos:column="79">AccessLevel</name></name></expr></argument><op:operator pos:line="286" pos:column="90">,</op:operator> <argument><expr><name><name pos:line="286" pos:column="92">AccessLevel</name><op:operator pos:line="286" pos:column="103">.</op:operator><name pos:line="286" pos:column="104">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="290" pos:column="25">Assert</name><op:operator pos:line="290" pos:column="31">.</op:operator><name pos:line="290" pos:column="32">IsTrue</name></name><argument_list pos:line="290" pos:column="38">(<argument><expr><name pos:line="290" pos:column="39">hasConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>


        <function><type><attribute pos:line="294" pos:column="9">[<expr><name pos:line="294" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="295" pos:column="9">public</specifier> <name pos:line="295" pos:column="16">void</name></type> <name pos:line="295" pos:column="21">GIVEN_file_with_readonly_and_static_elements_WHEN_parse_method_is_called_THEN_valid_access_levels_are_retrieved</name><parameter_list pos:line="295" pos:column="132">()</parameter_list>
        <block pos:line="296" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">var</name></type> <name pos:line="297" pos:column="17">parser</name> =<init pos:line="297" pos:column="25"> <expr><op:operator pos:line="297" pos:column="26">new</op:operator> <call><name pos:line="297" pos:column="30">SrcMLCSharpParser</name><argument_list pos:line="297" pos:column="47">(<argument><expr><name pos:line="297" pos:column="48">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="298" pos:column="13">var</name></type> <name pos:line="298" pos:column="17">elements</name> =<init pos:line="298" pos:column="27"> <expr><call><name><name pos:line="298" pos:column="28">parser</name><op:operator pos:line="298" pos:column="34">.</op:operator><name pos:line="298" pos:column="35">Parse</name></name><argument_list pos:line="298" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="298" pos:column="41">"TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">readonlyField</name> =<init pos:line="300" pos:column="32"> <expr><call><name><name pos:line="300" pos:column="33">elements</name><op:operator pos:line="300" pos:column="41">.</op:operator><name><name pos:line="300" pos:column="42">OfType</name><argument_list pos:line="300" pos:column="48">&lt;<argument><name pos:line="300" pos:column="49">FieldElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="300" pos:column="62">()</argument_list></call><op:operator pos:line="300" pos:column="64">.</op:operator><call><name pos:line="300" pos:column="65">FirstOrDefault</name><argument_list pos:line="300" pos:column="79">(<argument><expr><name pos:line="300" pos:column="80">f</name> <op:operator pos:line="300" pos:column="82">=&gt;</op:operator> <name><name pos:line="300" pos:column="85">f</name><op:operator pos:line="300" pos:column="86">.</op:operator><name pos:line="300" pos:column="87">Name</name></name> <op:operator pos:line="300" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="300" pos:column="95">"Language"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">Assert</name><op:operator pos:line="301" pos:column="19">.</op:operator><name pos:line="301" pos:column="20">IsNotNull</name></name><argument_list pos:line="301" pos:column="29">(<argument><expr><name pos:line="301" pos:column="30">readonlyField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="302" pos:column="13">Assert</name><op:operator pos:line="302" pos:column="19">.</op:operator><name pos:line="302" pos:column="20">AreEqual</name></name><argument_list pos:line="302" pos:column="28">(<argument><expr><name><name pos:line="302" pos:column="29">readonlyField</name><op:operator pos:line="302" pos:column="42">.</op:operator><name pos:line="302" pos:column="43">AccessLevel</name></name></expr></argument><op:operator pos:line="302" pos:column="54">,</op:operator> <argument><expr><name><name pos:line="302" pos:column="56">AccessLevel</name><op:operator pos:line="302" pos:column="67">.</op:operator><name pos:line="302" pos:column="68">Internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">staticMethod</name> =<init pos:line="304" pos:column="31"> <expr><call><name><name pos:line="304" pos:column="32">elements</name><op:operator pos:line="304" pos:column="40">.</op:operator><name><name pos:line="304" pos:column="41">OfType</name><argument_list pos:line="304" pos:column="47">&lt;<argument><name pos:line="304" pos:column="48">MethodElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="304" pos:column="62">()</argument_list></call><op:operator pos:line="304" pos:column="64">.</op:operator><call><name pos:line="304" pos:column="65">FirstOrDefault</name><argument_list pos:line="304" pos:column="79">(<argument><expr><name pos:line="304" pos:column="80">f</name> <op:operator pos:line="304" pos:column="82">=&gt;</op:operator> <name><name pos:line="304" pos:column="85">f</name><op:operator pos:line="304" pos:column="86">.</op:operator><name pos:line="304" pos:column="87">Name</name></name> <op:operator pos:line="304" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="304" pos:column="95">"SetSrcMLLocation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="305" pos:column="13">Assert</name><op:operator pos:line="305" pos:column="19">.</op:operator><name pos:line="305" pos:column="20">IsNotNull</name></name><argument_list pos:line="305" pos:column="29">(<argument><expr><name pos:line="305" pos:column="30">staticMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">Assert</name><op:operator pos:line="306" pos:column="19">.</op:operator><name pos:line="306" pos:column="20">AreEqual</name></name><argument_list pos:line="306" pos:column="28">(<argument><expr><name><name pos:line="306" pos:column="29">staticMethod</name><op:operator pos:line="306" pos:column="41">.</op:operator><name pos:line="306" pos:column="42">AccessLevel</name></name></expr></argument><op:operator pos:line="306" pos:column="53">,</op:operator> <argument><expr><name><name pos:line="306" pos:column="55">AccessLevel</name><op:operator pos:line="306" pos:column="66">.</op:operator><name pos:line="306" pos:column="67">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

	}</block></class>

    <class><specifier pos:line="311" pos:column="5">public</specifier> class <name pos:line="311" pos:column="18">MySrcMLCSharpParser</name> <super pos:line="311" pos:column="38">: <name pos:line="311" pos:column="40">SrcMLCSharpParser</name></super>
    <block pos:line="312" pos:column="5">{
        <constructor><specifier pos:line="313" pos:column="9">public</specifier> <name pos:line="313" pos:column="16">MySrcMLCSharpParser</name><parameter_list pos:line="313" pos:column="35">(<param><decl><type><name><name pos:line="313" pos:column="36">ABB</name><op:operator pos:line="313" pos:column="39">.</op:operator><name pos:line="313" pos:column="40">SrcML</name><op:operator pos:line="313" pos:column="45">.</op:operator><name pos:line="313" pos:column="46">SrcMLGenerator</name></name></type> <name pos:line="313" pos:column="61">generator</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="72">{
            <expr_stmt><expr><name><name pos:line="314" pos:column="13">this</name><op:operator pos:line="314" pos:column="17">.</op:operator><name pos:line="314" pos:column="18">Generator</name></name> <op:operator pos:line="314" pos:column="28">=</op:operator> <name pos:line="314" pos:column="30">generator</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="317" pos:column="9">public</specifier> <specifier pos:line="317" pos:column="16">override</specifier> <name pos:line="317" pos:column="25">MethodElement</name></type> <name pos:line="317" pos:column="39">ParseMethod</name><parameter_list pos:line="317" pos:column="50">(<param><decl><type><name><name pos:line="317" pos:column="51">System</name><op:operator pos:line="317" pos:column="57">.</op:operator><name pos:line="317" pos:column="58">Xml</name><op:operator pos:line="317" pos:column="61">.</op:operator><name pos:line="317" pos:column="62">Linq</name><op:operator pos:line="317" pos:column="66">.</op:operator><name pos:line="317" pos:column="67">XElement</name></name></type> <name pos:line="317" pos:column="76">method</name></decl></param><op:operator pos:line="317" pos:column="82">,</op:operator> <param><decl><type><name><name pos:line="317" pos:column="84">List</name><argument_list pos:line="317" pos:column="88">&lt;<argument><name pos:line="317" pos:column="89">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="317" pos:column="105">programElements</name></decl></param><op:operator pos:line="317" pos:column="120">,</op:operator> <param><decl><type><name pos:line="317" pos:column="122">string</name></type> <name pos:line="317" pos:column="129">fileName</name></decl></param><op:operator pos:line="317" pos:column="137">,</op:operator> <param><decl><type><name pos:line="317" pos:column="139">Type</name></type> <name pos:line="317" pos:column="144">mytype</name></decl></param><op:operator pos:line="317" pos:column="150">,</op:operator> <param><decl><type><name pos:line="317" pos:column="152">bool</name></type> <name pos:line="317" pos:column="157">isConstructor</name> =<init pos:line="317" pos:column="172"> <expr><lit:literal type="boolean" pos:line="317" pos:column="173">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="318" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="319" pos:column="13">var</name></type> <name pos:line="319" pos:column="17">element</name> =<init pos:line="319" pos:column="26"> <expr><call><name><name pos:line="319" pos:column="27">base</name><op:operator pos:line="319" pos:column="31">.</op:operator><name pos:line="319" pos:column="32">ParseMethod</name></name><argument_list pos:line="319" pos:column="43">(<argument><expr><name pos:line="319" pos:column="44">method</name></expr></argument><op:operator pos:line="319" pos:column="50">,</op:operator> <argument><expr><name pos:line="319" pos:column="52">programElements</name></expr></argument><op:operator pos:line="319" pos:column="67">,</op:operator> <argument><expr><name pos:line="319" pos:column="69">fileName</name></expr></argument><op:operator pos:line="319" pos:column="77">,</op:operator>  <argument><expr><call><name pos:line="319" pos:column="80">typeof</name><argument_list pos:line="319" pos:column="86">(<argument><expr><name pos:line="319" pos:column="87">MyCSharpMethodElement</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="319" pos:column="109">,</op:operator> <argument><expr><name pos:line="319" pos:column="111">isConstructor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><op:operator pos:line="320" pos:column="13">(</op:operator><name pos:line="320" pos:column="14">element</name> <op:operator pos:line="320" pos:column="22">as</op:operator> <name pos:line="320" pos:column="25">MyCSharpMethodElement</name><op:operator pos:line="320" pos:column="46">)</op:operator><op:operator pos:line="320" pos:column="47">.</op:operator><name pos:line="320" pos:column="48">CustomCrazyStuff</name> <op:operator pos:line="320" pos:column="65">=</op:operator> <lit:literal type="string" pos:line="320" pos:column="67">"wow"</lit:literal></expr>;</expr_stmt>
            <return pos:line="321" pos:column="13">return <expr><name pos:line="321" pos:column="20">element</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="325" pos:column="5">public</specifier> class <name pos:line="325" pos:column="18">MyCSharpMethodElement</name> <super pos:line="325" pos:column="40">: <name pos:line="325" pos:column="42">MethodElement</name></super>
    <block pos:line="326" pos:column="5">{

        <decl_stmt><decl><type><attribute pos:line="328" pos:column="9">[<expr><name pos:line="328" pos:column="10">CustomIndexField</name></expr>]</attribute>
        <specifier pos:line="329" pos:column="9">public</specifier> <name pos:line="329" pos:column="16">string</name></type> <name pos:line="329" pos:column="23">CustomCrazyStuff</name> <block pos:line="329" pos:column="40">{ <function><name pos:line="329" pos:column="42">get</name>;</function> <function><name pos:line="329" pos:column="47">set</name>;</function> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="331" pos:column="9">public</specifier> <name pos:line="331" pos:column="16">MyCSharpMethodElement</name><parameter_list pos:line="331" pos:column="37">(<param><decl><type><name pos:line="331" pos:column="38">string</name></type> <name pos:line="331" pos:column="45">name</name></decl></param><op:operator pos:line="331" pos:column="49">,</op:operator> <param><decl><type><name pos:line="331" pos:column="51">int</name></type> <name pos:line="331" pos:column="55">definitionLineNumber</name></decl></param><op:operator pos:line="331" pos:column="75">,</op:operator> <param><decl><type><name pos:line="331" pos:column="77">string</name></type> <name pos:line="331" pos:column="84">fullFilePath</name></decl></param><op:operator pos:line="331" pos:column="96">,</op:operator> <param><decl><type><name pos:line="331" pos:column="98">string</name></type> <name pos:line="331" pos:column="105">snippet</name></decl></param><op:operator pos:line="331" pos:column="112">,</op:operator> <param><decl><type><name pos:line="331" pos:column="114">AccessLevel</name></type> <name pos:line="331" pos:column="126">accessLevel</name></decl></param><op:operator pos:line="331" pos:column="137">,</op:operator> <param><decl><type><name pos:line="331" pos:column="139">string</name></type> <name pos:line="331" pos:column="146">arguments</name></decl></param><op:operator pos:line="331" pos:column="155">,</op:operator> <param><decl><type><name pos:line="331" pos:column="157">string</name></type> <name pos:line="331" pos:column="164">returnType</name></decl></param><op:operator pos:line="331" pos:column="174">,</op:operator> <param><decl><type><name pos:line="331" pos:column="176">string</name></type> <name pos:line="331" pos:column="183">body</name></decl></param><op:operator pos:line="331" pos:column="187">,</op:operator> <param><decl><type><name pos:line="331" pos:column="189">Guid</name></type> <name pos:line="331" pos:column="194">classId</name></decl></param><op:operator pos:line="331" pos:column="201">,</op:operator> <param><decl><type><name pos:line="331" pos:column="203">string</name></type> <name pos:line="331" pos:column="210">className</name></decl></param><op:operator pos:line="331" pos:column="219">,</op:operator> <param><decl><type><name pos:line="331" pos:column="221">string</name></type> <name pos:line="331" pos:column="228">modifiers</name></decl></param><op:operator pos:line="331" pos:column="237">,</op:operator> <param><decl><type><name pos:line="331" pos:column="239">bool</name></type> <name pos:line="331" pos:column="244">isConstructor</name></decl></param>)</parameter_list> <member_list pos:line="331" pos:column="259">: <call><name pos:line="331" pos:column="261">base</name><argument_list pos:line="331" pos:column="265">(<argument><expr><name pos:line="331" pos:column="266">name</name></expr></argument><op:operator pos:line="331" pos:column="270">,</op:operator> <argument><expr><name pos:line="331" pos:column="272">definitionLineNumber</name></expr></argument><op:operator pos:line="331" pos:column="292">,</op:operator> <argument><expr><name pos:line="331" pos:column="294">fullFilePath</name></expr></argument><op:operator pos:line="331" pos:column="306">,</op:operator> <argument><expr><name pos:line="331" pos:column="308">snippet</name></expr></argument><op:operator pos:line="331" pos:column="315">,</op:operator> <argument><expr><name pos:line="331" pos:column="317">accessLevel</name></expr></argument><op:operator pos:line="331" pos:column="328">,</op:operator> <argument><expr><name pos:line="331" pos:column="330">arguments</name></expr></argument><op:operator pos:line="331" pos:column="339">,</op:operator> <argument><expr><name pos:line="331" pos:column="341">returnType</name></expr></argument><op:operator pos:line="331" pos:column="351">,</op:operator> <argument><expr><name pos:line="331" pos:column="353">body</name></expr></argument><op:operator pos:line="331" pos:column="357">,</op:operator> <argument><expr><name pos:line="331" pos:column="359">classId</name></expr></argument><op:operator pos:line="331" pos:column="366">,</op:operator> <argument><expr><name pos:line="331" pos:column="368">className</name></expr></argument><op:operator pos:line="331" pos:column="377">,</op:operator> <argument><expr><name pos:line="331" pos:column="379">modifiers</name></expr></argument><op:operator pos:line="331" pos:column="388">,</op:operator> <argument><expr><name pos:line="331" pos:column="390">isConstructor</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="332" pos:column="9">{
        }</block></constructor>
    }</block></class>
}</block></namespace>
</unit>
