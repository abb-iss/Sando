<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Recommender\Recommender\CamelIdSplitter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">Swum</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Recommender</name></name> <block pos:line="8" pos:column="29">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">CamelIdSplitter</name> <super pos:line="9" pos:column="34">: <name pos:line="9" pos:column="36">ConservativeIdSplitter</name></super> <block pos:line="9" pos:column="59">{
        <function><type><specifier pos:line="10" pos:column="9">public</specifier> <specifier pos:line="10" pos:column="16">override</specifier> <name><name pos:line="10" pos:column="25">string</name><index pos:line="10" pos:column="31">[]</index></name></type> <name pos:line="10" pos:column="34">Split</name><parameter_list pos:line="10" pos:column="39">(<param><decl><type><name pos:line="10" pos:column="40">string</name></type> <name pos:line="10" pos:column="47">identifier</name></decl></param>)</parameter_list> <block pos:line="10" pos:column="59">{
            <comment type="line" pos:line="11" pos:column="13">//do initial conservative split</comment>
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">words</name> =<init pos:line="12" pos:column="24"> <expr><call><name><name pos:line="12" pos:column="25">base</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">Split</name></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">result</name> =<init pos:line="13" pos:column="25"> <expr><op:operator pos:line="13" pos:column="26">new</op:operator> <call><name><name pos:line="13" pos:column="30">List</name><argument_list pos:line="13" pos:column="34">&lt;<argument><name pos:line="13" pos:column="35">string</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="14" pos:column="13">//search for any words that start with two or more uppercase letters, followed by one or more lowercase letters</comment>
            <foreach pos:line="15" pos:column="13">foreach(<init><decl><type><name pos:line="15" pos:column="21">var</name></type> <name pos:line="15" pos:column="25">word</name> <init pos:line="15" pos:column="30">in <expr><name pos:line="15" pos:column="33">words</name></expr></init></decl></init>) <block pos:line="15" pos:column="40">{
                <decl_stmt><decl><type><name pos:line="16" pos:column="17">var</name></type> <name pos:line="16" pos:column="21">m</name> =<init pos:line="16" pos:column="24"> <expr><call><name><name pos:line="16" pos:column="25">Regex</name><op:operator pos:line="16" pos:column="30">.</op:operator><name pos:line="16" pos:column="31">Match</name></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">word</name></expr></argument><op:operator pos:line="16" pos:column="41">,</op:operator> <argument><expr><lit:literal type="string" pos:line="16" pos:column="43">@"^(\p{Lu}+)(\p{Lu}\p{Ll}+)$"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="17" pos:column="17">if<condition pos:line="17" pos:column="19">(<expr><name><name pos:line="17" pos:column="20">m</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">Success</name></name></expr>)</condition><then pos:line="17" pos:column="30"> <block pos:line="17" pos:column="31">{
                    <comment type="line" pos:line="18" pos:column="21">//regex matches, split and add each part</comment>
                    <expr_stmt><expr><call><name><name pos:line="19" pos:column="21">result</name><op:operator pos:line="19" pos:column="27">.</op:operator><name pos:line="19" pos:column="28">Add</name></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name><name pos:line="19" pos:column="32">m</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">Groups</name><index pos:line="19" pos:column="40">[<expr><lit:literal type="number" pos:line="19" pos:column="41">1</lit:literal></expr>]</index></name><op:operator pos:line="19" pos:column="43">.</op:operator><name pos:line="19" pos:column="44">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="20" pos:column="21">result</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">Add</name></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name><name pos:line="20" pos:column="32">m</name><op:operator pos:line="20" pos:column="33">.</op:operator><name pos:line="20" pos:column="34">Groups</name><index pos:line="20" pos:column="40">[<expr><lit:literal type="number" pos:line="20" pos:column="41">2</lit:literal></expr>]</index></name><op:operator pos:line="20" pos:column="43">.</op:operator><name pos:line="20" pos:column="44">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="21" pos:column="19">else <block pos:line="21" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="22" pos:column="21">result</name><op:operator pos:line="22" pos:column="27">.</op:operator><name pos:line="22" pos:column="28">Add</name></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>

            <return pos:line="26" pos:column="13">return <expr><call><name><name pos:line="26" pos:column="20">result</name><op:operator pos:line="26" pos:column="26">.</op:operator><name pos:line="26" pos:column="27">ToArray</name></name><argument_list pos:line="26" pos:column="34">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
