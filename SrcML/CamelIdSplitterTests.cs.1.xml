<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Recommender\Recommender.UnitTests\CamelIdSplitterTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Recommender</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Recommender</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">UnitTests</name></name> <block pos:line="8" pos:column="39">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">CamelIdSplitterTests</name> <block pos:line="10" pos:column="39">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">SplitTest</name><parameter_list pos:line="12" pos:column="30">()</parameter_list> <block pos:line="12" pos:column="33">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">splitter</name> =<init pos:line="13" pos:column="27"> <expr><op:operator pos:line="13" pos:column="28">new</op:operator> <call><name pos:line="13" pos:column="32">CamelIdSplitter</name><argument_list pos:line="13" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">actual</name> =<init pos:line="14" pos:column="25"> <expr><call><name><name pos:line="14" pos:column="26">splitter</name><op:operator pos:line="14" pos:column="34">.</op:operator><name pos:line="14" pos:column="35">Split</name></name><argument_list pos:line="14" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="14" pos:column="41">"DBGetHydro"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">expected</name> =<init pos:line="15" pos:column="27"> <expr><op:operator pos:line="15" pos:column="28">new</op:operator><index pos:line="15" pos:column="31">[]</index> <block pos:line="15" pos:column="34">{<expr><lit:literal type="string" pos:line="15" pos:column="35">"DB"</lit:literal></expr><op:operator pos:line="15" pos:column="39">,</op:operator> <expr><lit:literal type="string" pos:line="15" pos:column="41">"Get"</lit:literal></expr><op:operator pos:line="15" pos:column="46">,</op:operator> <expr><lit:literal type="string" pos:line="15" pos:column="48">"Hydro"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">AreEqual</name></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">expected</name></expr></argument><op:operator pos:line="16" pos:column="37">,</op:operator> <argument><expr><name pos:line="16" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">SplitTest_lowercase</name><parameter_list pos:line="20" pos:column="40">()</parameter_list> <block pos:line="20" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">splitter</name> =<init pos:line="21" pos:column="27"> <expr><op:operator pos:line="21" pos:column="28">new</op:operator> <call><name pos:line="21" pos:column="32">CamelIdSplitter</name><argument_list pos:line="21" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">actual</name> =<init pos:line="22" pos:column="25"> <expr><call><name><name pos:line="22" pos:column="26">splitter</name><op:operator pos:line="22" pos:column="34">.</op:operator><name pos:line="22" pos:column="35">Split</name></name><argument_list pos:line="22" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="41">"lowercase"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">expected</name> =<init pos:line="23" pos:column="27"> <expr><op:operator pos:line="23" pos:column="28">new</op:operator><index pos:line="23" pos:column="31">[]</index> <block pos:line="23" pos:column="34">{ <expr><lit:literal type="string" pos:line="23" pos:column="36">"lowercase"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">AreEqual</name></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">expected</name></expr></argument><op:operator pos:line="24" pos:column="37">,</op:operator> <argument><expr><name pos:line="24" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">SplitTest_uppercase</name><parameter_list pos:line="28" pos:column="40">()</parameter_list> <block pos:line="28" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">splitter</name> =<init pos:line="29" pos:column="27"> <expr><op:operator pos:line="29" pos:column="28">new</op:operator> <call><name pos:line="29" pos:column="32">CamelIdSplitter</name><argument_list pos:line="29" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">actual</name> =<init pos:line="30" pos:column="25"> <expr><call><name><name pos:line="30" pos:column="26">splitter</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">Split</name></name><argument_list pos:line="30" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="41">"CONSTVAL"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">expected</name> =<init pos:line="31" pos:column="27"> <expr><op:operator pos:line="31" pos:column="28">new</op:operator><index pos:line="31" pos:column="31">[]</index> <block pos:line="31" pos:column="34">{ <expr><lit:literal type="string" pos:line="31" pos:column="36">"CONSTVAL"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name pos:line="32" pos:column="20">AreEqual</name></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">expected</name></expr></argument><op:operator pos:line="32" pos:column="37">,</op:operator> <argument><expr><name pos:line="32" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">SplitTest_UppercaseUnderscore</name><parameter_list pos:line="36" pos:column="50">()</parameter_list> <block pos:line="36" pos:column="53">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">splitter</name> =<init pos:line="37" pos:column="27"> <expr><op:operator pos:line="37" pos:column="28">new</op:operator> <call><name pos:line="37" pos:column="32">CamelIdSplitter</name><argument_list pos:line="37" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">actual</name> =<init pos:line="38" pos:column="25"> <expr><call><name><name pos:line="38" pos:column="26">splitter</name><op:operator pos:line="38" pos:column="34">.</op:operator><name pos:line="38" pos:column="35">Split</name></name><argument_list pos:line="38" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="41">"CONST_VAL"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">expected</name> =<init pos:line="39" pos:column="27"> <expr><op:operator pos:line="39" pos:column="28">new</op:operator><index pos:line="39" pos:column="31">[]</index> <block pos:line="39" pos:column="34">{ <expr><lit:literal type="string" pos:line="39" pos:column="36">"CONST"</lit:literal></expr><op:operator pos:line="39" pos:column="43">,</op:operator> <expr><lit:literal type="string" pos:line="39" pos:column="45">"VAL"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Assert</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">AreEqual</name></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">expected</name></expr></argument><op:operator pos:line="40" pos:column="37">,</op:operator> <argument><expr><name pos:line="40" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="43" pos:column="9">[<expr><name pos:line="43" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">void</name></type> <name pos:line="44" pos:column="21">SplitTest_BadCamelCase</name><parameter_list pos:line="44" pos:column="43">()</parameter_list> <block pos:line="44" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">splitter</name> =<init pos:line="45" pos:column="27"> <expr><op:operator pos:line="45" pos:column="28">new</op:operator> <call><name pos:line="45" pos:column="32">CamelIdSplitter</name><argument_list pos:line="45" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">actual</name> =<init pos:line="46" pos:column="25"> <expr><call><name><name pos:line="46" pos:column="26">splitter</name><op:operator pos:line="46" pos:column="34">.</op:operator><name pos:line="46" pos:column="35">Split</name></name><argument_list pos:line="46" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="41">"XMLparser"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">expected</name> =<init pos:line="47" pos:column="27"> <expr><op:operator pos:line="47" pos:column="28">new</op:operator><index pos:line="47" pos:column="31">[]</index> <block pos:line="47" pos:column="34">{ <expr><lit:literal type="string" pos:line="47" pos:column="36">"XM"</lit:literal></expr><op:operator pos:line="47" pos:column="40">,</op:operator> <expr><lit:literal type="string" pos:line="47" pos:column="42">"Lparser"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">AreEqual</name></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">expected</name></expr></argument><op:operator pos:line="48" pos:column="37">,</op:operator> <argument><expr><name pos:line="48" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
