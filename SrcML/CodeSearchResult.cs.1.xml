<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\SandoExtensionContracts\ResultsReordererContracts\CodeSearchResult.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">System</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">ExtensionContracts</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">ResultsReordererContracts</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// Class defined to create return result from Lucene indexer</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">CodeSearchResult</name>
    <block pos:line="13" pos:column="5">{
        <constructor><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">CodeSearchResult</name><parameter_list pos:line="14" pos:column="32">(<param><decl><type><name pos:line="14" pos:column="33">ProgramElement</name></type> <name pos:line="14" pos:column="48">programElement</name></decl></param><op:operator pos:line="14" pos:column="62">,</op:operator> <param><decl><type><name pos:line="14" pos:column="64">double</name></type> <name pos:line="14" pos:column="71">score</name></decl></param>)</parameter_list>
        <block pos:line="15" pos:column="9">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">ProgramElement</name> <op:operator pos:line="16" pos:column="28">=</op:operator> <name pos:line="16" pos:column="30">programElement</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">Score</name> <op:operator pos:line="17" pos:column="19">=</op:operator> <name pos:line="17" pos:column="21">score</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">double</name></type> <name pos:line="20" pos:column="23">Score</name> <block pos:line="20" pos:column="29">{ <function><name pos:line="20" pos:column="31">get</name>;</function> private <function><name pos:line="20" pos:column="44">set</name>;</function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">ProgramElement</name></type> <name pos:line="22" pos:column="31">ProgramElement</name> <block pos:line="22" pos:column="46">{ <function><name pos:line="22" pos:column="48">get</name>;</function> private <function><name pos:line="22" pos:column="61">set</name>;</function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">string</name></type> <name pos:line="24" pos:column="23">ParentOrFile</name>
        <block pos:line="25" pos:column="9">{
            <function><name pos:line="26" pos:column="13">get</name>
            <block pos:line="27" pos:column="13">{
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name><name pos:line="28" pos:column="21">string</name><op:operator pos:line="28" pos:column="27">.</op:operator><name pos:line="28" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">Parent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="28" pos:column="50">
                    <return pos:line="29" pos:column="21">return <expr><call><name><name pos:line="29" pos:column="28">Path</name><op:operator pos:line="29" pos:column="32">.</op:operator><name pos:line="29" pos:column="33">GetFileName</name></name><argument_list pos:line="29" pos:column="44">(<argument><expr><name pos:line="29" pos:column="45">FileName</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">fileName</name> =<init pos:line="31" pos:column="31"> <expr><call><name><name pos:line="31" pos:column="32">Path</name><op:operator pos:line="31" pos:column="36">.</op:operator><name pos:line="31" pos:column="37">GetFileName</name></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">FileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name><name pos:line="32" pos:column="21">fileName</name><op:operator pos:line="32" pos:column="29">.</op:operator><name pos:line="32" pos:column="30">StartsWith</name></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">Parent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="32" pos:column="49">
                <block pos:line="33" pos:column="17">{
                    <return pos:line="34" pos:column="21">return <expr><name pos:line="34" pos:column="28">fileName</name></expr>;</return>
                }</block></then></if>
                <return pos:line="36" pos:column="17">return <expr><name pos:line="36" pos:column="24">Parent</name> <op:operator pos:line="36" pos:column="31">+</op:operator> <lit:literal type="string" pos:line="36" pos:column="33">" ("</lit:literal> <op:operator pos:line="36" pos:column="38">+</op:operator> <name pos:line="36" pos:column="40">fileName</name> <op:operator pos:line="36" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="36" pos:column="51">")"</lit:literal></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">ProgramElementType</name></type> <name pos:line="40" pos:column="35">ProgramElementType</name>
        <block pos:line="41" pos:column="9">{
            <function><name pos:line="42" pos:column="13">get</name> <block pos:line="42" pos:column="17">{ <return pos:line="42" pos:column="19">return <expr><name><name pos:line="42" pos:column="26">ProgramElement</name><op:operator pos:line="42" pos:column="40">.</op:operator><name pos:line="42" pos:column="41">ProgramElementType</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">string</name></type> <name pos:line="45" pos:column="23">Type</name>
        <block pos:line="46" pos:column="9">{
            <function><name pos:line="47" pos:column="13">get</name> <block pos:line="47" pos:column="17">{ <return pos:line="47" pos:column="19">return <expr><call><name><name pos:line="47" pos:column="26">ProgramElement</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">GetName</name></name><argument_list pos:line="47" pos:column="48">()</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">public</specifier> <specifier pos:line="50" pos:column="16">static</specifier> <specifier pos:line="50" pos:column="23">readonly</specifier> <name pos:line="50" pos:column="32">int</name></type> <name pos:line="50" pos:column="36">DefaultSnippetSize</name> =<init pos:line="50" pos:column="56"> <expr><lit:literal type="number" pos:line="50" pos:column="57">5</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">string</name></type> <name pos:line="52" pos:column="23">Snippet</name>
        <block pos:line="53" pos:column="9">{
            <function><name pos:line="54" pos:column="13">get</name>
            <block pos:line="55" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">var</name></type> <name pos:line="56" pos:column="21">raw</name> =<init pos:line="56" pos:column="26"> <expr><name><name pos:line="56" pos:column="27">ProgramElement</name><op:operator pos:line="56" pos:column="41">.</op:operator><name pos:line="56" pos:column="42">RawSource</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="57" pos:column="17">return <expr><call><name pos:line="57" pos:column="24">SourceToSnippet</name><argument_list pos:line="57" pos:column="39">(<argument><expr><name pos:line="57" pos:column="40">raw</name></expr></argument><op:operator pos:line="57" pos:column="43">,</op:operator> <argument><expr><name pos:line="57" pos:column="45">DefaultSnippetSize</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">static</specifier> <name pos:line="61" pos:column="23">string</name></type> <name pos:line="61" pos:column="30">SourceToSnippet</name><parameter_list pos:line="61" pos:column="45">(<param><decl><type><name pos:line="61" pos:column="46">string</name></type> <name pos:line="61" pos:column="53">source</name></decl></param><op:operator pos:line="61" pos:column="59">,</op:operator> <param><decl><type><name pos:line="61" pos:column="61">int</name></type> <name pos:line="61" pos:column="65">numLines</name></decl></param>)</parameter_list>
        <block pos:line="62" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">toRemove</name> =<init pos:line="63" pos:column="27"> <expr><name><name pos:line="63" pos:column="28">int</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">MaxValue</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">lines</name> =<init pos:line="64" pos:column="24"> <expr><op:operator pos:line="64" pos:column="25">new</op:operator> <call><name><name pos:line="64" pos:column="29">List</name><argument_list pos:line="64" pos:column="33">&lt;<argument><name pos:line="64" pos:column="34">string</name></argument>&gt;</argument_list></name><argument_list pos:line="64" pos:column="41">(<argument><expr><call><name><name pos:line="64" pos:column="42">source</name><op:operator pos:line="64" pos:column="48">.</op:operator><name pos:line="64" pos:column="49">Split</name></name><argument_list pos:line="64" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="64" pos:column="55">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">numLines</name> <op:operator pos:line="65" pos:column="26">&lt;</op:operator> <name><name pos:line="65" pos:column="28">lines</name><op:operator pos:line="65" pos:column="33">.</op:operator><name pos:line="65" pos:column="34">Count</name></name></expr>)</condition><then pos:line="65" pos:column="40">
            <block pos:line="66" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="67" pos:column="17">lines</name><op:operator pos:line="67" pos:column="22">.</op:operator><name pos:line="67" pos:column="23">RemoveRange</name></name><argument_list pos:line="67" pos:column="34">(<argument><expr><name pos:line="67" pos:column="35">numLines</name></expr></argument><op:operator pos:line="67" pos:column="43">,</op:operator> <argument><expr><name><name pos:line="67" pos:column="45">lines</name><op:operator pos:line="67" pos:column="50">.</op:operator><name pos:line="67" pos:column="51">Count</name></name> <op:operator pos:line="67" pos:column="57">-</op:operator> <name pos:line="67" pos:column="59">numLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="70" pos:column="13">int</name></type> <name pos:line="70" pos:column="17">perLineToRemove</name></decl>;</decl_stmt>

            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><call><name><name pos:line="72" pos:column="17">source</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">StartsWith</name></name><argument_list pos:line="72" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="35">"\t"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="41">
            <block pos:line="73" pos:column="13">{
                <expr_stmt><expr><name pos:line="74" pos:column="17">perLineToRemove</name> <op:operator pos:line="74" pos:column="33">=</op:operator> <name><name pos:line="74" pos:column="35">source</name><op:operator pos:line="74" pos:column="41">.</op:operator><name pos:line="74" pos:column="42">Length</name></name> <op:operator pos:line="74" pos:column="49">-</op:operator> <call><name><name pos:line="74" pos:column="51">source</name><op:operator pos:line="74" pos:column="57">.</op:operator><name pos:line="74" pos:column="58">TrimStart</name></name><argument_list pos:line="74" pos:column="67">(<argument><expr><lit:literal type="char" pos:line="74" pos:column="68">'\t'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="73">.</op:operator><name pos:line="74" pos:column="74">Length</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="76" pos:column="13">else <if pos:line="76" pos:column="18">if <condition pos:line="76" pos:column="21">(<expr><call><name><name pos:line="76" pos:column="22">source</name><op:operator pos:line="76" pos:column="28">.</op:operator><name pos:line="76" pos:column="29">StartsWith</name></name><argument_list pos:line="76" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="40">" "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="45">
            <block pos:line="77" pos:column="13">{
                <expr_stmt><expr><name pos:line="78" pos:column="17">perLineToRemove</name> <op:operator pos:line="78" pos:column="33">=</op:operator> <name><name pos:line="78" pos:column="35">source</name><op:operator pos:line="78" pos:column="41">.</op:operator><name pos:line="78" pos:column="42">Length</name></name> <op:operator pos:line="78" pos:column="49">-</op:operator> <call><name><name pos:line="78" pos:column="51">source</name><op:operator pos:line="78" pos:column="57">.</op:operator><name pos:line="78" pos:column="58">TrimStart</name></name><argument_list pos:line="78" pos:column="67">(<argument><expr><lit:literal type="char" pos:line="78" pos:column="68">' '</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="72">.</op:operator><name pos:line="78" pos:column="73">Length</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="80" pos:column="13">else
            <block pos:line="81" pos:column="13">{
                <expr_stmt><expr><name pos:line="82" pos:column="17">perLineToRemove</name> <op:operator pos:line="82" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="82" pos:column="35">0</lit:literal></expr>;</expr_stmt>
            }</block></else></if></else></if>

            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><name pos:line="85" pos:column="17">perLineToRemove</name> <op:operator pos:line="85" pos:column="33">&lt;</op:operator> <name pos:line="85" pos:column="35">toRemove</name></expr>)</condition><then pos:line="85" pos:column="44">
            <block pos:line="86" pos:column="13">{
                <expr_stmt><expr><name pos:line="87" pos:column="17">toRemove</name> <op:operator pos:line="87" pos:column="26">=</op:operator> <name pos:line="87" pos:column="28">perLineToRemove</name></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="90" pos:column="13">//remove the empty spaces in front</comment>
            <if pos:line="91" pos:column="13">if <condition pos:line="91" pos:column="16">(<expr><name pos:line="91" pos:column="17">toRemove</name> <op:operator pos:line="91" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="91" pos:column="28">0</lit:literal> <op:operator pos:line="91" pos:column="30">&amp;&amp;</op:operator> <name pos:line="91" pos:column="33">toRemove</name> <op:operator pos:line="91" pos:column="42">&lt;</op:operator> <name><name pos:line="91" pos:column="44">int</name><op:operator pos:line="91" pos:column="47">.</op:operator><name pos:line="91" pos:column="48">MaxValue</name></name></expr>)</condition><then pos:line="91" pos:column="57">
            <block pos:line="92" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">string</name></type> <name pos:line="93" pos:column="24">newSnip</name> =<init pos:line="93" pos:column="33"> <expr><lit:literal type="string" pos:line="93" pos:column="34">""</lit:literal></expr></init></decl>;</decl_stmt>
                <foreach pos:line="94" pos:column="17">foreach (<init><decl><type><name pos:line="94" pos:column="26">string</name></type> <name pos:line="94" pos:column="33">line</name> <init pos:line="94" pos:column="38">in <expr><name pos:line="94" pos:column="41">lines</name></expr></init></decl></init>)
                <block pos:line="95" pos:column="17">{
                    <if pos:line="96" pos:column="21">if <condition pos:line="96" pos:column="24">(<expr><name><name pos:line="96" pos:column="25">line</name><op:operator pos:line="96" pos:column="29">.</op:operator><name pos:line="96" pos:column="30">Length</name></name> <op:operator pos:line="96" pos:column="37">&gt;</op:operator> <name pos:line="96" pos:column="39">toRemove</name> <op:operator pos:line="96" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="96" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="96" pos:column="52">
                        <expr_stmt><expr><name pos:line="97" pos:column="25">newSnip</name> <op:operator pos:line="97" pos:column="33">+=</op:operator> <call><name><name pos:line="97" pos:column="36">line</name><op:operator pos:line="97" pos:column="40">.</op:operator><name pos:line="97" pos:column="41">Remove</name></name><argument_list pos:line="97" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="48">0</lit:literal></expr></argument><op:operator pos:line="97" pos:column="49">,</op:operator> <argument><expr><name pos:line="97" pos:column="51">toRemove</name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="63">"\n"</lit:literal></expr>;</expr_stmt></then></if>
                }</block></foreach>
                <return pos:line="99" pos:column="17">return <expr><name pos:line="99" pos:column="24">newSnip</name></expr>;</return>
            }</block></then></if>

            <return pos:line="102" pos:column="13">return <expr><call><name><name pos:line="102" pos:column="20">String</name><op:operator pos:line="102" pos:column="26">.</op:operator><name pos:line="102" pos:column="27">Join</name></name><argument_list pos:line="102" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="32">"\n"</lit:literal></expr></argument><op:operator pos:line="102" pos:column="36">,</op:operator> <argument><expr><call><name><name pos:line="102" pos:column="38">lines</name><op:operator pos:line="102" pos:column="43">.</op:operator><name pos:line="102" pos:column="44">ToArray</name></name><argument_list pos:line="102" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">string</name></type> <name pos:line="105" pos:column="23">FileName</name>
        <block pos:line="106" pos:column="9">{
            <function><name pos:line="107" pos:column="13">get</name> <block pos:line="107" pos:column="17">{ <return pos:line="107" pos:column="19">return <expr><call><name><name pos:line="107" pos:column="26">Path</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">GetFileName</name></name><argument_list pos:line="107" pos:column="42">(<argument><expr><name><name pos:line="107" pos:column="43">ProgramElement</name><op:operator pos:line="107" pos:column="57">.</op:operator><name pos:line="107" pos:column="58">FullFilePath</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">string</name></type> <name pos:line="110" pos:column="23">Parent</name>
        <block pos:line="111" pos:column="9">{
            <function><name pos:line="112" pos:column="13">get</name>
            <block pos:line="113" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="114" pos:column="17">var</name></type> <name pos:line="114" pos:column="21">method</name> =<init pos:line="114" pos:column="29"> <expr><name pos:line="114" pos:column="30">ProgramElement</name> <op:operator pos:line="114" pos:column="45">as</op:operator> <name pos:line="114" pos:column="48">MethodElement</name></expr></init></decl>;</decl_stmt>
                <return pos:line="115" pos:column="17">return <expr><name pos:line="115" pos:column="24">method</name> <op:operator pos:line="115" pos:column="31">!=</op:operator> <name pos:line="115" pos:column="34">null</name> <op:operator pos:line="115" pos:column="39">?</op:operator> <name><name pos:line="115" pos:column="41">method</name><op:operator pos:line="115" pos:column="47">.</op:operator><name pos:line="115" pos:column="48">ClassName</name></name> <op:operator pos:line="115" pos:column="58">:</op:operator> <name><name pos:line="115" pos:column="60">String</name><op:operator pos:line="115" pos:column="66">.</op:operator><name pos:line="115" pos:column="67">Empty</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="119" pos:column="9">public</specifier> <name pos:line="119" pos:column="16">string</name></type> <name pos:line="119" pos:column="23">Name</name>
        <block pos:line="120" pos:column="9">{
            <function><name pos:line="121" pos:column="13">get</name> <block pos:line="121" pos:column="17">{ <return pos:line="121" pos:column="19">return <expr><name><name pos:line="121" pos:column="26">ProgramElement</name><op:operator pos:line="121" pos:column="40">.</op:operator><name pos:line="121" pos:column="41">Name</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
