<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Search Engine\SearchEngine.UnitTests\CodeSearchResultTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">ExtensionContracts</name><op:operator pos:line="2" pos:column="31">.</op:operator><name pos:line="2" pos:column="32">ResultsReordererContracts</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Sando</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SearchEngine</name><op:operator pos:line="4" pos:column="29">.</op:operator><name pos:line="4" pos:column="30">UnitTests</name></name>
<block pos:line="5" pos:column="1">{
    <class><attribute pos:line="6" pos:column="5">[<expr><name pos:line="6" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">CodeSearchResultTest</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">FixSnipTabTest</name><parameter_list pos:line="10" pos:column="35">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">stuff</name> =<init pos:line="12" pos:column="24"> <expr><lit:literal type="string" pos:line="12" pos:column="25">"	public void yo()\n		sasdfsadf\n		asdfasdf\n"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">string</name></type> <name pos:line="13" pos:column="20">fixSnip</name> =<init pos:line="13" pos:column="29"> <expr><call><name><name pos:line="13" pos:column="30">CodeSearchResult</name><op:operator pos:line="13" pos:column="46">.</op:operator><name pos:line="13" pos:column="47">SourceToSnippet</name></name><argument_list pos:line="13" pos:column="62">(<argument><expr><name pos:line="13" pos:column="63">stuff</name></expr></argument><op:operator pos:line="13" pos:column="68">,</op:operator> <argument><expr><name><name pos:line="13" pos:column="70">CodeSearchResult</name><op:operator pos:line="13" pos:column="86">.</op:operator><name pos:line="13" pos:column="87">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">Assert</name><op:operator pos:line="14" pos:column="19">.</op:operator><name pos:line="14" pos:column="20">IsTrue</name></name><argument_list pos:line="14" pos:column="26">(<argument><expr><call><name><name pos:line="14" pos:column="27">fixSnip</name><op:operator pos:line="14" pos:column="34">.</op:operator><name pos:line="14" pos:column="35">Equals</name></name><argument_list pos:line="14" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="14" pos:column="42">"public void yo()\n\tsasdfsadf\n\tasdfasdf\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">FixSnipSpacesTest</name><parameter_list pos:line="18" pos:column="38">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">stuff</name> =<init pos:line="20" pos:column="24"> <expr><lit:literal type="string" pos:line="20" pos:column="25">"      public void yo()\n            sasdfsadf\n            asdfasdf\n"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">string</name></type> <name pos:line="21" pos:column="32">fixSnip</name> =<init pos:line="21" pos:column="41"> <expr><call><name><name pos:line="21" pos:column="42">CodeSearchResult</name><op:operator pos:line="21" pos:column="58">.</op:operator><name pos:line="21" pos:column="59">SourceToSnippet</name></name><argument_list pos:line="21" pos:column="74">(<argument><expr><name pos:line="21" pos:column="75">stuff</name></expr></argument><op:operator pos:line="21" pos:column="80">,</op:operator> <argument><expr><name><name pos:line="21" pos:column="82">CodeSearchResult</name><op:operator pos:line="21" pos:column="98">.</op:operator><name pos:line="21" pos:column="99">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">IsTrue</name></name><argument_list pos:line="22" pos:column="26">(<argument><expr><call><name><name pos:line="22" pos:column="27">fixSnip</name><op:operator pos:line="22" pos:column="34">.</op:operator><name pos:line="22" pos:column="35">Equals</name></name><argument_list pos:line="22" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="42">"public void yo()\n      sasdfsadf\n      asdfasdf\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
