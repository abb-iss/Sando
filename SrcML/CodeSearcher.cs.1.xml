<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Search Engine\Search Engine\CodeSearcher.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Indexer</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Searching</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Indexer</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Searching</name><op:operator pos:line="7" pos:column="30">.</op:operator><name pos:line="7" pos:column="31">Criteria</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SearchEngine</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">CodeSearcher</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name pos:line="13" pos:column="26">IIndexerSearcher</name></type> <name pos:line="13" pos:column="43">_searcher</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">CodeSearcher</name><parameter_list pos:line="15" pos:column="28">(<param><decl><type><name pos:line="15" pos:column="29">IIndexerSearcher</name></type> <name pos:line="15" pos:column="46">searcher</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><name pos:line="17" pos:column="13">_searcher</name> <op:operator pos:line="17" pos:column="23">=</op:operator> <name pos:line="17" pos:column="25">searcher</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">virtual</specifier> <name><name pos:line="20" pos:column="24">List</name><argument_list pos:line="20" pos:column="28">&lt;<argument><name pos:line="20" pos:column="29">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="47">Search</name><parameter_list pos:line="20" pos:column="53">(<param><decl><type><name pos:line="20" pos:column="54">string</name></type> <name pos:line="20" pos:column="61">searchString</name></decl></param><op:operator pos:line="20" pos:column="73">,</op:operator> <param><decl><type><name pos:line="20" pos:column="75">bool</name></type> <name pos:line="20" pos:column="80">rerunWithWildcardIfNoResults</name> =<init pos:line="20" pos:column="110"> <expr><lit:literal type="boolean" pos:line="20" pos:column="111">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="21" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="22" pos:column="25">Contract</name><op:operator pos:line="22" pos:column="33">.</op:operator><name pos:line="22" pos:column="34">Requires</name></name><argument_list pos:line="22" pos:column="42">(<argument><expr><call><name><name pos:line="22" pos:column="43">String</name><op:operator pos:line="22" pos:column="49">.</op:operator><name pos:line="22" pos:column="50">IsNullOrWhiteSpace</name></name><argument_list pos:line="22" pos:column="68">(<argument><expr><name pos:line="22" pos:column="69">searchString</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="22" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="22" pos:column="84">"CodeSearcher:Search - searchString cannot be null or an empty string!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">searchCriteria</name> =<init pos:line="24" pos:column="33"> <expr><call><name><name pos:line="24" pos:column="34">CriteriaBuilder</name><op:operator pos:line="24" pos:column="49">.</op:operator><name pos:line="24" pos:column="50">GetBuilder</name></name><argument_list pos:line="24" pos:column="60">()</argument_list></call><op:operator pos:line="24" pos:column="62">.</op:operator><call><name pos:line="24" pos:column="63">AddSearchString</name><argument_list pos:line="24" pos:column="78">(<argument><expr><name pos:line="24" pos:column="79">searchString</name></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="92">.</op:operator><call><name pos:line="24" pos:column="93">GetCriteria</name><argument_list pos:line="24" pos:column="104">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="25" pos:column="13">return <expr><call><name pos:line="25" pos:column="20">Search</name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">searchCriteria</name></expr></argument><op:operator pos:line="25" pos:column="41">,</op:operator> <argument><expr><name pos:line="25" pos:column="43">rerunWithWildcardIfNoResults</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

        <function><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">virtual</specifier> <name><name pos:line="28" pos:column="24">List</name><argument_list pos:line="28" pos:column="28">&lt;<argument><name pos:line="28" pos:column="29">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="47">Search</name><parameter_list pos:line="28" pos:column="53">(<param><decl><type><name pos:line="28" pos:column="54">SearchCriteria</name></type> <name pos:line="28" pos:column="69">searchCriteria</name></decl></param><op:operator pos:line="28" pos:column="83">,</op:operator> <param><decl><type><name pos:line="28" pos:column="85">bool</name></type> <name pos:line="28" pos:column="90">rerunWithWildcardIfNoResults</name> =<init pos:line="28" pos:column="120"> <expr><lit:literal type="boolean" pos:line="28" pos:column="121">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="29" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Contract</name><op:operator pos:line="30" pos:column="21">.</op:operator><name pos:line="30" pos:column="22">Requires</name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">searchCriteria</name> <op:operator pos:line="30" pos:column="46">!=</op:operator> <name pos:line="30" pos:column="49">null</name></expr></argument><op:operator pos:line="30" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="30" pos:column="55">"CodeSearcher:Search - searchCriteria cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">searchResults</name> =<init pos:line="32" pos:column="32"> <expr><call><name><name pos:line="32" pos:column="33">_searcher</name><op:operator pos:line="32" pos:column="42">.</op:operator><name pos:line="32" pos:column="43">Search</name></name><argument_list pos:line="32" pos:column="49">(<argument><expr><name pos:line="32" pos:column="50">searchCriteria</name></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="65">.</op:operator><call><name pos:line="32" pos:column="66">ToList</name><argument_list pos:line="32" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if pos:line="33" pos:column="21">if <condition pos:line="33" pos:column="24">(<expr><op:operator pos:line="33" pos:column="25">!</op:operator><call><name><name pos:line="33" pos:column="26">searchResults</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">Any</name></name><argument_list pos:line="33" pos:column="43">()</argument_list></call> <op:operator pos:line="33" pos:column="46">&amp;&amp;</op:operator> <name pos:line="33" pos:column="49">rerunWithWildcardIfNoResults</name></expr>)</condition><then pos:line="33" pos:column="78">
		        <expr_stmt><expr><name pos:line="34" pos:column="25">searchResults</name> <op:operator pos:line="34" pos:column="39">=</op:operator> <call><name pos:line="34" pos:column="41">RerunQueryWithWildcardAtTheEnd</name><argument_list pos:line="34" pos:column="71">(<argument><expr><name pos:line="34" pos:column="72">searchCriteria</name></expr></argument><op:operator pos:line="34" pos:column="86">,</op:operator> <argument><expr><name pos:line="34" pos:column="88">searchResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="35" pos:column="25">return <expr><name pos:line="35" pos:column="32">searchResults</name></expr>;</return>
		}</block></function>

        <function><type><specifier pos:line="38" pos:column="9">private</specifier> <name><name pos:line="38" pos:column="17">List</name><argument_list pos:line="38" pos:column="21">&lt;<argument><name pos:line="38" pos:column="22">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="40">RerunQueryWithWildcardAtTheEnd</name><parameter_list pos:line="38" pos:column="70">(<param><decl><type><name pos:line="38" pos:column="71">SearchCriteria</name></type> <name pos:line="38" pos:column="86">searchCriteria</name></decl></param><op:operator pos:line="38" pos:column="100">,</op:operator> <param><decl><type><name><name pos:line="38" pos:column="102">List</name><argument_list pos:line="38" pos:column="106">&lt;<argument><name pos:line="38" pos:column="107">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="125">searchResults</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">simple</name> =<init pos:line="40" pos:column="25"> <expr><name pos:line="40" pos:column="26">searchCriteria</name> <op:operator pos:line="40" pos:column="41">as</op:operator> <name pos:line="40" pos:column="44">SimpleSearchCriteria</name></expr></init></decl>;</decl_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">simple</name> <op:operator pos:line="41" pos:column="24">!=</op:operator> <name pos:line="41" pos:column="27">null</name></expr>)</condition><then pos:line="41" pos:column="32">
            <block pos:line="42" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">var</name></type> <name pos:line="43" pos:column="21">terms</name> =<init pos:line="43" pos:column="28"> <expr><name><name pos:line="43" pos:column="29">simple</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">SearchTerms</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">terms</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">Count</name></name> <op:operator pos:line="44" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="44" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="44" pos:column="38">
                <block pos:line="45" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="46" pos:column="21">var</name></type> <name pos:line="46" pos:column="25">term</name> =<init pos:line="46" pos:column="31"> <expr><call><name><name pos:line="46" pos:column="32">simple</name><op:operator pos:line="46" pos:column="38">.</op:operator><name pos:line="46" pos:column="39">SearchTerms</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">First</name></name><argument_list pos:line="46" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="47" pos:column="21">simple</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">SearchTerms</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">Clear</name></name><argument_list pos:line="47" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="48" pos:column="21">simple</name><op:operator pos:line="48" pos:column="27">.</op:operator><name pos:line="48" pos:column="28">SearchTerms</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">Add</name></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">term</name> <op:operator pos:line="48" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="48" pos:column="51">"*"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="49" pos:column="21">searchResults</name> <op:operator pos:line="49" pos:column="35">=</op:operator> <call><name><name pos:line="49" pos:column="37">_searcher</name><op:operator pos:line="49" pos:column="46">.</op:operator><name pos:line="49" pos:column="47">Search</name></name><argument_list pos:line="49" pos:column="53">(<argument><expr><name pos:line="49" pos:column="54">searchCriteria</name></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="69">.</op:operator><call><name pos:line="49" pos:column="70">ToList</name><argument_list pos:line="49" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">searchResults</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
