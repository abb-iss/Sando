<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\CommentTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Parser</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">UnitTests</name></name>
<block pos:line="8" pos:column="1">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">CommentTest</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="13" pos:column="17">public</specifier> <name pos:line="13" pos:column="24">void</name></type> <name pos:line="13" pos:column="29">SummarizeCommentTest</name><parameter_list pos:line="13" pos:column="49">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">comment</name> =<init pos:line="15" pos:column="26"> <expr><lit:literal type="string" pos:line="15" pos:column="27">"//TODO - should fix this if it happens too often\n"</lit:literal><op:operator pos:line="15" pos:column="79">+</op:operator>
				<lit:literal type="string" pos:line="16" pos:column="33">"//TODO - need to investigate why this is happening during parsing"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">string</name></type> <name pos:line="17" pos:column="20">commentSummary</name> =<init pos:line="17" pos:column="36"> <expr><call><name><name pos:line="17" pos:column="37">SrcMLParsingUtils</name><op:operator pos:line="17" pos:column="54">.</op:operator><name pos:line="17" pos:column="55">GetCommentSummary</name></name><argument_list pos:line="17" pos:column="72">(<argument><expr><name pos:line="17" pos:column="73">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">Assert</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">IsTrue</name></name><argument_list pos:line="18" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="27">"TODO - should fix this if it happens too often"</lit:literal><op:operator pos:line="18" pos:column="75">.</op:operator><call><name pos:line="18" pos:column="76">Equals</name><argument_list pos:line="18" pos:column="82">(<argument><expr><name pos:line="18" pos:column="83">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">SummarizeOneLineTest</name><parameter_list pos:line="22" pos:column="41">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">comment</name> =<init pos:line="24" pos:column="26"> <expr><lit:literal type="string" pos:line="24" pos:column="27">"//TODO - should fix this if it happens too often"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">string</name></type> <name pos:line="25" pos:column="20">commentSummary</name> =<init pos:line="25" pos:column="36"> <expr><call><name><name pos:line="25" pos:column="37">SrcMLParsingUtils</name><op:operator pos:line="25" pos:column="54">.</op:operator><name pos:line="25" pos:column="55">GetCommentSummary</name></name><argument_list pos:line="25" pos:column="72">(<argument><expr><name pos:line="25" pos:column="73">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">IsTrue</name></name><argument_list pos:line="26" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="27">"TODO - should fix this if it happens too often"</lit:literal><op:operator pos:line="26" pos:column="75">.</op:operator><call><name pos:line="26" pos:column="76">Equals</name><argument_list pos:line="26" pos:column="82">(<argument><expr><name pos:line="26" pos:column="83">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

                <function><type><attribute pos:line="29" pos:column="17">[<expr><name pos:line="29" pos:column="18">Test</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">SummarizeMultiLineTest</name><parameter_list pos:line="30" pos:column="43">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">comment</name> =<init pos:line="32" pos:column="26"> <expr><lit:literal type="string" pos:line="32" pos:column="27">"/// &lt;summary&gt;\n"</lit:literal> <op:operator pos:line="32" pos:column="45">+</op:operator>
                <lit:literal type="string" pos:line="33" pos:column="17">"/// Used for the culture in SR\n\r"</lit:literal> <op:operator pos:line="33" pos:column="54">+</op:operator>
                <lit:literal type="string" pos:line="34" pos:column="17">"/// &lt;/devdoc&gt;\r\n"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">string</name></type> <name pos:line="35" pos:column="20">commentSummary</name> =<init pos:line="35" pos:column="36"> <expr><call><name><name pos:line="35" pos:column="37">SrcMLParsingUtils</name><op:operator pos:line="35" pos:column="54">.</op:operator><name pos:line="35" pos:column="55">GetCommentSummary</name></name><argument_list pos:line="35" pos:column="72">(<argument><expr><name pos:line="35" pos:column="73">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">IsTrue</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="27">"Used for the culture in SR"</lit:literal><op:operator pos:line="36" pos:column="55">.</op:operator><call><name pos:line="36" pos:column="56">Equals</name><argument_list pos:line="36" pos:column="62">(<argument><expr><name pos:line="36" pos:column="63">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">SummarizeDashTest</name><parameter_list pos:line="41" pos:column="38">()</parameter_list>
        <block pos:line="42" pos:column="9">{
                    <decl_stmt><decl><type><name pos:line="43" pos:column="21">var</name></type> <name pos:line="43" pos:column="25">comment</name> =<init pos:line="43" pos:column="34"> <expr><lit:literal type="string" pos:line="43" pos:column="35">"// -----------------------------------------------------------------------------\n"</lit:literal><op:operator pos:line="43" pos:column="119">+</op:operator>
        <lit:literal type="string" pos:line="44" pos:column="9">"//  &lt;autogeneratedinfo&gt;\n"</lit:literal><op:operator pos:line="44" pos:column="36">+</op:operator>
        <lit:literal type="string" pos:line="45" pos:column="9">"//      This code was generated by:\n"</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="46" pos:column="21">string</name></type> <name pos:line="46" pos:column="28">commentSummary</name> =<init pos:line="46" pos:column="44"> <expr><call><name><name pos:line="46" pos:column="45">SrcMLParsingUtils</name><op:operator pos:line="46" pos:column="62">.</op:operator><name pos:line="46" pos:column="63">GetCommentSummary</name></name><argument_list pos:line="46" pos:column="80">(<argument><expr><name pos:line="46" pos:column="81">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="47" pos:column="21">Assert</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">IsTrue</name></name><argument_list pos:line="47" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="35">"This code was generated by:"</lit:literal><op:operator pos:line="47" pos:column="64">.</op:operator><call><name pos:line="47" pos:column="65">Equals</name><argument_list pos:line="47" pos:column="71">(<argument><expr><name pos:line="47" pos:column="72">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>


        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">SummarizeNoSpaceTest</name><parameter_list pos:line="52" pos:column="41">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">comment</name> =<init pos:line="54" pos:column="26"> <expr><lit:literal type="string" pos:line="54" pos:column="27">"        ///&lt;summary&gt;\n"</lit:literal><op:operator pos:line="54" pos:column="51">+</op:operator>
        <lit:literal type="string" pos:line="55" pos:column="9">"/// Save the plug-in's settings.\n"</lit:literal><op:operator pos:line="55" pos:column="45">+</op:operator>
        <lit:literal type="string" pos:line="56" pos:column="9">"///&lt;/summary&gt;\n"</lit:literal><op:operator pos:line="56" pos:column="26">+</op:operator>
        <lit:literal type="string" pos:line="57" pos:column="9">"/// "</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">string</name></type> <name pos:line="58" pos:column="20">commentSummary</name> =<init pos:line="58" pos:column="36"> <expr><call><name><name pos:line="58" pos:column="37">SrcMLParsingUtils</name><op:operator pos:line="58" pos:column="54">.</op:operator><name pos:line="58" pos:column="55">GetCommentSummary</name></name><argument_list pos:line="58" pos:column="72">(<argument><expr><name pos:line="58" pos:column="73">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">IsTrue</name></name><argument_list pos:line="59" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="27">"Save the plug-in's settings."</lit:literal><op:operator pos:line="59" pos:column="57">.</op:operator><call><name pos:line="59" pos:column="58">Equals</name><argument_list pos:line="59" pos:column="64">(<argument><expr><name pos:line="59" pos:column="65">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">SummarizeSpaceTest</name><parameter_list pos:line="63" pos:column="39">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">comment</name> =<init pos:line="65" pos:column="26">
                <expr><lit:literal type="string" pos:line="66" pos:column="17">"           /// &lt;summary&gt;\n\r"</lit:literal> <op:operator pos:line="66" pos:column="48">+</op:operator>
                <lit:literal type="string" pos:line="67" pos:column="17">"           /// Specifies the size, in bytes, of the structure. The caller must set this to Marshal.SizeOf(typeof(CURSORINFO)).\r\n"</lit:literal> <op:operator pos:line="67" pos:column="150">+</op:operator>
                <lit:literal type="string" pos:line="68" pos:column="17">"           /// &lt;/summary&gt;\r\n"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">string</name></type> <name pos:line="69" pos:column="20">commentSummary</name> =<init pos:line="69" pos:column="36"> <expr><call><name><name pos:line="69" pos:column="37">SrcMLParsingUtils</name><op:operator pos:line="69" pos:column="54">.</op:operator><name pos:line="69" pos:column="55">GetCommentSummary</name></name><argument_list pos:line="69" pos:column="72">(<argument><expr><name pos:line="69" pos:column="73">comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">IsTrue</name></name><argument_list pos:line="70" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="27">"Specifies the size, in bytes, of the structure. The caller must set this to Marshal.SizeOf(typeof(CURSORINFO))."</lit:literal><op:operator pos:line="70" pos:column="140">.</op:operator><call><name pos:line="70" pos:column="141">Equals</name><argument_list pos:line="70" pos:column="147">(<argument><expr><name pos:line="70" pos:column="148">commentSummary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
