<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\Documents\Converters\ConverterFromHitToProgramElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Sando</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">ExtensionContracts</name><op:operator pos:line="1" pos:column="31">.</op:operator><name pos:line="1" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Lucene</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Net</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Documents</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Diagnostics</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">Contracts</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Indexer</name><op:operator pos:line="9" pos:column="24">.</op:operator><name pos:line="9" pos:column="25">Documents</name><op:operator pos:line="9" pos:column="34">.</op:operator><name pos:line="9" pos:column="35">Converters</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ConverterFromHitToProgramElement</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">SandoDocument</name></type> <name pos:line="13" pos:column="31">sandoDocument</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name><name pos:line="14" pos:column="17">Lucene</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">Net</name><op:operator pos:line="14" pos:column="27">.</op:operator><name pos:line="14" pos:column="28">Documents</name><op:operator pos:line="14" pos:column="37">.</op:operator><name pos:line="14" pos:column="38">Document</name></name></type> <name pos:line="14" pos:column="47">luceneDocument</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">ConverterFromHitToProgramElement</name><parameter_list pos:line="16" pos:column="49">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <throw pos:line="18" pos:column="13">throw <expr><op:operator pos:line="18" pos:column="19">new</op:operator> <call><name pos:line="18" pos:column="23">NotImplementedException</name><argument_list pos:line="18" pos:column="46">()</argument_list></call></expr>;</throw><comment type="line" pos:line="18" pos:column="49">//don't call this, use Create</comment>
        }</block></constructor>

        <constructor><specifier pos:line="21" pos:column="9">private</specifier> <name pos:line="21" pos:column="17">ConverterFromHitToProgramElement</name><parameter_list pos:line="21" pos:column="49">(<param><decl><type><name pos:line="21" pos:column="50">SandoDocument</name></type> <name pos:line="21" pos:column="64">sandoDocument</name></decl></param><op:operator pos:line="21" pos:column="77">,</op:operator> <param><decl><type><name><name pos:line="21" pos:column="79">Lucene</name><op:operator pos:line="21" pos:column="85">.</op:operator><name pos:line="21" pos:column="86">Net</name><op:operator pos:line="21" pos:column="89">.</op:operator><name pos:line="21" pos:column="90">Documents</name><op:operator pos:line="21" pos:column="99">.</op:operator><name pos:line="21" pos:column="100">Document</name></name></type> <name pos:line="21" pos:column="109">document</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">this</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">sandoDocument</name></name> <op:operator pos:line="23" pos:column="32">=</op:operator> <name pos:line="23" pos:column="34">sandoDocument</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">this</name><op:operator pos:line="24" pos:column="17">.</op:operator><name pos:line="24" pos:column="18">luceneDocument</name></name> <op:operator pos:line="24" pos:column="33">=</op:operator> <name pos:line="24" pos:column="35">document</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">static</specifier> <name pos:line="27" pos:column="23">ConverterFromHitToProgramElement</name></type> <name pos:line="27" pos:column="56">Create</name><parameter_list pos:line="27" pos:column="62">(<param><decl><type><name><name pos:line="27" pos:column="63">Lucene</name><op:operator pos:line="27" pos:column="69">.</op:operator><name pos:line="27" pos:column="70">Net</name><op:operator pos:line="27" pos:column="73">.</op:operator><name pos:line="27" pos:column="74">Documents</name><op:operator pos:line="27" pos:column="83">.</op:operator><name pos:line="27" pos:column="84">Document</name></name></type> <name pos:line="27" pos:column="93">document</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Contract</name><op:operator pos:line="29" pos:column="21">.</op:operator><name pos:line="29" pos:column="22">Requires</name></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">document</name> <op:operator pos:line="29" pos:column="40">!=</op:operator> <name pos:line="29" pos:column="43">null</name></expr></argument><op:operator pos:line="29" pos:column="47">,</op:operator> <argument><expr><lit:literal type="string" pos:line="29" pos:column="49">"ConverterFromHitToProgramElement:ReadProgramElementFromDocument - document cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <return pos:line="30" pos:column="13">return <expr><op:operator pos:line="30" pos:column="20">new</op:operator> <call><name pos:line="30" pos:column="24">ConverterFromHitToProgramElement</name><argument_list pos:line="30" pos:column="56">(<argument><expr><call><name pos:line="30" pos:column="57">GetSandoDocument</name><argument_list pos:line="30" pos:column="73">(<argument><expr><name pos:line="30" pos:column="74">document</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="30" pos:column="83">,</op:operator> <argument><expr><name pos:line="30" pos:column="85">document</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">private</specifier> <specifier pos:line="33" pos:column="17">static</specifier> <name pos:line="33" pos:column="24">SandoDocument</name></type> <name pos:line="33" pos:column="38">GetSandoDocument</name><parameter_list pos:line="33" pos:column="54">(<param><decl><type><name pos:line="33" pos:column="55">Document</name></type> <name pos:line="33" pos:column="64">document</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">ProgramElementType</name></type> <name pos:line="35" pos:column="32">programElementType</name> =<init pos:line="35" pos:column="52"> <expr><op:operator pos:line="35" pos:column="53">(</op:operator><name pos:line="35" pos:column="54">ProgramElementType</name><op:operator pos:line="35" pos:column="72">)</op:operator><call><name><name pos:line="35" pos:column="73">Enum</name><op:operator pos:line="35" pos:column="77">.</op:operator><name pos:line="35" pos:column="78">Parse</name></name><argument_list pos:line="35" pos:column="83">(<argument><expr><call><name pos:line="35" pos:column="84">typeof</name><argument_list pos:line="35" pos:column="90">(<argument><expr><name pos:line="35" pos:column="91">ProgramElementType</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="35" pos:column="110">,</op:operator> <argument><expr><call><name><name pos:line="35" pos:column="112">document</name><op:operator pos:line="35" pos:column="120">.</op:operator><name pos:line="35" pos:column="121">GetField</name></name><argument_list pos:line="35" pos:column="129">(<argument><expr><call><name><name pos:line="35" pos:column="130">SandoField</name><op:operator pos:line="35" pos:column="140">.</op:operator><name pos:line="35" pos:column="141">ProgramElementType</name><op:operator pos:line="35" pos:column="159">.</op:operator><name pos:line="35" pos:column="160">ToString</name></name><argument_list pos:line="35" pos:column="168">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="171">.</op:operator><call><name pos:line="35" pos:column="172">StringValue</name><argument_list pos:line="35" pos:column="183">()</argument_list></call></expr></argument><op:operator pos:line="35" pos:column="185">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="35" pos:column="187">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch pos:line="36" pos:column="13">switch <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">programElementType</name></expr>)</condition>
            <block pos:line="37" pos:column="13">{
                <case pos:line="38" pos:column="17">case <expr><name><name pos:line="38" pos:column="22">ProgramElementType</name><op:operator pos:line="38" pos:column="40">.</op:operator><name pos:line="38" pos:column="41">Class</name></name></expr>:
                    <return pos:line="39" pos:column="21">return <expr><op:operator pos:line="39" pos:column="28">new</op:operator> <call><name pos:line="39" pos:column="32">ClassDocument</name><argument_list pos:line="39" pos:column="45">(<argument><expr><name pos:line="39" pos:column="46">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="40" pos:column="17">case <expr><name><name pos:line="40" pos:column="22">ProgramElementType</name><op:operator pos:line="40" pos:column="40">.</op:operator><name pos:line="40" pos:column="41">Comment</name></name></expr>:
                    <return pos:line="41" pos:column="21">return <expr><op:operator pos:line="41" pos:column="28">new</op:operator> <call><name pos:line="41" pos:column="32">CommentDocument</name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="42" pos:column="17">case <expr><name><name pos:line="42" pos:column="22">ProgramElementType</name><op:operator pos:line="42" pos:column="40">.</op:operator><name pos:line="42" pos:column="41">Enum</name></name></expr>:
                    <return pos:line="43" pos:column="21">return <expr><op:operator pos:line="43" pos:column="28">new</op:operator> <call><name pos:line="43" pos:column="32">EnumDocument</name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="44" pos:column="17">case <expr><name><name pos:line="44" pos:column="22">ProgramElementType</name><op:operator pos:line="44" pos:column="40">.</op:operator><name pos:line="44" pos:column="41">Field</name></name></expr>:
                    <return pos:line="45" pos:column="21">return <expr><op:operator pos:line="45" pos:column="28">new</op:operator> <call><name pos:line="45" pos:column="32">FieldDocument</name><argument_list pos:line="45" pos:column="45">(<argument><expr><name pos:line="45" pos:column="46">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="46" pos:column="17">case <expr><name><name pos:line="46" pos:column="22">ProgramElementType</name><op:operator pos:line="46" pos:column="40">.</op:operator><name pos:line="46" pos:column="41">Method</name></name></expr>:
                    <return pos:line="47" pos:column="21">return <expr><op:operator pos:line="47" pos:column="28">new</op:operator> <call><name pos:line="47" pos:column="32">MethodDocument</name><argument_list pos:line="47" pos:column="46">(<argument><expr><name pos:line="47" pos:column="47">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="48" pos:column="17">case <expr><name><name pos:line="48" pos:column="22">ProgramElementType</name><op:operator pos:line="48" pos:column="40">.</op:operator><name pos:line="48" pos:column="41">Property</name></name></expr>:
                    <return pos:line="49" pos:column="21">return <expr><op:operator pos:line="49" pos:column="28">new</op:operator> <call><name pos:line="49" pos:column="32">PropertyDocument</name><argument_list pos:line="49" pos:column="48">(<argument><expr><name pos:line="49" pos:column="49">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="50" pos:column="17">case <expr><name><name pos:line="50" pos:column="22">ProgramElementType</name><op:operator pos:line="50" pos:column="40">.</op:operator><name pos:line="50" pos:column="41">MethodPrototype</name></name></expr>:
                    <return pos:line="51" pos:column="21">return <expr><op:operator pos:line="51" pos:column="28">new</op:operator> <call><name pos:line="51" pos:column="32">MethodPrototypeDocument</name><argument_list pos:line="51" pos:column="55">(<argument><expr><name pos:line="51" pos:column="56">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="52" pos:column="17">case <expr><name><name pos:line="52" pos:column="22">ProgramElementType</name><op:operator pos:line="52" pos:column="40">.</op:operator><name pos:line="52" pos:column="41">Struct</name></name></expr>:
                    <return pos:line="53" pos:column="21">return <expr><op:operator pos:line="53" pos:column="28">new</op:operator> <call><name pos:line="53" pos:column="32">StructDocument</name><argument_list pos:line="53" pos:column="46">(<argument><expr><name pos:line="53" pos:column="47">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="54" pos:column="17">case <expr><name><name pos:line="54" pos:column="22">ProgramElementType</name><op:operator pos:line="54" pos:column="40">.</op:operator><name pos:line="54" pos:column="41">TextLine</name></name></expr>:
                    <return pos:line="55" pos:column="21">return <expr><op:operator pos:line="55" pos:column="28">new</op:operator> <call><name pos:line="55" pos:column="32">TextLineDocument</name><argument_list pos:line="55" pos:column="48">(<argument><expr><name pos:line="55" pos:column="49">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case pos:line="56" pos:column="17">case <expr><name><name pos:line="56" pos:column="22">ProgramElementType</name><op:operator pos:line="56" pos:column="40">.</op:operator><name pos:line="56" pos:column="41">Custom</name></name></expr>:
                    <decl_stmt><decl><type><name pos:line="57" pos:column="21">var</name></type> <name pos:line="57" pos:column="25">type</name> =<init pos:line="57" pos:column="31"> <expr><call><name pos:line="57" pos:column="32">GetMyType</name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">document</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="58" pos:column="21">if<condition pos:line="58" pos:column="23">(<expr><call><name><name pos:line="58" pos:column="24">type</name><op:operator pos:line="58" pos:column="28">.</op:operator><name pos:line="58" pos:column="29">BaseType</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">Equals</name></name><argument_list pos:line="58" pos:column="44">(<argument><expr><call><name pos:line="58" pos:column="45">typeof</name><argument_list pos:line="58" pos:column="51">(<argument><expr><name pos:line="58" pos:column="52">MethodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="58" pos:column="68">
                        <return pos:line="59" pos:column="25">return <expr><op:operator pos:line="59" pos:column="32">new</op:operator> <call><name pos:line="59" pos:column="36">MethodDocument</name><argument_list pos:line="59" pos:column="50">(<argument><expr><name pos:line="59" pos:column="51">document</name></expr></argument>)</argument_list></call></expr>;</return></then></if>                    
                    <return pos:line="60" pos:column="21">return <expr><op:operator pos:line="60" pos:column="28">new</op:operator> <call><name pos:line="60" pos:column="32">SandoDocument</name><argument_list pos:line="60" pos:column="45">(<argument><expr><name pos:line="60" pos:column="46">document</name></expr></argument>)</argument_list></call></expr>;</return>
                </case><default pos:line="61" pos:column="17">default:
                    <return pos:line="62" pos:column="21">return <expr><name pos:line="62" pos:column="28">null</name></expr>;</return>
            </default>}</block></switch>
        }</block></function>

        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">ProgramElement</name></type> <name pos:line="66" pos:column="31">Convert</name><parameter_list pos:line="66" pos:column="38">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Contract</name><op:operator pos:line="68" pos:column="21">.</op:operator><name pos:line="68" pos:column="22">Ensures</name></name><argument_list pos:line="68" pos:column="29">(<argument><expr><call><name><name pos:line="68" pos:column="30">Contract</name><op:operator pos:line="68" pos:column="38">.</op:operator><name><name pos:line="68" pos:column="39">Result</name><argument_list pos:line="68" pos:column="45">&lt;<argument><name pos:line="68" pos:column="46">ProgramElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="68" pos:column="61">()</argument_list></call> <op:operator pos:line="68" pos:column="64">!=</op:operator> <name pos:line="68" pos:column="67">null</name></expr></argument><op:operator pos:line="68" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="68" pos:column="73">"ConverterFromHitToProgramElement:ReadProgramElementFromDocument - an object must be returned from this method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			

            <comment type="line" pos:line="70" pos:column="13">//Get standard field values</comment>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">string</name></type> <name pos:line="71" pos:column="20">name</name> =<init pos:line="71" pos:column="26"> <expr><call><name><name pos:line="71" pos:column="27">luceneDocument</name><op:operator pos:line="71" pos:column="41">.</op:operator><name pos:line="71" pos:column="42">GetField</name></name><argument_list pos:line="71" pos:column="50">(<argument><expr><call><name><name pos:line="71" pos:column="51">SandoField</name><op:operator pos:line="71" pos:column="61">.</op:operator><name pos:line="71" pos:column="62">Name</name><op:operator pos:line="71" pos:column="66">.</op:operator><name pos:line="71" pos:column="67">ToString</name></name><argument_list pos:line="71" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="78">.</op:operator><call><name pos:line="71" pos:column="79">StringValue</name><argument_list pos:line="71" pos:column="90">()</argument_list></call><op:operator pos:line="71" pos:column="92">.</op:operator><call><name pos:line="71" pos:column="93">ToSandoDisplayable</name><argument_list pos:line="71" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">ProgramElementType</name></type> <name pos:line="72" pos:column="32">type</name> =<init pos:line="72" pos:column="38"> <expr><op:operator pos:line="72" pos:column="39">(</op:operator><name pos:line="72" pos:column="40">ProgramElementType</name><op:operator pos:line="72" pos:column="58">)</op:operator><call><name><name pos:line="72" pos:column="59">Enum</name><op:operator pos:line="72" pos:column="63">.</op:operator><name pos:line="72" pos:column="64">Parse</name></name><argument_list pos:line="72" pos:column="69">(<argument><expr><call><name pos:line="72" pos:column="70">typeof</name><argument_list pos:line="72" pos:column="76">(<argument><expr><name pos:line="72" pos:column="77">ProgramElementType</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="72" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="72" pos:column="98">luceneDocument</name><op:operator pos:line="72" pos:column="112">.</op:operator><name pos:line="72" pos:column="113">GetField</name></name><argument_list pos:line="72" pos:column="121">(<argument><expr><call><name><name pos:line="72" pos:column="122">SandoField</name><op:operator pos:line="72" pos:column="132">.</op:operator><name pos:line="72" pos:column="133">ProgramElementType</name><op:operator pos:line="72" pos:column="151">.</op:operator><name pos:line="72" pos:column="152">ToString</name></name><argument_list pos:line="72" pos:column="160">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="163">.</op:operator><call><name pos:line="72" pos:column="164">StringValue</name><argument_list pos:line="72" pos:column="175">()</argument_list></call></expr></argument><op:operator pos:line="72" pos:column="177">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="72" pos:column="179">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">string</name></type> <name pos:line="73" pos:column="20">fullFilePath</name> =<init pos:line="73" pos:column="34"> <expr><call><name><name pos:line="73" pos:column="35">luceneDocument</name><op:operator pos:line="73" pos:column="49">.</op:operator><name pos:line="73" pos:column="50">GetField</name></name><argument_list pos:line="73" pos:column="58">(<argument><expr><call><name><name pos:line="73" pos:column="59">SandoField</name><op:operator pos:line="73" pos:column="69">.</op:operator><name pos:line="73" pos:column="70">FullFilePath</name><op:operator pos:line="73" pos:column="82">.</op:operator><name pos:line="73" pos:column="83">ToString</name></name><argument_list pos:line="73" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="94">.</op:operator><call><name pos:line="73" pos:column="95">StringValue</name><argument_list pos:line="73" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">int</name></type> <name pos:line="74" pos:column="17">definitionLineNumber</name> =<init pos:line="74" pos:column="39"> <expr><call><name><name pos:line="74" pos:column="40">int</name><op:operator pos:line="74" pos:column="43">.</op:operator><name pos:line="74" pos:column="44">Parse</name></name><argument_list pos:line="74" pos:column="49">(<argument><expr><call><name><name pos:line="74" pos:column="50">luceneDocument</name><op:operator pos:line="74" pos:column="64">.</op:operator><name pos:line="74" pos:column="65">GetField</name></name><argument_list pos:line="74" pos:column="73">(<argument><expr><call><name><name pos:line="74" pos:column="74">SandoField</name><op:operator pos:line="74" pos:column="84">.</op:operator><name pos:line="74" pos:column="85">DefinitionLineNumber</name><op:operator pos:line="74" pos:column="105">.</op:operator><name pos:line="74" pos:column="106">ToString</name></name><argument_list pos:line="74" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="117">.</op:operator><call><name pos:line="74" pos:column="118">StringValue</name><argument_list pos:line="74" pos:column="129">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">string</name></type> <name pos:line="75" pos:column="20">snippet</name> =<init pos:line="75" pos:column="29"> <expr><call><name><name pos:line="75" pos:column="30">luceneDocument</name><op:operator pos:line="75" pos:column="44">.</op:operator><name pos:line="75" pos:column="45">GetField</name></name><argument_list pos:line="75" pos:column="53">(<argument><expr><call><name><name pos:line="75" pos:column="54">SandoField</name><op:operator pos:line="75" pos:column="64">.</op:operator><name pos:line="75" pos:column="65">Source</name><op:operator pos:line="75" pos:column="71">.</op:operator><name pos:line="75" pos:column="72">ToString</name></name><argument_list pos:line="75" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="83">.</op:operator><call><name pos:line="75" pos:column="84">StringValue</name><argument_list pos:line="75" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="77" pos:column="13">//Add values that vary according to element type (e.g., a textline doesn't have a parent class whereas a method often does)</comment>
            <comment type="line" pos:line="78" pos:column="13">//Note: Parameters must match the parameter list for corresponding program element.  See MethodDocument.GetParametersForConstructor and the MethodElement constructor</comment>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">parameters</name> =<init pos:line="79" pos:column="29"> <expr><call><name><name pos:line="79" pos:column="30">sandoDocument</name><op:operator pos:line="79" pos:column="43">.</op:operator><name pos:line="79" pos:column="44">GetParametersForConstructor</name></name><argument_list pos:line="79" pos:column="71">(<argument><expr><name pos:line="79" pos:column="72">name</name></expr></argument><op:operator pos:line="79" pos:column="76">,</op:operator> <argument><expr><name pos:line="79" pos:column="78">type</name></expr></argument><op:operator pos:line="79" pos:column="82">,</op:operator> <argument><expr><name pos:line="79" pos:column="84">fullFilePath</name></expr></argument><op:operator pos:line="79" pos:column="96">,</op:operator> <argument><expr><name pos:line="79" pos:column="98">definitionLineNumber</name></expr></argument><op:operator pos:line="79" pos:column="118">,</op:operator> <argument><expr><name pos:line="79" pos:column="120">snippet</name></expr></argument><op:operator pos:line="79" pos:column="127">,</op:operator> <argument><expr><name pos:line="79" pos:column="129">luceneDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="81" pos:column="13">//Create type from the collected values</comment>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">myClassType</name> =<init pos:line="82" pos:column="30"> <expr><call><name pos:line="82" pos:column="31">GetMyType</name><argument_list pos:line="82" pos:column="40">(<argument><expr><name pos:line="82" pos:column="41">luceneDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">myElement</name> =<init pos:line="83" pos:column="28"> <expr><call><name><name pos:line="83" pos:column="29">Activator</name><op:operator pos:line="83" pos:column="38">.</op:operator><name pos:line="83" pos:column="39">CreateInstance</name></name><argument_list pos:line="83" pos:column="53">(<argument><expr><name pos:line="83" pos:column="54">myClassType</name></expr></argument><op:operator pos:line="83" pos:column="65">,</op:operator> <argument><expr><name pos:line="83" pos:column="67">parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="85" pos:column="13">//Populate any custom fields from user-defined types, only happens when a third party extends Sando</comment>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">SetCustomFields</name><argument_list pos:line="86" pos:column="28">(<argument><expr><name pos:line="86" pos:column="29">myElement</name></expr></argument><op:operator pos:line="86" pos:column="38">,</op:operator> <argument><expr><name pos:line="86" pos:column="40">luceneDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="87" pos:column="13">return <expr><name pos:line="87" pos:column="20">myElement</name> <op:operator pos:line="87" pos:column="30">as</op:operator> <name pos:line="87" pos:column="33">ProgramElement</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="91" pos:column="9">internal</specifier> <specifier pos:line="91" pos:column="18">static</specifier> <name pos:line="91" pos:column="25">void</name></type> <name pos:line="91" pos:column="30">SetCustomFields</name><parameter_list pos:line="91" pos:column="45">(<param><decl><type><name pos:line="91" pos:column="46">object</name></type> <name pos:line="91" pos:column="53">myElement</name></decl></param><op:operator pos:line="91" pos:column="62">,</op:operator> <param><decl><type><name><name pos:line="91" pos:column="64">Lucene</name><op:operator pos:line="91" pos:column="70">.</op:operator><name pos:line="91" pos:column="71">Net</name><op:operator pos:line="91" pos:column="74">.</op:operator><name pos:line="91" pos:column="75">Documents</name><op:operator pos:line="91" pos:column="84">.</op:operator><name pos:line="91" pos:column="85">Document</name></name></type> <name pos:line="91" pos:column="94">luceneDocument</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{            
	        <foreach pos:line="93" pos:column="17">foreach (<init><decl><type><name pos:line="93" pos:column="26">var</name></type> <name pos:line="93" pos:column="30">property</name> <init pos:line="93" pos:column="39">in <expr><op:operator pos:line="93" pos:column="42">(</op:operator><name pos:line="93" pos:column="43">myElement</name> <op:operator pos:line="93" pos:column="53">as</op:operator> <name pos:line="93" pos:column="56">ProgramElement</name><op:operator pos:line="93" pos:column="70">)</op:operator><op:operator pos:line="93" pos:column="71">.</op:operator><call><name pos:line="93" pos:column="72">GetCustomProperties</name><argument_list pos:line="93" pos:column="91">()</argument_list></call></expr></init></decl></init>)
	        <block pos:line="94" pos:column="17">{
	            <if pos:line="95" pos:column="21">if <condition pos:line="95" pos:column="24">(<expr><op:operator pos:line="95" pos:column="25">!</op:operator><call><name><name pos:line="95" pos:column="26">property</name><op:operator pos:line="95" pos:column="34">.</op:operator><name pos:line="95" pos:column="35">Name</name><op:operator pos:line="95" pos:column="39">.</op:operator><name pos:line="95" pos:column="40">Equals</name></name><argument_list pos:line="95" pos:column="46">(<argument><expr><name><name pos:line="95" pos:column="47">ProgramElement</name><op:operator pos:line="95" pos:column="61">.</op:operator><name pos:line="95" pos:column="62">CustomTypeTag</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="95" pos:column="77">
	            <block pos:line="96" pos:column="21">{
                    <decl_stmt><decl><type><name pos:line="97" pos:column="21">Field</name></type> <name pos:line="97" pos:column="27">field</name> =<init pos:line="97" pos:column="34"> <expr><call><name><name pos:line="97" pos:column="35">luceneDocument</name><op:operator pos:line="97" pos:column="49">.</op:operator><name pos:line="97" pos:column="50">GetField</name></name><argument_list pos:line="97" pos:column="58">(<argument><expr><name><name pos:line="97" pos:column="59">property</name><op:operator pos:line="97" pos:column="67">.</op:operator><name pos:line="97" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	                <expr_stmt><expr><call><name><name pos:line="98" pos:column="25">Contract</name><op:operator pos:line="98" pos:column="33">.</op:operator><name pos:line="98" pos:column="34">Assert</name></name><argument_list pos:line="98" pos:column="40">(<argument><expr><name pos:line="98" pos:column="41">field</name> <op:operator pos:line="98" pos:column="47">!=</op:operator> <name pos:line="98" pos:column="50">null</name></expr></argument><op:operator pos:line="98" pos:column="54">,</op:operator> <argument><expr><lit:literal type="string" pos:line="98" pos:column="56">"Field "</lit:literal> <op:operator pos:line="98" pos:column="65">+</op:operator> <name><name pos:line="98" pos:column="67">property</name><op:operator pos:line="98" pos:column="75">.</op:operator><name pos:line="98" pos:column="76">Name</name></name> <op:operator pos:line="98" pos:column="81">+</op:operator> <lit:literal type="string" pos:line="98" pos:column="83">" was not populated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                <expr_stmt><expr><call><name><name pos:line="99" pos:column="25">property</name><op:operator pos:line="99" pos:column="33">.</op:operator><name pos:line="99" pos:column="34">SetValue</name></name><argument_list pos:line="99" pos:column="42">(<argument><expr><name pos:line="99" pos:column="43">myElement</name></expr></argument><op:operator pos:line="99" pos:column="52">,</op:operator> <argument><expr><call><name><name pos:line="99" pos:column="54">field</name><op:operator pos:line="99" pos:column="59">.</op:operator><name pos:line="99" pos:column="60">StringValue</name></name><argument_list pos:line="99" pos:column="71">()</argument_list></call></expr></argument><op:operator pos:line="99" pos:column="73">,</op:operator> <argument><expr><name pos:line="99" pos:column="75">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then></if>
	        }</block></foreach>	    
        }</block></function>

        <function><type><specifier pos:line="104" pos:column="9">internal</specifier> <specifier pos:line="104" pos:column="18">static</specifier> <name pos:line="104" pos:column="25">Type</name></type> <name pos:line="104" pos:column="30">GetMyType</name><parameter_list pos:line="104" pos:column="39">(<param><decl><type><name pos:line="104" pos:column="40">Document</name></type> <name pos:line="104" pos:column="49">luceneDocument</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{         
            <try pos:line="106" pos:column="13">try
            <block pos:line="107" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">string</name></type> <name pos:line="108" pos:column="24">typeId</name> =<init pos:line="108" pos:column="32"> <expr><call><name><name pos:line="108" pos:column="33">luceneDocument</name><op:operator pos:line="108" pos:column="47">.</op:operator><name pos:line="108" pos:column="48">GetField</name></name><argument_list pos:line="108" pos:column="56">(<argument><expr><name><name pos:line="108" pos:column="57">ProgramElement</name><op:operator pos:line="108" pos:column="71">.</op:operator><name pos:line="108" pos:column="72">CustomTypeTag</name></name></expr></argument>)</argument_list></call><op:operator pos:line="108" pos:column="86">.</op:operator><call><name pos:line="108" pos:column="87">StringValue</name><argument_list pos:line="108" pos:column="98">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="109" pos:column="17">return <expr><call><name><name pos:line="109" pos:column="24">Type</name><op:operator pos:line="109" pos:column="28">.</op:operator><name pos:line="109" pos:column="29">GetType</name></name><argument_list pos:line="109" pos:column="36">(<argument><expr><name pos:line="109" pos:column="37">typeId</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch pos:line="111" pos:column="13">catch
            <block pos:line="112" pos:column="13">{
                <return pos:line="113" pos:column="17">return <expr><call><name pos:line="113" pos:column="24">typeof</name> <argument_list pos:line="113" pos:column="31">(<argument><expr><name pos:line="113" pos:column="32">ProgramElement</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></catch></try>	                
        }</block></function>

        <function><type><specifier pos:line="117" pos:column="9">public</specifier> <specifier pos:line="117" pos:column="16">static</specifier> <name pos:line="117" pos:column="23">string</name></type> <name pos:line="117" pos:column="30">StandardizeFilePath</name><parameter_list pos:line="117" pos:column="49">(<param><decl><type><name pos:line="117" pos:column="50">string</name></type> <name pos:line="117" pos:column="57">fullFilePath</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><call><name><name pos:line="119" pos:column="17">fullFilePath</name><op:operator pos:line="119" pos:column="29">.</op:operator><name pos:line="119" pos:column="30">Contains</name></name><argument_list pos:line="119" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="39">"/"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="119" pos:column="44">
            <block pos:line="120" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">string</name></type> <name pos:line="121" pos:column="24">old</name> =<init pos:line="121" pos:column="29"> <expr><lit:literal type="string" pos:line="121" pos:column="30">"/"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">string</name></type> <name pos:line="122" pos:column="24">rep</name> =<init pos:line="122" pos:column="29"> <expr><lit:literal type="string" pos:line="122" pos:column="30">"\\"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">path</name> =<init pos:line="123" pos:column="27"> <expr><call><name><name pos:line="123" pos:column="28">fullFilePath</name><op:operator pos:line="123" pos:column="40">.</op:operator><name pos:line="123" pos:column="41">Replace</name></name><argument_list pos:line="123" pos:column="48">(<argument><expr><name pos:line="123" pos:column="49">old</name></expr></argument><op:operator pos:line="123" pos:column="52">,</op:operator> <argument><expr><name pos:line="123" pos:column="54">rep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="124" pos:column="17">return <expr><name pos:line="124" pos:column="24">path</name></expr>;</return>
            }</block></then></if>
            <return pos:line="126" pos:column="13">return <expr><name pos:line="126" pos:column="20">fullFilePath</name></expr>;</return>
        }</block></function>
   
    }</block></class>
}</block></namespace>
</unit>
