<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\IndexState\CppHeaderElementResolver.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Indexer</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Documents</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Indexer</name><op:operator pos:line="11" pos:column="24">.</op:operator><name pos:line="11" pos:column="25">IndexState</name></name>
<block pos:line="12" pos:column="1">{
	<class><specifier pos:line="13" pos:column="9">public</specifier> <specifier pos:line="13" pos:column="16">static</specifier> class <name pos:line="13" pos:column="29">CppHeaderElementResolver</name>
	<block pos:line="14" pos:column="9">{

		<function><type><specifier pos:line="16" pos:column="17">public</specifier> <specifier pos:line="16" pos:column="24">static</specifier> <name><name pos:line="16" pos:column="31">List</name><argument_list pos:line="16" pos:column="35">&lt;<argument><name pos:line="16" pos:column="36">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="52">GenerateCppHeaderElements</name><parameter_list pos:line="16" pos:column="77">(<param><decl><type><name pos:line="16" pos:column="78">string</name></type> <name pos:line="16" pos:column="85">filePath</name></decl></param><op:operator pos:line="16" pos:column="93">,</op:operator> <param><decl><type><name><name pos:line="16" pos:column="95">List</name><argument_list pos:line="16" pos:column="99">&lt;<argument><name pos:line="16" pos:column="100">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="116">unresolvedElements</name></decl></param>)</parameter_list>
		<block pos:line="17" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="18" pos:column="25">List</name><argument_list pos:line="18" pos:column="29">&lt;<argument><name pos:line="18" pos:column="30">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="46">headerElements</name> =<init pos:line="18" pos:column="62"> <expr><op:operator pos:line="18" pos:column="63">new</op:operator> <call><name><name pos:line="18" pos:column="67">List</name><argument_list pos:line="18" pos:column="71">&lt;<argument><name pos:line="18" pos:column="72">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="20" pos:column="25">//first parse all the included header files. they are the same in all the unresolved elements</comment>
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">CppUnresolvedMethodElement</name></type> <name pos:line="21" pos:column="52">firstUnresolved</name> =<init pos:line="21" pos:column="69"> <expr><op:operator pos:line="21" pos:column="70">(</op:operator><name pos:line="21" pos:column="71">CppUnresolvedMethodElement</name><op:operator pos:line="21" pos:column="97">)</op:operator><name><name pos:line="21" pos:column="98">unresolvedElements</name><index pos:line="21" pos:column="116">[<expr><lit:literal type="number" pos:line="21" pos:column="117">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<foreach pos:line="22" pos:column="25">foreach(<init><decl><type><name pos:line="22" pos:column="33">String</name></type> <name pos:line="22" pos:column="40">headerFile</name> <init pos:line="22" pos:column="51">in <expr><name><name pos:line="22" pos:column="54">firstUnresolved</name><op:operator pos:line="22" pos:column="69">.</op:operator><name pos:line="22" pos:column="70">IncludeFileNames</name></name></expr></init></decl></init>)
			<block pos:line="23" pos:column="25">{
				<comment type="line" pos:line="24" pos:column="33">//it's reasonable to assume that the header file path is relative from the cpp file,</comment>
				<comment type="line" pos:line="25" pos:column="33">//as other included files are unlikely to be part of the same project and therefore </comment>
				<comment type="line" pos:line="26" pos:column="33">//should not need to be parsed</comment>
				<decl_stmt><decl><type><name pos:line="27" pos:column="33">string</name></type> <name pos:line="27" pos:column="40">headerPath</name> =<init pos:line="27" pos:column="52"> <expr><call><name><name pos:line="27" pos:column="53">System</name><op:operator pos:line="27" pos:column="59">.</op:operator><name pos:line="27" pos:column="60">IO</name><op:operator pos:line="27" pos:column="62">.</op:operator><name pos:line="27" pos:column="63">Path</name><op:operator pos:line="27" pos:column="67">.</op:operator><name pos:line="27" pos:column="68">GetDirectoryName</name></name><argument_list pos:line="27" pos:column="84">(<argument><expr><name pos:line="27" pos:column="85">filePath</name></expr></argument>)</argument_list></call> <op:operator pos:line="27" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="27" pos:column="97">"\\"</lit:literal> <op:operator pos:line="27" pos:column="102">+</op:operator> <name pos:line="27" pos:column="104">headerFile</name></expr></init></decl>;</decl_stmt>
				<if pos:line="28" pos:column="33">if<condition pos:line="28" pos:column="35">(<expr><op:operator pos:line="28" pos:column="36">!</op:operator><call><name><name pos:line="28" pos:column="37">System</name><op:operator pos:line="28" pos:column="43">.</op:operator><name pos:line="28" pos:column="44">IO</name><op:operator pos:line="28" pos:column="46">.</op:operator><name pos:line="28" pos:column="47">File</name><op:operator pos:line="28" pos:column="51">.</op:operator><name pos:line="28" pos:column="52">Exists</name></name><argument_list pos:line="28" pos:column="58">(<argument><expr><name pos:line="28" pos:column="59">headerPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="28" pos:column="71">
				<block pos:line="29" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="30" pos:column="41">Debug</name><op:operator pos:line="30" pos:column="46">.</op:operator><name pos:line="30" pos:column="47">WriteLine</name></name><argument_list pos:line="30" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="57">"????? header file -"</lit:literal> <op:operator pos:line="30" pos:column="79">+</op:operator> <name pos:line="30" pos:column="81">headerFile</name> <op:operator pos:line="30" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="30" pos:column="94">"- was not found.. this can lead to issues"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>					
					<continue pos:line="31" pos:column="41">continue;</continue>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="33" pos:column="33">Debug</name><op:operator pos:line="33" pos:column="38">.</op:operator><name pos:line="33" pos:column="39">WriteLine</name></name><argument_list pos:line="33" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="49">"*** parsing header = "</lit:literal> <op:operator pos:line="33" pos:column="73">+</op:operator> <name pos:line="33" pos:column="75">headerPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="34" pos:column="33">var</name></type> <name pos:line="34" pos:column="37">headerInfo</name> =<init pos:line="34" pos:column="49"> <expr><op:operator pos:line="34" pos:column="50">new</op:operator> <call><name pos:line="34" pos:column="54">FileInfo</name><argument_list pos:line="34" pos:column="62">(<argument><expr><name pos:line="34" pos:column="63">headerPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="35" pos:column="33">headerElements</name><op:operator pos:line="35" pos:column="47">.</op:operator><name pos:line="35" pos:column="48">AddRange</name></name><argument_list pos:line="35" pos:column="56">(<argument><expr><call><name><name pos:line="35" pos:column="57">ExtensionPointsRepository</name><op:operator pos:line="35" pos:column="82">.</op:operator><name pos:line="35" pos:column="83">Instance</name><op:operator pos:line="35" pos:column="91">.</op:operator><name pos:line="35" pos:column="92">GetParserImplementation</name></name><argument_list pos:line="35" pos:column="115">(<argument><expr><name><name pos:line="35" pos:column="116">headerInfo</name><op:operator pos:line="35" pos:column="126">.</op:operator><name pos:line="35" pos:column="127">Extension</name></name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="137">.</op:operator><call><name pos:line="35" pos:column="138">Parse</name><argument_list pos:line="35" pos:column="143">(<argument><expr><name pos:line="35" pos:column="144">headerPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
			<return pos:line="37" pos:column="25">return <expr><name pos:line="37" pos:column="32">headerElements</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="40" pos:column="17">public</specifier> <specifier pos:line="40" pos:column="24">static</specifier> <name pos:line="40" pos:column="31">SandoDocument</name></type> <name pos:line="40" pos:column="45">GetDocumentForUnresolvedCppMethod</name><parameter_list pos:line="40" pos:column="78">(<param><decl><type><name pos:line="40" pos:column="79">CppUnresolvedMethodElement</name></type> <name pos:line="40" pos:column="106">unresolvedMethod</name></decl></param><op:operator pos:line="40" pos:column="122">,</op:operator> <param><decl><type><name><name pos:line="40" pos:column="124">List</name><argument_list pos:line="40" pos:column="128">&lt;<argument><name pos:line="40" pos:column="129">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="145">headerElements</name></decl></param>)</parameter_list>
		<block pos:line="41" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="42" pos:column="25">bool</name></type> <name pos:line="42" pos:column="30">isResolved</name> =<init pos:line="42" pos:column="42"> <expr><lit:literal type="boolean" pos:line="42" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">MethodElement</name></type> <name pos:line="43" pos:column="39">methodElement</name> =<init pos:line="43" pos:column="54"> <expr><name pos:line="43" pos:column="55">null</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="45" pos:column="25">isResolved</name> <op:operator pos:line="45" pos:column="36">=</op:operator> <call><name><name pos:line="45" pos:column="38">unresolvedMethod</name><op:operator pos:line="45" pos:column="54">.</op:operator><name pos:line="45" pos:column="55">TryResolve</name></name><argument_list pos:line="45" pos:column="65">(<argument><expr><name pos:line="45" pos:column="66">unresolvedMethod</name></expr></argument><op:operator pos:line="45" pos:column="82">,</op:operator> <argument><expr><name pos:line="45" pos:column="84">headerElements</name></expr></argument><op:operator pos:line="45" pos:column="98">,</op:operator> <argument><specifier pos:line="45" pos:column="100">out</specifier> <expr><name pos:line="45" pos:column="104">methodElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="46" pos:column="25">if<condition pos:line="46" pos:column="27">(<expr><name pos:line="46" pos:column="28">isResolved</name> <op:operator pos:line="46" pos:column="39">==</op:operator> <lit:literal type="boolean" pos:line="46" pos:column="42">true</lit:literal></expr>)</condition><then pos:line="46" pos:column="47">
			<block pos:line="47" pos:column="25">{
				<return pos:line="48" pos:column="33">return <expr><call><name><name pos:line="48" pos:column="40">DocumentFactory</name><op:operator pos:line="48" pos:column="55">.</op:operator><name pos:line="48" pos:column="56">Create</name></name><argument_list pos:line="48" pos:column="62">(<argument><expr><name pos:line="48" pos:column="63">methodElement</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="50" pos:column="25">else
			<block pos:line="51" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="52" pos:column="33">Debug</name><op:operator pos:line="52" pos:column="38">.</op:operator><name pos:line="52" pos:column="39">WriteLine</name></name><argument_list pos:line="52" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="49">"????? "</lit:literal> <op:operator pos:line="52" pos:column="58">+</op:operator> <name><name pos:line="52" pos:column="60">unresolvedMethod</name><op:operator pos:line="52" pos:column="76">.</op:operator><name pos:line="52" pos:column="77">Name</name></name> <op:operator pos:line="52" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="84">" is not resolved, this is bad!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="53" pos:column="33">methodElement</name> <op:operator pos:line="53" pos:column="47">=</op:operator> <call><name><name pos:line="53" pos:column="49">unresolvedMethod</name><op:operator pos:line="53" pos:column="65">.</op:operator><name pos:line="53" pos:column="66">Copy</name></name><argument_list pos:line="53" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="54" pos:column="33">return <expr><call><name><name pos:line="54" pos:column="40">DocumentFactory</name><op:operator pos:line="54" pos:column="55">.</op:operator><name pos:line="54" pos:column="56">Create</name></name><argument_list pos:line="54" pos:column="62">(<argument><expr><name pos:line="54" pos:column="63">methodElement</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
