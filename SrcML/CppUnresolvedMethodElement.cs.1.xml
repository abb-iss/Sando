<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core\CppUnresolvedMethodElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Sando</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Core</name></name>
<block pos:line="6" pos:column="1">{
	<class><specifier pos:line="7" pos:column="9">public</specifier> class <name pos:line="7" pos:column="22">CppUnresolvedMethodElement</name> <super pos:line="7" pos:column="49">: <name pos:line="7" pos:column="51">MethodElement</name></super>
	<block pos:line="8" pos:column="9">{
		<constructor><specifier pos:line="9" pos:column="17">public</specifier> <name pos:line="9" pos:column="24">CppUnresolvedMethodElement</name><parameter_list pos:line="9" pos:column="50">(<param><decl><type><name pos:line="9" pos:column="51">string</name></type> <name pos:line="9" pos:column="58">name</name></decl></param><op:operator pos:line="9" pos:column="62">,</op:operator> <param><decl><type><name pos:line="9" pos:column="64">int</name></type> <name pos:line="9" pos:column="68">definitionLineNumber</name></decl></param><op:operator pos:line="9" pos:column="88">,</op:operator> <param><decl><type><name pos:line="9" pos:column="90">string</name></type> <name pos:line="9" pos:column="97">fullFilePath</name></decl></param><op:operator pos:line="9" pos:column="109">,</op:operator> <param><decl><type><name pos:line="9" pos:column="111">string</name></type> <name pos:line="9" pos:column="118">snippet</name></decl></param><op:operator pos:line="9" pos:column="125">,</op:operator> <param><decl><type><name pos:line="9" pos:column="127">string</name></type> <name pos:line="9" pos:column="134">arguments</name></decl></param><op:operator pos:line="9" pos:column="143">,</op:operator>
			<param><decl><type><name pos:line="10" pos:column="25">string</name></type> <name pos:line="10" pos:column="32">returnType</name></decl></param><op:operator pos:line="10" pos:column="42">,</op:operator> <param><decl><type><name pos:line="10" pos:column="44">string</name></type> <name pos:line="10" pos:column="51">body</name></decl></param><op:operator pos:line="10" pos:column="55">,</op:operator> <param><decl><type><name pos:line="10" pos:column="57">bool</name></type> <name pos:line="10" pos:column="62">isConstructor</name></decl></param><op:operator pos:line="10" pos:column="75">,</op:operator> <param><decl><type><name pos:line="10" pos:column="77">string</name></type> <name pos:line="10" pos:column="84">className</name></decl></param><op:operator pos:line="10" pos:column="93">,</op:operator> <param><decl><type><name><name pos:line="10" pos:column="95">string</name><index pos:line="10" pos:column="101">[]</index></name></type> <name pos:line="10" pos:column="104">headerFiles</name></decl></param>)</parameter_list>
			<member_list pos:line="11" pos:column="25">: <call><name pos:line="11" pos:column="27">base</name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">name</name></expr></argument><op:operator pos:line="11" pos:column="36">,</op:operator> <argument><expr><name pos:line="11" pos:column="38">definitionLineNumber</name></expr></argument><op:operator pos:line="11" pos:column="58">,</op:operator> <argument><expr><name pos:line="11" pos:column="60">fullFilePath</name></expr></argument><op:operator pos:line="11" pos:column="72">,</op:operator> <argument><expr><name pos:line="11" pos:column="74">snippet</name></expr></argument><op:operator pos:line="11" pos:column="81">,</op:operator> <argument><expr><name><name pos:line="11" pos:column="83">AccessLevel</name><op:operator pos:line="11" pos:column="94">.</op:operator><name pos:line="11" pos:column="95">Protected</name></name></expr></argument><op:operator pos:line="11" pos:column="104">,</op:operator> <argument><expr><name pos:line="11" pos:column="106">arguments</name></expr></argument><op:operator pos:line="11" pos:column="115">,</op:operator> <argument><expr><name pos:line="11" pos:column="117">returnType</name></expr></argument><op:operator pos:line="11" pos:column="127">,</op:operator> <argument><expr><name pos:line="11" pos:column="129">body</name></expr></argument><op:operator pos:line="11" pos:column="133">,</op:operator> 
					<argument><expr><call><name><name pos:line="12" pos:column="41">Guid</name><op:operator pos:line="12" pos:column="45">.</op:operator><name pos:line="12" pos:column="46">NewGuid</name></name><argument_list pos:line="12" pos:column="53">()</argument_list></call></expr></argument><op:operator pos:line="12" pos:column="55">,</op:operator> <argument><expr><name pos:line="12" pos:column="57">className</name></expr></argument><op:operator pos:line="12" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="12" pos:column="68">String</name><op:operator pos:line="12" pos:column="74">.</op:operator><name pos:line="12" pos:column="75">Empty</name></name></expr></argument><op:operator pos:line="12" pos:column="80">,</op:operator> <argument><expr><name pos:line="12" pos:column="82">isConstructor</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="13" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="14" pos:column="25">Contract</name><op:operator pos:line="14" pos:column="33">.</op:operator><name pos:line="14" pos:column="34">Requires</name></name><argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">className</name> <op:operator pos:line="14" pos:column="53">!=</op:operator> <name pos:line="14" pos:column="56">null</name></expr></argument><op:operator pos:line="14" pos:column="60">,</op:operator> <argument><expr><lit:literal type="string" pos:line="14" pos:column="62">"CppSplitMethodElement:Constructor - class name cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="15" pos:column="25">Contract</name><op:operator pos:line="15" pos:column="33">.</op:operator><name pos:line="15" pos:column="34">Requires</name></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name><name pos:line="15" pos:column="43">headerFiles</name><op:operator pos:line="15" pos:column="54">.</op:operator><name pos:line="15" pos:column="55">Length</name></name> <op:operator pos:line="15" pos:column="62">&gt;</op:operator> <lit:literal type="number" pos:line="15" pos:column="64">0</lit:literal></expr></argument><op:operator pos:line="15" pos:column="65">,</op:operator> <argument><expr><lit:literal type="string" pos:line="15" pos:column="67">"CppSplitMethodElement:Constructor - there have to be some header files defined here"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="17" pos:column="25">ClassName</name> <op:operator pos:line="17" pos:column="35">=</op:operator> <name pos:line="17" pos:column="37">className</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="18" pos:column="25">IncludeFileNames</name> <op:operator pos:line="18" pos:column="42">=</op:operator> <name pos:line="18" pos:column="44">headerFiles</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">IsResolved</name> <op:operator pos:line="19" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="38">false</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="22" pos:column="17">public</specifier> <name pos:line="22" pos:column="24">bool</name></type> <name pos:line="22" pos:column="29">TryResolve</name><parameter_list pos:line="22" pos:column="39">(<param><decl><type><name><name pos:line="22" pos:column="40">ProgramElement</name><index pos:line="22" pos:column="54">[]</index></name></type> <name pos:line="22" pos:column="57">headerElements</name></decl></param><op:operator pos:line="22" pos:column="71">,</op:operator> <param><decl><type><specifier pos:line="22" pos:column="73">out</specifier> <name pos:line="22" pos:column="77">MethodElement</name></type> <name pos:line="22" pos:column="91">outMethodElement</name></decl></param>)</parameter_list> 
		<block pos:line="23" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">AccessLevel</name></type> <name pos:line="24" pos:column="37">accessLevel</name></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">Guid</name></type> <name pos:line="25" pos:column="30">classId</name></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="27" pos:column="25">outMethodElement</name> <op:operator pos:line="27" pos:column="42">=</op:operator> <name pos:line="27" pos:column="44">null</name></expr>;</expr_stmt>
			<if pos:line="28" pos:column="25">if<condition pos:line="28" pos:column="27">(<expr><call><name pos:line="28" pos:column="28">ResolveClassId</name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">ClassName</name></expr></argument><op:operator pos:line="28" pos:column="52">,</op:operator> <argument><expr><name pos:line="28" pos:column="54">headerElements</name></expr></argument><op:operator pos:line="28" pos:column="68">,</op:operator> <argument><specifier pos:line="28" pos:column="70">out</specifier> <expr><name pos:line="28" pos:column="74">classId</name></expr></argument>)</argument_list></call> <op:operator pos:line="28" pos:column="83">==</op:operator> <lit:literal type="boolean" pos:line="28" pos:column="86">false</lit:literal></expr>)</condition><then pos:line="28" pos:column="92"> <return pos:line="28" pos:column="93">return <expr><lit:literal type="boolean" pos:line="28" pos:column="100">false</lit:literal></expr>;</return></then></if>
			<if pos:line="29" pos:column="25">if<condition pos:line="29" pos:column="27">(<expr><call><name pos:line="29" pos:column="28">ResolveAccessType</name><argument_list pos:line="29" pos:column="45">(<argument><expr><name pos:line="29" pos:column="46">Name</name></expr></argument><op:operator pos:line="29" pos:column="50">,</op:operator> <argument><expr><name pos:line="29" pos:column="52">headerElements</name></expr></argument><op:operator pos:line="29" pos:column="66">,</op:operator> <argument><specifier pos:line="29" pos:column="68">out</specifier> <expr><name pos:line="29" pos:column="72">accessLevel</name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="85">==</op:operator> <lit:literal type="boolean" pos:line="29" pos:column="88">false</lit:literal></expr>)</condition><then pos:line="29" pos:column="94"> <return pos:line="29" pos:column="95">return <expr><lit:literal type="boolean" pos:line="29" pos:column="102">false</lit:literal></expr>;</return></then></if>

			<expr_stmt><expr><name pos:line="31" pos:column="25">IsResolved</name> <op:operator pos:line="31" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="31" pos:column="38">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">outMethodElement</name> <op:operator pos:line="32" pos:column="42">=</op:operator> <op:operator pos:line="32" pos:column="44">new</op:operator> <call><name pos:line="32" pos:column="48">MethodElement</name><argument_list pos:line="32" pos:column="61">(<argument><expr><name pos:line="32" pos:column="62">Name</name></expr></argument><op:operator pos:line="32" pos:column="66">,</op:operator> <argument><expr><name pos:line="32" pos:column="68">DefinitionLineNumber</name></expr></argument><op:operator pos:line="32" pos:column="88">,</op:operator> <argument><expr><name pos:line="32" pos:column="90">FullFilePath</name></expr></argument><op:operator pos:line="32" pos:column="102">,</op:operator> <argument><expr><name pos:line="32" pos:column="104">Snippet</name></expr></argument><op:operator pos:line="32" pos:column="111">,</op:operator> <argument><expr><name pos:line="32" pos:column="113">accessLevel</name></expr></argument><op:operator pos:line="32" pos:column="124">,</op:operator> <argument><expr><name pos:line="32" pos:column="126">Arguments</name></expr></argument><op:operator pos:line="32" pos:column="135">,</op:operator> <argument><expr><name pos:line="32" pos:column="137">ReturnType</name></expr></argument><op:operator pos:line="32" pos:column="147">,</op:operator> <argument><expr><name pos:line="32" pos:column="149">Body</name></expr></argument><op:operator pos:line="32" pos:column="153">,</op:operator> 
													<argument><expr><name pos:line="33" pos:column="105">classId</name></expr></argument><op:operator pos:line="33" pos:column="112">,</op:operator> <argument><expr><name pos:line="33" pos:column="114">ClassName</name></expr></argument><op:operator pos:line="33" pos:column="123">,</op:operator> <argument><expr><name><name pos:line="33" pos:column="125">String</name><op:operator pos:line="33" pos:column="131">.</op:operator><name pos:line="33" pos:column="132">Empty</name></name></expr></argument><op:operator pos:line="33" pos:column="137">,</op:operator> <argument><expr><name pos:line="33" pos:column="139">IsConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="34" pos:column="25">return <expr><lit:literal type="boolean" pos:line="34" pos:column="32">true</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="37" pos:column="17">private</specifier> <name pos:line="37" pos:column="25">bool</name></type> <name pos:line="37" pos:column="30">ResolveClassId</name><parameter_list pos:line="37" pos:column="44">(<param><decl><type><name pos:line="37" pos:column="45">string</name></type> <name pos:line="37" pos:column="52">className</name></decl></param><op:operator pos:line="37" pos:column="61">,</op:operator> <param><decl><type><name><name pos:line="37" pos:column="63">ProgramElement</name><index pos:line="37" pos:column="77">[]</index></name></type> <name pos:line="37" pos:column="80">includeElements</name></decl></param><op:operator pos:line="37" pos:column="95">,</op:operator> <param><decl><type><specifier pos:line="37" pos:column="97">out</specifier> <name pos:line="37" pos:column="101">Guid</name></type> <name pos:line="37" pos:column="106">outGuid</name></decl></param>)</parameter_list>
		<block pos:line="38" pos:column="17">{
			<foreach pos:line="39" pos:column="25">foreach(<init><decl><type><name pos:line="39" pos:column="33">ProgramElement</name></type> <name pos:line="39" pos:column="48">element</name> <init pos:line="39" pos:column="56">in <expr><name pos:line="39" pos:column="59">includeElements</name></expr></init></decl></init>)
			<block pos:line="40" pos:column="25">{
				<if pos:line="41" pos:column="33">if<condition pos:line="41" pos:column="35">(<expr><name pos:line="41" pos:column="36">element</name> <op:operator pos:line="41" pos:column="44">is</op:operator> <name pos:line="41" pos:column="47">ClassElement</name> <op:operator pos:line="41" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="41" pos:column="63">element</name><op:operator pos:line="41" pos:column="70">.</op:operator><name pos:line="41" pos:column="71">Name</name></name> <op:operator pos:line="41" pos:column="76">==</op:operator> <name pos:line="41" pos:column="79">ClassName</name></expr>)</condition><then pos:line="41" pos:column="89">
				<block pos:line="42" pos:column="33">{
					<expr_stmt><expr><name pos:line="43" pos:column="41">outGuid</name> <op:operator pos:line="43" pos:column="49">=</op:operator> <op:operator pos:line="43" pos:column="51">(</op:operator><op:operator pos:line="43" pos:column="52">(</op:operator><name pos:line="43" pos:column="53">ClassElement</name><op:operator pos:line="43" pos:column="65">)</op:operator><name pos:line="43" pos:column="66">element</name><op:operator pos:line="43" pos:column="73">)</op:operator><op:operator pos:line="43" pos:column="74">.</op:operator><name pos:line="43" pos:column="75">Id</name></expr>;</expr_stmt>
					<return pos:line="44" pos:column="41">return <expr><lit:literal type="boolean" pos:line="44" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="48" pos:column="25">outGuid</name> <op:operator pos:line="48" pos:column="33">=</op:operator> <name><name pos:line="48" pos:column="35">Guid</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">Empty</name></name></expr>;</expr_stmt>
			<return pos:line="49" pos:column="25">return <expr><lit:literal type="boolean" pos:line="49" pos:column="32">false</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="52" pos:column="17">private</specifier> <name pos:line="52" pos:column="25">bool</name></type> <name pos:line="52" pos:column="30">ResolveAccessType</name><parameter_list pos:line="52" pos:column="47">(<param><decl><type><name pos:line="52" pos:column="48">string</name></type> <name pos:line="52" pos:column="55">funcName</name></decl></param><op:operator pos:line="52" pos:column="63">,</op:operator> <param><decl><type><name><name pos:line="52" pos:column="65">ProgramElement</name><index pos:line="52" pos:column="79">[]</index></name></type> <name pos:line="52" pos:column="82">includeElements</name></decl></param><op:operator pos:line="52" pos:column="97">,</op:operator> <param><decl><type><specifier pos:line="52" pos:column="99">out</specifier> <name pos:line="52" pos:column="103">AccessLevel</name></type> <name pos:line="52" pos:column="115">outAccessLevel</name></decl></param>)</parameter_list>
		<block pos:line="53" pos:column="17">{
			<foreach pos:line="54" pos:column="25">foreach(<init><decl><type><name pos:line="54" pos:column="33">ProgramElement</name></type> <name pos:line="54" pos:column="48">element</name> <init pos:line="54" pos:column="56">in <expr><name pos:line="54" pos:column="59">includeElements</name></expr></init></decl></init>)
			<block pos:line="55" pos:column="25">{
				<if pos:line="56" pos:column="33">if<condition pos:line="56" pos:column="35">(<expr><name pos:line="56" pos:column="36">element</name> <op:operator pos:line="56" pos:column="44">is</op:operator> <name pos:line="56" pos:column="47">MethodPrototypeElement</name> <op:operator pos:line="56" pos:column="70">&amp;&amp;</op:operator> <name><name pos:line="56" pos:column="73">element</name><op:operator pos:line="56" pos:column="80">.</op:operator><name pos:line="56" pos:column="81">Name</name></name> <op:operator pos:line="56" pos:column="86">==</op:operator> <name pos:line="56" pos:column="89">funcName</name></expr>)</condition><then pos:line="56" pos:column="98"> 
				<block pos:line="57" pos:column="33">{
					<expr_stmt><expr><name pos:line="58" pos:column="41">outAccessLevel</name> <op:operator pos:line="58" pos:column="56">=</op:operator> <op:operator pos:line="58" pos:column="58">(</op:operator><op:operator pos:line="58" pos:column="59">(</op:operator><name pos:line="58" pos:column="60">MethodPrototypeElement</name><op:operator pos:line="58" pos:column="82">)</op:operator><name pos:line="58" pos:column="83">element</name><op:operator pos:line="58" pos:column="90">)</op:operator><op:operator pos:line="58" pos:column="91">.</op:operator><name pos:line="58" pos:column="92">AccessLevel</name></expr>;</expr_stmt>
					<return pos:line="59" pos:column="41">return <expr><lit:literal type="boolean" pos:line="59" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="63" pos:column="25">outAccessLevel</name> <op:operator pos:line="63" pos:column="40">=</op:operator> <name><name pos:line="63" pos:column="42">AccessLevel</name><op:operator pos:line="63" pos:column="53">.</op:operator><name pos:line="63" pos:column="54">Protected</name></name></expr>;</expr_stmt>
			<return pos:line="64" pos:column="25">return <expr><lit:literal type="boolean" pos:line="64" pos:column="32">false</lit:literal></expr>;</return>
		}</block></function>
		

		<decl_stmt><decl><type><specifier pos:line="68" pos:column="17">public</specifier> <specifier pos:line="68" pos:column="24">virtual</specifier> <name pos:line="68" pos:column="32">string</name></type> <name pos:line="68" pos:column="39">ClassName</name> <block pos:line="68" pos:column="49">{ <function><name pos:line="68" pos:column="51">get</name>;</function> private <function><name pos:line="68" pos:column="64">set</name>;</function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="69" pos:column="17">public</specifier> <specifier pos:line="69" pos:column="24">virtual</specifier> <name><name pos:line="69" pos:column="32">string</name><index pos:line="69" pos:column="38">[]</index></name></type> <name pos:line="69" pos:column="41">IncludeFileNames</name> <block pos:line="69" pos:column="58">{ <function><name pos:line="69" pos:column="60">get</name>;</function> private <function><name pos:line="69" pos:column="73">set</name>;</function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="70" pos:column="17">public</specifier> <specifier pos:line="70" pos:column="24">virtual</specifier> <name pos:line="70" pos:column="32">bool</name></type> <name pos:line="70" pos:column="37">IsResolved</name> <block pos:line="70" pos:column="48">{ <function><name pos:line="70" pos:column="50">get</name>;</function> <function><name pos:line="70" pos:column="55">set</name>;</function> }</block></decl></decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
