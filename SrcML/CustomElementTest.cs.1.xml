<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\Documents\CustomElementTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Documents</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Extensions</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Tools</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Indexer</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">Documents</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name><op:operator pos:line="11" pos:column="20">.</op:operator><name pos:line="11" pos:column="21">Searching</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Parser</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Documents</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Converters</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name><name pos:line="15" pos:column="11">Sando</name><op:operator pos:line="15" pos:column="16">.</op:operator><name pos:line="15" pos:column="17">Indexer</name><op:operator pos:line="15" pos:column="24">.</op:operator><name pos:line="15" pos:column="25">UnitTests</name><op:operator pos:line="15" pos:column="34">.</op:operator><name pos:line="15" pos:column="35">Documents</name></name>
<block pos:line="16" pos:column="1">{
    <class><attribute pos:line="17" pos:column="5">[<expr><name pos:line="17" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">CustomElementTest</name>
    <block pos:line="19" pos:column="5">{

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">LuceneDocToCustomProgramElement</name><parameter_list pos:line="22" pos:column="52">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <comment type="line" pos:line="24" pos:column="13">//test ReadProgramElementFromDocument            </comment>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">customSandoDocument</name> =<init pos:line="25" pos:column="38"> <expr><call><name><name pos:line="25" pos:column="39">MyCustomProgramElementForTesting</name><op:operator pos:line="25" pos:column="71">.</op:operator><name pos:line="25" pos:column="72">GetLuceneDocument</name></name><argument_list pos:line="25" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">customProgramElement</name> =<init pos:line="26" pos:column="39"> <expr><call><name><name pos:line="26" pos:column="40">ConverterFromHitToProgramElement</name><op:operator pos:line="26" pos:column="72">.</op:operator><name pos:line="26" pos:column="73">Create</name></name><argument_list pos:line="26" pos:column="79">(<argument><expr><name pos:line="26" pos:column="80">customSandoDocument</name></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="100">.</op:operator><call><name pos:line="26" pos:column="101">Convert</name><argument_list pos:line="26" pos:column="108">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">myCustomProgramElementForTesting</name> =<init pos:line="27" pos:column="51"> <expr><name pos:line="27" pos:column="52">customProgramElement</name> <op:operator pos:line="27" pos:column="73">as</op:operator> <name pos:line="27" pos:column="76">MyCustomProgramElementForTesting</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">IsTrue</name></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">myCustomProgramElementForTesting</name> <op:operator pos:line="28" pos:column="60">!=</op:operator> <name pos:line="28" pos:column="63">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">IsTrue</name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><call><name><name pos:line="29" pos:column="27">myCustomProgramElementForTesting</name><op:operator pos:line="29" pos:column="59">.</op:operator><name pos:line="29" pos:column="60">A</name><op:operator pos:line="29" pos:column="61">.</op:operator><name pos:line="29" pos:column="62">Equals</name></name><argument_list pos:line="29" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="69">"A's value"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">IsTrue</name></name><argument_list pos:line="30" pos:column="26">(<argument><expr><call><name><name pos:line="30" pos:column="27">myCustomProgramElementForTesting</name><op:operator pos:line="30" pos:column="59">.</op:operator><name pos:line="30" pos:column="60">B</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">Equals</name></name><argument_list pos:line="30" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="69">"B's value"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">IsTrue</name></name><argument_list pos:line="31" pos:column="26">(<argument><expr><call><name><name pos:line="31" pos:column="27">myCustomProgramElementForTesting</name><op:operator pos:line="31" pos:column="59">.</op:operator><name pos:line="31" pos:column="60">C</name><op:operator pos:line="31" pos:column="61">.</op:operator><name pos:line="31" pos:column="62">Equals</name></name><argument_list pos:line="31" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="69">"C's value"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">CustomDocumentToLuceneDocument</name><parameter_list pos:line="37" pos:column="51">()</parameter_list>
        <block pos:line="38" pos:column="9">{
            <comment type="line" pos:line="39" pos:column="13">//test AddDocumentFields</comment>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">customSandoDocument</name> =<init pos:line="40" pos:column="38"> <expr><op:operator pos:line="40" pos:column="39">new</op:operator> <call><name pos:line="40" pos:column="43">SandoDocument</name><argument_list pos:line="40" pos:column="56">(<argument><expr><call><name><name pos:line="40" pos:column="57">MyCustomProgramElementForTesting</name><op:operator pos:line="40" pos:column="89">.</op:operator><name pos:line="40" pos:column="90">GetProgramElement</name></name><argument_list pos:line="40" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">luceneDocumentWithCustomFields</name> =<init pos:line="41" pos:column="49"> <expr><call><name><name pos:line="41" pos:column="50">customSandoDocument</name><op:operator pos:line="41" pos:column="69">.</op:operator><name pos:line="41" pos:column="70">GetDocument</name></name><argument_list pos:line="41" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsTrue</name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">luceneDocumentWithCustomFields</name><op:operator pos:line="42" pos:column="57">!=</op:operator><name pos:line="42" pos:column="59">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">GetCustomDocumentFromFactoryTest</name><parameter_list pos:line="46" pos:column="53">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">element</name> =<init pos:line="48" pos:column="26"> <expr><call><name><name pos:line="48" pos:column="27">DocumentFactory</name><op:operator pos:line="48" pos:column="42">.</op:operator><name pos:line="48" pos:column="43">Create</name></name><argument_list pos:line="48" pos:column="49">(<argument><expr><call><name><name pos:line="48" pos:column="50">MyCustomProgramElementForTesting</name><op:operator pos:line="48" pos:column="82">.</op:operator><name pos:line="48" pos:column="83">GetProgramElement</name></name><argument_list pos:line="48" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">IsTrue</name></name><argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">element</name> <op:operator pos:line="49" pos:column="35">!=</op:operator> <name pos:line="49" pos:column="38">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">RoundTrip</name><parameter_list pos:line="53" pos:column="30">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">element</name> =<init pos:line="55" pos:column="26"> <expr><call><name><name pos:line="55" pos:column="27">DocumentFactory</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">Create</name></name><argument_list pos:line="55" pos:column="49">(<argument><expr><call><name><name pos:line="55" pos:column="50">MyCustomProgramElementForTesting</name><op:operator pos:line="55" pos:column="82">.</op:operator><name pos:line="55" pos:column="83">GetProgramElement</name></name><argument_list pos:line="55" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">generatedDocumentFromElement</name> =<init pos:line="56" pos:column="47"> <expr><call><name><name pos:line="56" pos:column="48">element</name><op:operator pos:line="56" pos:column="55">.</op:operator><name pos:line="56" pos:column="56">GetDocument</name></name><argument_list pos:line="56" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">prefabLuceneDocument</name> =<init pos:line="57" pos:column="39"> <expr><call><name><name pos:line="57" pos:column="40">MyCustomProgramElementForTesting</name><op:operator pos:line="57" pos:column="72">.</op:operator><name pos:line="57" pos:column="73">GetLuceneDocument</name></name><argument_list pos:line="57" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="58" pos:column="13">foreach (<init><decl><type><name pos:line="58" pos:column="22">var</name></type> <name pos:line="58" pos:column="26">property</name> <init pos:line="58" pos:column="35">in <expr><call><name><name pos:line="58" pos:column="38">MyCustomProgramElementForTesting</name><op:operator pos:line="58" pos:column="70">.</op:operator><name pos:line="58" pos:column="71">GetProgramElement</name></name><argument_list pos:line="58" pos:column="88">()</argument_list></call><op:operator pos:line="58" pos:column="90">.</op:operator><call><name pos:line="58" pos:column="91">GetCustomProperties</name><argument_list pos:line="58" pos:column="110">()</argument_list></call></expr></init></decl></init>)
            <block pos:line="59" pos:column="13">{
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><op:operator pos:line="60" pos:column="21">!</op:operator><call><name><name pos:line="60" pos:column="22">property</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">Name</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Equals</name></name><argument_list pos:line="60" pos:column="42">(<argument><expr><name><name pos:line="60" pos:column="43">ProgramElement</name><op:operator pos:line="60" pos:column="57">.</op:operator><name pos:line="60" pos:column="58">CustomTypeTag</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="73">
                <block pos:line="61" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="62" pos:column="21">Field</name></type> <name pos:line="62" pos:column="27">field1</name> =<init pos:line="62" pos:column="35"> <expr><call><name><name pos:line="62" pos:column="36">generatedDocumentFromElement</name><op:operator pos:line="62" pos:column="64">.</op:operator><name pos:line="62" pos:column="65">GetField</name></name><argument_list pos:line="62" pos:column="73">(<argument><expr><name><name pos:line="62" pos:column="74">property</name><op:operator pos:line="62" pos:column="82">.</op:operator><name pos:line="62" pos:column="83">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="63" pos:column="21">Field</name></type> <name pos:line="63" pos:column="27">field2</name> =<init pos:line="63" pos:column="35"> <expr><call><name><name pos:line="63" pos:column="36">prefabLuceneDocument</name><op:operator pos:line="63" pos:column="56">.</op:operator><name pos:line="63" pos:column="57">GetField</name></name><argument_list pos:line="63" pos:column="65">(<argument><expr><name><name pos:line="63" pos:column="66">property</name><op:operator pos:line="63" pos:column="74">.</op:operator><name pos:line="63" pos:column="75">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="64" pos:column="21">Assert</name><op:operator pos:line="64" pos:column="27">.</op:operator><name pos:line="64" pos:column="28">IsTrue</name></name><argument_list pos:line="64" pos:column="34">(<argument><expr><call><name><name pos:line="64" pos:column="35">field1</name><op:operator pos:line="64" pos:column="41">.</op:operator><name pos:line="64" pos:column="42">StringValue</name></name><argument_list pos:line="64" pos:column="53">()</argument_list></call><op:operator pos:line="64" pos:column="55">.</op:operator><call><name pos:line="64" pos:column="56">Equals</name><argument_list pos:line="64" pos:column="62">(<argument><expr><call><name><name pos:line="64" pos:column="63">field2</name><op:operator pos:line="64" pos:column="69">.</op:operator><name pos:line="64" pos:column="70">StringValue</name></name><argument_list pos:line="64" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <specifier pos:line="70" pos:column="16">static</specifier> <name pos:line="70" pos:column="23">void</name></type> <name pos:line="70" pos:column="28">InitializeExtensionPoints</name><parameter_list pos:line="70" pos:column="53">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">ExtensionPointsRepository</name></type> <name pos:line="72" pos:column="39">extensionPointsRepository</name> =<init pos:line="72" pos:column="66"> <expr><name><name pos:line="72" pos:column="67">ExtensionPointsRepository</name><op:operator pos:line="72" pos:column="92">.</op:operator><name pos:line="72" pos:column="93">Instance</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">generator</name> =<init pos:line="73" pos:column="28"> <expr><op:operator pos:line="73" pos:column="29">new</op:operator> <call><name><name pos:line="73" pos:column="33">ABB</name><op:operator pos:line="73" pos:column="36">.</op:operator><name pos:line="73" pos:column="37">SrcML</name><op:operator pos:line="73" pos:column="42">.</op:operator><name pos:line="73" pos:column="43">SrcMLGenerator</name></name><argument_list pos:line="73" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="58">@"LIBS\SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">extensionPointsRepository</name><op:operator pos:line="74" pos:column="38">.</op:operator><name pos:line="74" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="74" pos:column="67">(<argument><expr><op:operator pos:line="74" pos:column="68">new</op:operator> <call><name><name pos:line="74" pos:column="72">List</name><argument_list pos:line="74" pos:column="76">&lt;<argument><name pos:line="74" pos:column="77">string</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="84">()</argument_list></call> <block pos:line="74" pos:column="87">{ <expr><lit:literal type="string" pos:line="74" pos:column="89">".cs"</lit:literal></expr> }</block></expr></argument><op:operator pos:line="74" pos:column="96">,</op:operator> <argument><expr><op:operator pos:line="74" pos:column="98">new</op:operator> <call><name pos:line="74" pos:column="102">SrcMLCSharpParser</name><argument_list pos:line="74" pos:column="119">(<argument><expr><name pos:line="74" pos:column="120">generator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">extensionPointsRepository</name><op:operator pos:line="75" pos:column="38">.</op:operator><name pos:line="75" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="75" pos:column="67">(<argument><expr><op:operator pos:line="75" pos:column="68">new</op:operator> <call><name><name pos:line="75" pos:column="72">List</name><argument_list pos:line="75" pos:column="76">&lt;<argument><name pos:line="75" pos:column="77">string</name></argument>&gt;</argument_list></name><argument_list pos:line="75" pos:column="84">()</argument_list></call> <block pos:line="75" pos:column="87">{ <expr><lit:literal type="string" pos:line="75" pos:column="89">".h"</lit:literal></expr><op:operator pos:line="75" pos:column="93">,</op:operator> <expr><lit:literal type="string" pos:line="75" pos:column="95">".cpp"</lit:literal></expr><op:operator pos:line="75" pos:column="101">,</op:operator> <expr><lit:literal type="string" pos:line="75" pos:column="103">".cxx"</lit:literal></expr> }</block></expr></argument><op:operator pos:line="75" pos:column="111">,</op:operator> <argument><expr><op:operator pos:line="75" pos:column="113">new</op:operator> <call><name pos:line="75" pos:column="117">SrcMLCppParser</name><argument_list pos:line="75" pos:column="131">(<argument><expr><name pos:line="75" pos:column="132">generator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">extensionPointsRepository</name><op:operator pos:line="76" pos:column="38">.</op:operator><name pos:line="76" pos:column="39">RegisterWordSplitterImplementation</name></name><argument_list pos:line="76" pos:column="73">(<argument><expr><op:operator pos:line="76" pos:column="74">new</op:operator> <call><name pos:line="76" pos:column="78">WordSplitter</name><argument_list pos:line="76" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>           
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">extensionPointsRepository</name><op:operator pos:line="77" pos:column="38">.</op:operator><name pos:line="77" pos:column="39">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="77" pos:column="81">(<argument><expr><op:operator pos:line="77" pos:column="82">new</op:operator> <call><name pos:line="77" pos:column="86">QueryWeightsSupplier</name><argument_list pos:line="77" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
