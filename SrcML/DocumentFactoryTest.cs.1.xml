<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\Documents\DocumentFactoryTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Contracts</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">NUnit</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Indexer</name><op:operator pos:line="5" pos:column="20">.</op:operator><name pos:line="5" pos:column="21">Documents</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">UnitTestHelpers</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Indexer</name><op:operator pos:line="8" pos:column="24">.</op:operator><name pos:line="8" pos:column="25">UnitTests</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
	<specifier pos:line="11" pos:column="9">public</specifier> class <name pos:line="11" pos:column="22">DocumentFactoryTest</name>
	<block pos:line="12" pos:column="9">{
    	<function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="14" pos:column="17">public</specifier> <name pos:line="14" pos:column="24">void</name></type> <name pos:line="14" pos:column="29">DocumentFactory_CreateReturnsClassDocumentForValidClassElement</name><parameter_list pos:line="14" pos:column="91">()</parameter_list>
		<block pos:line="15" pos:column="17">{
			<try pos:line="16" pos:column="25">try
			<block pos:line="17" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="18" pos:column="33">ProgramElement</name></type> <name pos:line="18" pos:column="48">programElement</name> =<init pos:line="18" pos:column="64"> <expr><call><name><name pos:line="18" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="18" pos:column="92">.</op:operator><name pos:line="18" pos:column="93">GetSampleClassElement</name></name><argument_list pos:line="18" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="19" pos:column="33">SandoDocument</name></type> <name pos:line="19" pos:column="47">sandoDocument</name> =<init pos:line="19" pos:column="62"> <expr><call><name><name pos:line="19" pos:column="63">DocumentFactory</name><op:operator pos:line="19" pos:column="78">.</op:operator><name pos:line="19" pos:column="79">Create</name></name><argument_list pos:line="19" pos:column="85">(<argument><expr><name pos:line="19" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="20" pos:column="33">Assert</name><op:operator pos:line="20" pos:column="39">.</op:operator><name pos:line="20" pos:column="40">True</name></name><argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">sandoDocument</name> <op:operator pos:line="20" pos:column="59">!=</op:operator> <name pos:line="20" pos:column="62">null</name></expr></argument><op:operator pos:line="20" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="20" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="21" pos:column="33">Assert</name><op:operator pos:line="21" pos:column="39">.</op:operator><name pos:line="21" pos:column="40">True</name></name><argument_list pos:line="21" pos:column="44">(<argument><expr><name pos:line="21" pos:column="45">sandoDocument</name> <op:operator pos:line="21" pos:column="59">is</op:operator> <name pos:line="21" pos:column="62">ClassDocument</name></expr></argument><op:operator pos:line="21" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="21" pos:column="77">"ClassDocument must be returned for ClassElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="23" pos:column="25">catch(<param><decl><type><name pos:line="23" pos:column="31">Exception</name></type> <name pos:line="23" pos:column="41">ex</name></decl></param>)
			<block pos:line="24" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="25" pos:column="33">Assert</name><op:operator pos:line="25" pos:column="39">.</op:operator><name pos:line="25" pos:column="40">Fail</name></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name><name pos:line="25" pos:column="45">ex</name><op:operator pos:line="25" pos:column="47">.</op:operator><name pos:line="25" pos:column="48">Message</name></name> <op:operator pos:line="25" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="58">". "</lit:literal> <op:operator pos:line="25" pos:column="63">+</op:operator> <name><name pos:line="25" pos:column="65">ex</name><op:operator pos:line="25" pos:column="67">.</op:operator><name pos:line="25" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">DocumentFactory_CreateReturnsStructDocumentForValidStructElement</name><parameter_list pos:line="30" pos:column="85">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <try pos:line="32" pos:column="13">try
            <block pos:line="33" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="34" pos:column="17">ProgramElement</name></type> <name pos:line="34" pos:column="32">programElement</name> =<init pos:line="34" pos:column="48"> <expr><call><name><name pos:line="34" pos:column="49">SampleProgramElementFactory</name><op:operator pos:line="34" pos:column="76">.</op:operator><name pos:line="34" pos:column="77">GetSampleStructElement</name></name><argument_list pos:line="34" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">SandoDocument</name></type> <name pos:line="35" pos:column="31">sandoDocument</name> =<init pos:line="35" pos:column="46"> <expr><call><name><name pos:line="35" pos:column="47">DocumentFactory</name><op:operator pos:line="35" pos:column="62">.</op:operator><name pos:line="35" pos:column="63">Create</name></name><argument_list pos:line="35" pos:column="69">(<argument><expr><name pos:line="35" pos:column="70">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">Assert</name><op:operator pos:line="36" pos:column="23">.</op:operator><name pos:line="36" pos:column="24">True</name></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">sandoDocument</name> <op:operator pos:line="36" pos:column="43">!=</op:operator> <name pos:line="36" pos:column="46">null</name></expr></argument><op:operator pos:line="36" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="36" pos:column="52">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="37" pos:column="17">Assert</name><op:operator pos:line="37" pos:column="23">.</op:operator><name pos:line="37" pos:column="24">True</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">sandoDocument</name> <op:operator pos:line="37" pos:column="43">is</op:operator> <name pos:line="37" pos:column="46">StructDocument</name></expr></argument><op:operator pos:line="37" pos:column="60">,</op:operator> <argument><expr><lit:literal type="string" pos:line="37" pos:column="62">"StructDocument must be returned for StructElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="39" pos:column="13">catch (<param><decl><type><name pos:line="39" pos:column="20">Exception</name></type> <name pos:line="39" pos:column="30">ex</name></decl></param>)
            <block pos:line="40" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">Assert</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">Fail</name></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name><name pos:line="41" pos:column="29">ex</name><op:operator pos:line="41" pos:column="31">.</op:operator><name pos:line="41" pos:column="32">Message</name></name> <op:operator pos:line="41" pos:column="40">+</op:operator> <lit:literal type="string" pos:line="41" pos:column="42">". "</lit:literal> <op:operator pos:line="41" pos:column="47">+</op:operator> <name><name pos:line="41" pos:column="49">ex</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

		<function><type><attribute pos:line="45" pos:column="17">[<expr><name pos:line="45" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="46" pos:column="17">public</specifier> <name pos:line="46" pos:column="24">void</name></type> <name pos:line="46" pos:column="29">DocumentFactory_CreateReturnsCommentDocumentForValidCommentElement</name><parameter_list pos:line="46" pos:column="95">()</parameter_list>
		<block pos:line="47" pos:column="17">{
			<try pos:line="48" pos:column="25">try
			<block pos:line="49" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="50" pos:column="33">ProgramElement</name></type> <name pos:line="50" pos:column="48">programElement</name> =<init pos:line="50" pos:column="64"> <expr><call><name><name pos:line="50" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="50" pos:column="92">.</op:operator><name pos:line="50" pos:column="93">GetSampleCommentElement</name></name><argument_list pos:line="50" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="51" pos:column="33">SandoDocument</name></type> <name pos:line="51" pos:column="47">sandoDocument</name> =<init pos:line="51" pos:column="62"> <expr><call><name><name pos:line="51" pos:column="63">DocumentFactory</name><op:operator pos:line="51" pos:column="78">.</op:operator><name pos:line="51" pos:column="79">Create</name></name><argument_list pos:line="51" pos:column="85">(<argument><expr><name pos:line="51" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="52" pos:column="33">Assert</name><op:operator pos:line="52" pos:column="39">.</op:operator><name pos:line="52" pos:column="40">True</name></name><argument_list pos:line="52" pos:column="44">(<argument><expr><name pos:line="52" pos:column="45">sandoDocument</name> <op:operator pos:line="52" pos:column="59">!=</op:operator> <name pos:line="52" pos:column="62">null</name></expr></argument><op:operator pos:line="52" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="52" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="53" pos:column="33">Assert</name><op:operator pos:line="53" pos:column="39">.</op:operator><name pos:line="53" pos:column="40">True</name></name><argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">sandoDocument</name> <op:operator pos:line="53" pos:column="59">is</op:operator> <name pos:line="53" pos:column="62">CommentDocument</name></expr></argument><op:operator pos:line="53" pos:column="77">,</op:operator> <argument><expr><lit:literal type="string" pos:line="53" pos:column="79">"CommentDocument must be returned for CommentElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="55" pos:column="25">catch(<param><decl><type><name pos:line="55" pos:column="31">Exception</name></type> <name pos:line="55" pos:column="41">ex</name></decl></param>)
			<block pos:line="56" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="57" pos:column="33">Assert</name><op:operator pos:line="57" pos:column="39">.</op:operator><name pos:line="57" pos:column="40">Fail</name></name><argument_list pos:line="57" pos:column="44">(<argument><expr><name><name pos:line="57" pos:column="45">ex</name><op:operator pos:line="57" pos:column="47">.</op:operator><name pos:line="57" pos:column="48">Message</name></name> <op:operator pos:line="57" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="57" pos:column="58">". "</lit:literal> <op:operator pos:line="57" pos:column="63">+</op:operator> <name><name pos:line="57" pos:column="65">ex</name><op:operator pos:line="57" pos:column="67">.</op:operator><name pos:line="57" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="61" pos:column="17">[<expr><name pos:line="61" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="62" pos:column="17">public</specifier> <name pos:line="62" pos:column="24">void</name></type> <name pos:line="62" pos:column="29">DocumentFactory_CreateReturnsEnumDocumentForValidEnumElement</name><parameter_list pos:line="62" pos:column="89">()</parameter_list>
		<block pos:line="63" pos:column="17">{
			<try pos:line="64" pos:column="25">try
			<block pos:line="65" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="66" pos:column="33">ProgramElement</name></type> <name pos:line="66" pos:column="48">programElement</name> =<init pos:line="66" pos:column="64"> <expr><call><name><name pos:line="66" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="66" pos:column="92">.</op:operator><name pos:line="66" pos:column="93">GetSampleEnumElement</name></name><argument_list pos:line="66" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="67" pos:column="33">SandoDocument</name></type> <name pos:line="67" pos:column="47">sandoDocument</name> =<init pos:line="67" pos:column="62"> <expr><call><name><name pos:line="67" pos:column="63">DocumentFactory</name><op:operator pos:line="67" pos:column="78">.</op:operator><name pos:line="67" pos:column="79">Create</name></name><argument_list pos:line="67" pos:column="85">(<argument><expr><name pos:line="67" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="68" pos:column="33">Assert</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">True</name></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">sandoDocument</name> <op:operator pos:line="68" pos:column="59">!=</op:operator> <name pos:line="68" pos:column="62">null</name></expr></argument><op:operator pos:line="68" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="68" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="69" pos:column="33">Assert</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">True</name></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">sandoDocument</name> <op:operator pos:line="69" pos:column="59">is</op:operator> <name pos:line="69" pos:column="62">EnumDocument</name></expr></argument><op:operator pos:line="69" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="69" pos:column="76">"EnumDocument must be returned for EnumElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="71" pos:column="25">catch(<param><decl><type><name pos:line="71" pos:column="31">Exception</name></type> <name pos:line="71" pos:column="41">ex</name></decl></param>)
			<block pos:line="72" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="73" pos:column="33">Assert</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">Fail</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><name><name pos:line="73" pos:column="45">ex</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">Message</name></name> <op:operator pos:line="73" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="73" pos:column="58">". "</lit:literal> <op:operator pos:line="73" pos:column="63">+</op:operator> <name><name pos:line="73" pos:column="65">ex</name><op:operator pos:line="73" pos:column="67">.</op:operator><name pos:line="73" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="77" pos:column="17">[<expr><name pos:line="77" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="78" pos:column="17">public</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">DocumentFactory_CreateReturnsFieldDocumentForValidFieldElement</name><parameter_list pos:line="78" pos:column="91">()</parameter_list>
		<block pos:line="79" pos:column="17">{
			<try pos:line="80" pos:column="25">try
			<block pos:line="81" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="82" pos:column="33">ProgramElement</name></type> <name pos:line="82" pos:column="48">programElement</name> =<init pos:line="82" pos:column="64"> <expr><call><name><name pos:line="82" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="82" pos:column="92">.</op:operator><name pos:line="82" pos:column="93">GetSampleFieldElement</name></name><argument_list pos:line="82" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="83" pos:column="33">SandoDocument</name></type> <name pos:line="83" pos:column="47">sandoDocument</name> =<init pos:line="83" pos:column="62"> <expr><call><name><name pos:line="83" pos:column="63">DocumentFactory</name><op:operator pos:line="83" pos:column="78">.</op:operator><name pos:line="83" pos:column="79">Create</name></name><argument_list pos:line="83" pos:column="85">(<argument><expr><name pos:line="83" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">Assert</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">True</name></name><argument_list pos:line="84" pos:column="44">(<argument><expr><name pos:line="84" pos:column="45">sandoDocument</name> <op:operator pos:line="84" pos:column="59">!=</op:operator> <name pos:line="84" pos:column="62">null</name></expr></argument><op:operator pos:line="84" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="84" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="85" pos:column="33">Assert</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">True</name></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name pos:line="85" pos:column="45">sandoDocument</name> <op:operator pos:line="85" pos:column="59">is</op:operator> <name pos:line="85" pos:column="62">FieldDocument</name></expr></argument><op:operator pos:line="85" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="85" pos:column="77">"FieldDocument must be returned for FieldElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="87" pos:column="25">catch(<param><decl><type><name pos:line="87" pos:column="31">Exception</name></type> <name pos:line="87" pos:column="41">ex</name></decl></param>)
			<block pos:line="88" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="89" pos:column="33">Assert</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">Fail</name></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name><name pos:line="89" pos:column="45">ex</name><op:operator pos:line="89" pos:column="47">.</op:operator><name pos:line="89" pos:column="48">Message</name></name> <op:operator pos:line="89" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="89" pos:column="58">". "</lit:literal> <op:operator pos:line="89" pos:column="63">+</op:operator> <name><name pos:line="89" pos:column="65">ex</name><op:operator pos:line="89" pos:column="67">.</op:operator><name pos:line="89" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="93" pos:column="17">[<expr><name pos:line="93" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="94" pos:column="17">public</specifier> <name pos:line="94" pos:column="24">void</name></type> <name pos:line="94" pos:column="29">DocumentFactory_CreateReturnsMethodDocumentForValidMethodElement</name><parameter_list pos:line="94" pos:column="93">()</parameter_list>
		<block pos:line="95" pos:column="17">{
			<try pos:line="96" pos:column="25">try
			<block pos:line="97" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="98" pos:column="33">ProgramElement</name></type> <name pos:line="98" pos:column="48">programElement</name> =<init pos:line="98" pos:column="64"> <expr><call><name><name pos:line="98" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="98" pos:column="92">.</op:operator><name pos:line="98" pos:column="93">GetSampleMethodElement</name></name><argument_list pos:line="98" pos:column="115">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="99" pos:column="33">SandoDocument</name></type> <name pos:line="99" pos:column="47">sandoDocument</name> =<init pos:line="99" pos:column="62"> <expr><call><name><name pos:line="99" pos:column="63">DocumentFactory</name><op:operator pos:line="99" pos:column="78">.</op:operator><name pos:line="99" pos:column="79">Create</name></name><argument_list pos:line="99" pos:column="85">(<argument><expr><name pos:line="99" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="100" pos:column="33">Assert</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">True</name></name><argument_list pos:line="100" pos:column="44">(<argument><expr><name pos:line="100" pos:column="45">sandoDocument</name> <op:operator pos:line="100" pos:column="59">!=</op:operator> <name pos:line="100" pos:column="62">null</name></expr></argument><op:operator pos:line="100" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="100" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="101" pos:column="33">Assert</name><op:operator pos:line="101" pos:column="39">.</op:operator><name pos:line="101" pos:column="40">True</name></name><argument_list pos:line="101" pos:column="44">(<argument><expr><name pos:line="101" pos:column="45">sandoDocument</name> <op:operator pos:line="101" pos:column="59">is</op:operator> <name pos:line="101" pos:column="62">MethodDocument</name></expr></argument><op:operator pos:line="101" pos:column="76">,</op:operator> <argument><expr><lit:literal type="string" pos:line="101" pos:column="78">"MethodDocument must be returned for MethodElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="103" pos:column="25">catch(<param><decl><type><name pos:line="103" pos:column="31">Exception</name></type> <name pos:line="103" pos:column="41">ex</name></decl></param>)
			<block pos:line="104" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">Assert</name><op:operator pos:line="105" pos:column="39">.</op:operator><name pos:line="105" pos:column="40">Fail</name></name><argument_list pos:line="105" pos:column="44">(<argument><expr><name><name pos:line="105" pos:column="45">ex</name><op:operator pos:line="105" pos:column="47">.</op:operator><name pos:line="105" pos:column="48">Message</name></name> <op:operator pos:line="105" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="105" pos:column="58">". "</lit:literal> <op:operator pos:line="105" pos:column="63">+</op:operator> <name><name pos:line="105" pos:column="65">ex</name><op:operator pos:line="105" pos:column="67">.</op:operator><name pos:line="105" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="109" pos:column="17">[<expr><name pos:line="109" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="110" pos:column="17">public</specifier> <name pos:line="110" pos:column="24">void</name></type> <name pos:line="110" pos:column="29">DocumentFactory_CreateReturnsPropertyDocumentForValidPropertyElement</name><parameter_list pos:line="110" pos:column="97">()</parameter_list>
		<block pos:line="111" pos:column="17">{
			<try pos:line="112" pos:column="25">try
			<block pos:line="113" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="114" pos:column="33">ProgramElement</name></type> <name pos:line="114" pos:column="48">programElement</name> =<init pos:line="114" pos:column="64"> <expr><call><name><name pos:line="114" pos:column="65">SampleProgramElementFactory</name><op:operator pos:line="114" pos:column="92">.</op:operator><name pos:line="114" pos:column="93">GetSamplePropertyElement</name></name><argument_list pos:line="114" pos:column="117">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="115" pos:column="33">SandoDocument</name></type> <name pos:line="115" pos:column="47">sandoDocument</name> =<init pos:line="115" pos:column="62"> <expr><call><name><name pos:line="115" pos:column="63">DocumentFactory</name><op:operator pos:line="115" pos:column="78">.</op:operator><name pos:line="115" pos:column="79">Create</name></name><argument_list pos:line="115" pos:column="85">(<argument><expr><name pos:line="115" pos:column="86">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">Assert</name><op:operator pos:line="116" pos:column="39">.</op:operator><name pos:line="116" pos:column="40">True</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">sandoDocument</name> <op:operator pos:line="116" pos:column="59">!=</op:operator> <name pos:line="116" pos:column="62">null</name></expr></argument><op:operator pos:line="116" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="116" pos:column="68">"Null returned from DocumentFactory!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="117" pos:column="33">Assert</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">True</name></name><argument_list pos:line="117" pos:column="44">(<argument><expr><name pos:line="117" pos:column="45">sandoDocument</name> <op:operator pos:line="117" pos:column="59">is</op:operator> <name pos:line="117" pos:column="62">PropertyDocument</name></expr></argument><op:operator pos:line="117" pos:column="78">,</op:operator> <argument><expr><lit:literal type="string" pos:line="117" pos:column="80">"PropertyDocument must be returned for PropertyElement object!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="119" pos:column="25">catch(<param><decl><type><name pos:line="119" pos:column="31">Exception</name></type> <name pos:line="119" pos:column="41">ex</name></decl></param>)
			<block pos:line="120" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">Assert</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">Fail</name></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name><name pos:line="121" pos:column="45">ex</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">Message</name></name> <op:operator pos:line="121" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="58">". "</lit:literal> <op:operator pos:line="121" pos:column="63">+</op:operator> <name><name pos:line="121" pos:column="65">ex</name><op:operator pos:line="121" pos:column="67">.</op:operator><name pos:line="121" pos:column="68">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="125" pos:column="17">[<expr><name pos:line="125" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="126" pos:column="17">public</specifier> <name pos:line="126" pos:column="24">void</name></type> <name pos:line="126" pos:column="29">DocumentFactory_CreateThrowsContractExceptionIfProgramElementIsNull</name><parameter_list pos:line="126" pos:column="96">()</parameter_list>
		<block pos:line="127" pos:column="17">{
			<try pos:line="128" pos:column="25">try
			<block pos:line="129" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="130" pos:column="33">SandoDocument</name></type> <name pos:line="130" pos:column="47">sandoDocument</name> =<init pos:line="130" pos:column="62"> <expr><call><name><name pos:line="130" pos:column="63">DocumentFactory</name><op:operator pos:line="130" pos:column="78">.</op:operator><name pos:line="130" pos:column="79">Create</name></name><argument_list pos:line="130" pos:column="85">(<argument><expr><name pos:line="130" pos:column="86">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="132" pos:column="25">catch
			<block pos:line="133" pos:column="25">{
				<comment type="line" pos:line="134" pos:column="33">//contract exception catched here</comment>
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="136" pos:column="25">Assert</name><op:operator pos:line="136" pos:column="31">.</op:operator><name pos:line="136" pos:column="32">True</name></name><argument_list pos:line="136" pos:column="36">(<argument><expr><name pos:line="136" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="136" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="136" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="139" pos:column="17">[<expr><name pos:line="139" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="140" pos:column="17">public</specifier> <name pos:line="140" pos:column="24">void</name></type> <name pos:line="140" pos:column="29">DocumentFactory_CreateThrowsContractExceptionIfUnsportedProgramElementSubclassObjectPassed</name><parameter_list pos:line="140" pos:column="119">()</parameter_list>
		<block pos:line="141" pos:column="17">{
			<try pos:line="142" pos:column="25">try
			<block pos:line="143" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="144" pos:column="33">SandoDocument</name></type> <name pos:line="144" pos:column="47">sandoDocument</name> =<init pos:line="144" pos:column="62"> <expr><call><name><name pos:line="144" pos:column="63">DocumentFactory</name><op:operator pos:line="144" pos:column="78">.</op:operator><name pos:line="144" pos:column="79">Create</name></name><argument_list pos:line="144" pos:column="85">(<argument><expr><op:operator pos:line="144" pos:column="86">new</op:operator> <call><name pos:line="144" pos:column="90">TestElement</name><argument_list pos:line="144" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="102">"name"</lit:literal></expr></argument><op:operator pos:line="144" pos:column="108">,</op:operator> <argument><expr><lit:literal type="number" pos:line="144" pos:column="110">12</lit:literal></expr></argument><op:operator pos:line="144" pos:column="112">,</op:operator> <argument><expr><lit:literal type="string" pos:line="144" pos:column="114">"full path"</lit:literal></expr></argument><op:operator pos:line="144" pos:column="125">,</op:operator> <argument><expr><lit:literal type="string" pos:line="144" pos:column="127">"snippet"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="146" pos:column="25">catch
			<block pos:line="147" pos:column="25">{
				<comment type="line" pos:line="148" pos:column="33">//contract exception catched here</comment>
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="150" pos:column="25">Assert</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">True</name></name><argument_list pos:line="150" pos:column="36">(<argument><expr><name pos:line="150" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="150" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="150" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="153" pos:column="17">[<expr><name pos:line="153" pos:column="18">SetUp</name></expr>]</attribute>
		<specifier pos:line="154" pos:column="17">public</specifier> <name pos:line="154" pos:column="24">void</name></type> <name pos:line="154" pos:column="29">ResetContract</name><parameter_list pos:line="154" pos:column="42">()</parameter_list>
		<block pos:line="155" pos:column="17">{
			<expr_stmt><expr><name pos:line="156" pos:column="25">contractFailed</name> <op:operator pos:line="156" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="156" pos:column="42">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="157" pos:column="25">Contract</name><op:operator pos:line="157" pos:column="33">.</op:operator><name pos:line="157" pos:column="34">ContractFailed</name></name> <op:operator pos:line="157" pos:column="49">+=</op:operator> <op:operator pos:line="157" pos:column="52">(</op:operator><name pos:line="157" pos:column="53">sender</name><op:operator pos:line="157" pos:column="59">,</op:operator> <name pos:line="157" pos:column="61">e</name><op:operator pos:line="157" pos:column="62">)</op:operator> =&gt;
			<block pos:line="158" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="159" pos:column="33">e</name><op:operator pos:line="159" pos:column="34">.</op:operator><name pos:line="159" pos:column="35">SetHandled</name></name><argument_list pos:line="159" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="160" pos:column="33">e</name><op:operator pos:line="160" pos:column="34">.</op:operator><name pos:line="160" pos:column="35">SetUnwind</name></name><argument_list pos:line="160" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="161" pos:column="33">contractFailed</name> <op:operator pos:line="161" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="161" pos:column="50">true</lit:literal></expr>;</expr_stmt>
			}</block></expr>;</expr_stmt>
		}</block></function>

		<class><specifier pos:line="165" pos:column="17">private</specifier> class <name pos:line="165" pos:column="31">TestElement</name> <super pos:line="165" pos:column="43">: <name pos:line="165" pos:column="45">ProgramElement</name></super>
		<block pos:line="166" pos:column="17">{
			<constructor><specifier pos:line="167" pos:column="25">public</specifier> <name pos:line="167" pos:column="32">TestElement</name><parameter_list pos:line="167" pos:column="43">(<param><decl><type><name pos:line="167" pos:column="44">string</name></type> <name pos:line="167" pos:column="51">name</name></decl></param><op:operator pos:line="167" pos:column="55">,</op:operator> <param><decl><type><name pos:line="167" pos:column="57">int</name></type> <name pos:line="167" pos:column="61">definitionLineNumber</name></decl></param><op:operator pos:line="167" pos:column="81">,</op:operator> <param><decl><type><name pos:line="167" pos:column="83">string</name></type> <name pos:line="167" pos:column="90">fullFilePath</name></decl></param><op:operator pos:line="167" pos:column="102">,</op:operator> <param><decl><type><name pos:line="167" pos:column="104">string</name></type> <name pos:line="167" pos:column="111">snippet</name></decl></param>)</parameter_list>
				<member_list pos:line="168" pos:column="33">: <call><name pos:line="168" pos:column="35">base</name><argument_list pos:line="168" pos:column="39">(<argument><expr><name pos:line="168" pos:column="40">name</name></expr></argument><op:operator pos:line="168" pos:column="44">,</op:operator> <argument><expr><name pos:line="168" pos:column="46">definitionLineNumber</name></expr></argument><op:operator pos:line="168" pos:column="66">,</op:operator> <argument><expr><name pos:line="168" pos:column="68">fullFilePath</name></expr></argument><op:operator pos:line="168" pos:column="80">,</op:operator> <argument><expr><name pos:line="168" pos:column="82">snippet</name></expr></argument>)</argument_list></call>
			</member_list><block pos:line="169" pos:column="25">{
			}</block></constructor>

			<decl_stmt><decl><type><specifier pos:line="172" pos:column="25">public</specifier> <specifier pos:line="172" pos:column="32">override</specifier> <name pos:line="172" pos:column="41">ProgramElementType</name></type> <name pos:line="172" pos:column="60">ProgramElementType</name>
			<block pos:line="173" pos:column="25">{
				<function><name pos:line="174" pos:column="33">get</name> <block pos:line="174" pos:column="37">{ <throw pos:line="174" pos:column="39">throw <expr><op:operator pos:line="174" pos:column="45">new</op:operator> <call><name pos:line="174" pos:column="49">NotImplementedException</name><argument_list pos:line="174" pos:column="72">()</argument_list></call></expr>;</throw> }</block></function>
			}</block></decl></decl_stmt>
		}</block></class>

		<decl_stmt><decl><type><specifier pos:line="178" pos:column="17">private</specifier> <name pos:line="178" pos:column="25">bool</name></type> <name pos:line="178" pos:column="30">contractFailed</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
