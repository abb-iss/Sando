<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\DocumentIndexer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Diagnostics</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Contracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Threading</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Lucene</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Net</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Analysis</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Lucene</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Net</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Documents</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Lucene</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Net</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Index</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Lucene</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Net</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">QueryParsers</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Lucene</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Net</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Search</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Lucene</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Net</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Store</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Core</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Core</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">Extensions</name><op:operator pos:line="13" pos:column="28">.</op:operator><name pos:line="13" pos:column="29">Logging</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">Indexer</name><op:operator pos:line="15" pos:column="20">.</op:operator><name pos:line="15" pos:column="21">Documents</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Indexer</name><op:operator pos:line="16" pos:column="20">.</op:operator><name pos:line="16" pos:column="21">Exceptions</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Translation</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">Sando</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">Indexer</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Documents</name><op:operator pos:line="19" pos:column="30">.</op:operator><name pos:line="19" pos:column="31">Converters</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">ABB</name><op:operator pos:line="20" pos:column="10">.</op:operator><name pos:line="20" pos:column="11">SrcML</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">VisualStudio</name><op:operator pos:line="20" pos:column="29">.</op:operator><name pos:line="20" pos:column="30">SolutionMonitor</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">Sando</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">Core</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">Sando</name><op:operator pos:line="23" pos:column="16">.</op:operator><name pos:line="23" pos:column="17">Indexer</name></name>
<block pos:line="24" pos:column="1">{
	<class><specifier pos:line="25" pos:column="9">public</specifier> class <name pos:line="25" pos:column="22">DocumentIndexer</name> <super pos:line="25" pos:column="38">: <name pos:line="25" pos:column="40">IDisposable</name></super>
	<block pos:line="26" pos:column="9">{
        <constructor><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">DocumentIndexer</name><parameter_list pos:line="27" pos:column="31">(<param><decl><type><name pos:line="27" pos:column="32">TimeSpan</name><type:modifier pos:line="27" pos:column="40">?</type:modifier></type> <name pos:line="27" pos:column="42">refreshIndexSearcherThreadInterval</name> =<init pos:line="27" pos:column="78"> <expr><name pos:line="27" pos:column="79">null</name></expr></init></decl></param><op:operator pos:line="27" pos:column="83">,</op:operator> <param><decl><type><name pos:line="27" pos:column="85">TimeSpan</name><type:modifier pos:line="27" pos:column="93">?</type:modifier></type> <name pos:line="27" pos:column="95">commitChangesThreadInterval</name> =<init pos:line="27" pos:column="124"> <expr><name pos:line="27" pos:column="125">null</name></expr></init></decl></param> )</parameter_list>
		<block pos:line="28" pos:column="17">{
			<try pos:line="29" pos:column="25">try
			<block pos:line="30" pos:column="25">{
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">solutionKey</name> =<init pos:line="31" pos:column="34"> <expr><call><name><name pos:line="31" pos:column="35">ServiceLocator</name><op:operator pos:line="31" pos:column="49">.</op:operator><name><name pos:line="31" pos:column="50">Resolve</name><argument_list pos:line="31" pos:column="57">&lt;<argument><name pos:line="31" pos:column="58">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="31" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>			
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">var</name></type> <name pos:line="32" pos:column="21">directoryInfo</name> =<init pos:line="32" pos:column="36"> <expr><op:operator pos:line="32" pos:column="37">new</op:operator> <call><name><name pos:line="32" pos:column="41">System</name><op:operator pos:line="32" pos:column="47">.</op:operator><name pos:line="32" pos:column="48">IO</name><op:operator pos:line="32" pos:column="50">.</op:operator><name pos:line="32" pos:column="51">DirectoryInfo</name></name><argument_list pos:line="32" pos:column="64">(<argument><expr><call><name><name pos:line="32" pos:column="65">PathManager</name><op:operator pos:line="32" pos:column="76">.</op:operator><name pos:line="32" pos:column="77">Instance</name><op:operator pos:line="32" pos:column="85">.</op:operator><name pos:line="32" pos:column="86">GetIndexPath</name></name><argument_list pos:line="32" pos:column="98">(<argument><expr><name pos:line="32" pos:column="99">solutionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="33" pos:column="33">LuceneIndexesDirectory</name> <op:operator pos:line="33" pos:column="56">=</op:operator> <call><name><name pos:line="33" pos:column="58">FSDirectory</name><op:operator pos:line="33" pos:column="69">.</op:operator><name pos:line="33" pos:column="70">Open</name></name><argument_list pos:line="33" pos:column="74">(<argument><expr><name pos:line="33" pos:column="75">directoryInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">Analyzer</name> <op:operator pos:line="34" pos:column="42">=</op:operator> <call><name><name pos:line="34" pos:column="44">ServiceLocator</name><op:operator pos:line="34" pos:column="58">.</op:operator><name><name pos:line="34" pos:column="59">Resolve</name><argument_list pos:line="34" pos:column="66">&lt;<argument><name pos:line="34" pos:column="67">Analyzer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="35" pos:column="17">IndexWriter</name> <op:operator pos:line="35" pos:column="29">=</op:operator> <op:operator pos:line="35" pos:column="31">new</op:operator> <call><name pos:line="35" pos:column="35">IndexWriter</name><argument_list pos:line="35" pos:column="46">(<argument><expr><name pos:line="35" pos:column="47">LuceneIndexesDirectory</name></expr></argument><op:operator pos:line="35" pos:column="69">,</op:operator> <argument><expr><name pos:line="35" pos:column="71">Analyzer</name></expr></argument><op:operator pos:line="35" pos:column="79">,</op:operator> <argument><expr><name><name pos:line="35" pos:column="81">IndexWriter</name><op:operator pos:line="35" pos:column="92">.</op:operator><name pos:line="35" pos:column="93">MaxFieldLength</name><op:operator pos:line="35" pos:column="107">.</op:operator><name pos:line="35" pos:column="108">LIMITED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <decl_stmt><decl><type><name pos:line="36" pos:column="29">var</name></type> <name pos:line="36" pos:column="33">indexReader</name> =<init pos:line="36" pos:column="46"> <expr><call><name><name pos:line="36" pos:column="47">IndexWriter</name><op:operator pos:line="36" pos:column="58">.</op:operator><name pos:line="36" pos:column="59">GetReader</name></name><argument_list pos:line="36" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="37" pos:column="33">_indexSearcher</name> <op:operator pos:line="37" pos:column="48">=</op:operator> <op:operator pos:line="37" pos:column="50">new</op:operator> <call><name pos:line="37" pos:column="54">IndexSearcher</name><argument_list pos:line="37" pos:column="67">(<argument><expr><name pos:line="37" pos:column="68">indexReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="38" pos:column="17">QueryParser</name> <op:operator pos:line="38" pos:column="29">=</op:operator> <op:operator pos:line="38" pos:column="31">new</op:operator> <call><name pos:line="38" pos:column="35">QueryParser</name><argument_list pos:line="38" pos:column="46">(<argument><expr><name><name pos:line="38" pos:column="47">Lucene</name><op:operator pos:line="38" pos:column="53">.</op:operator><name pos:line="38" pos:column="54">Net</name><op:operator pos:line="38" pos:column="57">.</op:operator><name pos:line="38" pos:column="58">Util</name><op:operator pos:line="38" pos:column="62">.</op:operator><name pos:line="38" pos:column="63">Version</name><op:operator pos:line="38" pos:column="70">.</op:operator><name pos:line="38" pos:column="71">LUCENE_29</name></name></expr></argument><op:operator pos:line="38" pos:column="80">,</op:operator> <argument><expr><call><name><name pos:line="38" pos:column="82">Configuration</name><op:operator pos:line="38" pos:column="95">.</op:operator><name pos:line="38" pos:column="96">Configuration</name><op:operator pos:line="38" pos:column="109">.</op:operator><name pos:line="38" pos:column="110">GetValue</name></name><argument_list pos:line="38" pos:column="118">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="119">"DefaultSearchFieldName"</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="38" pos:column="144">,</op:operator> <argument><expr><name pos:line="38" pos:column="146">Analyzer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <if pos:line="40" pos:column="29">if <condition pos:line="40" pos:column="32">(<expr><op:operator pos:line="40" pos:column="33">!</op:operator><name><name pos:line="40" pos:column="34">refreshIndexSearcherThreadInterval</name><op:operator pos:line="40" pos:column="68">.</op:operator><name pos:line="40" pos:column="69">HasValue</name></name></expr>)</condition><then pos:line="40" pos:column="78"> 
                    <expr_stmt><expr><name pos:line="41" pos:column="21">refreshIndexSearcherThreadInterval</name> <op:operator pos:line="41" pos:column="56">=</op:operator> <call><name><name pos:line="41" pos:column="58">TimeSpan</name><op:operator pos:line="41" pos:column="66">.</op:operator><name pos:line="41" pos:column="67">FromSeconds</name></name><argument_list pos:line="41" pos:column="78">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="79">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			    <decl_stmt><decl><type><name pos:line="42" pos:column="29">var</name></type> <name pos:line="42" pos:column="33">refreshIndexSearcherBackgroundWorker</name> =<init pos:line="42" pos:column="71"> <expr><op:operator pos:line="42" pos:column="72">new</op:operator> <name pos:line="42" pos:column="76">BackgroundWorker</name> <block pos:line="42" pos:column="93">{<expr><name pos:line="42" pos:column="94">WorkerReportsProgress</name> <op:operator pos:line="42" pos:column="116">=</op:operator> <lit:literal type="boolean" pos:line="42" pos:column="118">false</lit:literal></expr><op:operator pos:line="42" pos:column="123">,</op:operator> <expr><name pos:line="42" pos:column="125">WorkerSupportsCancellation</name> <op:operator pos:line="42" pos:column="152">=</op:operator> <lit:literal type="boolean" pos:line="42" pos:column="154">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="43" pos:column="17">refreshIndexSearcherBackgroundWorker</name><op:operator pos:line="43" pos:column="53">.</op:operator><name pos:line="43" pos:column="54">DoWork</name></name> <op:operator pos:line="43" pos:column="61">+=</op:operator> <name pos:line="43" pos:column="64">PeriodicallyRefreshIndexSearcherIfNeeded</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="44" pos:column="17">refreshIndexSearcherBackgroundWorker</name><op:operator pos:line="44" pos:column="53">.</op:operator><name pos:line="44" pos:column="54">RunWorkerAsync</name></name><argument_list pos:line="44" pos:column="68">(<argument><expr><name pos:line="44" pos:column="69">refreshIndexSearcherThreadInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name><name pos:line="46" pos:column="21">commitChangesThreadInterval</name><op:operator pos:line="46" pos:column="48">.</op:operator><name pos:line="46" pos:column="49">HasValue</name></name></expr>)</condition><then pos:line="46" pos:column="58">
			    <block pos:line="47" pos:column="29">{
			        <decl_stmt><decl><type><name pos:line="48" pos:column="33">var</name></type> <name pos:line="48" pos:column="37">commitChangesBackgroundWorker</name> =<init pos:line="48" pos:column="68"> <expr><op:operator pos:line="48" pos:column="69">new</op:operator> <name pos:line="48" pos:column="73">BackgroundWorker</name>
			            <block pos:line="49" pos:column="37">{
			                <expr><name pos:line="50" pos:column="41">WorkerReportsProgress</name> <op:operator pos:line="50" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="50" pos:column="65">false</lit:literal></expr><op:operator pos:line="50" pos:column="70">,</op:operator>
			                <expr><name pos:line="51" pos:column="41">WorkerSupportsCancellation</name> <op:operator pos:line="51" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="51" pos:column="70">false</lit:literal></expr>
			            }</block></expr></init></decl>;</decl_stmt>
			        <expr_stmt><expr><name><name pos:line="53" pos:column="33">commitChangesBackgroundWorker</name><op:operator pos:line="53" pos:column="62">.</op:operator><name pos:line="53" pos:column="63">DoWork</name></name> <op:operator pos:line="53" pos:column="70">+=</op:operator> <name pos:line="53" pos:column="73">PeriodicallyCommitChangesIfNeeded</name></expr>;</expr_stmt>
			        <expr_stmt><expr><call><name><name pos:line="54" pos:column="33">commitChangesBackgroundWorker</name><op:operator pos:line="54" pos:column="62">.</op:operator><name pos:line="54" pos:column="63">RunWorkerAsync</name></name><argument_list pos:line="54" pos:column="77">(<argument><expr><name pos:line="54" pos:column="78">commitChangesThreadInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    }</block></then>
                <else pos:line="56" pos:column="17">else
                <block pos:line="57" pos:column="17">{
                    <expr_stmt><expr><name pos:line="58" pos:column="21">_synchronousCommits</name> <op:operator pos:line="58" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="58" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
			}</block>
			<catch pos:line="61" pos:column="25">catch(<param><decl><type><name pos:line="61" pos:column="31">CorruptIndexException</name></type> <name pos:line="61" pos:column="53">corruptIndexEx</name></decl></param>)
			<block pos:line="62" pos:column="25">{
                <expr_stmt><expr><call><name><name pos:line="63" pos:column="17">FileLogger</name><op:operator pos:line="63" pos:column="27">.</op:operator><name pos:line="63" pos:column="28">DefaultLogger</name><op:operator pos:line="63" pos:column="41">.</op:operator><name pos:line="63" pos:column="42">Error</name></name><argument_list pos:line="63" pos:column="47">(<argument><expr><call><name><name pos:line="63" pos:column="48">ExceptionFormatter</name><op:operator pos:line="63" pos:column="66">.</op:operator><name pos:line="63" pos:column="67">CreateMessage</name></name><argument_list pos:line="63" pos:column="80">(<argument><expr><name pos:line="63" pos:column="81">corruptIndexEx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw pos:line="64" pos:column="33">throw <expr><op:operator pos:line="64" pos:column="39">new</op:operator> <call><name pos:line="64" pos:column="43">IndexerException</name><argument_list pos:line="64" pos:column="59">(<argument><expr><name><name pos:line="64" pos:column="60">TranslationCode</name><op:operator pos:line="64" pos:column="75">.</op:operator><name pos:line="64" pos:column="76">Exception_Indexer_LuceneIndexIsCorrupt</name></name></expr></argument><op:operator pos:line="64" pos:column="114">,</op:operator> <argument><expr><name pos:line="64" pos:column="116">corruptIndexEx</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch>
			<catch pos:line="66" pos:column="25">catch(<param><decl><type><name pos:line="66" pos:column="31">LockObtainFailedException</name></type> <name pos:line="66" pos:column="57">lockObtainFailedEx</name></decl></param>)
			<block pos:line="67" pos:column="25">{
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">FileLogger</name><op:operator pos:line="68" pos:column="27">.</op:operator><name pos:line="68" pos:column="28">DefaultLogger</name><op:operator pos:line="68" pos:column="41">.</op:operator><name pos:line="68" pos:column="42">Error</name></name><argument_list pos:line="68" pos:column="47">(<argument><expr><call><name><name pos:line="68" pos:column="48">ExceptionFormatter</name><op:operator pos:line="68" pos:column="66">.</op:operator><name pos:line="68" pos:column="67">CreateMessage</name></name><argument_list pos:line="68" pos:column="80">(<argument><expr><name pos:line="68" pos:column="81">lockObtainFailedEx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw pos:line="69" pos:column="33">throw <expr><op:operator pos:line="69" pos:column="39">new</op:operator> <call><name pos:line="69" pos:column="43">IndexerException</name><argument_list pos:line="69" pos:column="59">(<argument><expr><name><name pos:line="69" pos:column="60">TranslationCode</name><op:operator pos:line="69" pos:column="75">.</op:operator><name pos:line="69" pos:column="76">Exception_Indexer_LuceneIndexAlreadyOpened</name></name></expr></argument><op:operator pos:line="69" pos:column="118">,</op:operator> <argument><expr><name pos:line="69" pos:column="120">lockObtainFailedEx</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch>
			<catch pos:line="71" pos:column="25">catch(<param><decl><type><name><name pos:line="71" pos:column="31">System</name><op:operator pos:line="71" pos:column="37">.</op:operator><name pos:line="71" pos:column="38">IO</name><op:operator pos:line="71" pos:column="40">.</op:operator><name pos:line="71" pos:column="41">IOException</name></name></type> <name pos:line="71" pos:column="53">ioEx</name></decl></param>)
			<block pos:line="72" pos:column="25">{
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">FileLogger</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">DefaultLogger</name><op:operator pos:line="73" pos:column="41">.</op:operator><name pos:line="73" pos:column="42">Error</name></name><argument_list pos:line="73" pos:column="47">(<argument><expr><call><name><name pos:line="73" pos:column="48">ExceptionFormatter</name><op:operator pos:line="73" pos:column="66">.</op:operator><name pos:line="73" pos:column="67">CreateMessage</name></name><argument_list pos:line="73" pos:column="80">(<argument><expr><name pos:line="73" pos:column="81">ioEx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw pos:line="74" pos:column="33">throw <expr><op:operator pos:line="74" pos:column="39">new</op:operator> <call><name pos:line="74" pos:column="43">IndexerException</name><argument_list pos:line="74" pos:column="59">(<argument><expr><name><name pos:line="74" pos:column="60">TranslationCode</name><op:operator pos:line="74" pos:column="75">.</op:operator><name pos:line="74" pos:column="76">Exception_General_IOException</name></name></expr></argument><op:operator pos:line="74" pos:column="105">,</op:operator> <argument><expr><name pos:line="74" pos:column="107">ioEx</name></expr></argument><op:operator pos:line="74" pos:column="111">,</op:operator> <argument><expr><name><name pos:line="74" pos:column="113">ioEx</name><op:operator pos:line="74" pos:column="117">.</op:operator><name pos:line="74" pos:column="118">Message</name></name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch></try>
		}</block></constructor>

        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">virtual</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">AddDocument</name><parameter_list pos:line="78" pos:column="40">(<param><decl><type><name pos:line="78" pos:column="41">SandoDocument</name></type> <name pos:line="78" pos:column="55">sandoDocument</name></decl></param>)</parameter_list>
		<block pos:line="79" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">Contract</name><op:operator pos:line="80" pos:column="33">.</op:operator><name pos:line="80" pos:column="34">Requires</name></name><argument_list pos:line="80" pos:column="42">(<argument><expr><name pos:line="80" pos:column="43">sandoDocument</name> <op:operator pos:line="80" pos:column="57">!=</op:operator> <name pos:line="80" pos:column="60">null</name></expr></argument><op:operator pos:line="80" pos:column="64">,</op:operator> <argument><expr><lit:literal type="string" pos:line="80" pos:column="66">"DocumentIndexer:AddDocument - sandoDocument cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <lock pos:line="82" pos:column="13">lock (<param><decl><type><name pos:line="82" pos:column="19">_lock</name></type></decl></param>)
            <block pos:line="83" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">IndexWriter</name><op:operator pos:line="84" pos:column="28">.</op:operator><name pos:line="84" pos:column="29">AddDocument</name></name><argument_list pos:line="84" pos:column="40">(<argument><expr><call><name><name pos:line="84" pos:column="41">sandoDocument</name><op:operator pos:line="84" pos:column="54">.</op:operator><name pos:line="84" pos:column="55">GetDocument</name></name><argument_list pos:line="84" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="85" pos:column="17">if<condition pos:line="85" pos:column="19">(<expr><name pos:line="85" pos:column="20">_synchronousCommits</name></expr>)</condition><then pos:line="85" pos:column="40">
                    <expr_stmt><expr><call><name pos:line="86" pos:column="21">CommitChanges</name><argument_list pos:line="86" pos:column="34">()</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="87" pos:column="17">else
                    <expr_stmt><expr><name pos:line="88" pos:column="21">_hasIndexChanged</name> <op:operator pos:line="88" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="88" pos:column="40">true</lit:literal></expr>;</expr_stmt></else></if>
            }</block></lock>
		}</block></function>

        <function><type><specifier pos:line="92" pos:column="9">public</specifier> <specifier pos:line="92" pos:column="16">virtual</specifier> <name pos:line="92" pos:column="24">void</name></type> <name pos:line="92" pos:column="29">DeleteDocuments</name><parameter_list pos:line="92" pos:column="44">(<param><decl><type><name pos:line="92" pos:column="45">string</name></type> <name pos:line="92" pos:column="52">fullFilePath</name></decl></param><op:operator pos:line="92" pos:column="64">,</op:operator> <param><decl><type><name pos:line="92" pos:column="66">bool</name></type> <name pos:line="92" pos:column="71">commitImmediately</name> =<init pos:line="92" pos:column="90"> <expr><lit:literal type="boolean" pos:line="92" pos:column="91">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><call><name><name pos:line="94" pos:column="17">String</name><op:operator pos:line="94" pos:column="23">.</op:operator><name pos:line="94" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="94" pos:column="42">(<argument><expr><name pos:line="94" pos:column="43">fullFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="57">
                <return pos:line="95" pos:column="17">return;</return></then></if>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">term</name> =<init pos:line="96" pos:column="23"> <expr><op:operator pos:line="96" pos:column="24">new</op:operator> <call><name pos:line="96" pos:column="28">Term</name><argument_list pos:line="96" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="33">"FullFilePath"</lit:literal></expr></argument><op:operator pos:line="96" pos:column="47">,</op:operator> <argument><expr><call><name><name pos:line="96" pos:column="49">ConverterFromHitToProgramElement</name><op:operator pos:line="96" pos:column="81">.</op:operator><name pos:line="96" pos:column="82">StandardizeFilePath</name></name><argument_list pos:line="96" pos:column="101">(<argument><expr><name pos:line="96" pos:column="102">fullFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="97" pos:column="13">lock (<param><decl><type><name pos:line="97" pos:column="19">_lock</name></type></decl></param>)
            <block pos:line="98" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="99" pos:column="17">IndexWriter</name><op:operator pos:line="99" pos:column="28">.</op:operator><name pos:line="99" pos:column="29">DeleteDocuments</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><op:operator pos:line="99" pos:column="45">new</op:operator> <call><name pos:line="99" pos:column="49">TermQuery</name><argument_list pos:line="99" pos:column="58">(<argument><expr><name pos:line="99" pos:column="59">term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">_synchronousCommits</name> <op:operator pos:line="100" pos:column="41">||</op:operator> <name pos:line="100" pos:column="44">commitImmediately</name></expr>)</condition><then pos:line="100" pos:column="62">
                    <expr_stmt><expr><call><name pos:line="101" pos:column="21">CommitChanges</name><argument_list pos:line="101" pos:column="34">()</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="102" pos:column="17">else
                    <expr_stmt><expr><name pos:line="103" pos:column="21">_hasIndexChanged</name> <op:operator pos:line="103" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="103" pos:column="40">true</lit:literal></expr>;</expr_stmt></else></if>
            }</block></lock>
        }</block></function>

		<function><type><specifier pos:line="107" pos:column="17">public</specifier> <name pos:line="107" pos:column="24">void</name></type> <name pos:line="107" pos:column="29">ClearIndex</name><parameter_list pos:line="107" pos:column="39">()</parameter_list>
		<block pos:line="108" pos:column="17">{
		    <lock pos:line="109" pos:column="21">lock (<param><decl><type><name pos:line="109" pos:column="27">_lock</name></type></decl></param>)
		    <block pos:line="110" pos:column="21">{
		        <expr_stmt><expr><call><name><name pos:line="111" pos:column="25">IndexWriter</name><op:operator pos:line="111" pos:column="36">.</op:operator><name pos:line="111" pos:column="37">GetDirectory</name></name><argument_list pos:line="111" pos:column="49">()</argument_list></call><op:operator pos:line="111" pos:column="51">.</op:operator><call><name pos:line="111" pos:column="52">EnsureOpen</name><argument_list pos:line="111" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name pos:line="112" pos:column="25">IndexWriter</name><op:operator pos:line="112" pos:column="36">.</op:operator><name pos:line="112" pos:column="37">DeleteAll</name></name><argument_list pos:line="112" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="113" pos:column="17">CommitChanges</name><argument_list pos:line="113" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		    }</block></lock>
		}</block></function>

        <function><type><specifier pos:line="117" pos:column="9">public</specifier> <name><name pos:line="117" pos:column="16">List</name><argument_list pos:line="117" pos:column="20">&lt;<argument><name><name pos:line="117" pos:column="21">Tuple</name><argument_list pos:line="117" pos:column="26">&lt;<argument><name pos:line="117" pos:column="27">Document</name></argument>, <argument><name pos:line="117" pos:column="37">float</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="117" pos:column="45">Search</name><parameter_list pos:line="117" pos:column="51">(<param><decl><type><name pos:line="117" pos:column="52">Query</name></type> <name pos:line="117" pos:column="58">query</name></decl></param><op:operator pos:line="117" pos:column="63">,</op:operator> <param><decl><type><name pos:line="117" pos:column="65">TopScoreDocCollector</name></type> <name pos:line="117" pos:column="86">collector</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <lock pos:line="119" pos:column="13">lock (<param><decl><type><name pos:line="119" pos:column="19">_lock</name></type></decl></param>)
            <block pos:line="120" pos:column="13">{
                <try pos:line="121" pos:column="17">try
                <block pos:line="122" pos:column="17">{
                    <return pos:line="123" pos:column="21">return <expr><call><name pos:line="123" pos:column="28">RunSearch</name><argument_list pos:line="123" pos:column="37">(<argument><expr><name pos:line="123" pos:column="38">query</name></expr></argument><op:operator pos:line="123" pos:column="43">,</op:operator> <argument><expr><name pos:line="123" pos:column="45">collector</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block>
                <catch pos:line="125" pos:column="17">catch (<param><decl><type><name pos:line="125" pos:column="24">AlreadyClosedException</name></type></decl></param>)
                <block pos:line="126" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="127" pos:column="21">UpdateSearcher</name><argument_list pos:line="127" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="128" pos:column="21">return <expr><call><name pos:line="128" pos:column="28">RunSearch</name><argument_list pos:line="128" pos:column="37">(<argument><expr><name pos:line="128" pos:column="38">query</name></expr></argument><op:operator pos:line="128" pos:column="43">,</op:operator> <argument><expr><name pos:line="128" pos:column="45">collector</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></catch></try>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">public</specifier> <name pos:line="133" pos:column="16">int</name></type> <name pos:line="133" pos:column="20">GetNumberOfIndexedDocuments</name><parameter_list pos:line="133" pos:column="47">()</parameter_list>
        <block pos:line="134" pos:column="9">{
            <return pos:line="135" pos:column="13">return <expr><call><name><name pos:line="135" pos:column="20">_indexSearcher</name><op:operator pos:line="135" pos:column="34">.</op:operator><name pos:line="135" pos:column="35">GetIndexReader</name></name><argument_list pos:line="135" pos:column="49">()</argument_list></call><op:operator pos:line="135" pos:column="51">.</op:operator><call><name pos:line="135" pos:column="52">NumDocs</name><argument_list pos:line="135" pos:column="59">()</argument_list></call></expr>;</return>
        }</block></function>

	    <function><type><specifier pos:line="138" pos:column="13">private</specifier> <name><name pos:line="138" pos:column="21">List</name><argument_list pos:line="138" pos:column="25">&lt;<argument><name><name pos:line="138" pos:column="26">Tuple</name><argument_list pos:line="138" pos:column="31">&lt;<argument><name pos:line="138" pos:column="32">Document</name></argument>, <argument><name pos:line="138" pos:column="42">float</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="138" pos:column="50">RunSearch</name><parameter_list pos:line="138" pos:column="59">(<param><decl><type><name pos:line="138" pos:column="60">Query</name></type> <name pos:line="138" pos:column="66">query</name></decl></param><op:operator pos:line="138" pos:column="71">,</op:operator> <param><decl><type><name pos:line="138" pos:column="73">TopScoreDocCollector</name></type> <name pos:line="138" pos:column="94">collector</name></decl></param>)</parameter_list>
	    <block pos:line="139" pos:column="13">{
	        <expr_stmt><expr><call><name><name pos:line="140" pos:column="17">_indexSearcher</name><op:operator pos:line="140" pos:column="31">.</op:operator><name pos:line="140" pos:column="32">Search</name></name><argument_list pos:line="140" pos:column="38">(<argument><expr><name pos:line="140" pos:column="39">query</name></expr></argument><op:operator pos:line="140" pos:column="44">,</op:operator> <argument><expr><name pos:line="140" pos:column="46">collector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <decl_stmt><decl><type><name pos:line="142" pos:column="17">var</name></type> <name pos:line="142" pos:column="21">hits</name> =<init pos:line="142" pos:column="27"> <expr><call><name><name pos:line="142" pos:column="28">collector</name><op:operator pos:line="142" pos:column="37">.</op:operator><name pos:line="142" pos:column="38">TopDocs</name></name><argument_list pos:line="142" pos:column="45">()</argument_list></call><op:operator pos:line="142" pos:column="47">.</op:operator><name pos:line="142" pos:column="48">ScoreDocs</name></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="143" pos:column="17">var</name></type> <name pos:line="143" pos:column="21">documents</name> =<init pos:line="143" pos:column="32">
	            <expr><call><name><name pos:line="144" pos:column="21">hits</name><op:operator pos:line="144" pos:column="25">.</op:operator><name pos:line="144" pos:column="26">AsEnumerable</name></name><argument_list pos:line="144" pos:column="38">()</argument_list></call><op:operator pos:line="144" pos:column="40">.</op:operator><call><name pos:line="144" pos:column="41">Select</name><argument_list pos:line="144" pos:column="47">(<argument><expr><name pos:line="144" pos:column="48">h</name> <op:operator pos:line="144" pos:column="50">=&gt;</op:operator> <op:operator pos:line="144" pos:column="53">new</op:operator> <call><name><name pos:line="144" pos:column="57">Tuple</name><argument_list pos:line="144" pos:column="62">&lt;<argument><name pos:line="144" pos:column="63">Document</name></argument>, <argument><name pos:line="144" pos:column="73">float</name></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="79">(<argument><expr><call><name><name pos:line="144" pos:column="80">_indexSearcher</name><op:operator pos:line="144" pos:column="94">.</op:operator><name pos:line="144" pos:column="95">Doc</name></name><argument_list pos:line="144" pos:column="98">(<argument><expr><name><name pos:line="144" pos:column="99">h</name><op:operator pos:line="144" pos:column="100">.</op:operator><name pos:line="144" pos:column="101">doc</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="144" pos:column="105">,</op:operator> <argument><expr><name><name pos:line="144" pos:column="107">h</name><op:operator pos:line="144" pos:column="108">.</op:operator><name pos:line="144" pos:column="109">score</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="116">.</op:operator><call><name pos:line="144" pos:column="117">ToList</name><argument_list pos:line="144" pos:column="123">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <return pos:line="145" pos:column="17">return <expr><name pos:line="145" pos:column="24">documents</name></expr>;</return>
	    }</block></function>

        <function><type><specifier pos:line="148" pos:column="9">private</specifier> <name pos:line="148" pos:column="17">void</name></type> <name pos:line="148" pos:column="22">CommitChanges</name><parameter_list pos:line="148" pos:column="35">()</parameter_list>
        <block pos:line="149" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">IndexWriter</name><op:operator pos:line="150" pos:column="24">.</op:operator><name pos:line="150" pos:column="25">Commit</name></name><argument_list pos:line="150" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="151" pos:column="13">UpdateSearcher</name><argument_list pos:line="151" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="152" pos:column="13">_hasIndexChanged</name> <op:operator pos:line="152" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="152" pos:column="32">false</lit:literal></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="155" pos:column="17">private</specifier> <name pos:line="155" pos:column="25">void</name></type> <name pos:line="155" pos:column="30">UpdateSearcher</name><parameter_list pos:line="155" pos:column="44">()</parameter_list>
		<block pos:line="156" pos:column="17">{
		    <try pos:line="157" pos:column="21">try
		    <block pos:line="158" pos:column="21">{
		        <decl_stmt><decl><type><name pos:line="159" pos:column="25">var</name></type> <name pos:line="159" pos:column="29">oldReader</name> =<init pos:line="159" pos:column="40"> <expr><call><name><name pos:line="159" pos:column="41">_indexSearcher</name><op:operator pos:line="159" pos:column="55">.</op:operator><name pos:line="159" pos:column="56">GetIndexReader</name></name><argument_list pos:line="159" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		        <decl_stmt><decl><type><name pos:line="160" pos:column="25">var</name></type> <name pos:line="160" pos:column="29">newReader</name> =<init pos:line="160" pos:column="40"> <expr><call><name><name pos:line="160" pos:column="41">oldReader</name><op:operator pos:line="160" pos:column="50">.</op:operator><name pos:line="160" pos:column="51">Reopen</name></name><argument_list pos:line="160" pos:column="57">(<argument><expr><lit:literal type="boolean" pos:line="160" pos:column="58">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        <if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><name pos:line="161" pos:column="29">newReader</name> <op:operator pos:line="161" pos:column="39">!=</op:operator> <name pos:line="161" pos:column="42">oldReader</name></expr>)</condition><then pos:line="161" pos:column="52">
		        <block pos:line="162" pos:column="25">{
		            <comment type="line" pos:line="163" pos:column="29">//_indexSearcher.Close(); - don't need this, because we create IndexSearcher by passing the IndexReader to it, so Close do nothing</comment>
		            <expr_stmt><expr><call><name><name pos:line="164" pos:column="29">oldReader</name><op:operator pos:line="164" pos:column="38">.</op:operator><name pos:line="164" pos:column="39">Close</name></name><argument_list pos:line="164" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		            <expr_stmt><expr><name pos:line="165" pos:column="29">_indexSearcher</name> <op:operator pos:line="165" pos:column="44">=</op:operator> <op:operator pos:line="165" pos:column="46">new</op:operator> <call><name pos:line="165" pos:column="50">IndexSearcher</name><argument_list pos:line="165" pos:column="63">(<argument><expr><name pos:line="165" pos:column="64">newReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block>
            <catch pos:line="168" pos:column="13">catch (<param><decl><type><name pos:line="168" pos:column="20">AlreadyClosedException</name></type></decl></param>)
		    <block pos:line="169" pos:column="21">{
		        <decl_stmt><decl><type><name pos:line="170" pos:column="25">var</name></type> <name pos:line="170" pos:column="29">indexReader</name> =<init pos:line="170" pos:column="42"> <expr><call><name><name pos:line="170" pos:column="43">IndexWriter</name><op:operator pos:line="170" pos:column="54">.</op:operator><name pos:line="170" pos:column="55">GetReader</name></name><argument_list pos:line="170" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="171" pos:column="17">_indexSearcher</name> <op:operator pos:line="171" pos:column="32">=</op:operator> <op:operator pos:line="171" pos:column="34">new</op:operator> <call><name pos:line="171" pos:column="38">IndexSearcher</name><argument_list pos:line="171" pos:column="51">(<argument><expr><name pos:line="171" pos:column="52">indexReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></catch></try>
		}</block></function>

        <function><type><specifier pos:line="175" pos:column="9">private</specifier> <name pos:line="175" pos:column="17">void</name></type> <name pos:line="175" pos:column="22">PeriodicallyCommitChangesIfNeeded</name><parameter_list pos:line="175" pos:column="55">(<param><decl><type><name pos:line="175" pos:column="56">object</name></type> <name pos:line="175" pos:column="63">sender</name></decl></param><op:operator pos:line="175" pos:column="69">,</op:operator> <param><decl><type><name pos:line="175" pos:column="71">DoWorkEventArgs</name></type> <name pos:line="175" pos:column="87">args</name></decl></param>)</parameter_list>
        <block pos:line="176" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">backgroundThreadInterval</name> =<init pos:line="177" pos:column="43"> <expr><name><name pos:line="177" pos:column="44">args</name><op:operator pos:line="177" pos:column="48">.</op:operator><name pos:line="177" pos:column="49">Argument</name></name></expr></init></decl>;</decl_stmt>	        
            <while pos:line="178" pos:column="13">while <condition pos:line="178" pos:column="19">(<expr><op:operator pos:line="178" pos:column="20">!</op:operator><name pos:line="178" pos:column="21">_disposed</name></expr>)</condition>
            <block pos:line="179" pos:column="13">{
                <lock pos:line="180" pos:column="17">lock (<param><decl><type><name pos:line="180" pos:column="23">_lock</name></type></decl></param>)
                <block pos:line="181" pos:column="17">{
                    <if pos:line="182" pos:column="21">if <condition pos:line="182" pos:column="24">(<expr><name pos:line="182" pos:column="25">_hasIndexChanged</name></expr>)</condition><then pos:line="182" pos:column="42">
                        <expr_stmt><expr><call><name pos:line="183" pos:column="25">CommitChanges</name><argument_list pos:line="183" pos:column="38">()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></lock>
                <expr_stmt><expr><call><name><name pos:line="185" pos:column="17">Thread</name><op:operator pos:line="185" pos:column="23">.</op:operator><name pos:line="185" pos:column="24">Sleep</name></name><argument_list pos:line="185" pos:column="29">(<argument><expr><call><name><name pos:line="185" pos:column="30">Convert</name><op:operator pos:line="185" pos:column="37">.</op:operator><name pos:line="185" pos:column="38">ToInt32</name></name><argument_list pos:line="185" pos:column="45">(<argument><expr><op:operator pos:line="185" pos:column="46">(</op:operator><op:operator pos:line="185" pos:column="47">(</op:operator><name pos:line="185" pos:column="48">TimeSpan</name><op:operator pos:line="185" pos:column="56">)</op:operator><name pos:line="185" pos:column="57">backgroundThreadInterval</name><op:operator pos:line="185" pos:column="81">)</op:operator><op:operator pos:line="185" pos:column="82">.</op:operator><name pos:line="185" pos:column="83">TotalMilliseconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></function>

	    <function><type><specifier pos:line="189" pos:column="13">private</specifier> <name pos:line="189" pos:column="21">void</name></type> <name pos:line="189" pos:column="26">PeriodicallyRefreshIndexSearcherIfNeeded</name><parameter_list pos:line="189" pos:column="66">(<param><decl><type><name pos:line="189" pos:column="67">object</name></type> <name pos:line="189" pos:column="74">sender</name></decl></param><op:operator pos:line="189" pos:column="80">,</op:operator> <param><decl><type><name pos:line="189" pos:column="82">DoWorkEventArgs</name></type> <name pos:line="189" pos:column="98">args</name></decl></param>)</parameter_list>
	    <block pos:line="190" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">backgroundThreadInterval</name> =<init pos:line="191" pos:column="43"> <expr><name><name pos:line="191" pos:column="44">args</name><op:operator pos:line="191" pos:column="48">.</op:operator><name pos:line="191" pos:column="49">Argument</name></name></expr></init></decl>;</decl_stmt>	        
	        <while pos:line="192" pos:column="17">while <condition pos:line="192" pos:column="23">(<expr><op:operator pos:line="192" pos:column="24">!</op:operator><name pos:line="192" pos:column="25">_disposed</name></expr>)</condition>
	        <block pos:line="193" pos:column="17">{
	            <lock pos:line="194" pos:column="21">lock (<param><decl><type><name pos:line="194" pos:column="27">_lock</name></type></decl></param>)
	            <block pos:line="195" pos:column="21">{
	                <if pos:line="196" pos:column="25">if <condition pos:line="196" pos:column="28">(<expr><op:operator pos:line="196" pos:column="29">!</op:operator><call><name pos:line="196" pos:column="30">IsUsable</name><argument_list pos:line="196" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="196" pos:column="41">
	                <block pos:line="197" pos:column="25">{
	                    <expr_stmt><expr><call><name pos:line="198" pos:column="29">UpdateSearcher</name><argument_list pos:line="198" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	                }</block></then></if>
	            }</block></lock>
                <expr_stmt><expr><call><name><name pos:line="201" pos:column="17">Thread</name><op:operator pos:line="201" pos:column="23">.</op:operator><name pos:line="201" pos:column="24">Sleep</name></name><argument_list pos:line="201" pos:column="29">(<argument><expr><call><name><name pos:line="201" pos:column="30">Convert</name><op:operator pos:line="201" pos:column="37">.</op:operator><name pos:line="201" pos:column="38">ToInt32</name></name><argument_list pos:line="201" pos:column="45">(<argument><expr><op:operator pos:line="201" pos:column="46">(</op:operator><op:operator pos:line="201" pos:column="47">(</op:operator><name pos:line="201" pos:column="48">TimeSpan</name><op:operator pos:line="201" pos:column="56">)</op:operator><name pos:line="201" pos:column="57">backgroundThreadInterval</name><op:operator pos:line="201" pos:column="81">)</op:operator><op:operator pos:line="201" pos:column="82">.</op:operator><name pos:line="201" pos:column="83">TotalMilliseconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
	    }</block></function>

	    <function><type><specifier pos:line="205" pos:column="13">private</specifier> <name pos:line="205" pos:column="21">bool</name></type> <name pos:line="205" pos:column="26">IsUsable</name><parameter_list pos:line="205" pos:column="34">()</parameter_list>
        <block pos:line="206" pos:column="9">{
            <try pos:line="207" pos:column="13">try
            <block pos:line="208" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">_indexSearcher</name><op:operator pos:line="209" pos:column="31">.</op:operator><name pos:line="209" pos:column="32">Search</name></name><argument_list pos:line="209" pos:column="38">(<argument><expr><op:operator pos:line="209" pos:column="39">new</op:operator> <call><name pos:line="209" pos:column="43">TermQuery</name><argument_list pos:line="209" pos:column="52">(<argument><expr><op:operator pos:line="209" pos:column="53">new</op:operator> <call><name pos:line="209" pos:column="57">Term</name><argument_list pos:line="209" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="62">"asdf"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="209" pos:column="70">,</op:operator> <argument><expr><lit:literal type="number" pos:line="209" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="211" pos:column="13">catch (<param><decl><type><name pos:line="211" pos:column="20">AlreadyClosedException</name></type></decl></param>)
            <block pos:line="212" pos:column="13">{
                <return pos:line="213" pos:column="17">return <expr><lit:literal type="boolean" pos:line="213" pos:column="24">false</lit:literal></expr>;</return>
            }</block></catch></try>
            <return pos:line="215" pos:column="13">return <expr><lit:literal type="boolean" pos:line="215" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="218" pos:column="9">public</specifier> <name pos:line="218" pos:column="16">void</name></type> <name pos:line="218" pos:column="21">NUnit_CloseIndexSearcher</name><parameter_list pos:line="218" pos:column="45">()</parameter_list>
        <block pos:line="219" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">_indexSearcher</name><op:operator pos:line="220" pos:column="27">.</op:operator><name pos:line="220" pos:column="28">GetIndexReader</name></name><argument_list pos:line="220" pos:column="42">()</argument_list></call><op:operator pos:line="220" pos:column="44">.</op:operator><call><name pos:line="220" pos:column="45">Close</name><argument_list pos:line="220" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="223" pos:column="9">public</specifier> <name pos:line="223" pos:column="16">void</name></type> <name pos:line="223" pos:column="21">Dispose</name><parameter_list pos:line="223" pos:column="28">()</parameter_list>
        <block pos:line="224" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="225" pos:column="13">Dispose</name><argument_list pos:line="225" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="225" pos:column="21">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


		<function><type><specifier pos:line="229" pos:column="17">public</specifier> <name pos:line="229" pos:column="24">void</name></type> <name pos:line="229" pos:column="29">Dispose</name><parameter_list pos:line="229" pos:column="36">(<param><decl><type><name pos:line="229" pos:column="37">bool</name></type> <name pos:line="229" pos:column="42">killReaders</name></decl></param>)</parameter_list>
        <block pos:line="230" pos:column="9">{
		    <lock pos:line="231" pos:column="21">lock (<param><decl><type><name pos:line="231" pos:column="27">_lock</name></type></decl></param>)
		    <block pos:line="232" pos:column="21">{
                <try pos:line="233" pos:column="17">try
                <block pos:line="234" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="235" pos:column="21">CommitChanges</name><argument_list pos:line="235" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="237" pos:column="17">catch (<param><decl><type><name pos:line="237" pos:column="24">AlreadyClosedException</name></type></decl></param>)
                <block pos:line="238" pos:column="17">{
                    <comment type="line" pos:line="239" pos:column="21">//This is expected in some cases</comment>
                }</block></catch></try>
		        <expr_stmt><expr><call><name pos:line="241" pos:column="25">Dispose</name><argument_list pos:line="241" pos:column="32">(<argument><expr><lit:literal type="boolean" pos:line="241" pos:column="33">true</lit:literal></expr></argument><op:operator pos:line="241" pos:column="37">,</op:operator> <argument><expr><name pos:line="241" pos:column="39">killReaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name pos:line="242" pos:column="25">GC</name><op:operator pos:line="242" pos:column="27">.</op:operator><name pos:line="242" pos:column="28">SuppressFinalize</name></name><argument_list pos:line="242" pos:column="44">(<argument><expr><name pos:line="242" pos:column="45">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></lock>
        }</block></function>
		
		<function><type><specifier pos:line="246" pos:column="17">protected</specifier> <specifier pos:line="246" pos:column="27">virtual</specifier> <name pos:line="246" pos:column="35">void</name></type> <name pos:line="246" pos:column="40">Dispose</name><parameter_list pos:line="246" pos:column="47">(<param><decl><type><name pos:line="246" pos:column="48">bool</name></type> <name pos:line="246" pos:column="53">disposing</name></decl></param><op:operator pos:line="246" pos:column="62">,</op:operator> <param><decl><type><name pos:line="246" pos:column="64">bool</name></type> <name pos:line="246" pos:column="69">killReaders</name></decl></param>)</parameter_list>
        <block pos:line="247" pos:column="9">{
            <if pos:line="248" pos:column="13">if<condition pos:line="248" pos:column="15">(<expr><op:operator pos:line="248" pos:column="16">!</op:operator><name pos:line="248" pos:column="17">_disposed</name></expr>)</condition><then pos:line="248" pos:column="27">
            <block pos:line="249" pos:column="13">{
                <if pos:line="250" pos:column="17">if<condition pos:line="250" pos:column="19">(<expr><name pos:line="250" pos:column="20">disposing</name></expr>)</condition><then pos:line="250" pos:column="30">
                <block pos:line="251" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="252" pos:column="21">IndexWriter</name><op:operator pos:line="252" pos:column="32">.</op:operator><name pos:line="252" pos:column="33">Close</name></name><argument_list pos:line="252" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="253" pos:column="41">IndexReader</name></type> <name pos:line="253" pos:column="53">indexReader</name> =<init pos:line="253" pos:column="66"> <expr><call><name><name pos:line="253" pos:column="67">_indexSearcher</name><op:operator pos:line="253" pos:column="81">.</op:operator><name pos:line="253" pos:column="82">GetIndexReader</name></name><argument_list pos:line="253" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="254" pos:column="21">if<condition pos:line="254" pos:column="23">(<expr><name pos:line="254" pos:column="24">indexReader</name> <op:operator pos:line="254" pos:column="36">!=</op:operator> <name pos:line="254" pos:column="39">null</name></expr>)</condition><then pos:line="254" pos:column="44">
                        <expr_stmt><expr><call><name><name pos:line="255" pos:column="25">indexReader</name><op:operator pos:line="255" pos:column="36">.</op:operator><name pos:line="255" pos:column="37">Close</name></name><argument_list pos:line="255" pos:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="256" pos:column="41">_indexSearcher</name><op:operator pos:line="256" pos:column="55">.</op:operator><name pos:line="256" pos:column="56">Close</name></name><argument_list pos:line="256" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="257" pos:column="41">LuceneIndexesDirectory</name><op:operator pos:line="257" pos:column="63">.</op:operator><name pos:line="257" pos:column="64">Close</name></name><argument_list pos:line="257" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
                    <try pos:line="258" pos:column="21">try
                    <block pos:line="259" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="260" pos:column="25">Analyzer</name><op:operator pos:line="260" pos:column="33">.</op:operator><name pos:line="260" pos:column="34">Close</name></name><argument_list pos:line="260" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="262" pos:column="21">catch (<param><decl><type><name pos:line="262" pos:column="28">NullReferenceException</name></type></decl></param>)
                    <block pos:line="263" pos:column="21">{
                        <comment type="line" pos:line="264" pos:column="25">//already closed, ignore</comment>
                    }</block></catch></try>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="268" pos:column="17">_disposed</name> <op:operator pos:line="268" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="268" pos:column="29">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

	    <decl_stmt><decl><type><specifier pos:line="272" pos:column="13">public</specifier> <name pos:line="272" pos:column="20">Directory</name></type> <name pos:line="272" pos:column="30">LuceneIndexesDirectory</name> <block pos:line="272" pos:column="53">{ <function><name pos:line="272" pos:column="55">get</name>;</function> <function><name pos:line="272" pos:column="60">set</name>;</function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="273" pos:column="17">public</specifier> <name pos:line="273" pos:column="24">QueryParser</name></type> <name pos:line="273" pos:column="36">QueryParser</name> <block pos:line="273" pos:column="48">{ <function><name pos:line="273" pos:column="50">get</name>;</function> protected <function><name pos:line="273" pos:column="65">set</name>;</function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="274" pos:column="17">protected</specifier> <name pos:line="274" pos:column="27">Analyzer</name></type> <name pos:line="274" pos:column="36">Analyzer</name> <block pos:line="274" pos:column="45">{ <function><name pos:line="274" pos:column="47">get</name>;</function> <function><name pos:line="274" pos:column="52">set</name>;</function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="275" pos:column="17">protected</specifier> <name pos:line="275" pos:column="27">IndexWriter</name></type> <name pos:line="275" pos:column="39">IndexWriter</name> <block pos:line="275" pos:column="51">{ <function><name pos:line="275" pos:column="53">get</name>;</function> <function><name pos:line="275" pos:column="58">set</name>;</function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="277" pos:column="9">private</specifier> <name pos:line="277" pos:column="17">bool</name></type> <name pos:line="277" pos:column="22">_hasIndexChanged</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="278" pos:column="9">private</specifier> <name pos:line="278" pos:column="17">bool</name></type> <name pos:line="278" pos:column="22">_disposed</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><specifier pos:line="279" pos:column="13">private</specifier> <name pos:line="279" pos:column="21">IndexSearcher</name></type> <name pos:line="279" pos:column="35">_indexSearcher</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="280" pos:column="9">private</specifier> <specifier pos:line="280" pos:column="17">readonly</specifier> <name pos:line="280" pos:column="26">bool</name></type> <name pos:line="280" pos:column="31">_synchronousCommits</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><specifier pos:line="281" pos:column="13">private</specifier> <specifier pos:line="281" pos:column="21">readonly</specifier> <name pos:line="281" pos:column="30">object</name></type> <name pos:line="281" pos:column="37">_lock</name> =<init pos:line="281" pos:column="44"> <expr><op:operator pos:line="281" pos:column="45">new</op:operator> <call><name pos:line="281" pos:column="49">object</name><argument_list pos:line="281" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
