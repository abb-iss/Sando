<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UI\UI\View\Search\Converters\ElementToIcon.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Windows</name><op:operator pos:line="3" pos:column="21">.</op:operator><name pos:line="3" pos:column="22">Data</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Windows</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Media</name><op:operator pos:line="4" pos:column="27">.</op:operator><name pos:line="4" pos:column="28">Imaging</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">UI</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">View</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">Search</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">Converters</name></name>
<block pos:line="8" pos:column="1">{
    <class><attribute pos:line="9" pos:column="5">[<expr><call><name pos:line="9" pos:column="6">ValueConversion</name><argument_list pos:line="9" pos:column="21">(<argument><expr><call><name pos:line="9" pos:column="22">typeof</name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">string</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="9" pos:column="36">,</op:operator> <argument><expr><call><name pos:line="9" pos:column="38">typeof</name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">BitmapImage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute> 
    <specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ElementToIcon</name> <super pos:line="10" pos:column="32">: <name pos:line="10" pos:column="34">IValueConverter</name></super>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">object</name></type> <name pos:line="12" pos:column="23">Convert</name><parameter_list pos:line="12" pos:column="30">(<param><decl><type><name pos:line="12" pos:column="31">object</name></type> <name pos:line="12" pos:column="38">value</name></decl></param><op:operator pos:line="12" pos:column="43">,</op:operator> <param><decl><type><name pos:line="12" pos:column="45">Type</name></type> <name pos:line="12" pos:column="50">targetType</name></decl></param><op:operator pos:line="12" pos:column="60">,</op:operator> <param><decl><type><name pos:line="12" pos:column="62">object</name></type> <name pos:line="12" pos:column="69">parameter</name></decl></param><op:operator pos:line="12" pos:column="78">,</op:operator> <param><decl><type><name><name pos:line="12" pos:column="80">System</name><op:operator pos:line="12" pos:column="86">.</op:operator><name pos:line="12" pos:column="87">Globalization</name><op:operator pos:line="12" pos:column="100">.</op:operator><name pos:line="12" pos:column="101">CultureInfo</name></name></type> <name pos:line="12" pos:column="113">culture</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">value</name> <op:operator pos:line="14" pos:column="23">==</op:operator> <name pos:line="14" pos:column="26">null</name></expr>)</condition><then pos:line="14" pos:column="31">
                <return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">null</name></expr>;</return></then></if>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">element</name> =<init pos:line="17" pos:column="26"> <expr><name pos:line="17" pos:column="27">value</name> <op:operator pos:line="17" pos:column="33">as</op:operator> <name pos:line="17" pos:column="36">ProgramElement</name></expr></init></decl>;</decl_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><name pos:line="18" pos:column="17">element</name> <op:operator pos:line="18" pos:column="25">==</op:operator> <name pos:line="18" pos:column="28">null</name></expr>)</condition><then pos:line="18" pos:column="33">
                <return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">GetBitmapImage</name><argument_list pos:line="19" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="39">"../Resources/VS2010Icons/generic.png"</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <if pos:line="21" pos:column="13">if<condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">element</name> <op:operator pos:line="21" pos:column="24">as</op:operator> <name pos:line="21" pos:column="27">CommentElement</name> <op:operator pos:line="21" pos:column="42">!=</op:operator> <name pos:line="21" pos:column="45">null</name></expr>)</condition><then pos:line="21" pos:column="50">
                <return pos:line="22" pos:column="17">return <expr><call><name pos:line="22" pos:column="24">GetBitmapImage</name><argument_list pos:line="22" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="39">"../Resources/VS2010Icons/comment.png"</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <decl_stmt><decl><type><name pos:line="24" pos:column="13">string</name></type> <name pos:line="24" pos:column="20">accessLevel</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">info</name> =<init pos:line="25" pos:column="23"> <expr><call><name><name pos:line="25" pos:column="24">element</name><op:operator pos:line="25" pos:column="31">.</op:operator><name pos:line="25" pos:column="32">GetType</name></name><argument_list pos:line="25" pos:column="39">()</argument_list></call><op:operator pos:line="25" pos:column="41">.</op:operator><call><name pos:line="25" pos:column="42">GetProperty</name><argument_list pos:line="25" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="54">"AccessLevel"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><name pos:line="26" pos:column="17">info</name> <op:operator pos:line="26" pos:column="22">!=</op:operator> <name pos:line="26" pos:column="25">null</name></expr>)</condition><then pos:line="26" pos:column="30">
                <expr_stmt><expr><name pos:line="27" pos:column="17">accessLevel</name> <op:operator pos:line="27" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="27" pos:column="31">"_"</lit:literal> <op:operator pos:line="27" pos:column="35">+</op:operator> <call><name><name pos:line="27" pos:column="37">info</name><op:operator pos:line="27" pos:column="41">.</op:operator><name pos:line="27" pos:column="42">GetValue</name></name><argument_list pos:line="27" pos:column="50">(<argument><expr><name pos:line="27" pos:column="51">element</name></expr></argument><op:operator pos:line="27" pos:column="58">,</op:operator> <argument><expr><name pos:line="27" pos:column="60">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="28" pos:column="13">else
                <expr_stmt><expr><name pos:line="29" pos:column="17">accessLevel</name> <op:operator pos:line="29" pos:column="29">=</op:operator> <name><name pos:line="29" pos:column="31">string</name><op:operator pos:line="29" pos:column="37">.</op:operator><name pos:line="29" pos:column="38">Empty</name></name></expr>;</expr_stmt></else></if>
            
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><call><name><name pos:line="31" pos:column="17">accessLevel</name><op:operator pos:line="31" pos:column="28">.</op:operator><name pos:line="31" pos:column="29">ToLower</name></name><argument_list pos:line="31" pos:column="36">()</argument_list></call> <op:operator pos:line="31" pos:column="39">==</op:operator> <lit:literal type="string" pos:line="31" pos:column="42">"_public"</lit:literal></expr>)</condition><then pos:line="31" pos:column="52">
                <expr_stmt><expr><name pos:line="32" pos:column="17">accessLevel</name> <op:operator pos:line="32" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="32" pos:column="31">""</lit:literal></expr>;</expr_stmt></then></if>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><call><name><name pos:line="33" pos:column="17">accessLevel</name><op:operator pos:line="33" pos:column="28">.</op:operator><name pos:line="33" pos:column="29">ToLower</name></name><argument_list pos:line="33" pos:column="36">()</argument_list></call> <op:operator pos:line="33" pos:column="39">==</op:operator> <lit:literal type="string" pos:line="33" pos:column="42">"_internal"</lit:literal></expr>)</condition><then pos:line="33" pos:column="54">
                <expr_stmt><expr><name pos:line="34" pos:column="17">accessLevel</name> <op:operator pos:line="34" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="34" pos:column="31">"_Private"</lit:literal></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">programElementType</name> =<init pos:line="36" pos:column="37"> <expr><name><name pos:line="36" pos:column="38">element</name><op:operator pos:line="36" pos:column="45">.</op:operator><name pos:line="36" pos:column="46">ProgramElementType</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="37" pos:column="13">if<condition pos:line="37" pos:column="15">(<expr><name pos:line="37" pos:column="16">programElementType</name> <op:operator pos:line="37" pos:column="35">==</op:operator> <name><name pos:line="37" pos:column="38">ProgramElementType</name><op:operator pos:line="37" pos:column="56">.</op:operator><name pos:line="37" pos:column="57">MethodPrototype</name></name></expr>)</condition><then pos:line="37" pos:column="73">
                <expr_stmt><expr><name pos:line="38" pos:column="17">programElementType</name> <op:operator pos:line="38" pos:column="36">=</op:operator> <name><name pos:line="38" pos:column="38">ProgramElementType</name><op:operator pos:line="38" pos:column="56">.</op:operator><name pos:line="38" pos:column="57">Method</name></name></expr>;</expr_stmt></then></if>

            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><name pos:line="40" pos:column="17">programElementType</name> <op:operator pos:line="40" pos:column="36">==</op:operator> <name><name pos:line="40" pos:column="39">ProgramElementType</name><op:operator pos:line="40" pos:column="57">.</op:operator><name pos:line="40" pos:column="58">Field</name></name></expr>)</condition><then pos:line="40" pos:column="64">
                <expr_stmt><expr><name pos:line="41" pos:column="17">programElementType</name> <op:operator pos:line="41" pos:column="36">=</op:operator> <name><name pos:line="41" pos:column="38">ProgramElementType</name><op:operator pos:line="41" pos:column="56">.</op:operator><name pos:line="41" pos:column="57">Property</name></name></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">string</name></type> <name pos:line="43" pos:column="20">resourceName</name></decl>;</decl_stmt>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">programElementType</name> <op:operator pos:line="44" pos:column="36">==</op:operator> <name><name pos:line="44" pos:column="39">ProgramElementType</name><op:operator pos:line="44" pos:column="57">.</op:operator><name pos:line="44" pos:column="58">Struct</name></name></expr>)</condition><then pos:line="44" pos:column="65">
                <expr_stmt><expr><name pos:line="45" pos:column="17">resourceName</name> <op:operator pos:line="45" pos:column="30">=</op:operator> <call><name><name pos:line="45" pos:column="32">String</name><op:operator pos:line="45" pos:column="38">.</op:operator><name pos:line="45" pos:column="39">Format</name></name><argument_list pos:line="45" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="46">"../Resources/VS2010Icons/VSObject_{0}{1}.png"</lit:literal></expr></argument><op:operator pos:line="45" pos:column="92">,</op:operator> <argument><expr><lit:literal type="string" pos:line="45" pos:column="94">"Structure"</lit:literal></expr></argument><op:operator pos:line="45" pos:column="105">,</op:operator> <argument><expr><name pos:line="45" pos:column="107">accessLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="46" pos:column="13">else <if pos:line="46" pos:column="18">if<condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">programElementType</name> <op:operator pos:line="46" pos:column="40">==</op:operator> <name><name pos:line="46" pos:column="43">ProgramElementType</name><op:operator pos:line="46" pos:column="61">.</op:operator><name pos:line="46" pos:column="62">TextLine</name></name></expr>)</condition><then pos:line="46" pos:column="71">
                <expr_stmt><expr><name pos:line="47" pos:column="17">resourceName</name> <op:operator pos:line="47" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="47" pos:column="32">"../Resources/VS2010Icons/xmlIcon.png"</lit:literal></expr>;</expr_stmt></then>
            <else pos:line="48" pos:column="13">else
                <expr_stmt><expr><name pos:line="49" pos:column="17">resourceName</name> <op:operator pos:line="49" pos:column="30">=</op:operator> <call><name><name pos:line="49" pos:column="32">string</name><op:operator pos:line="49" pos:column="38">.</op:operator><name pos:line="49" pos:column="39">Format</name></name><argument_list pos:line="49" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="46">"../Resources/VS2010Icons/VSObject_{0}{1}.png"</lit:literal></expr></argument><op:operator pos:line="49" pos:column="92">,</op:operator> <argument><expr><name pos:line="49" pos:column="94">programElementType</name></expr></argument><op:operator pos:line="49" pos:column="112">,</op:operator> <argument><expr><name pos:line="49" pos:column="114">accessLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

            <return pos:line="51" pos:column="13">return <expr><call><name pos:line="51" pos:column="20">GetBitmapImage</name><argument_list pos:line="51" pos:column="34">(<argument><expr><name pos:line="51" pos:column="35">resourceName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">static</specifier> <specifier pos:line="54" pos:column="16">readonly</specifier> <name><name pos:line="54" pos:column="25">Dictionary</name><argument_list pos:line="54" pos:column="35">&lt;<argument><name pos:line="54" pos:column="36">string</name></argument>,<argument><name pos:line="54" pos:column="43">BitmapImage</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="56">Images</name> =<init pos:line="54" pos:column="64"> <expr><op:operator pos:line="54" pos:column="65">new</op:operator> <call><name><name pos:line="54" pos:column="69">Dictionary</name><argument_list pos:line="54" pos:column="79">&lt;<argument><name pos:line="54" pos:column="80">string</name></argument>, <argument><name pos:line="54" pos:column="88">BitmapImage</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="56" pos:column="9">private</specifier> <specifier pos:line="56" pos:column="17">static</specifier> <name pos:line="56" pos:column="24">BitmapImage</name></type> <name pos:line="56" pos:column="36">GetBitmapImage</name><parameter_list pos:line="56" pos:column="50">(<param><decl><type><name pos:line="56" pos:column="51">string</name></type> <name pos:line="56" pos:column="58">resource</name></decl></param>)</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">BitmapImage</name></type> <name pos:line="58" pos:column="25">image</name></decl>;</decl_stmt>
            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><call><name><name pos:line="59" pos:column="17">Images</name><op:operator pos:line="59" pos:column="23">.</op:operator><name pos:line="59" pos:column="24">TryGetValue</name></name><argument_list pos:line="59" pos:column="35">(<argument><expr><name pos:line="59" pos:column="36">resource</name></expr></argument><op:operator pos:line="59" pos:column="44">,</op:operator> <argument><specifier pos:line="59" pos:column="46">out</specifier> <expr><name pos:line="59" pos:column="50">image</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="59" pos:column="57">
                <return pos:line="60" pos:column="17">return <expr><name pos:line="60" pos:column="24">image</name></expr>;</return></then></if>
            
            <expr_stmt><expr><name pos:line="62" pos:column="13">image</name> <op:operator pos:line="62" pos:column="19">=</op:operator> <op:operator pos:line="62" pos:column="21">new</op:operator> <call><name pos:line="62" pos:column="25">BitmapImage</name><argument_list pos:line="62" pos:column="36">(<argument><expr><op:operator pos:line="62" pos:column="37">new</op:operator> <call><name pos:line="62" pos:column="41">Uri</name><argument_list pos:line="62" pos:column="44">(<argument><expr><name pos:line="62" pos:column="45">resource</name></expr></argument><op:operator pos:line="62" pos:column="53">,</op:operator> <argument><expr><name><name pos:line="62" pos:column="55">UriKind</name><op:operator pos:line="62" pos:column="62">.</op:operator><name pos:line="62" pos:column="63">Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">Images</name><index pos:line="63" pos:column="19">[<expr><name pos:line="63" pos:column="20">resource</name></expr>]</index></name> <op:operator pos:line="63" pos:column="30">=</op:operator> <name pos:line="63" pos:column="32">image</name></expr>;</expr_stmt>
            <return pos:line="64" pos:column="13">return <expr><name pos:line="64" pos:column="20">image</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">object</name></type> <name pos:line="67" pos:column="23">ConvertBack</name><parameter_list pos:line="67" pos:column="34">(<param><decl><type><name pos:line="67" pos:column="35">object</name></type> <name pos:line="67" pos:column="42">value</name></decl></param><op:operator pos:line="67" pos:column="47">,</op:operator> <param><decl><type><name pos:line="67" pos:column="49">Type</name></type> <name pos:line="67" pos:column="54">targetType</name></decl></param><op:operator pos:line="67" pos:column="64">,</op:operator> <param><decl><type><name pos:line="67" pos:column="66">object</name></type> <name pos:line="67" pos:column="73">parameter</name></decl></param><op:operator pos:line="67" pos:column="82">,</op:operator> <param><decl><type><name><name pos:line="67" pos:column="84">System</name><op:operator pos:line="67" pos:column="90">.</op:operator><name pos:line="67" pos:column="91">Globalization</name><op:operator pos:line="67" pos:column="104">.</op:operator><name pos:line="67" pos:column="105">CultureInfo</name></name></type> <name pos:line="67" pos:column="117">culture</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <return pos:line="69" pos:column="13">return <expr><op:operator pos:line="69" pos:column="20">new</op:operator> <call><name pos:line="69" pos:column="24">NotImplementedException</name><argument_list pos:line="69" pos:column="47">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
