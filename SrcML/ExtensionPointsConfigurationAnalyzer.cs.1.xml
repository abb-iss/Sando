<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core\Extensions\Configuration\ExtensionPointsConfigurationAnalyzer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Contracts</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">IndexerContracts</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">log4net</name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">QueryContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">ExtensionContracts</name><op:operator pos:line="11" pos:column="31">.</op:operator><name pos:line="11" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Sando</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Core</name><op:operator pos:line="13" pos:column="21">.</op:operator><name pos:line="13" pos:column="22">Extensions</name><op:operator pos:line="13" pos:column="32">.</op:operator><name pos:line="13" pos:column="33">Configuration</name></name>
<block pos:line="14" pos:column="1">{
	<class><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> class <name pos:line="15" pos:column="29">ExtensionPointsConfigurationAnalyzer</name>
	<block pos:line="16" pos:column="9">{
		<function><type><specifier pos:line="17" pos:column="17">public</specifier> <specifier pos:line="17" pos:column="24">static</specifier> <name pos:line="17" pos:column="31">void</name></type> <name pos:line="17" pos:column="36">FindAndRegisterValidExtensionPoints</name><parameter_list pos:line="17" pos:column="71">(<param><decl><type><name pos:line="17" pos:column="72">ExtensionPointsConfiguration</name></type> <name pos:line="17" pos:column="101">extensionPointsConfiguration</name></decl></param><op:operator pos:line="17" pos:column="129">,</op:operator> <param><decl><type><name pos:line="17" pos:column="131">ILog</name></type> <name pos:line="17" pos:column="136">logger</name></decl></param>)</parameter_list>
		<block pos:line="18" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="19" pos:column="25">Contract</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">Requires</name></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">logger</name> <op:operator pos:line="19" pos:column="50">!=</op:operator> <name pos:line="19" pos:column="53">null</name></expr></argument><op:operator pos:line="19" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="19" pos:column="59">"ExtensionPointsConfigurationReader:FindAndRegisterValidExtensionPoints - logger cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="21" pos:column="25">logger</name><op:operator pos:line="21" pos:column="31">.</op:operator><name pos:line="21" pos:column="32">Info</name></name><argument_list pos:line="21" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="37">"-=#|#=- Analyzing configuration started -=#|#=-"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">RemoveInvalidConfigurations</name><argument_list pos:line="22" pos:column="52">(<argument><expr><name pos:line="22" pos:column="53">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="22" pos:column="81">,</op:operator> <argument><expr><name pos:line="22" pos:column="83">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">FindAndRegisterValidParserExtensionPoints</name><argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="23" pos:column="95">,</op:operator> <argument><expr><name pos:line="23" pos:column="97">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">FindAndRegisterValidWordSplitterExtensionPoints</name><argument_list pos:line="24" pos:column="72">(<argument><expr><name pos:line="24" pos:column="73">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="24" pos:column="101">,</op:operator> <argument><expr><name pos:line="24" pos:column="103">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">FindAndRegisterValidResultsReordererExtensionPoints</name><argument_list pos:line="25" pos:column="76">(<argument><expr><name pos:line="25" pos:column="77">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="25" pos:column="105">,</op:operator> <argument><expr><name pos:line="25" pos:column="107">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">FindAndRegisterValidQueryWeightsSupplierExtensionPoints</name><argument_list pos:line="26" pos:column="80">(<argument><expr><name pos:line="26" pos:column="81">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="26" pos:column="109">,</op:operator> <argument><expr><name pos:line="26" pos:column="111">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">FindAndRegisterValidQueryRewriterExtensionPoints</name><argument_list pos:line="27" pos:column="73">(<argument><expr><name pos:line="27" pos:column="74">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="27" pos:column="102">,</op:operator> <argument><expr><name pos:line="27" pos:column="104">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">FindAndRegisterValidIndexFilterManagerExtensionPoints</name><argument_list pos:line="28" pos:column="66">(<argument><expr><name pos:line="28" pos:column="67">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="28" pos:column="95">,</op:operator> <argument><expr><name pos:line="28" pos:column="97">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">logger</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">Info</name></name><argument_list pos:line="29" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="37">"-=#|#=- Analyzing configuration finished -=#|#=-"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="32" pos:column="17">private</specifier> <specifier pos:line="32" pos:column="25">static</specifier> <name pos:line="32" pos:column="32">void</name></type> <name pos:line="32" pos:column="37">RemoveInvalidConfigurations</name><parameter_list pos:line="32" pos:column="64">(<param><decl><type><name pos:line="32" pos:column="65">ExtensionPointsConfiguration</name></type> <name pos:line="32" pos:column="94">extensionPointsConfiguration</name></decl></param><op:operator pos:line="32" pos:column="122">,</op:operator> <param><decl><type><name pos:line="32" pos:column="124">ILog</name></type> <name pos:line="32" pos:column="129">logger</name></decl></param>)</parameter_list>
		<block pos:line="33" pos:column="17">{
			<if pos:line="34" pos:column="25">if<condition pos:line="34" pos:column="27">(<expr><name><name pos:line="34" pos:column="28">extensionPointsConfiguration</name><op:operator pos:line="34" pos:column="56">.</op:operator><name pos:line="34" pos:column="57">ParsersConfiguration</name></name> <op:operator pos:line="34" pos:column="78">!=</op:operator> <name pos:line="34" pos:column="81">null</name></expr>)</condition><then pos:line="34" pos:column="86">
				<expr_stmt><expr><call><name pos:line="35" pos:column="33">RemoveInvalidParserConfigurations</name><argument_list pos:line="35" pos:column="66">(<argument><expr><name pos:line="35" pos:column="67">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="35" pos:column="95">,</op:operator> <argument><expr><name pos:line="35" pos:column="97">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="36" pos:column="25">if<condition pos:line="36" pos:column="27">(<expr><name><name pos:line="36" pos:column="28">extensionPointsConfiguration</name><op:operator pos:line="36" pos:column="56">.</op:operator><name pos:line="36" pos:column="57">WordSplitterConfiguration</name></name> <op:operator pos:line="36" pos:column="83">!=</op:operator> <name pos:line="36" pos:column="86">null</name></expr>)</condition><then pos:line="36" pos:column="91">
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">RemoveInvalidWordSplitterConfiguration</name><argument_list pos:line="37" pos:column="71">(<argument><expr><name pos:line="37" pos:column="72">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="37" pos:column="100">,</op:operator> <argument><expr><name pos:line="37" pos:column="102">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="38" pos:column="25">if<condition pos:line="38" pos:column="27">(<expr><name><name pos:line="38" pos:column="28">extensionPointsConfiguration</name><op:operator pos:line="38" pos:column="56">.</op:operator><name pos:line="38" pos:column="57">ResultsReordererConfiguration</name></name> <op:operator pos:line="38" pos:column="87">!=</op:operator> <name pos:line="38" pos:column="90">null</name></expr>)</condition><then pos:line="38" pos:column="95">
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">RemoveInvalidResultsReordererConfiguration</name><argument_list pos:line="39" pos:column="75">(<argument><expr><name pos:line="39" pos:column="76">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="39" pos:column="104">,</op:operator> <argument><expr><name pos:line="39" pos:column="106">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="40" pos:column="25">if<condition pos:line="40" pos:column="27">(<expr><name><name pos:line="40" pos:column="28">extensionPointsConfiguration</name><op:operator pos:line="40" pos:column="56">.</op:operator><name pos:line="40" pos:column="57">QueryWeightsSupplierConfiguration</name></name> <op:operator pos:line="40" pos:column="91">!=</op:operator> <name pos:line="40" pos:column="94">null</name></expr>)</condition><then pos:line="40" pos:column="99">
				<expr_stmt><expr><call><name pos:line="41" pos:column="33">RemoveInvalidQueryWeightsSupplierConfiguration</name><argument_list pos:line="41" pos:column="79">(<argument><expr><name pos:line="41" pos:column="80">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="41" pos:column="108">,</op:operator> <argument><expr><name pos:line="41" pos:column="110">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="42" pos:column="25">if<condition pos:line="42" pos:column="27">(<expr><name><name pos:line="42" pos:column="28">extensionPointsConfiguration</name><op:operator pos:line="42" pos:column="56">.</op:operator><name pos:line="42" pos:column="57">QueryRewriterConfiguration</name></name> <op:operator pos:line="42" pos:column="84">!=</op:operator> <name pos:line="42" pos:column="87">null</name></expr>)</condition><then pos:line="42" pos:column="92">
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">RemoveInvalidQueryRewriterConfiguration</name><argument_list pos:line="43" pos:column="72">(<argument><expr><name pos:line="43" pos:column="73">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="43" pos:column="101">,</op:operator> <argument><expr><name pos:line="43" pos:column="103">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name><name pos:line="44" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="44" pos:column="45">.</op:operator><name pos:line="44" pos:column="46">IndexFilterManagerConfiguration</name></name> <op:operator pos:line="44" pos:column="78">!=</op:operator> <name pos:line="44" pos:column="81">null</name></expr>)</condition><then pos:line="44" pos:column="86">
                <expr_stmt><expr><call><name pos:line="45" pos:column="17">RemoveInvalidIndexFilterManagerConfiguration</name><argument_list pos:line="45" pos:column="61">(<argument><expr><name pos:line="45" pos:column="62">extensionPointsConfiguration</name></expr></argument><op:operator pos:line="45" pos:column="90">,</op:operator> <argument><expr><name pos:line="45" pos:column="92">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="48" pos:column="17">private</specifier> <specifier pos:line="48" pos:column="25">static</specifier> <name pos:line="48" pos:column="32">void</name></type> <name pos:line="48" pos:column="37">RemoveInvalidParserConfigurations</name><parameter_list pos:line="48" pos:column="70">(<param><decl><type><name pos:line="48" pos:column="71">ExtensionPointsConfiguration</name></type> <name pos:line="48" pos:column="100">extensionPointsConfiguration</name></decl></param><op:operator pos:line="48" pos:column="128">,</op:operator> <param><decl><type><name pos:line="48" pos:column="130">ILog</name></type> <name pos:line="48" pos:column="135">logger</name></decl></param>)</parameter_list>
		<block pos:line="49" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">int</name></type> <name pos:line="50" pos:column="29">invalidParserConfigurationCount</name> =<init pos:line="50" pos:column="62"> <expr><call><name><name pos:line="50" pos:column="63">extensionPointsConfiguration</name><op:operator pos:line="50" pos:column="91">.</op:operator><name pos:line="50" pos:column="92">ParsersConfiguration</name><op:operator pos:line="50" pos:column="112">.</op:operator><name pos:line="50" pos:column="113">RemoveAll</name></name><argument_list pos:line="50" pos:column="122">(
				<argument><expr><name pos:line="51" pos:column="33">p</name> <op:operator pos:line="51" pos:column="35">=&gt;</op:operator>
					<call><name pos:line="52" pos:column="41">IsConfigurationInvalid</name><argument_list pos:line="52" pos:column="63">(<argument><expr><name pos:line="52" pos:column="64">p</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="67">||</op:operator>
					<name><name pos:line="53" pos:column="41">p</name><op:operator pos:line="53" pos:column="42">.</op:operator><name pos:line="53" pos:column="43">SupportedFileExtensions</name></name> <op:operator pos:line="53" pos:column="67">==</op:operator> <name pos:line="53" pos:column="70">null</name> <op:operator pos:line="53" pos:column="75">||</op:operator>
					<name><name pos:line="54" pos:column="41">p</name><op:operator pos:line="54" pos:column="42">.</op:operator><name pos:line="54" pos:column="43">SupportedFileExtensions</name><op:operator pos:line="54" pos:column="66">.</op:operator><name pos:line="54" pos:column="67">Count</name></name> <op:operator pos:line="54" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="54" pos:column="76">0</lit:literal> <op:operator pos:line="54" pos:column="78">||</op:operator>
					<call><name><name pos:line="55" pos:column="41">p</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">ProgramElementsConfiguration</name><op:operator pos:line="55" pos:column="71">.</op:operator><name pos:line="55" pos:column="72">Count</name></name><argument_list pos:line="55" pos:column="77">(<argument><expr><name pos:line="55" pos:column="78">pe</name> <op:operator pos:line="55" pos:column="81">=&gt;</op:operator> <call><name pos:line="55" pos:column="84">IsConfigurationInvalid</name><argument_list pos:line="55" pos:column="106">(<argument><expr><name pos:line="55" pos:column="107">pe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="112">&gt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="114">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="56" pos:column="25">if<condition pos:line="56" pos:column="27">(<expr><name pos:line="56" pos:column="28">invalidParserConfigurationCount</name> <op:operator pos:line="56" pos:column="60">&gt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="62">0</lit:literal></expr>)</condition><then pos:line="56" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="57" pos:column="33">logger</name><op:operator pos:line="57" pos:column="39">.</op:operator><name pos:line="57" pos:column="40">Info</name></name><argument_list pos:line="57" pos:column="44">(<argument><expr><call><name><name pos:line="57" pos:column="45">String</name><op:operator pos:line="57" pos:column="51">.</op:operator><name pos:line="57" pos:column="52">Format</name></name><argument_list pos:line="57" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="59">"{0} invalid parser configurations found - they will be omitted during registration process."</lit:literal></expr></argument><op:operator pos:line="57" pos:column="152">,</op:operator> <argument><expr><name pos:line="57" pos:column="154">invalidParserConfigurationCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="60" pos:column="17">private</specifier> <specifier pos:line="60" pos:column="25">static</specifier> <name pos:line="60" pos:column="32">void</name></type> <name pos:line="60" pos:column="37">RemoveInvalidWordSplitterConfiguration</name><parameter_list pos:line="60" pos:column="75">(<param><decl><type><name pos:line="60" pos:column="76">ExtensionPointsConfiguration</name></type> <name pos:line="60" pos:column="105">extensionPointsConfiguration</name></decl></param><op:operator pos:line="60" pos:column="133">,</op:operator> <param><decl><type><name pos:line="60" pos:column="135">ILog</name></type> <name pos:line="60" pos:column="140">logger</name></decl></param>)</parameter_list>
		<block pos:line="61" pos:column="17">{
			<if pos:line="62" pos:column="25">if<condition pos:line="62" pos:column="27">(<expr><call><name pos:line="62" pos:column="28">IsConfigurationInvalid</name><argument_list pos:line="62" pos:column="50">(<argument><expr><name><name pos:line="62" pos:column="51">extensionPointsConfiguration</name><op:operator pos:line="62" pos:column="79">.</op:operator><name pos:line="62" pos:column="80">WordSplitterConfiguration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="107">
			<block pos:line="63" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="64" pos:column="33">extensionPointsConfiguration</name><op:operator pos:line="64" pos:column="61">.</op:operator><name pos:line="64" pos:column="62">WordSplitterConfiguration</name></name> <op:operator pos:line="64" pos:column="88">=</op:operator> <name pos:line="64" pos:column="90">null</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="65" pos:column="33">logger</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">Info</name></name><argument_list pos:line="65" pos:column="44">(<argument><expr><call><name><name pos:line="65" pos:column="45">String</name><op:operator pos:line="65" pos:column="51">.</op:operator><name pos:line="65" pos:column="52">Format</name></name><argument_list pos:line="65" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="59">"Invalid word splitter configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

		<function><type><specifier pos:line="69" pos:column="17">private</specifier> <specifier pos:line="69" pos:column="25">static</specifier> <name pos:line="69" pos:column="32">void</name></type> <name pos:line="69" pos:column="37">RemoveInvalidResultsReordererConfiguration</name><parameter_list pos:line="69" pos:column="79">(<param><decl><type><name pos:line="69" pos:column="80">ExtensionPointsConfiguration</name></type> <name pos:line="69" pos:column="109">extensionPointsConfiguration</name></decl></param><op:operator pos:line="69" pos:column="137">,</op:operator> <param><decl><type><name pos:line="69" pos:column="139">ILog</name></type> <name pos:line="69" pos:column="144">logger</name></decl></param>)</parameter_list>
		<block pos:line="70" pos:column="17">{
			<if pos:line="71" pos:column="25">if<condition pos:line="71" pos:column="27">(<expr><call><name pos:line="71" pos:column="28">IsConfigurationInvalid</name><argument_list pos:line="71" pos:column="50">(<argument><expr><name><name pos:line="71" pos:column="51">extensionPointsConfiguration</name><op:operator pos:line="71" pos:column="79">.</op:operator><name pos:line="71" pos:column="80">ResultsReordererConfiguration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="111">
			<block pos:line="72" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="73" pos:column="33">extensionPointsConfiguration</name><op:operator pos:line="73" pos:column="61">.</op:operator><name pos:line="73" pos:column="62">ResultsReordererConfiguration</name></name> <op:operator pos:line="73" pos:column="92">=</op:operator> <name pos:line="73" pos:column="94">null</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="74" pos:column="33">logger</name><op:operator pos:line="74" pos:column="39">.</op:operator><name pos:line="74" pos:column="40">Info</name></name><argument_list pos:line="74" pos:column="44">(<argument><expr><call><name><name pos:line="74" pos:column="45">String</name><op:operator pos:line="74" pos:column="51">.</op:operator><name pos:line="74" pos:column="52">Format</name></name><argument_list pos:line="74" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="59">"Invalid results reorderer configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

		<function><type><specifier pos:line="78" pos:column="17">private</specifier> <specifier pos:line="78" pos:column="25">static</specifier> <name pos:line="78" pos:column="32">void</name></type> <name pos:line="78" pos:column="37">RemoveInvalidQueryWeightsSupplierConfiguration</name><parameter_list pos:line="78" pos:column="83">(<param><decl><type><name pos:line="78" pos:column="84">ExtensionPointsConfiguration</name></type> <name pos:line="78" pos:column="113">extensionPointsConfiguration</name></decl></param><op:operator pos:line="78" pos:column="141">,</op:operator> <param><decl><type><name pos:line="78" pos:column="143">ILog</name></type> <name pos:line="78" pos:column="148">logger</name></decl></param>)</parameter_list>
		<block pos:line="79" pos:column="17">{
			<if pos:line="80" pos:column="25">if<condition pos:line="80" pos:column="27">(<expr><call><name pos:line="80" pos:column="28">IsConfigurationInvalid</name><argument_list pos:line="80" pos:column="50">(<argument><expr><name><name pos:line="80" pos:column="51">extensionPointsConfiguration</name><op:operator pos:line="80" pos:column="79">.</op:operator><name pos:line="80" pos:column="80">QueryWeightsSupplierConfiguration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="115">
			<block pos:line="81" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="82" pos:column="33">extensionPointsConfiguration</name><op:operator pos:line="82" pos:column="61">.</op:operator><name pos:line="82" pos:column="62">QueryWeightsSupplierConfiguration</name></name> <op:operator pos:line="82" pos:column="96">=</op:operator> <name pos:line="82" pos:column="98">null</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="83" pos:column="33">logger</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">Info</name></name><argument_list pos:line="83" pos:column="44">(<argument><expr><call><name><name pos:line="83" pos:column="45">String</name><op:operator pos:line="83" pos:column="51">.</op:operator><name pos:line="83" pos:column="52">Format</name></name><argument_list pos:line="83" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="59">"Invalid query weights supplier configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

		<function><type><specifier pos:line="87" pos:column="17">private</specifier> <specifier pos:line="87" pos:column="25">static</specifier> <name pos:line="87" pos:column="32">void</name></type> <name pos:line="87" pos:column="37">RemoveInvalidQueryRewriterConfiguration</name><parameter_list pos:line="87" pos:column="76">(<param><decl><type><name pos:line="87" pos:column="77">ExtensionPointsConfiguration</name></type> <name pos:line="87" pos:column="106">extensionPointsConfiguration</name></decl></param><op:operator pos:line="87" pos:column="134">,</op:operator> <param><decl><type><name pos:line="87" pos:column="136">ILog</name></type> <name pos:line="87" pos:column="141">logger</name></decl></param>)</parameter_list>
		<block pos:line="88" pos:column="17">{
			<if pos:line="89" pos:column="25">if<condition pos:line="89" pos:column="27">(<expr><call><name pos:line="89" pos:column="28">IsConfigurationInvalid</name><argument_list pos:line="89" pos:column="50">(<argument><expr><name><name pos:line="89" pos:column="51">extensionPointsConfiguration</name><op:operator pos:line="89" pos:column="79">.</op:operator><name pos:line="89" pos:column="80">QueryRewriterConfiguration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="108">
			<block pos:line="90" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="91" pos:column="33">extensionPointsConfiguration</name><op:operator pos:line="91" pos:column="61">.</op:operator><name pos:line="91" pos:column="62">QueryRewriterConfiguration</name></name> <op:operator pos:line="91" pos:column="89">=</op:operator> <name pos:line="91" pos:column="91">null</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">logger</name><op:operator pos:line="92" pos:column="39">.</op:operator><name pos:line="92" pos:column="40">Info</name></name><argument_list pos:line="92" pos:column="44">(<argument><expr><call><name><name pos:line="92" pos:column="45">String</name><op:operator pos:line="92" pos:column="51">.</op:operator><name pos:line="92" pos:column="52">Format</name></name><argument_list pos:line="92" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="59">"Invalid query rewriter configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

        <function><type><specifier pos:line="96" pos:column="9">private</specifier> <specifier pos:line="96" pos:column="17">static</specifier> <name pos:line="96" pos:column="24">void</name></type> <name pos:line="96" pos:column="29">RemoveInvalidIndexFilterManagerConfiguration</name><parameter_list pos:line="96" pos:column="73">(<param><decl><type><name pos:line="96" pos:column="74">ExtensionPointsConfiguration</name></type> <name pos:line="96" pos:column="103">extensionPointsConfiguration</name></decl></param><op:operator pos:line="96" pos:column="131">,</op:operator> <param><decl><type><name pos:line="96" pos:column="133">ILog</name></type> <name pos:line="96" pos:column="138">logger</name></decl></param>)</parameter_list>
        <block pos:line="97" pos:column="9">{
            <if pos:line="98" pos:column="13">if <condition pos:line="98" pos:column="16">(<expr><call><name pos:line="98" pos:column="17">IsConfigurationInvalid</name><argument_list pos:line="98" pos:column="39">(<argument><expr><name><name pos:line="98" pos:column="40">extensionPointsConfiguration</name><op:operator pos:line="98" pos:column="68">.</op:operator><name pos:line="98" pos:column="69">IndexFilterManagerConfiguration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="102">
            <block pos:line="99" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="100" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="100" pos:column="45">.</op:operator><name pos:line="100" pos:column="46">IndexFilterManagerConfiguration</name></name> <op:operator pos:line="100" pos:column="78">=</op:operator> <name pos:line="100" pos:column="80">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="101" pos:column="17">logger</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">Info</name></name><argument_list pos:line="101" pos:column="28">(<argument><expr><call><name><name pos:line="101" pos:column="29">String</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Format</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="43">"Invalid index filter manager configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

		<function><type><specifier pos:line="105" pos:column="17">private</specifier> <specifier pos:line="105" pos:column="25">static</specifier> <name pos:line="105" pos:column="32">bool</name></type> <name pos:line="105" pos:column="37">IsConfigurationInvalid</name><parameter_list pos:line="105" pos:column="59">(<param><decl><type><name pos:line="105" pos:column="60">BaseExtensionPointConfiguration</name></type> <name pos:line="105" pos:column="92">configuration</name></decl></param>)</parameter_list>
		<block pos:line="106" pos:column="17">{
			<return pos:line="107" pos:column="25">return <expr><call><name><name pos:line="107" pos:column="32">String</name><op:operator pos:line="107" pos:column="38">.</op:operator><name pos:line="107" pos:column="39">IsNullOrWhiteSpace</name></name><argument_list pos:line="107" pos:column="57">(<argument><expr><name><name pos:line="107" pos:column="58">configuration</name><op:operator pos:line="107" pos:column="71">.</op:operator><name pos:line="107" pos:column="72">FullClassName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="87">||</op:operator> <call><name><name pos:line="107" pos:column="90">String</name><op:operator pos:line="107" pos:column="96">.</op:operator><name pos:line="107" pos:column="97">IsNullOrWhiteSpace</name></name><argument_list pos:line="107" pos:column="115">(<argument><expr><name><name pos:line="107" pos:column="116">configuration</name><op:operator pos:line="107" pos:column="129">.</op:operator><name pos:line="107" pos:column="130">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="110" pos:column="17">private</specifier> <specifier pos:line="110" pos:column="25">static</specifier> <name pos:line="110" pos:column="32">void</name></type> <name pos:line="110" pos:column="37">FindAndRegisterValidParserExtensionPoints</name><parameter_list pos:line="110" pos:column="78">(<param><decl><type><name pos:line="110" pos:column="79">ExtensionPointsConfiguration</name></type> <name pos:line="110" pos:column="108">extensionPointsConfiguration</name></decl></param><op:operator pos:line="110" pos:column="136">,</op:operator> <param><decl><type><name pos:line="110" pos:column="138">ILog</name></type> <name pos:line="110" pos:column="143">logger</name></decl></param>)</parameter_list>
		<block pos:line="111" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="112" pos:column="25">logger</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">Info</name></name><argument_list pos:line="112" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="37">"Reading parser extension points configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="113" pos:column="25">foreach(<init><decl><type><name pos:line="113" pos:column="33">ParserExtensionPointsConfiguration</name></type> <name pos:line="113" pos:column="68">parserConfiguration</name> <init pos:line="113" pos:column="88">in <expr><name><name pos:line="113" pos:column="91">extensionPointsConfiguration</name><op:operator pos:line="113" pos:column="119">.</op:operator><name pos:line="113" pos:column="120">ParsersConfiguration</name></name></expr></init></decl></init>)
			<block pos:line="114" pos:column="25">{
				<try pos:line="115" pos:column="33">try
				<block pos:line="116" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="117" pos:column="41">logger</name><op:operator pos:line="117" pos:column="47">.</op:operator><name pos:line="117" pos:column="48">Info</name></name><argument_list pos:line="117" pos:column="52">(<argument><expr><call><name><name pos:line="117" pos:column="53">String</name><op:operator pos:line="117" pos:column="59">.</op:operator><name pos:line="117" pos:column="60">Format</name></name><argument_list pos:line="117" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="67">"Parser found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="117" pos:column="106">,</op:operator> <argument><expr><name><name pos:line="117" pos:column="108">parserConfiguration</name><op:operator pos:line="117" pos:column="127">.</op:operator><name pos:line="117" pos:column="128">FullClassName</name></name></expr></argument><op:operator pos:line="117" pos:column="141">,</op:operator> <argument><expr><name><name pos:line="117" pos:column="143">parserConfiguration</name><op:operator pos:line="117" pos:column="162">.</op:operator><name pos:line="117" pos:column="163">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="118" pos:column="41">IParser</name></type> <name pos:line="118" pos:column="49">parser</name> =<init pos:line="118" pos:column="57"> <expr><call><name><name pos:line="118" pos:column="58">CreateInstance</name><argument_list pos:line="118" pos:column="72">&lt;<argument><name pos:line="118" pos:column="73">IParser</name></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="81">(<argument><expr><name><name pos:line="118" pos:column="82">extensionPointsConfiguration</name><op:operator pos:line="118" pos:column="110">.</op:operator><name pos:line="118" pos:column="111">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="118" pos:column="130">,</op:operator> <argument><expr><name><name pos:line="118" pos:column="132">parserConfiguration</name><op:operator pos:line="118" pos:column="151">.</op:operator><name pos:line="118" pos:column="152">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="118" pos:column="175">,</op:operator> <argument><expr><name><name pos:line="118" pos:column="177">parserConfiguration</name><op:operator pos:line="118" pos:column="196">.</op:operator><name pos:line="118" pos:column="197">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="119" pos:column="41">parserConfiguration</name><op:operator pos:line="119" pos:column="60">.</op:operator><name pos:line="119" pos:column="61">ProgramElementsConfiguration</name><op:operator pos:line="119" pos:column="89">.</op:operator><name pos:line="119" pos:column="90">ForEach</name></name><argument_list pos:line="119" pos:column="97">(<argument><expr><name pos:line="119" pos:column="98">pe</name> <op:operator pos:line="119" pos:column="101">=&gt;</op:operator> <call><name pos:line="119" pos:column="104">LoadAssembly</name><argument_list pos:line="119" pos:column="116">(<argument><expr><name><name pos:line="119" pos:column="117">extensionPointsConfiguration</name><op:operator pos:line="119" pos:column="145">.</op:operator><name pos:line="119" pos:column="146">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="119" pos:column="165">,</op:operator> <argument><expr><name><name pos:line="119" pos:column="167">pe</name><op:operator pos:line="119" pos:column="169">.</op:operator><name pos:line="119" pos:column="170">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="120" pos:column="41">ExtensionPointsRepository</name><op:operator pos:line="120" pos:column="66">.</op:operator><name pos:line="120" pos:column="67">Instance</name><op:operator pos:line="120" pos:column="75">.</op:operator><name pos:line="120" pos:column="76">RegisterParserImplementation</name></name><argument_list pos:line="120" pos:column="104">(<argument><expr><name><name pos:line="120" pos:column="105">parserConfiguration</name><op:operator pos:line="120" pos:column="124">.</op:operator><name pos:line="120" pos:column="125">SupportedFileExtensions</name></name></expr></argument><op:operator pos:line="120" pos:column="148">,</op:operator> <argument><expr><name pos:line="120" pos:column="150">parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="121" pos:column="41">logger</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">Info</name></name><argument_list pos:line="121" pos:column="52">(<argument><expr><call><name><name pos:line="121" pos:column="53">String</name><op:operator pos:line="121" pos:column="59">.</op:operator><name pos:line="121" pos:column="60">Format</name></name><argument_list pos:line="121" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="67">"Parser {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="121" pos:column="104">,</op:operator> <argument><expr><name><name pos:line="121" pos:column="106">parserConfiguration</name><op:operator pos:line="121" pos:column="125">.</op:operator><name pos:line="121" pos:column="126">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="123" pos:column="33">catch(<param><decl><type><name pos:line="123" pos:column="39">Exception</name></type> <name pos:line="123" pos:column="49">ex</name></decl></param>)
				<block pos:line="124" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="125" pos:column="41">logger</name><op:operator pos:line="125" pos:column="47">.</op:operator><name pos:line="125" pos:column="48">Error</name></name><argument_list pos:line="125" pos:column="53">(<argument><expr><call><name><name pos:line="125" pos:column="54">String</name><op:operator pos:line="125" pos:column="60">.</op:operator><name pos:line="125" pos:column="61">Format</name></name><argument_list pos:line="125" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="68">"Parser {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="125" pos:column="106">,</op:operator> <argument><expr><name><name pos:line="125" pos:column="108">parserConfiguration</name><op:operator pos:line="125" pos:column="127">.</op:operator><name pos:line="125" pos:column="128">FullClassName</name></name></expr></argument><op:operator pos:line="125" pos:column="141">,</op:operator> <argument><expr><name><name pos:line="125" pos:column="143">ex</name><op:operator pos:line="125" pos:column="145">.</op:operator><name pos:line="125" pos:column="146">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="128" pos:column="25">logger</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">Info</name></name><argument_list pos:line="128" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="37">"Reading parser extension points configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="131" pos:column="17">private</specifier> <specifier pos:line="131" pos:column="25">static</specifier> <name pos:line="131" pos:column="32">void</name></type> <name pos:line="131" pos:column="37">FindAndRegisterValidWordSplitterExtensionPoints</name><parameter_list pos:line="131" pos:column="84">(<param><decl><type><name pos:line="131" pos:column="85">ExtensionPointsConfiguration</name></type> <name pos:line="131" pos:column="114">extensionPointsConfiguration</name></decl></param><op:operator pos:line="131" pos:column="142">,</op:operator> <param><decl><type><name pos:line="131" pos:column="144">ILog</name></type> <name pos:line="131" pos:column="149">logger</name></decl></param>)</parameter_list>
		<block pos:line="132" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="133" pos:column="25">logger</name><op:operator pos:line="133" pos:column="31">.</op:operator><name pos:line="133" pos:column="32">Info</name></name><argument_list pos:line="133" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="37">"Reading word splitter extension point configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="134" pos:column="25">BaseExtensionPointConfiguration</name></type> <name pos:line="134" pos:column="57">wordSplitterConfiguration</name> =<init pos:line="134" pos:column="84"> <expr><name><name pos:line="134" pos:column="85">extensionPointsConfiguration</name><op:operator pos:line="134" pos:column="113">.</op:operator><name pos:line="134" pos:column="114">WordSplitterConfiguration</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="135" pos:column="25">if<condition pos:line="135" pos:column="27">(<expr><name pos:line="135" pos:column="28">wordSplitterConfiguration</name> <op:operator pos:line="135" pos:column="54">!=</op:operator> <name pos:line="135" pos:column="57">null</name></expr>)</condition><then pos:line="135" pos:column="62">
			<block pos:line="136" pos:column="25">{
				<try pos:line="137" pos:column="33">try
				<block pos:line="138" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="139" pos:column="41">logger</name><op:operator pos:line="139" pos:column="47">.</op:operator><name pos:line="139" pos:column="48">Info</name></name><argument_list pos:line="139" pos:column="52">(<argument><expr><call><name><name pos:line="139" pos:column="53">String</name><op:operator pos:line="139" pos:column="59">.</op:operator><name pos:line="139" pos:column="60">Format</name></name><argument_list pos:line="139" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="67">"Word splitter found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="139" pos:column="113">,</op:operator> <argument><expr><name><name pos:line="139" pos:column="115">wordSplitterConfiguration</name><op:operator pos:line="139" pos:column="140">.</op:operator><name pos:line="139" pos:column="141">FullClassName</name></name></expr></argument><op:operator pos:line="139" pos:column="154">,</op:operator> <argument><expr><name><name pos:line="139" pos:column="156">wordSplitterConfiguration</name><op:operator pos:line="139" pos:column="181">.</op:operator><name pos:line="139" pos:column="182">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="140" pos:column="41">IWordSplitter</name></type> <name pos:line="140" pos:column="55">wordSplitter</name> =<init pos:line="140" pos:column="69"> <expr><call><name><name pos:line="140" pos:column="70">CreateInstance</name><argument_list pos:line="140" pos:column="84">&lt;<argument><name pos:line="140" pos:column="85">IWordSplitter</name></argument>&gt;</argument_list></name><argument_list pos:line="140" pos:column="99">(<argument><expr><name><name pos:line="140" pos:column="100">extensionPointsConfiguration</name><op:operator pos:line="140" pos:column="128">.</op:operator><name pos:line="140" pos:column="129">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="140" pos:column="148">,</op:operator> <argument><expr><name><name pos:line="140" pos:column="150">wordSplitterConfiguration</name><op:operator pos:line="140" pos:column="175">.</op:operator><name pos:line="140" pos:column="176">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="140" pos:column="199">,</op:operator> <argument><expr><name><name pos:line="140" pos:column="201">wordSplitterConfiguration</name><op:operator pos:line="140" pos:column="226">.</op:operator><name pos:line="140" pos:column="227">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">ExtensionPointsRepository</name><op:operator pos:line="141" pos:column="66">.</op:operator><name pos:line="141" pos:column="67">Instance</name><op:operator pos:line="141" pos:column="75">.</op:operator><name pos:line="141" pos:column="76">RegisterWordSplitterImplementation</name></name><argument_list pos:line="141" pos:column="110">(<argument><expr><name pos:line="141" pos:column="111">wordSplitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="142" pos:column="41">logger</name><op:operator pos:line="142" pos:column="47">.</op:operator><name pos:line="142" pos:column="48">Info</name></name><argument_list pos:line="142" pos:column="52">(<argument><expr><call><name><name pos:line="142" pos:column="53">String</name><op:operator pos:line="142" pos:column="59">.</op:operator><name pos:line="142" pos:column="60">Format</name></name><argument_list pos:line="142" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="67">"Word splitter {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="142" pos:column="111">,</op:operator> <argument><expr><name><name pos:line="142" pos:column="113">wordSplitterConfiguration</name><op:operator pos:line="142" pos:column="138">.</op:operator><name pos:line="142" pos:column="139">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="144" pos:column="33">catch(<param><decl><type><name pos:line="144" pos:column="39">Exception</name></type> <name pos:line="144" pos:column="49">ex</name></decl></param>)
				<block pos:line="145" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="146" pos:column="41">logger</name><op:operator pos:line="146" pos:column="47">.</op:operator><name pos:line="146" pos:column="48">Error</name></name><argument_list pos:line="146" pos:column="53">(<argument><expr><call><name><name pos:line="146" pos:column="54">String</name><op:operator pos:line="146" pos:column="60">.</op:operator><name pos:line="146" pos:column="61">Format</name></name><argument_list pos:line="146" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="68">"Word splitter {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="146" pos:column="113">,</op:operator> <argument><expr><name><name pos:line="146" pos:column="115">wordSplitterConfiguration</name><op:operator pos:line="146" pos:column="140">.</op:operator><name pos:line="146" pos:column="141">FullClassName</name></name></expr></argument><op:operator pos:line="146" pos:column="154">,</op:operator> <argument><expr><name><name pos:line="146" pos:column="156">ex</name><op:operator pos:line="146" pos:column="158">.</op:operator><name pos:line="146" pos:column="159">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="149" pos:column="25">logger</name><op:operator pos:line="149" pos:column="31">.</op:operator><name pos:line="149" pos:column="32">Info</name></name><argument_list pos:line="149" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="37">"Reading word splitter extension point configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="152" pos:column="17">private</specifier> <specifier pos:line="152" pos:column="25">static</specifier> <name pos:line="152" pos:column="32">void</name></type> <name pos:line="152" pos:column="37">FindAndRegisterValidResultsReordererExtensionPoints</name><parameter_list pos:line="152" pos:column="88">(<param><decl><type><name pos:line="152" pos:column="89">ExtensionPointsConfiguration</name></type> <name pos:line="152" pos:column="118">extensionPointsConfiguration</name></decl></param><op:operator pos:line="152" pos:column="146">,</op:operator> <param><decl><type><name pos:line="152" pos:column="148">ILog</name></type> <name pos:line="152" pos:column="153">logger</name></decl></param>)</parameter_list>
		<block pos:line="153" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="154" pos:column="25">logger</name><op:operator pos:line="154" pos:column="31">.</op:operator><name pos:line="154" pos:column="32">Info</name></name><argument_list pos:line="154" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="37">"Reading results reorderer extension point configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="155" pos:column="25">BaseExtensionPointConfiguration</name></type> <name pos:line="155" pos:column="57">resultsReordererConfiguration</name> =<init pos:line="155" pos:column="88"> <expr><name><name pos:line="155" pos:column="89">extensionPointsConfiguration</name><op:operator pos:line="155" pos:column="117">.</op:operator><name pos:line="155" pos:column="118">ResultsReordererConfiguration</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="156" pos:column="25">if<condition pos:line="156" pos:column="27">(<expr><name pos:line="156" pos:column="28">resultsReordererConfiguration</name> <op:operator pos:line="156" pos:column="58">!=</op:operator> <name pos:line="156" pos:column="61">null</name></expr>)</condition><then pos:line="156" pos:column="66">
			<block pos:line="157" pos:column="25">{
				<try pos:line="158" pos:column="33">try
				<block pos:line="159" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="160" pos:column="41">logger</name><op:operator pos:line="160" pos:column="47">.</op:operator><name pos:line="160" pos:column="48">Info</name></name><argument_list pos:line="160" pos:column="52">(<argument><expr><call><name><name pos:line="160" pos:column="53">String</name><op:operator pos:line="160" pos:column="59">.</op:operator><name pos:line="160" pos:column="60">Format</name></name><argument_list pos:line="160" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="67">"Results reorderer found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="160" pos:column="117">,</op:operator> <argument><expr><name><name pos:line="160" pos:column="119">resultsReordererConfiguration</name><op:operator pos:line="160" pos:column="148">.</op:operator><name pos:line="160" pos:column="149">FullClassName</name></name></expr></argument><op:operator pos:line="160" pos:column="162">,</op:operator> <argument><expr><name><name pos:line="160" pos:column="164">resultsReordererConfiguration</name><op:operator pos:line="160" pos:column="193">.</op:operator><name pos:line="160" pos:column="194">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="161" pos:column="41">IResultsReorderer</name></type> <name pos:line="161" pos:column="59">resultsReorderer</name> =<init pos:line="161" pos:column="77"> <expr><call><name><name pos:line="161" pos:column="78">CreateInstance</name><argument_list pos:line="161" pos:column="92">&lt;<argument><name pos:line="161" pos:column="93">IResultsReorderer</name></argument>&gt;</argument_list></name><argument_list pos:line="161" pos:column="111">(<argument><expr><name><name pos:line="161" pos:column="112">extensionPointsConfiguration</name><op:operator pos:line="161" pos:column="140">.</op:operator><name pos:line="161" pos:column="141">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="161" pos:column="160">,</op:operator> <argument><expr><name><name pos:line="161" pos:column="162">resultsReordererConfiguration</name><op:operator pos:line="161" pos:column="191">.</op:operator><name pos:line="161" pos:column="192">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="161" pos:column="215">,</op:operator> <argument><expr><name><name pos:line="161" pos:column="217">resultsReordererConfiguration</name><op:operator pos:line="161" pos:column="246">.</op:operator><name pos:line="161" pos:column="247">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="162" pos:column="41">ExtensionPointsRepository</name><op:operator pos:line="162" pos:column="66">.</op:operator><name pos:line="162" pos:column="67">Instance</name><op:operator pos:line="162" pos:column="75">.</op:operator><name pos:line="162" pos:column="76">RegisterResultsReordererImplementation</name></name><argument_list pos:line="162" pos:column="114">(<argument><expr><name pos:line="162" pos:column="115">resultsReorderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="163" pos:column="41">logger</name><op:operator pos:line="163" pos:column="47">.</op:operator><name pos:line="163" pos:column="48">Info</name></name><argument_list pos:line="163" pos:column="52">(<argument><expr><call><name><name pos:line="163" pos:column="53">String</name><op:operator pos:line="163" pos:column="59">.</op:operator><name pos:line="163" pos:column="60">Format</name></name><argument_list pos:line="163" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="67">"Results reorderer {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="163" pos:column="115">,</op:operator> <argument><expr><name><name pos:line="163" pos:column="117">resultsReordererConfiguration</name><op:operator pos:line="163" pos:column="146">.</op:operator><name pos:line="163" pos:column="147">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="165" pos:column="33">catch(<param><decl><type><name pos:line="165" pos:column="39">Exception</name></type> <name pos:line="165" pos:column="49">ex</name></decl></param>)
				<block pos:line="166" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="167" pos:column="41">logger</name><op:operator pos:line="167" pos:column="47">.</op:operator><name pos:line="167" pos:column="48">Error</name></name><argument_list pos:line="167" pos:column="53">(<argument><expr><call><name><name pos:line="167" pos:column="54">String</name><op:operator pos:line="167" pos:column="60">.</op:operator><name pos:line="167" pos:column="61">Format</name></name><argument_list pos:line="167" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="68">"Results reorderer {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="167" pos:column="117">,</op:operator> <argument><expr><name><name pos:line="167" pos:column="119">resultsReordererConfiguration</name><op:operator pos:line="167" pos:column="148">.</op:operator><name pos:line="167" pos:column="149">FullClassName</name></name></expr></argument><op:operator pos:line="167" pos:column="162">,</op:operator> <argument><expr><name><name pos:line="167" pos:column="164">ex</name><op:operator pos:line="167" pos:column="166">.</op:operator><name pos:line="167" pos:column="167">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="170" pos:column="25">logger</name><op:operator pos:line="170" pos:column="31">.</op:operator><name pos:line="170" pos:column="32">Info</name></name><argument_list pos:line="170" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="37">"Reading results reorderer extension point configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="173" pos:column="17">private</specifier> <specifier pos:line="173" pos:column="25">static</specifier> <name pos:line="173" pos:column="32">void</name></type> <name pos:line="173" pos:column="37">FindAndRegisterValidQueryWeightsSupplierExtensionPoints</name><parameter_list pos:line="173" pos:column="92">(<param><decl><type><name pos:line="173" pos:column="93">ExtensionPointsConfiguration</name></type> <name pos:line="173" pos:column="122">extensionPointsConfiguration</name></decl></param><op:operator pos:line="173" pos:column="150">,</op:operator> <param><decl><type><name pos:line="173" pos:column="152">ILog</name></type> <name pos:line="173" pos:column="157">logger</name></decl></param>)</parameter_list>
		<block pos:line="174" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="175" pos:column="25">logger</name><op:operator pos:line="175" pos:column="31">.</op:operator><name pos:line="175" pos:column="32">Info</name></name><argument_list pos:line="175" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="37">"Reading query weights supplier extension point configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="176" pos:column="25">BaseExtensionPointConfiguration</name></type> <name pos:line="176" pos:column="57">queryWeightsSupplierConfiguration</name> =<init pos:line="176" pos:column="92"> <expr><name><name pos:line="176" pos:column="93">extensionPointsConfiguration</name><op:operator pos:line="176" pos:column="121">.</op:operator><name pos:line="176" pos:column="122">QueryWeightsSupplierConfiguration</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="177" pos:column="25">if<condition pos:line="177" pos:column="27">(<expr><name pos:line="177" pos:column="28">queryWeightsSupplierConfiguration</name> <op:operator pos:line="177" pos:column="62">!=</op:operator> <name pos:line="177" pos:column="65">null</name></expr>)</condition><then pos:line="177" pos:column="70">
			<block pos:line="178" pos:column="25">{
				<try pos:line="179" pos:column="33">try
				<block pos:line="180" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="181" pos:column="41">logger</name><op:operator pos:line="181" pos:column="47">.</op:operator><name pos:line="181" pos:column="48">Info</name></name><argument_list pos:line="181" pos:column="52">(<argument><expr><call><name><name pos:line="181" pos:column="53">String</name><op:operator pos:line="181" pos:column="59">.</op:operator><name pos:line="181" pos:column="60">Format</name></name><argument_list pos:line="181" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="67">"Query weights supplier found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="181" pos:column="122">,</op:operator> <argument><expr><name><name pos:line="181" pos:column="124">queryWeightsSupplierConfiguration</name><op:operator pos:line="181" pos:column="157">.</op:operator><name pos:line="181" pos:column="158">FullClassName</name></name></expr></argument><op:operator pos:line="181" pos:column="171">,</op:operator> <argument><expr><name><name pos:line="181" pos:column="173">queryWeightsSupplierConfiguration</name><op:operator pos:line="181" pos:column="206">.</op:operator><name pos:line="181" pos:column="207">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="182" pos:column="41">IQueryWeightsSupplier</name></type> <name pos:line="182" pos:column="63">queryWeightsSupplier</name> =<init pos:line="182" pos:column="85"> <expr><call><name><name pos:line="182" pos:column="86">CreateInstance</name><argument_list pos:line="182" pos:column="100">&lt;<argument><name pos:line="182" pos:column="101">IQueryWeightsSupplier</name></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="123">(<argument><expr><name><name pos:line="182" pos:column="124">extensionPointsConfiguration</name><op:operator pos:line="182" pos:column="152">.</op:operator><name pos:line="182" pos:column="153">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="182" pos:column="172">,</op:operator> <argument><expr><name><name pos:line="182" pos:column="174">queryWeightsSupplierConfiguration</name><op:operator pos:line="182" pos:column="207">.</op:operator><name pos:line="182" pos:column="208">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="182" pos:column="231">,</op:operator> <argument><expr><name><name pos:line="182" pos:column="233">queryWeightsSupplierConfiguration</name><op:operator pos:line="182" pos:column="266">.</op:operator><name pos:line="182" pos:column="267">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="183" pos:column="41">ExtensionPointsRepository</name><op:operator pos:line="183" pos:column="66">.</op:operator><name pos:line="183" pos:column="67">Instance</name><op:operator pos:line="183" pos:column="75">.</op:operator><name pos:line="183" pos:column="76">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="183" pos:column="118">(<argument><expr><name pos:line="183" pos:column="119">queryWeightsSupplier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="184" pos:column="41">logger</name><op:operator pos:line="184" pos:column="47">.</op:operator><name pos:line="184" pos:column="48">Info</name></name><argument_list pos:line="184" pos:column="52">(<argument><expr><call><name><name pos:line="184" pos:column="53">String</name><op:operator pos:line="184" pos:column="59">.</op:operator><name pos:line="184" pos:column="60">Format</name></name><argument_list pos:line="184" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="67">"Query weights supplier {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="184" pos:column="120">,</op:operator> <argument><expr><name><name pos:line="184" pos:column="122">queryWeightsSupplierConfiguration</name><op:operator pos:line="184" pos:column="155">.</op:operator><name pos:line="184" pos:column="156">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="186" pos:column="33">catch(<param><decl><type><name pos:line="186" pos:column="39">Exception</name></type> <name pos:line="186" pos:column="49">ex</name></decl></param>)
				<block pos:line="187" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">logger</name><op:operator pos:line="188" pos:column="47">.</op:operator><name pos:line="188" pos:column="48">Error</name></name><argument_list pos:line="188" pos:column="53">(<argument><expr><call><name><name pos:line="188" pos:column="54">String</name><op:operator pos:line="188" pos:column="60">.</op:operator><name pos:line="188" pos:column="61">Format</name></name><argument_list pos:line="188" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="68">"Query weights supplier {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="188" pos:column="122">,</op:operator> <argument><expr><name><name pos:line="188" pos:column="124">queryWeightsSupplierConfiguration</name><op:operator pos:line="188" pos:column="157">.</op:operator><name pos:line="188" pos:column="158">FullClassName</name></name></expr></argument><op:operator pos:line="188" pos:column="171">,</op:operator> <argument><expr><name><name pos:line="188" pos:column="173">ex</name><op:operator pos:line="188" pos:column="175">.</op:operator><name pos:line="188" pos:column="176">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="191" pos:column="25">logger</name><op:operator pos:line="191" pos:column="31">.</op:operator><name pos:line="191" pos:column="32">Info</name></name><argument_list pos:line="191" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="37">"Reading query weights supplier extension point configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="194" pos:column="17">private</specifier> <specifier pos:line="194" pos:column="25">static</specifier> <name pos:line="194" pos:column="32">void</name></type> <name pos:line="194" pos:column="37">FindAndRegisterValidQueryRewriterExtensionPoints</name><parameter_list pos:line="194" pos:column="85">(<param><decl><type><name pos:line="194" pos:column="86">ExtensionPointsConfiguration</name></type> <name pos:line="194" pos:column="115">extensionPointsConfiguration</name></decl></param><op:operator pos:line="194" pos:column="143">,</op:operator> <param><decl><type><name pos:line="194" pos:column="145">ILog</name></type> <name pos:line="194" pos:column="150">logger</name></decl></param>)</parameter_list>
		<block pos:line="195" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="196" pos:column="25">logger</name><op:operator pos:line="196" pos:column="31">.</op:operator><name pos:line="196" pos:column="32">Info</name></name><argument_list pos:line="196" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="37">"Reading query rewriter extension point configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="197" pos:column="25">BaseExtensionPointConfiguration</name></type> <name pos:line="197" pos:column="57">queryRewriterConfiguration</name> =<init pos:line="197" pos:column="85"> <expr><name><name pos:line="197" pos:column="86">extensionPointsConfiguration</name><op:operator pos:line="197" pos:column="114">.</op:operator><name pos:line="197" pos:column="115">QueryRewriterConfiguration</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="198" pos:column="25">if<condition pos:line="198" pos:column="27">(<expr><name pos:line="198" pos:column="28">queryRewriterConfiguration</name> <op:operator pos:line="198" pos:column="55">!=</op:operator> <name pos:line="198" pos:column="58">null</name></expr>)</condition><then pos:line="198" pos:column="63">
			<block pos:line="199" pos:column="25">{
				<try pos:line="200" pos:column="33">try
				<block pos:line="201" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="202" pos:column="41">logger</name><op:operator pos:line="202" pos:column="47">.</op:operator><name pos:line="202" pos:column="48">Info</name></name><argument_list pos:line="202" pos:column="52">(<argument><expr><call><name><name pos:line="202" pos:column="53">String</name><op:operator pos:line="202" pos:column="59">.</op:operator><name pos:line="202" pos:column="60">Format</name></name><argument_list pos:line="202" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="67">"Query rewriter found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="202" pos:column="114">,</op:operator> <argument><expr><name><name pos:line="202" pos:column="116">queryRewriterConfiguration</name><op:operator pos:line="202" pos:column="142">.</op:operator><name pos:line="202" pos:column="143">FullClassName</name></name></expr></argument><op:operator pos:line="202" pos:column="156">,</op:operator> <argument><expr><name><name pos:line="202" pos:column="158">queryRewriterConfiguration</name><op:operator pos:line="202" pos:column="184">.</op:operator><name pos:line="202" pos:column="185">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="203" pos:column="41">IQueryRewriter</name></type> <name pos:line="203" pos:column="56">queryRewriter</name> =<init pos:line="203" pos:column="71"> <expr><call><name><name pos:line="203" pos:column="72">CreateInstance</name><argument_list pos:line="203" pos:column="86">&lt;<argument><name pos:line="203" pos:column="87">IQueryRewriter</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="102">(<argument><expr><name><name pos:line="203" pos:column="103">extensionPointsConfiguration</name><op:operator pos:line="203" pos:column="131">.</op:operator><name pos:line="203" pos:column="132">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="203" pos:column="151">,</op:operator> <argument><expr><name><name pos:line="203" pos:column="153">queryRewriterConfiguration</name><op:operator pos:line="203" pos:column="179">.</op:operator><name pos:line="203" pos:column="180">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="203" pos:column="203">,</op:operator> <argument><expr><name><name pos:line="203" pos:column="205">queryRewriterConfiguration</name><op:operator pos:line="203" pos:column="231">.</op:operator><name pos:line="203" pos:column="232">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="204" pos:column="41">ExtensionPointsRepository</name><op:operator pos:line="204" pos:column="66">.</op:operator><name pos:line="204" pos:column="67">Instance</name><op:operator pos:line="204" pos:column="75">.</op:operator><name pos:line="204" pos:column="76">RegisterQueryRewriterImplementation</name></name><argument_list pos:line="204" pos:column="111">(<argument><expr><name pos:line="204" pos:column="112">queryRewriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">logger</name><op:operator pos:line="205" pos:column="47">.</op:operator><name pos:line="205" pos:column="48">Info</name></name><argument_list pos:line="205" pos:column="52">(<argument><expr><call><name><name pos:line="205" pos:column="53">String</name><op:operator pos:line="205" pos:column="59">.</op:operator><name pos:line="205" pos:column="60">Format</name></name><argument_list pos:line="205" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="67">"Query rewriter {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="205" pos:column="112">,</op:operator> <argument><expr><name><name pos:line="205" pos:column="114">queryRewriterConfiguration</name><op:operator pos:line="205" pos:column="140">.</op:operator><name pos:line="205" pos:column="141">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="207" pos:column="33">catch(<param><decl><type><name pos:line="207" pos:column="39">Exception</name></type> <name pos:line="207" pos:column="49">ex</name></decl></param>)
				<block pos:line="208" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="209" pos:column="41">logger</name><op:operator pos:line="209" pos:column="47">.</op:operator><name pos:line="209" pos:column="48">Error</name></name><argument_list pos:line="209" pos:column="53">(<argument><expr><call><name><name pos:line="209" pos:column="54">String</name><op:operator pos:line="209" pos:column="60">.</op:operator><name pos:line="209" pos:column="61">Format</name></name><argument_list pos:line="209" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="68">"Query rewriter {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="209" pos:column="114">,</op:operator> <argument><expr><name><name pos:line="209" pos:column="116">queryRewriterConfiguration</name><op:operator pos:line="209" pos:column="142">.</op:operator><name pos:line="209" pos:column="143">FullClassName</name></name></expr></argument><op:operator pos:line="209" pos:column="156">,</op:operator> <argument><expr><name><name pos:line="209" pos:column="158">ex</name><op:operator pos:line="209" pos:column="160">.</op:operator><name pos:line="209" pos:column="161">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="212" pos:column="25">logger</name><op:operator pos:line="212" pos:column="31">.</op:operator><name pos:line="212" pos:column="32">Info</name></name><argument_list pos:line="212" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="37">"Reading query rewriter extension point configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><specifier pos:line="215" pos:column="9">private</specifier> <specifier pos:line="215" pos:column="17">static</specifier> <name pos:line="215" pos:column="24">void</name></type> <name pos:line="215" pos:column="29">FindAndRegisterValidIndexFilterManagerExtensionPoints</name><parameter_list pos:line="215" pos:column="82">(<param><decl><type><name pos:line="215" pos:column="83">ExtensionPointsConfiguration</name></type> <name pos:line="215" pos:column="112">extensionPointsConfiguration</name></decl></param><op:operator pos:line="215" pos:column="140">,</op:operator> <param><decl><type><name pos:line="215" pos:column="142">ILog</name></type> <name pos:line="215" pos:column="147">logger</name></decl></param>)</parameter_list>
        <block pos:line="216" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">logger</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">Info</name></name><argument_list pos:line="217" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="25">"Reading index filter manager extension point configuration started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">BaseExtensionPointConfiguration</name></type> <name pos:line="218" pos:column="45">indexFilterManagerConfiguration</name> =<init pos:line="218" pos:column="78"> <expr><name><name pos:line="218" pos:column="79">extensionPointsConfiguration</name><op:operator pos:line="218" pos:column="107">.</op:operator><name pos:line="218" pos:column="108">IndexFilterManagerConfiguration</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="219" pos:column="13">if <condition pos:line="219" pos:column="16">(<expr><name pos:line="219" pos:column="17">indexFilterManagerConfiguration</name> <op:operator pos:line="219" pos:column="49">!=</op:operator> <name pos:line="219" pos:column="52">null</name></expr>)</condition><then pos:line="219" pos:column="57">
            <block pos:line="220" pos:column="13">{
                <try pos:line="221" pos:column="17">try
                <block pos:line="222" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="223" pos:column="21">logger</name><op:operator pos:line="223" pos:column="27">.</op:operator><name pos:line="223" pos:column="28">Info</name></name><argument_list pos:line="223" pos:column="32">(<argument><expr><call><name><name pos:line="223" pos:column="33">String</name><op:operator pos:line="223" pos:column="39">.</op:operator><name pos:line="223" pos:column="40">Format</name></name><argument_list pos:line="223" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="47">"Index filter manager found: {0}, from assembly: {1}"</lit:literal></expr></argument><op:operator pos:line="223" pos:column="100">,</op:operator> <argument><expr><name><name pos:line="223" pos:column="102">indexFilterManagerConfiguration</name><op:operator pos:line="223" pos:column="133">.</op:operator><name pos:line="223" pos:column="134">FullClassName</name></name></expr></argument><op:operator pos:line="223" pos:column="147">,</op:operator> <argument><expr><name><name pos:line="223" pos:column="149">indexFilterManagerConfiguration</name><op:operator pos:line="223" pos:column="180">.</op:operator><name pos:line="223" pos:column="181">LibraryFileRelativePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="224" pos:column="21">IIndexFilterManager</name></type> <name pos:line="224" pos:column="41">indexFilterManager</name> =<init pos:line="224" pos:column="61"> <expr><call><name><name pos:line="224" pos:column="62">CreateInstance</name><argument_list pos:line="224" pos:column="76">&lt;<argument><name pos:line="224" pos:column="77">IIndexFilterManager</name></argument>&gt;</argument_list></name><argument_list pos:line="224" pos:column="97">(<argument><expr><name><name pos:line="224" pos:column="98">extensionPointsConfiguration</name><op:operator pos:line="224" pos:column="126">.</op:operator><name pos:line="224" pos:column="127">PluginDirectoryPath</name></name></expr></argument><op:operator pos:line="224" pos:column="146">,</op:operator> <argument><expr><name><name pos:line="224" pos:column="148">indexFilterManagerConfiguration</name><op:operator pos:line="224" pos:column="179">.</op:operator><name pos:line="224" pos:column="180">LibraryFileRelativePath</name></name></expr></argument><op:operator pos:line="224" pos:column="203">,</op:operator> <argument><expr><name><name pos:line="224" pos:column="205">indexFilterManagerConfiguration</name><op:operator pos:line="224" pos:column="236">.</op:operator><name pos:line="224" pos:column="237">FullClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="225" pos:column="21">ExtensionPointsRepository</name><op:operator pos:line="225" pos:column="46">.</op:operator><name pos:line="225" pos:column="47">Instance</name><op:operator pos:line="225" pos:column="55">.</op:operator><name pos:line="225" pos:column="56">RegisterIndexFilterManagerImplementation</name></name><argument_list pos:line="225" pos:column="96">(<argument><expr><name pos:line="225" pos:column="97">indexFilterManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="226" pos:column="21">logger</name><op:operator pos:line="226" pos:column="27">.</op:operator><name pos:line="226" pos:column="28">Info</name></name><argument_list pos:line="226" pos:column="32">(<argument><expr><call><name><name pos:line="226" pos:column="33">String</name><op:operator pos:line="226" pos:column="39">.</op:operator><name pos:line="226" pos:column="40">Format</name></name><argument_list pos:line="226" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="47">"Index filter manager {0} successfully registered."</lit:literal></expr></argument><op:operator pos:line="226" pos:column="98">,</op:operator> <argument><expr><name><name pos:line="226" pos:column="100">indexFilterManagerConfiguration</name><op:operator pos:line="226" pos:column="131">.</op:operator><name pos:line="226" pos:column="132">FullClassName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="228" pos:column="17">catch (<param><decl><type><name pos:line="228" pos:column="24">Exception</name></type> <name pos:line="228" pos:column="34">ex</name></decl></param>)
                <block pos:line="229" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="230" pos:column="21">logger</name><op:operator pos:line="230" pos:column="27">.</op:operator><name pos:line="230" pos:column="28">Error</name></name><argument_list pos:line="230" pos:column="33">(<argument><expr><call><name><name pos:line="230" pos:column="34">String</name><op:operator pos:line="230" pos:column="40">.</op:operator><name pos:line="230" pos:column="41">Format</name></name><argument_list pos:line="230" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="48">"Index filter manager {0} cannot be registered: {1}"</lit:literal></expr></argument><op:operator pos:line="230" pos:column="100">,</op:operator> <argument><expr><name><name pos:line="230" pos:column="102">indexFilterManagerConfiguration</name><op:operator pos:line="230" pos:column="133">.</op:operator><name pos:line="230" pos:column="134">FullClassName</name></name></expr></argument><op:operator pos:line="230" pos:column="147">,</op:operator> <argument><expr><name><name pos:line="230" pos:column="149">ex</name><op:operator pos:line="230" pos:column="151">.</op:operator><name pos:line="230" pos:column="152">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">logger</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">Info</name></name><argument_list pos:line="233" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="25">"Reading index filter manager extension point configuration finished"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="236" pos:column="17">private</specifier> <specifier pos:line="236" pos:column="25">static</specifier> <name pos:line="236" pos:column="32">Assembly</name></type> <name pos:line="236" pos:column="41">LoadAssembly</name><parameter_list pos:line="236" pos:column="53">(<param><decl><type><name pos:line="236" pos:column="54">string</name></type> <name pos:line="236" pos:column="61">pluginDirectoryPath</name></decl></param><op:operator pos:line="236" pos:column="80">,</op:operator> <param><decl><type><name pos:line="236" pos:column="82">string</name></type> <name pos:line="236" pos:column="89">libraryFileRelativePath</name></decl></param>)</parameter_list>
		<block pos:line="237" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="238" pos:column="25">string</name></type> <name pos:line="238" pos:column="32">assemblyPath</name> =<init pos:line="238" pos:column="46"> <expr><call><name><name pos:line="238" pos:column="47">Path</name><op:operator pos:line="238" pos:column="51">.</op:operator><name pos:line="238" pos:column="52">Combine</name></name><argument_list pos:line="238" pos:column="59">(<argument><expr><name pos:line="238" pos:column="60">pluginDirectoryPath</name></expr></argument><op:operator pos:line="238" pos:column="79">,</op:operator> <argument><expr><name pos:line="238" pos:column="81">libraryFileRelativePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="239" pos:column="25">return <expr><call><name><name pos:line="239" pos:column="32">Assembly</name><op:operator pos:line="239" pos:column="40">.</op:operator><name pos:line="239" pos:column="41">LoadFrom</name></name><argument_list pos:line="239" pos:column="49">(<argument><expr><name pos:line="239" pos:column="50">assemblyPath</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="242" pos:column="17">private</specifier> <specifier pos:line="242" pos:column="25">static</specifier> <name pos:line="242" pos:column="32">T</name></type> <name><name pos:line="242" pos:column="34">CreateInstance</name><argument_list pos:line="242" pos:column="48">&lt;<argument><name pos:line="242" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="242" pos:column="51">(<param><decl><type><name pos:line="242" pos:column="52">string</name></type> <name pos:line="242" pos:column="59">pluginDirectoryPath</name></decl></param><op:operator pos:line="242" pos:column="78">,</op:operator> <param><decl><type><name pos:line="242" pos:column="80">string</name></type> <name pos:line="242" pos:column="87">libraryFileRelativePath</name></decl></param><op:operator pos:line="242" pos:column="110">,</op:operator> <param><decl><type><name pos:line="242" pos:column="112">string</name></type> <name pos:line="242" pos:column="119">fullClassName</name></decl></param>)</parameter_list>
		<block pos:line="243" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="244" pos:column="25">Assembly</name></type> <name pos:line="244" pos:column="34">assembly</name> =<init pos:line="244" pos:column="44"> <expr><call><name pos:line="244" pos:column="45">LoadAssembly</name><argument_list pos:line="244" pos:column="57">(<argument><expr><name pos:line="244" pos:column="58">pluginDirectoryPath</name></expr></argument><op:operator pos:line="244" pos:column="77">,</op:operator> <argument><expr><name pos:line="244" pos:column="79">libraryFileRelativePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="245" pos:column="25">Type</name></type> <name pos:line="245" pos:column="30">type</name> =<init pos:line="245" pos:column="36"> <expr><call><name><name pos:line="245" pos:column="37">assembly</name><op:operator pos:line="245" pos:column="45">.</op:operator><name pos:line="245" pos:column="46">GetType</name></name><argument_list pos:line="245" pos:column="53">(<argument><expr><name pos:line="245" pos:column="54">fullClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="246" pos:column="25">if<condition pos:line="246" pos:column="27">(<expr><name pos:line="246" pos:column="28">type</name> <op:operator pos:line="246" pos:column="33">==</op:operator> <name pos:line="246" pos:column="36">null</name></expr>)</condition><then pos:line="246" pos:column="41">
				<throw pos:line="247" pos:column="33">throw <expr><op:operator pos:line="247" pos:column="39">new</op:operator> <call><name pos:line="247" pos:column="43">ArgumentNullException</name><argument_list pos:line="247" pos:column="64">(<argument><expr><call><name><name pos:line="247" pos:column="65">String</name><op:operator pos:line="247" pos:column="71">.</op:operator><name pos:line="247" pos:column="72">Format</name></name><argument_list pos:line="247" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="79">"Type cannot be found: {0}"</lit:literal></expr></argument><op:operator pos:line="247" pos:column="106">,</op:operator> <argument><expr><name pos:line="247" pos:column="108">fullClassName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<return pos:line="248" pos:column="25">return <expr><op:operator pos:line="248" pos:column="32">(</op:operator><name pos:line="248" pos:column="33">T</name><op:operator pos:line="248" pos:column="34">)</op:operator><call><name><name pos:line="248" pos:column="35">Activator</name><op:operator pos:line="248" pos:column="44">.</op:operator><name pos:line="248" pos:column="45">CreateInstance</name></name><argument_list pos:line="248" pos:column="59">(<argument><expr><name pos:line="248" pos:column="60">type</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
