<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core\Extensions\ExtensionPointsRepository.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">IndexerContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">QueryContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Extensions</name></name>
<block pos:line="12" pos:column="1">{
	<class><specifier pos:line="13" pos:column="9">public</specifier> class <name pos:line="13" pos:column="22">ExtensionPointsRepository</name>
	<block pos:line="14" pos:column="9">{
		<function><type><specifier pos:line="15" pos:column="17">public</specifier> <name pos:line="15" pos:column="24">IParser</name></type> <name pos:line="15" pos:column="32">GetParserImplementation</name><parameter_list pos:line="15" pos:column="55">(<param><decl><type><name pos:line="15" pos:column="56">string</name></type> <name pos:line="15" pos:column="63">fileExtension</name></decl></param>)</parameter_list>
		<block pos:line="16" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="17" pos:column="25">Contract</name><op:operator pos:line="17" pos:column="33">.</op:operator><name pos:line="17" pos:column="34">Requires</name></name><argument_list pos:line="17" pos:column="42">(<argument><expr><op:operator pos:line="17" pos:column="43">!</op:operator><call><name><name pos:line="17" pos:column="44">String</name><op:operator pos:line="17" pos:column="50">.</op:operator><name pos:line="17" pos:column="51">IsNullOrWhiteSpace</name></name><argument_list pos:line="17" pos:column="69">(<argument><expr><name pos:line="17" pos:column="70">fileExtension</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="17" pos:column="84">,</op:operator> <argument><expr><lit:literal type="string" pos:line="17" pos:column="86">"ExtensionPointsManager:GetParserImplementation - fileExtension cannot be null or an empty string!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt><expr><name pos:line="19" pos:column="21">fileExtension</name> <op:operator pos:line="19" pos:column="35">=</op:operator> <call><name><name pos:line="19" pos:column="37">fileExtension</name><op:operator pos:line="19" pos:column="50">.</op:operator><name pos:line="19" pos:column="51">ToLowerInvariant</name></name><argument_list pos:line="19" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="20" pos:column="25">if<condition pos:line="20" pos:column="27">(<expr><call><name><name pos:line="20" pos:column="28">parsers</name><op:operator pos:line="20" pos:column="35">.</op:operator><name pos:line="20" pos:column="36">ContainsKey</name></name><argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">fileExtension</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="20" pos:column="63">
				<return pos:line="21" pos:column="33">return <expr><name><name pos:line="21" pos:column="40">parsers</name><index pos:line="21" pos:column="47">[<expr><name pos:line="21" pos:column="48">fileExtension</name></expr>]</index></name></expr>;</return></then>
			<else pos:line="22" pos:column="25">else
				<return pos:line="23" pos:column="33">return <expr><name pos:line="23" pos:column="40">null</name></expr>;</return></else></if>
		}</block></function>

		<function><type><specifier pos:line="26" pos:column="17">public</specifier> <name pos:line="26" pos:column="24">void</name></type> <name pos:line="26" pos:column="29">RegisterParserImplementation</name><parameter_list pos:line="26" pos:column="57">(<param><decl><type><name><name pos:line="26" pos:column="58">List</name><argument_list pos:line="26" pos:column="62">&lt;<argument><name pos:line="26" pos:column="63">string</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="71">supportedFileExtensions</name></decl></param><op:operator pos:line="26" pos:column="94">,</op:operator> <param><decl><type><name pos:line="26" pos:column="96">IParser</name></type> <name pos:line="26" pos:column="104">parserImplementation</name></decl></param>)</parameter_list>
		<block pos:line="27" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="28" pos:column="25">Contract</name><op:operator pos:line="28" pos:column="33">.</op:operator><name pos:line="28" pos:column="34">Requires</name></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">supportedFileExtensions</name> <op:operator pos:line="28" pos:column="67">!=</op:operator> <name pos:line="28" pos:column="70">null</name></expr></argument><op:operator pos:line="28" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="28" pos:column="76">"ExtensionPointsManager:RegisterParserImplementation - supportedFileExtensions cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">Contract</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">Requires</name></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name><name pos:line="29" pos:column="43">supportedFileExtensions</name><op:operator pos:line="29" pos:column="66">.</op:operator><name pos:line="29" pos:column="67">Count</name></name> <op:operator pos:line="29" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="29" pos:column="75">0</lit:literal></expr></argument><op:operator pos:line="29" pos:column="76">,</op:operator> <argument><expr><lit:literal type="string" pos:line="29" pos:column="78">"ExtensionPointsManager:RegisterParserImplementation - supportedFileExtensions must contain at least one item!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="30" pos:column="25">Contract</name><op:operator pos:line="30" pos:column="33">.</op:operator><name pos:line="30" pos:column="34">Requires</name></name><argument_list pos:line="30" pos:column="42">(<argument><expr><call><name><name pos:line="30" pos:column="43">supportedFileExtensions</name><op:operator pos:line="30" pos:column="66">.</op:operator><name pos:line="30" pos:column="67">FindAll</name></name><argument_list pos:line="30" pos:column="74">(<argument><expr><name pos:line="30" pos:column="75">sfe</name> <op:operator pos:line="30" pos:column="79">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="82">String</name><op:operator pos:line="30" pos:column="88">.</op:operator><name pos:line="30" pos:column="89">IsNullOrWhiteSpace</name></name><argument_list pos:line="30" pos:column="107">(<argument><expr><name pos:line="30" pos:column="108">sfe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="113">.</op:operator><name pos:line="30" pos:column="114">Count</name> <op:operator pos:line="30" pos:column="120">==</op:operator> <lit:literal type="number" pos:line="30" pos:column="123">0</lit:literal></expr></argument><op:operator pos:line="30" pos:column="124">,</op:operator> <argument><expr><lit:literal type="string" pos:line="30" pos:column="126">"ExtensionPointsManager:RegisterParserImplementation - supportedFileExtensions cannot contain empty items!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">Contract</name><op:operator pos:line="31" pos:column="33">.</op:operator><name pos:line="31" pos:column="34">Requires</name></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">parserImplementation</name> <op:operator pos:line="31" pos:column="64">!=</op:operator> <name pos:line="31" pos:column="67">null</name></expr></argument><op:operator pos:line="31" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="31" pos:column="73">"ExtensionPointsManager:RegisterParserImplementation - parserImplementation cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<foreach pos:line="33" pos:column="25">foreach(<init><decl><type><name pos:line="33" pos:column="33">string</name></type> <name pos:line="33" pos:column="40">supportedFileExtension</name> <init pos:line="33" pos:column="63">in <expr><call><name><name pos:line="33" pos:column="66">supportedFileExtensions</name><op:operator pos:line="33" pos:column="89">.</op:operator><name pos:line="33" pos:column="90">Select</name></name><argument_list pos:line="33" pos:column="96">(<argument><expr><name pos:line="33" pos:column="97">e</name> <op:operator pos:line="33" pos:column="99">=&gt;</op:operator> <call><name><name pos:line="33" pos:column="102">e</name><op:operator pos:line="33" pos:column="103">.</op:operator><name pos:line="33" pos:column="104">ToLowerInvariant</name></name><argument_list pos:line="33" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl></init>)
				<expr_stmt><expr><name><name pos:line="34" pos:column="33">parsers</name><index pos:line="34" pos:column="40">[<expr><name pos:line="34" pos:column="41">supportedFileExtension</name></expr>]</index></name> <op:operator pos:line="34" pos:column="65">=</op:operator> <name pos:line="34" pos:column="67">parserImplementation</name></expr>;</expr_stmt></foreach>
		}</block></function>

		<function><type><specifier pos:line="37" pos:column="17">public</specifier> <name pos:line="37" pos:column="24">IWordSplitter</name></type> <name pos:line="37" pos:column="38">GetWordSplitterImplementation</name><parameter_list pos:line="37" pos:column="67">()</parameter_list>
		<block pos:line="38" pos:column="17">{
			<return pos:line="39" pos:column="25">return <expr><name pos:line="39" pos:column="32">wordSplitter</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="42" pos:column="17">public</specifier> <name pos:line="42" pos:column="24">void</name></type> <name pos:line="42" pos:column="29">RegisterWordSplitterImplementation</name><parameter_list pos:line="42" pos:column="63">(<param><decl><type><name pos:line="42" pos:column="64">IWordSplitter</name></type> <name pos:line="42" pos:column="78">wordSplitter</name></decl></param>)</parameter_list>
		<block pos:line="43" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">Contract</name><op:operator pos:line="44" pos:column="33">.</op:operator><name pos:line="44" pos:column="34">Requires</name></name><argument_list pos:line="44" pos:column="42">(<argument><expr><name pos:line="44" pos:column="43">wordSplitter</name> <op:operator pos:line="44" pos:column="56">!=</op:operator> <name pos:line="44" pos:column="59">null</name></expr></argument><op:operator pos:line="44" pos:column="63">,</op:operator> <argument><expr><lit:literal type="string" pos:line="44" pos:column="65">"ExtensionPointsManager:RegisterWordSplitterImplementation - wordSplitter cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">this</name><op:operator pos:line="46" pos:column="29">.</op:operator><name pos:line="46" pos:column="30">wordSplitter</name></name> <op:operator pos:line="46" pos:column="43">=</op:operator> <name pos:line="46" pos:column="45">wordSplitter</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="49" pos:column="17">public</specifier> <name pos:line="49" pos:column="24">IResultsReorderer</name></type> <name pos:line="49" pos:column="42">GetResultsReordererImplementation</name><parameter_list pos:line="49" pos:column="75">()</parameter_list>
		<block pos:line="50" pos:column="17">{
			<return pos:line="51" pos:column="25">return <expr><name pos:line="51" pos:column="32">resultsReorderer</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="54" pos:column="17">public</specifier> <name pos:line="54" pos:column="24">void</name></type> <name pos:line="54" pos:column="29">RegisterResultsReordererImplementation</name><parameter_list pos:line="54" pos:column="67">(<param><decl><type><name pos:line="54" pos:column="68">IResultsReorderer</name></type> <name pos:line="54" pos:column="86">resultsReorderer</name></decl></param>)</parameter_list>
		<block pos:line="55" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="56" pos:column="25">Contract</name><op:operator pos:line="56" pos:column="33">.</op:operator><name pos:line="56" pos:column="34">Requires</name></name><argument_list pos:line="56" pos:column="42">(<argument><expr><name pos:line="56" pos:column="43">resultsReorderer</name> <op:operator pos:line="56" pos:column="60">!=</op:operator> <name pos:line="56" pos:column="63">null</name></expr></argument><op:operator pos:line="56" pos:column="67">,</op:operator> <argument><expr><lit:literal type="string" pos:line="56" pos:column="69">"ExtensionPointsManager:RegisterResultsReordererImplementation - resultsReorderer cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="58" pos:column="25">this</name><op:operator pos:line="58" pos:column="29">.</op:operator><name pos:line="58" pos:column="30">resultsReorderer</name></name> <op:operator pos:line="58" pos:column="47">=</op:operator> <name pos:line="58" pos:column="49">resultsReorderer</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="61" pos:column="17">public</specifier> <name pos:line="61" pos:column="24">IQueryWeightsSupplier</name></type> <name pos:line="61" pos:column="46">GetQueryWeightsSupplierImplementation</name><parameter_list pos:line="61" pos:column="83">()</parameter_list>
		<block pos:line="62" pos:column="17">{
			<return pos:line="63" pos:column="25">return <expr><name pos:line="63" pos:column="32">queryWeightsSupplier</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="66" pos:column="17">public</specifier> <name pos:line="66" pos:column="24">void</name></type> <name pos:line="66" pos:column="29">RegisterQueryWeightsSupplierImplementation</name><parameter_list pos:line="66" pos:column="71">(<param><decl><type><name pos:line="66" pos:column="72">IQueryWeightsSupplier</name></type> <name pos:line="66" pos:column="94">queryWeightsSupplier</name></decl></param>)</parameter_list>
		<block pos:line="67" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">Contract</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">Requires</name></name><argument_list pos:line="68" pos:column="42">(<argument><expr><name pos:line="68" pos:column="43">queryWeightsSupplier</name> <op:operator pos:line="68" pos:column="64">!=</op:operator> <name pos:line="68" pos:column="67">null</name></expr></argument><op:operator pos:line="68" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="68" pos:column="73">"ExtensionPointsManager:RegisterQueryWeightsSupplierImplementation - queryWeightsSupplier cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="70" pos:column="25">this</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">queryWeightsSupplier</name></name> <op:operator pos:line="70" pos:column="51">=</op:operator> <name pos:line="70" pos:column="53">queryWeightsSupplier</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="73" pos:column="17">public</specifier> <name pos:line="73" pos:column="24">IQueryRewriter</name></type> <name pos:line="73" pos:column="39">GetQueryRewriterImplementation</name><parameter_list pos:line="73" pos:column="69">()</parameter_list>
		<block pos:line="74" pos:column="17">{
			<return pos:line="75" pos:column="25">return <expr><name pos:line="75" pos:column="32">queryRewriter</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="78" pos:column="17">public</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">RegisterQueryRewriterImplementation</name><parameter_list pos:line="78" pos:column="64">(<param><decl><type><name pos:line="78" pos:column="65">IQueryRewriter</name></type> <name pos:line="78" pos:column="80">queryRewriter</name></decl></param>)</parameter_list>
		<block pos:line="79" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">Contract</name><op:operator pos:line="80" pos:column="33">.</op:operator><name pos:line="80" pos:column="34">Requires</name></name><argument_list pos:line="80" pos:column="42">(<argument><expr><name pos:line="80" pos:column="43">queryRewriter</name> <op:operator pos:line="80" pos:column="57">!=</op:operator> <name pos:line="80" pos:column="60">null</name></expr></argument><op:operator pos:line="80" pos:column="64">,</op:operator> <argument><expr><lit:literal type="string" pos:line="80" pos:column="66">"ExtensionPointsManager:RegisterQueryRewriterImplementation - queryRewriter cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="82" pos:column="25">this</name><op:operator pos:line="82" pos:column="29">.</op:operator><name pos:line="82" pos:column="30">queryRewriter</name></name> <op:operator pos:line="82" pos:column="44">=</op:operator> <name pos:line="82" pos:column="46">queryRewriter</name></expr>;</expr_stmt>
		}</block></function>

        <function><type><specifier pos:line="85" pos:column="9">public</specifier> <name pos:line="85" pos:column="16">IIndexFilterManager</name></type> <name pos:line="85" pos:column="36">GetIndexFilterManagerImplementation</name><parameter_list pos:line="85" pos:column="71">()</parameter_list>
        <block pos:line="86" pos:column="9">{
            <return pos:line="87" pos:column="13">return <expr><name pos:line="87" pos:column="20">indexFilterManager</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">RegisterIndexFilterManagerImplementation</name><parameter_list pos:line="90" pos:column="61">(<param><decl><type><name pos:line="90" pos:column="62">IIndexFilterManager</name></type> <name pos:line="90" pos:column="82">indexFilterManager</name></decl></param>)</parameter_list>
        <block pos:line="91" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Contract</name><op:operator pos:line="92" pos:column="21">.</op:operator><name pos:line="92" pos:column="22">Requires</name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">indexFilterManager</name> <op:operator pos:line="92" pos:column="50">!=</op:operator> <name pos:line="92" pos:column="53">null</name></expr></argument><op:operator pos:line="92" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="92" pos:column="59">"ExtensionPointsManager:RegisterIndexFilterManagerImplementation - indexFilterManager cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="94" pos:column="13">this</name><op:operator pos:line="94" pos:column="17">.</op:operator><name pos:line="94" pos:column="18">indexFilterManager</name></name> <op:operator pos:line="94" pos:column="37">=</op:operator> <name pos:line="94" pos:column="39">indexFilterManager</name></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="97" pos:column="17">public</specifier> <name pos:line="97" pos:column="24">void</name></type> <name pos:line="97" pos:column="29">ClearRepository</name><parameter_list pos:line="97" pos:column="44">()</parameter_list>
		<block pos:line="98" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">parsers</name><op:operator pos:line="99" pos:column="32">.</op:operator><name pos:line="99" pos:column="33">Clear</name></name><argument_list pos:line="99" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="100" pos:column="25">wordSplitter</name> <op:operator pos:line="100" pos:column="38">=</op:operator> <name pos:line="100" pos:column="40">null</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">resultsReorderer</name> <op:operator pos:line="101" pos:column="42">=</op:operator> <name pos:line="101" pos:column="44">null</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="102" pos:column="25">queryWeightsSupplier</name> <op:operator pos:line="102" pos:column="46">=</op:operator> <name pos:line="102" pos:column="48">null</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="103" pos:column="25">queryRewriter</name> <op:operator pos:line="103" pos:column="39">=</op:operator> <name pos:line="103" pos:column="41">null</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name pos:line="104" pos:column="21">indexFilterManager</name> <op:operator pos:line="104" pos:column="40">=</op:operator> <name pos:line="104" pos:column="42">null</name></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="107" pos:column="17">public</specifier> <specifier pos:line="107" pos:column="24">static</specifier> <name pos:line="107" pos:column="31">ExtensionPointsRepository</name></type> <name pos:line="107" pos:column="57">Instance</name>
		<block pos:line="108" pos:column="17">{
			<function><name pos:line="109" pos:column="25">get</name>
			<block pos:line="110" pos:column="25">{
                <if pos:line="111" pos:column="17">if<condition pos:line="111" pos:column="19">(<expr><name pos:line="111" pos:column="20">extensionPointsRepository</name> <op:operator pos:line="111" pos:column="46">==</op:operator> <name pos:line="111" pos:column="49">null</name></expr>)</condition><then pos:line="111" pos:column="54">
                <block pos:line="112" pos:column="17">{
                    <expr_stmt><expr><name pos:line="113" pos:column="21">extensionPointsRepository</name> <op:operator pos:line="113" pos:column="47">=</op:operator> <op:operator pos:line="113" pos:column="49">new</op:operator> <call><name pos:line="113" pos:column="53">ExtensionPointsRepository</name><argument_list pos:line="113" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="115" pos:column="17">return <expr><name pos:line="115" pos:column="24">extensionPointsRepository</name></expr>;</return>
			}</block></function>
		}</block></decl></decl_stmt>

		<constructor><specifier pos:line="119" pos:column="17">private</specifier> <name pos:line="119" pos:column="25">ExtensionPointsRepository</name><parameter_list pos:line="119" pos:column="50">()</parameter_list>
		<block pos:line="120" pos:column="17">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">parsers</name> <op:operator pos:line="121" pos:column="33">=</op:operator> <op:operator pos:line="121" pos:column="35">new</op:operator> <call><name><name pos:line="121" pos:column="39">Dictionary</name><argument_list pos:line="121" pos:column="49">&lt;<argument><name pos:line="121" pos:column="50">string</name></argument>, <argument><name pos:line="121" pos:column="58">IParser</name></argument>&gt;</argument_list></name><argument_list pos:line="121" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="124" pos:column="9">private</specifier> <specifier pos:line="124" pos:column="17">static</specifier> <name pos:line="124" pos:column="24">ExtensionPointsRepository</name></type> <name pos:line="124" pos:column="50">extensionPointsRepository</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="126" pos:column="17">private</specifier> <name><name pos:line="126" pos:column="25">Dictionary</name><argument_list pos:line="126" pos:column="35">&lt;<argument><name pos:line="126" pos:column="36">string</name></argument>, <argument><name pos:line="126" pos:column="44">IParser</name></argument>&gt;</argument_list></name></type> <name pos:line="126" pos:column="53">parsers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="127" pos:column="17">private</specifier> <name pos:line="127" pos:column="25">IWordSplitter</name></type> <name pos:line="127" pos:column="39">wordSplitter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="128" pos:column="17">private</specifier> <name pos:line="128" pos:column="25">IResultsReorderer</name></type> <name pos:line="128" pos:column="43">resultsReorderer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="129" pos:column="17">private</specifier> <name pos:line="129" pos:column="25">IQueryWeightsSupplier</name></type> <name pos:line="129" pos:column="47">queryWeightsSupplier</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="130" pos:column="17">private</specifier> <name pos:line="130" pos:column="25">IQueryRewriter</name></type> <name pos:line="130" pos:column="40">queryRewriter</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><specifier pos:line="131" pos:column="13">private</specifier> <name pos:line="131" pos:column="21">IIndexFilterManager</name></type> <name pos:line="131" pos:column="41">indexFilterManager</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
