<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core.UnitTests\Extensions\ExtensionPointsRepositoryTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">Moq</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">NUnit</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Core</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Extensions</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ParserContracts</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">UnitTests</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">Extensions</name></name>
<block pos:line="8" pos:column="1">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ExtensionPointsRepositoryTest</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">GetParserImplementation_ReturnsParserWhenCalledWithLowerOrUpperCasedExtensionName</name><parameter_list pos:line="13" pos:column="102">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">parserMock</name> =<init pos:line="15" pos:column="29"> <expr><op:operator pos:line="15" pos:column="30">new</op:operator> <call><name><name pos:line="15" pos:column="34">Mock</name><argument_list pos:line="15" pos:column="38">&lt;<argument><name pos:line="15" pos:column="39">IParser</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">ExtensionPointsRepository</name><op:operator pos:line="16" pos:column="38">.</op:operator><name pos:line="16" pos:column="39">Instance</name><op:operator pos:line="16" pos:column="47">.</op:operator><name pos:line="16" pos:column="48">RegisterParserImplementation</name></name><argument_list pos:line="16" pos:column="76">(<argument><expr><op:operator pos:line="16" pos:column="77">new</op:operator> <name><name pos:line="16" pos:column="81">List</name><argument_list pos:line="16" pos:column="85">&lt;<argument><name pos:line="16" pos:column="86">string</name></argument>&gt;</argument_list></name> <block pos:line="16" pos:column="94">{<expr><lit:literal type="string" pos:line="16" pos:column="95">".H"</lit:literal></expr><op:operator pos:line="16" pos:column="99">,</op:operator> <expr><lit:literal type="string" pos:line="16" pos:column="101">".cpp"</lit:literal></expr>}</block></expr></argument><op:operator pos:line="16" pos:column="108">,</op:operator> <argument><expr><name><name pos:line="16" pos:column="110">parserMock</name><op:operator pos:line="16" pos:column="120">.</op:operator><name pos:line="16" pos:column="121">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">IsNotNull</name></name><argument_list pos:line="17" pos:column="29">(<argument><expr><call><name><name pos:line="17" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="17" pos:column="55">.</op:operator><name pos:line="17" pos:column="56">Instance</name><op:operator pos:line="17" pos:column="64">.</op:operator><name pos:line="17" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="17" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="89">".h"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">Assert</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">IsNotNull</name></name><argument_list pos:line="18" pos:column="29">(<argument><expr><call><name><name pos:line="18" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="18" pos:column="55">.</op:operator><name pos:line="18" pos:column="56">Instance</name><op:operator pos:line="18" pos:column="64">.</op:operator><name pos:line="18" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="18" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="89">".H"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">IsNotNull</name></name><argument_list pos:line="19" pos:column="29">(<argument><expr><call><name><name pos:line="19" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="19" pos:column="55">.</op:operator><name pos:line="19" pos:column="56">Instance</name><op:operator pos:line="19" pos:column="64">.</op:operator><name pos:line="19" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="19" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="89">".cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">IsNotNull</name></name><argument_list pos:line="20" pos:column="29">(<argument><expr><call><name><name pos:line="20" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="20" pos:column="55">.</op:operator><name pos:line="20" pos:column="56">Instance</name><op:operator pos:line="20" pos:column="64">.</op:operator><name pos:line="20" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="20" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="89">".CPP"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
