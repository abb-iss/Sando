<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core\Extensions\Logging\FileLogger.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">log4net</name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">log4net</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Appender</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">log4net</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Config</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">log4net</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Layout</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">log4net</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Repository</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Hierarchy</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Extensions</name><op:operator pos:line="11" pos:column="32">.</op:operator><name pos:line="11" pos:column="33">Logging</name></name>
<block pos:line="12" pos:column="1">{
	<class><specifier pos:line="13" pos:column="9">public</specifier> class <name pos:line="13" pos:column="22">FileLogger</name>
    <block pos:line="14" pos:column="5">{
        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">void</name></type> <name pos:line="15" pos:column="28">SetupDefautlFileLogger</name><parameter_list pos:line="15" pos:column="50">(<param><decl><type><name pos:line="15" pos:column="51">string</name></type> <name pos:line="15" pos:column="58">directoryPath</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">defaultLogPath</name> =<init pos:line="17" pos:column="33"> <expr><call><name><name pos:line="17" pos:column="34">Path</name><op:operator pos:line="17" pos:column="38">.</op:operator><name pos:line="17" pos:column="39">Combine</name></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">directoryPath</name></expr></argument><op:operator pos:line="17" pos:column="60">,</op:operator> <argument><expr><lit:literal type="string" pos:line="17" pos:column="62">"Sando "</lit:literal> <op:operator pos:line="17" pos:column="71">+</op:operator> <call><name><name pos:line="17" pos:column="73">DateTime</name><op:operator pos:line="17" pos:column="81">.</op:operator><name pos:line="17" pos:column="82">Now</name><op:operator pos:line="17" pos:column="85">.</op:operator><name pos:line="17" pos:column="86">ToString</name></name><argument_list pos:line="17" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="95">"yyyy-MM-dd HH.mm.ss"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="17" pos:column="118">+</op:operator> <lit:literal type="string" pos:line="17" pos:column="120">".log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">CreateDefaultLogger</name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">defaultLogPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">_isDefaultLoggerInitialized</name> <op:operator pos:line="19" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="43">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">static</specifier> <name pos:line="22" pos:column="23">ILog</name></type> <name pos:line="22" pos:column="28">CreateFileLogger</name><parameter_list pos:line="22" pos:column="44">(<param><decl><type><name pos:line="22" pos:column="45">string</name></type> <name pos:line="22" pos:column="52">loggerName</name></decl></param><op:operator pos:line="22" pos:column="62">,</op:operator> <param><decl><type><name pos:line="22" pos:column="64">string</name></type> <name pos:line="22" pos:column="71">filePath</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">appender</name> =<init pos:line="24" pos:column="27"> <expr><call><name pos:line="24" pos:column="28">CreateFileAppender</name><argument_list pos:line="24" pos:column="46">(<argument><expr><name pos:line="24" pos:column="47">loggerName</name> <op:operator pos:line="24" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="24" pos:column="60">"Appender"</lit:literal></expr></argument><op:operator pos:line="24" pos:column="70">,</op:operator> <argument><expr><name pos:line="24" pos:column="72">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">AddAppender</name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">loggerName</name></expr></argument><op:operator pos:line="25" pos:column="35">,</op:operator> <argument><expr><name pos:line="25" pos:column="37">appender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="26" pos:column="13">return <expr><call><name><name pos:line="26" pos:column="20">LogManager</name><op:operator pos:line="26" pos:column="30">.</op:operator><name pos:line="26" pos:column="31">GetLogger</name></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">loggerName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">ILog</name></type> <name pos:line="29" pos:column="28">DefaultLogger</name>
        <block pos:line="30" pos:column="9">{
            <function><name pos:line="31" pos:column="13">get</name>
            <block pos:line="32" pos:column="13">{
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">_isDefaultLoggerInitialized</name></expr>)</condition><then pos:line="33" pos:column="49">
                    <return pos:line="34" pos:column="21">return <expr><call><name><name pos:line="34" pos:column="28">LogManager</name><op:operator pos:line="34" pos:column="38">.</op:operator><name pos:line="34" pos:column="39">GetLogger</name></name><argument_list pos:line="34" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="49">"DefaultLogger"</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>
                <return pos:line="35" pos:column="17">return <expr><call><name><name pos:line="35" pos:column="24">LogManager</name><op:operator pos:line="35" pos:column="34">.</op:operator><name pos:line="35" pos:column="35">GetLogger</name></name><argument_list pos:line="35" pos:column="44">(<argument><expr><call><name><name pos:line="35" pos:column="45">Assembly</name><op:operator pos:line="35" pos:column="53">.</op:operator><name pos:line="35" pos:column="54">GetCallingAssembly</name></name><argument_list pos:line="35" pos:column="72">()</argument_list></call></expr></argument><op:operator pos:line="35" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="35" pos:column="76">"Logger"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="39" pos:column="9">private</specifier> <specifier pos:line="39" pos:column="17">static</specifier> <name pos:line="39" pos:column="24">void</name></type> <name pos:line="39" pos:column="29">AddAppender</name><parameter_list pos:line="39" pos:column="40">(<param><decl><type><name pos:line="39" pos:column="41">string</name></type> <name pos:line="39" pos:column="48">loggerName</name></decl></param><op:operator pos:line="39" pos:column="58">,</op:operator> <param><decl><type><name pos:line="39" pos:column="60">IAppender</name></type> <name pos:line="39" pos:column="70">appender</name></decl></param>)</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">log</name> =<init pos:line="41" pos:column="22"> <expr><call><name><name pos:line="41" pos:column="23">LogManager</name><op:operator pos:line="41" pos:column="33">.</op:operator><name pos:line="41" pos:column="34">GetLogger</name></name><argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">loggerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">logger</name> =<init pos:line="42" pos:column="25"> <expr><op:operator pos:line="42" pos:column="26">(</op:operator><name pos:line="42" pos:column="27">Logger</name><op:operator pos:line="42" pos:column="33">)</op:operator><name><name pos:line="42" pos:column="34">log</name><op:operator pos:line="42" pos:column="37">.</op:operator><name pos:line="42" pos:column="38">Logger</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">logger</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">AddAppender</name></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">appender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">logger</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">Repository</name><op:operator pos:line="45" pos:column="30">.</op:operator><name pos:line="45" pos:column="31">Configured</name></name> <op:operator pos:line="45" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="45" pos:column="44">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="48" pos:column="9">private</specifier> <specifier pos:line="48" pos:column="17">static</specifier> <name pos:line="48" pos:column="24">IAppender</name></type> <name pos:line="48" pos:column="34">CreateFileAppender</name><parameter_list pos:line="48" pos:column="52">(<param><decl><type><name pos:line="48" pos:column="53">string</name></type> <name pos:line="48" pos:column="60">name</name></decl></param><op:operator pos:line="48" pos:column="64">,</op:operator> <param><decl><type><name pos:line="48" pos:column="66">string</name></type> <name pos:line="48" pos:column="73">fileName</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">appender</name> =<init pos:line="50" pos:column="27"> <expr><op:operator pos:line="50" pos:column="28">new</op:operator> <name pos:line="50" pos:column="32">FileAppender</name>
                <block pos:line="51" pos:column="17">{
                    <expr><name pos:line="52" pos:column="21">Name</name> <op:operator pos:line="52" pos:column="26">=</op:operator> <name pos:line="52" pos:column="28">name</name></expr><op:operator pos:line="52" pos:column="32">,</op:operator> 
                    <expr><name pos:line="53" pos:column="21">File</name> <op:operator pos:line="53" pos:column="26">=</op:operator> <name pos:line="53" pos:column="28">fileName</name></expr><op:operator pos:line="53" pos:column="36">,</op:operator> 
                    <expr><name pos:line="54" pos:column="21">AppendToFile</name> <op:operator pos:line="54" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="54" pos:column="36">false</lit:literal></expr><op:operator pos:line="54" pos:column="41">,</op:operator>
                    <expr><name pos:line="55" pos:column="21">ImmediateFlush</name> <op:operator pos:line="55" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="55" pos:column="38">true</lit:literal></expr><op:operator pos:line="55" pos:column="42">,</op:operator>
                    <expr><name pos:line="56" pos:column="21">LockingModel</name> <op:operator pos:line="56" pos:column="34">=</op:operator> <op:operator pos:line="56" pos:column="36">new</op:operator> <call><name><name pos:line="56" pos:column="40">FileAppender</name><op:operator pos:line="56" pos:column="52">.</op:operator><name pos:line="56" pos:column="53">MinimalLock</name></name> <argument_list pos:line="56" pos:column="65">()</argument_list></call></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">layout</name> =<init pos:line="59" pos:column="25"> <expr><op:operator pos:line="59" pos:column="26">new</op:operator> <name pos:line="59" pos:column="30">PatternLayout</name>
                <block pos:line="60" pos:column="17">{
                    <expr><name pos:line="61" pos:column="21">ConversionPattern</name> <op:operator pos:line="61" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="61" pos:column="41">"%date %-5level %logger - %message%newline"</lit:literal></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">layout</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">ActivateOptions</name></name><argument_list pos:line="63" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="65" pos:column="13">appender</name><op:operator pos:line="65" pos:column="21">.</op:operator><name pos:line="65" pos:column="22">Layout</name></name> <op:operator pos:line="65" pos:column="29">=</op:operator> <name pos:line="65" pos:column="31">layout</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">appender</name><op:operator pos:line="66" pos:column="21">.</op:operator><name pos:line="66" pos:column="22">ActivateOptions</name></name><argument_list pos:line="66" pos:column="37">()</argument_list></call></expr>;</expr_stmt>

            <return pos:line="68" pos:column="13">return <expr><name pos:line="68" pos:column="20">appender</name></expr>;</return>
        }</block></function>

	    <function><type><specifier pos:line="71" pos:column="13">private</specifier> <specifier pos:line="71" pos:column="21">static</specifier> <name pos:line="71" pos:column="28">void</name></type> <name pos:line="71" pos:column="33">CreateDefaultLogger</name><parameter_list pos:line="71" pos:column="52">(<param><decl><type><name pos:line="71" pos:column="53">string</name></type> <name pos:line="71" pos:column="60">defaultLoggerLogFile</name></decl></param>)</parameter_list>
		<block pos:line="72" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">string</name></type> <name pos:line="73" pos:column="32">configurationContent</name> =<init pos:line="73" pos:column="54">
				<expr><lit:literal type="string" pos:line="74" pos:column="33">@"&lt;?xml version='1.0'?&gt;
				&lt;log4net&gt;
					&lt;appender name='DefaultFileAppender' type='log4net.Appender.FileAppender'&gt;
						&lt;file value='"</lit:literal> <op:operator pos:line="77" pos:column="64">+</op:operator> <name pos:line="77" pos:column="66">defaultLoggerLogFile</name> <op:operator pos:line="77" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="77" pos:column="89">@"' /&gt;
						&lt;appendToFile value='false' /&gt;
						&lt;lockingModel type='log4net.Appender.FileAppender+MinimalLock' /&gt;
						&lt;maximumFileSize value='100KB' /&gt;
						&lt;layout type='log4net.Layout.PatternLayout'&gt;
							&lt;conversionPattern value='%date %-5level %logger - %message%newline' /&gt;
						&lt;/layout&gt;
					&lt;/appender&gt;

                    &lt;logger name='DefaultLogger' additivity='false'&gt;
                        &lt;level value='ALL' /&gt;
                        &lt;appender-ref ref='DefaultFileAppender' /&gt;
                    &lt;/logger&gt;
    
					&lt;root&gt;
						&lt;level value='DEBUG' /&gt;
						&lt;appender-ref ref='DefaultFileAppender' /&gt;
					&lt;/root&gt;
				&lt;/log4net&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="96" pos:column="25">XmlConfigurator</name><op:operator pos:line="96" pos:column="40">.</op:operator><name pos:line="96" pos:column="41">Configure</name></name><argument_list pos:line="96" pos:column="50">(<argument><expr><op:operator pos:line="96" pos:column="51">new</op:operator> <call><name pos:line="96" pos:column="55">MemoryStream</name><argument_list pos:line="96" pos:column="67">(<argument><expr><call><name><name pos:line="96" pos:column="68">Encoding</name><op:operator pos:line="96" pos:column="76">.</op:operator><name pos:line="96" pos:column="77">Default</name><op:operator pos:line="96" pos:column="84">.</op:operator><name pos:line="96" pos:column="85">GetBytes</name></name><argument_list pos:line="96" pos:column="93">(<argument><expr><name pos:line="96" pos:column="94">configurationContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	    <decl_stmt><decl><type><specifier pos:line="99" pos:column="13">private</specifier> <specifier pos:line="99" pos:column="21">static</specifier> <name pos:line="99" pos:column="28">bool</name></type> <name pos:line="99" pos:column="33">_isDefaultLoggerInitialized</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
