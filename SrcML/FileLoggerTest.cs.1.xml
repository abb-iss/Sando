<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core.UnitTests\Extensions\Logging\FileLoggerTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Core</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Extensions</name><op:operator pos:line="3" pos:column="28">.</op:operator><name pos:line="3" pos:column="29">Logging</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Core</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">UnitTests</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">Extensions</name><op:operator pos:line="6" pos:column="42">.</op:operator><name pos:line="6" pos:column="43">Logging</name></name>
<block pos:line="7" pos:column="1">{
    <class><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">FileLoggerTest</name>
    <block pos:line="10" pos:column="5">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">GIVEN_FileLoggerNotInitialize_WHEN_SetupDefautlFileLoggerMethodIsCalled_AND_DefaultLoggerIsUsed_THEN_LogFileShouldBeCreatedAndContainLoggedMessage</name><parameter_list pos:line="12" pos:column="167">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">FileLogger</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">SetupDefautlFileLogger</name></name><argument_list pos:line="14" pos:column="46">(<argument><expr><name pos:line="14" pos:column="47">_directoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">FileLogger</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">DefaultLogger</name><op:operator pos:line="15" pos:column="37">.</op:operator><name pos:line="15" pos:column="38">Info</name></name><argument_list pos:line="15" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="43">"Message from the logger"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">logFiles</name> =<init pos:line="16" pos:column="27"> <expr><call><name><name pos:line="16" pos:column="28">Directory</name><op:operator pos:line="16" pos:column="37">.</op:operator><name pos:line="16" pos:column="38">GetFiles</name></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name pos:line="16" pos:column="47">_directoryPath</name></expr></argument>)</argument_list></call><op:operator pos:line="16" pos:column="62">.</op:operator><call><name pos:line="16" pos:column="63">AsEnumerable</name><argument_list pos:line="16" pos:column="75">()</argument_list></call><op:operator pos:line="16" pos:column="77">.</op:operator><call><name pos:line="16" pos:column="78">Where</name><argument_list pos:line="16" pos:column="83">(<argument><expr><name pos:line="16" pos:column="84">f</name> <op:operator pos:line="16" pos:column="86">=&gt;</op:operator> <call><name><name pos:line="16" pos:column="89">f</name><op:operator pos:line="16" pos:column="90">.</op:operator><name pos:line="16" pos:column="91">Contains</name></name><argument_list pos:line="16" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="100">"Sando"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="16" pos:column="109">&amp;&amp;</op:operator> <call><name><name pos:line="16" pos:column="112">f</name><op:operator pos:line="16" pos:column="113">.</op:operator><name pos:line="16" pos:column="114">EndsWith</name></name><argument_list pos:line="16" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="123">".log"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="16" pos:column="131">.</op:operator><call><name pos:line="16" pos:column="132">ToList</name><argument_list pos:line="16" pos:column="138">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">IsTrue</name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name><name pos:line="17" pos:column="27">logFiles</name><op:operator pos:line="17" pos:column="35">.</op:operator><name pos:line="17" pos:column="36">Any</name></name><argument_list pos:line="17" pos:column="39">()</argument_list></call></expr></argument><op:operator pos:line="17" pos:column="41">,</op:operator> <argument><expr><lit:literal type="string" pos:line="17" pos:column="43">"There should be log file created!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">content</name> =<init pos:line="18" pos:column="26"> <expr><call><name><name pos:line="18" pos:column="27">File</name><op:operator pos:line="18" pos:column="31">.</op:operator><name pos:line="18" pos:column="32">ReadAllText</name></name><argument_list pos:line="18" pos:column="43">(<argument><expr><call><name><name pos:line="18" pos:column="44">logFiles</name><op:operator pos:line="18" pos:column="52">.</op:operator><name pos:line="18" pos:column="53">First</name></name><argument_list pos:line="18" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">IsTrue</name></name><argument_list pos:line="19" pos:column="26">(<argument><expr><call><name><name pos:line="19" pos:column="27">content</name><op:operator pos:line="19" pos:column="34">.</op:operator><name pos:line="19" pos:column="35">Contains</name></name><argument_list pos:line="19" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="44">"Message from the logger"</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="19" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="19" pos:column="72">"Invalid log file content"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">SetUp</name><parameter_list pos:line="23" pos:column="26">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">_directoryPath</name> <op:operator pos:line="25" pos:column="28">=</op:operator> <call><name><name pos:line="25" pos:column="30">Path</name><op:operator pos:line="25" pos:column="34">.</op:operator><name pos:line="25" pos:column="35">Combine</name></name><argument_list pos:line="25" pos:column="42">(<argument><expr><call><name><name pos:line="25" pos:column="43">Path</name><op:operator pos:line="25" pos:column="47">.</op:operator><name pos:line="25" pos:column="48">GetTempPath</name></name><argument_list pos:line="25" pos:column="59">()</argument_list></call></expr></argument><op:operator pos:line="25" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="25" pos:column="63">"LogTest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><call><name><name pos:line="26" pos:column="17">Directory</name><op:operator pos:line="26" pos:column="26">.</op:operator><name pos:line="26" pos:column="27">Exists</name></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">_directoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="26" pos:column="50">
            <block pos:line="27" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="28" pos:column="17">Directory</name><op:operator pos:line="28" pos:column="26">.</op:operator><name pos:line="28" pos:column="27">Delete</name></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">_directoryPath</name></expr></argument><op:operator pos:line="28" pos:column="48">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="28" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="29" pos:column="17">Directory</name><op:operator pos:line="29" pos:column="26">.</op:operator><name pos:line="29" pos:column="27">CreateDirectory</name></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">_directoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">TearDown</name><parameter_list pos:line="34" pos:column="29">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><call><name><name pos:line="36" pos:column="17">Directory</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">Exists</name></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">_directoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="36" pos:column="50">
                <expr_stmt><expr><call><name><name pos:line="37" pos:column="17">Directory</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">Delete</name></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">_directoryPath</name></expr></argument><op:operator pos:line="37" pos:column="48">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="37" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">private</specifier> <name pos:line="40" pos:column="17">string</name></type> <name pos:line="40" pos:column="24">_directoryPath</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace></unit>
