<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UI\UI\Actions\FileOpener.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">EnvDTE</name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">EnvDTE80</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Extensions</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Logging</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">UI</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Actions</name></name>
<block pos:line="9" pos:column="1">{
		<class><specifier pos:line="10" pos:column="17">public</specifier> <specifier pos:line="10" pos:column="24">static</specifier> class <name pos:line="10" pos:column="37">FileOpener</name>
    	<block pos:line="11" pos:column="9">{
			<decl_stmt><decl><type><specifier pos:line="12" pos:column="25">private</specifier> <specifier pos:line="12" pos:column="33">static</specifier> <name pos:line="12" pos:column="40">DTE2</name></type> <name pos:line="12" pos:column="45">_dte</name></decl>;</decl_stmt>

            <function><type><specifier pos:line="14" pos:column="13">public</specifier> <specifier pos:line="14" pos:column="20">static</specifier> <name pos:line="14" pos:column="27">void</name></type> <name pos:line="14" pos:column="32">OpenItem</name><parameter_list pos:line="14" pos:column="40">(<param><decl><type><name pos:line="14" pos:column="41">CodeSearchResult</name></type> <name pos:line="14" pos:column="58">result</name></decl></param><op:operator pos:line="14" pos:column="64">,</op:operator> <param><decl><type><name pos:line="14" pos:column="66">string</name></type> <name pos:line="14" pos:column="73">text</name></decl></param>)</parameter_list>
    		<block pos:line="15" pos:column="17">{
    			<if pos:line="16" pos:column="25">if<condition pos:line="16" pos:column="27">(<expr><name pos:line="16" pos:column="28">result</name> <op:operator pos:line="16" pos:column="35">!=</op:operator> <name pos:line="16" pos:column="38">null</name></expr>)</condition><then pos:line="16" pos:column="43">
    			<block pos:line="17" pos:column="25">{
					<expr_stmt><expr><call><name pos:line="18" pos:column="41">OpenFile</name><argument_list pos:line="18" pos:column="49">(<argument><expr><name><name pos:line="18" pos:column="50">result</name><op:operator pos:line="18" pos:column="56">.</op:operator><name pos:line="18" pos:column="57">ProgramElement</name><op:operator pos:line="18" pos:column="71">.</op:operator><name pos:line="18" pos:column="72">FullFilePath</name></name></expr></argument><op:operator pos:line="18" pos:column="84">,</op:operator> <argument><expr><name><name pos:line="18" pos:column="86">result</name><op:operator pos:line="18" pos:column="92">.</op:operator><name pos:line="18" pos:column="93">ProgramElement</name><op:operator pos:line="18" pos:column="107">.</op:operator><name pos:line="18" pos:column="108">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="18" pos:column="128">,</op:operator> <argument><expr><name pos:line="18" pos:column="130">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    			}</block></then></if>
    		}</block></function>

    		<function><type><specifier pos:line="22" pos:column="17">public</specifier> <specifier pos:line="22" pos:column="24">static</specifier> <name pos:line="22" pos:column="31">void</name></type> <name pos:line="22" pos:column="36">OpenFile</name><parameter_list pos:line="22" pos:column="44">(<param><decl><type><name pos:line="22" pos:column="45">string</name></type> <name pos:line="22" pos:column="52">filePath</name></decl></param><op:operator pos:line="22" pos:column="60">,</op:operator> <param><decl><type><name pos:line="22" pos:column="62">int</name></type> <name pos:line="22" pos:column="66">lineNumber</name></decl></param><op:operator pos:line="22" pos:column="76">,</op:operator> <param><decl><type><name pos:line="22" pos:column="78">string</name></type> <name pos:line="22" pos:column="85">text</name></decl></param>)</parameter_list>
    		<block pos:line="23" pos:column="17">{
    			<expr_stmt><expr><call><name pos:line="24" pos:column="25">InitDte2</name><argument_list pos:line="24" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">_dte</name><op:operator pos:line="25" pos:column="29">.</op:operator><name pos:line="25" pos:column="30">ItemOperations</name><op:operator pos:line="25" pos:column="44">.</op:operator><name pos:line="25" pos:column="45">OpenFile</name></name><argument_list pos:line="25" pos:column="53">(<argument><expr><name pos:line="25" pos:column="54">filePath</name></expr></argument><op:operator pos:line="25" pos:column="62">,</op:operator> <argument><expr><name><name pos:line="25" pos:column="64">Constants</name><op:operator pos:line="25" pos:column="73">.</op:operator><name pos:line="25" pos:column="74">vsViewKindTextView</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    			<try pos:line="26" pos:column="25">try
    			<block pos:line="27" pos:column="25">{
    				<decl_stmt><decl><type><name pos:line="28" pos:column="33">var</name></type> <name pos:line="28" pos:column="37">selection</name> =<init pos:line="28" pos:column="48"> <expr><op:operator pos:line="28" pos:column="49">(</op:operator><name pos:line="28" pos:column="50">TextSelection</name><op:operator pos:line="28" pos:column="63">)</op:operator> <name><name pos:line="28" pos:column="65">_dte</name><op:operator pos:line="28" pos:column="69">.</op:operator><name pos:line="28" pos:column="70">ActiveDocument</name><op:operator pos:line="28" pos:column="84">.</op:operator><name pos:line="28" pos:column="85">Selection</name></name></expr></init></decl>;</decl_stmt>                    
    				<expr_stmt><expr><call><name><name pos:line="29" pos:column="33">selection</name><op:operator pos:line="29" pos:column="42">.</op:operator><name pos:line="29" pos:column="43">GotoLine</name></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="31" pos:column="21">if <condition pos:line="31" pos:column="24">(<expr><call><name pos:line="31" pos:column="25">IsLiteralSearchString</name><argument_list pos:line="31" pos:column="46">(<argument><expr><name pos:line="31" pos:column="47">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="31" pos:column="53">
                        <expr_stmt><expr><call><name pos:line="32" pos:column="25">FocusOnLiteralString</name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else pos:line="33" pos:column="21">else
                        <expr_stmt><expr><call><name pos:line="34" pos:column="25">HighlightTerms</name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    			}</block>
    			<catch pos:line="36" pos:column="25">catch (<param><decl><type><name pos:line="36" pos:column="32">Exception</name></type> <name pos:line="36" pos:column="42">e</name></decl></param>)
    			<block pos:line="37" pos:column="25">{
                    <expr_stmt><expr><call><name><name pos:line="38" pos:column="21">FileLogger</name><op:operator pos:line="38" pos:column="31">.</op:operator><name pos:line="38" pos:column="32">DefaultLogger</name><op:operator pos:line="38" pos:column="45">.</op:operator><name pos:line="38" pos:column="46">Error</name></name><argument_list pos:line="38" pos:column="51">(<argument><expr><name pos:line="38" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    				<comment type="line" pos:line="39" pos:column="33">//ignore, we don't want this feature ever causing a crash</comment>
    			}</block></catch></try>
    		}</block></function>

            <function><type><specifier pos:line="43" pos:column="13">private</specifier> <specifier pos:line="43" pos:column="21">static</specifier> <name pos:line="43" pos:column="28">void</name></type> <name pos:line="43" pos:column="33">HighlightTerms</name><parameter_list pos:line="43" pos:column="47">(<param><decl><type><name pos:line="43" pos:column="48">string</name></type> <name pos:line="43" pos:column="55">text</name></decl></param>)</parameter_list>
            <block pos:line="44" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">var</name></type> <name pos:line="45" pos:column="21">terms</name> =<init pos:line="45" pos:column="28"> <expr><call><name><name pos:line="45" pos:column="29">text</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">Split</name></name><argument_list pos:line="45" pos:column="39">(<argument><expr><lit:literal type="char" pos:line="45" pos:column="40">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="46" pos:column="17">foreach (<init><decl><type><name pos:line="46" pos:column="26">var</name></type> <name pos:line="46" pos:column="30">term</name> <init pos:line="46" pos:column="35">in <expr><name pos:line="46" pos:column="38">terms</name></expr></init></decl></init>)
                <block pos:line="47" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="48" pos:column="21">var</name></type> <name pos:line="48" pos:column="25">objSel</name> =<init pos:line="48" pos:column="33"> <expr><call pos:line="48" pos:column="34">(<name pos:line="48" pos:column="35">TextSelection</name>)<argument_list pos:line="48" pos:column="49">(<argument><expr><name><name pos:line="48" pos:column="50">_dte</name><op:operator pos:line="48" pos:column="54">.</op:operator><name pos:line="48" pos:column="55">ActiveDocument</name><op:operator pos:line="48" pos:column="69">.</op:operator><name pos:line="48" pos:column="70">Selection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="49" pos:column="21">TextRanges</name></type> <name pos:line="49" pos:column="32">textRanges</name> =<init pos:line="49" pos:column="44"> <expr><name pos:line="49" pos:column="45">null</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="50" pos:column="21">objSel</name><op:operator pos:line="50" pos:column="27">.</op:operator><name pos:line="50" pos:column="28">FindPattern</name></name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">term</name></expr></argument><op:operator pos:line="50" pos:column="44">,</op:operator> <argument><expr><lit:literal type="number" pos:line="50" pos:column="46">0</lit:literal></expr></argument><op:operator pos:line="50" pos:column="47">,</op:operator> <argument><specifier pos:line="50" pos:column="49">ref</specifier> <expr><name pos:line="50" pos:column="53">textRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <block pos:line="51" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="52" pos:column="25">long</name></type> <name pos:line="52" pos:column="30">lStartLine</name> =<init pos:line="52" pos:column="42"> <expr><name><name pos:line="52" pos:column="43">objSel</name><op:operator pos:line="52" pos:column="49">.</op:operator><name pos:line="52" pos:column="50">TopPoint</name><op:operator pos:line="52" pos:column="58">.</op:operator><name pos:line="52" pos:column="59">Line</name></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="53" pos:column="25">long</name></type> <name pos:line="53" pos:column="30">lStartColumn</name> =<init pos:line="53" pos:column="44"> <expr><name><name pos:line="53" pos:column="45">objSel</name><op:operator pos:line="53" pos:column="51">.</op:operator><name pos:line="53" pos:column="52">TopPoint</name><op:operator pos:line="53" pos:column="60">.</op:operator><name pos:line="53" pos:column="61">LineCharOffset</name></name></expr></init></decl>;</decl_stmt>                        
                        <expr_stmt><expr><call><name><name pos:line="54" pos:column="25">objSel</name><op:operator pos:line="54" pos:column="31">.</op:operator><name pos:line="54" pos:column="32">SwapAnchor</name></name><argument_list pos:line="54" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="55" pos:column="25">objSel</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">MoveToLineAndOffset</name></name><argument_list pos:line="55" pos:column="51">(<argument><expr><call><name><name pos:line="55" pos:column="52">Convert</name><op:operator pos:line="55" pos:column="59">.</op:operator><name pos:line="55" pos:column="60">ToInt32</name></name><argument_list pos:line="55" pos:column="67">(<argument><expr><name pos:line="55" pos:column="68">lStartLine</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="55" pos:column="79">,</op:operator> <argument><expr><call><name><name pos:line="55" pos:column="81">Convert</name><op:operator pos:line="55" pos:column="88">.</op:operator><name pos:line="55" pos:column="89">ToInt32</name></name><argument_list pos:line="55" pos:column="96">(<argument><expr><name pos:line="55" pos:column="97">lStartColumn</name><op:operator pos:line="55" pos:column="109">+</op:operator><name><name pos:line="55" pos:column="110">term</name><op:operator pos:line="55" pos:column="114">.</op:operator><name pos:line="55" pos:column="115">Length</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="55" pos:column="122">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="55" pos:column="124">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                
                    }</block>

                }</block></foreach>
            }</block></function>

            <function><type><specifier pos:line="61" pos:column="13">private</specifier> <specifier pos:line="61" pos:column="21">static</specifier> <name pos:line="61" pos:column="28">bool</name></type> <name pos:line="61" pos:column="33">IsLiteralSearchString</name><parameter_list pos:line="61" pos:column="54">(<param><decl><type><name pos:line="61" pos:column="55">string</name></type> <name pos:line="61" pos:column="62">text</name></decl></param>)</parameter_list>
            <block pos:line="62" pos:column="13">{
                <return pos:line="63" pos:column="17">return <expr><call><name><name pos:line="63" pos:column="24">text</name><op:operator pos:line="63" pos:column="28">.</op:operator><name pos:line="63" pos:column="29">Contains</name></name><argument_list pos:line="63" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="38">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="66" pos:column="13">private</specifier> <specifier pos:line="66" pos:column="21">static</specifier> <name pos:line="66" pos:column="28">void</name></type> <name pos:line="66" pos:column="33">FocusOnLiteralString</name><parameter_list pos:line="66" pos:column="53">(<param><decl><type><name pos:line="66" pos:column="54">string</name></type> <name pos:line="66" pos:column="61">text</name></decl></param>)</parameter_list> 
            <block pos:line="67" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="68" pos:column="17">const</name> <name pos:line="68" pos:column="23">char</name></type> <name pos:line="68" pos:column="28">chars</name> =<init pos:line="68" pos:column="35"> <expr><lit:literal type="char" pos:line="68" pos:column="36">'"'</lit:literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="69" pos:column="17">text</name> <op:operator pos:line="69" pos:column="22">=</op:operator> <call><name><name pos:line="69" pos:column="24">text</name><op:operator pos:line="69" pos:column="28">.</op:operator><name pos:line="69" pos:column="29">TrimStart</name></name><argument_list pos:line="69" pos:column="38">(<argument><expr><name pos:line="69" pos:column="39">chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="70" pos:column="17">text</name> <op:operator pos:line="70" pos:column="22">=</op:operator> <call><name><name pos:line="70" pos:column="24">text</name><op:operator pos:line="70" pos:column="28">.</op:operator><name pos:line="70" pos:column="29">TrimEnd</name></name><argument_list pos:line="70" pos:column="36">(<argument><expr><name pos:line="70" pos:column="37">chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="71" pos:column="17">var</name></type> <name pos:line="71" pos:column="21">objSel</name> =<init pos:line="71" pos:column="29"> <expr><call pos:line="71" pos:column="30">(<name pos:line="71" pos:column="31">TextSelection</name>)<argument_list pos:line="71" pos:column="45">(<argument><expr><name><name pos:line="71" pos:column="46">_dte</name><op:operator pos:line="71" pos:column="50">.</op:operator><name pos:line="71" pos:column="51">ActiveDocument</name><op:operator pos:line="71" pos:column="65">.</op:operator><name pos:line="71" pos:column="66">Selection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="72" pos:column="17">TextRanges</name></type> <name pos:line="72" pos:column="28">textRanges</name> =<init pos:line="72" pos:column="40"> <expr><name pos:line="72" pos:column="41">null</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">objSel</name><op:operator pos:line="73" pos:column="23">.</op:operator><name pos:line="73" pos:column="24">FindPattern</name></name><argument_list pos:line="73" pos:column="35">(<argument><expr><name pos:line="73" pos:column="36">text</name></expr></argument><op:operator pos:line="73" pos:column="40">,</op:operator> <argument><expr><lit:literal type="number" pos:line="73" pos:column="42">0</lit:literal></expr></argument><op:operator pos:line="73" pos:column="43">,</op:operator> <argument><specifier pos:line="73" pos:column="45">ref</specifier> <expr><name pos:line="73" pos:column="49">textRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block pos:line="74" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="75" pos:column="21">objSel</name><op:operator pos:line="75" pos:column="27">.</op:operator><name pos:line="75" pos:column="28">SelectLine</name></name><argument_list pos:line="75" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
                }</block>                
            }</block></function>    	

    		<function><type><specifier pos:line="79" pos:column="17">private</specifier> <specifier pos:line="79" pos:column="25">static</specifier> <name pos:line="79" pos:column="32">void</name></type> <name pos:line="79" pos:column="37">InitDte2</name><parameter_list pos:line="79" pos:column="45">()</parameter_list>
    		<block pos:line="80" pos:column="17">{
    			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name pos:line="81" pos:column="29">_dte</name> <op:operator pos:line="81" pos:column="34">==</op:operator> <name pos:line="81" pos:column="37">null</name></expr>)</condition><then pos:line="81" pos:column="42">
    			<block pos:line="82" pos:column="25">{
    				<expr_stmt><expr><name pos:line="83" pos:column="33">_dte</name> <op:operator pos:line="83" pos:column="38">=</op:operator> <call><name><name pos:line="83" pos:column="40">ServiceLocator</name><op:operator pos:line="83" pos:column="54">.</op:operator><name><name pos:line="83" pos:column="55">Resolve</name><argument_list pos:line="83" pos:column="62">&lt;<argument><name pos:line="83" pos:column="63">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="83" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
    			}</block></then></if>
    		}</block></function>
    	}</block></class>

}</block></namespace>
</unit>
