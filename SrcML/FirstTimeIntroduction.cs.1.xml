<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UI\UI\View\FirstTimeIntroduction.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Core</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Extensions</name><op:operator pos:line="3" pos:column="28">.</op:operator><name pos:line="3" pos:column="29">Logging</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Sando</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">UI</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">View</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">FirstTimeIntroduction</name>
    <block pos:line="8" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <specifier pos:line="9" pos:column="17">readonly</specifier> <name pos:line="9" pos:column="26">string</name></type> <name pos:line="9" pos:column="33">_directoryPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">private</specifier> <name pos:line="10" pos:column="17">const</name> <name pos:line="10" pos:column="23">string</name></type> <name pos:line="10" pos:column="30">Intro</name> =<init pos:line="10" pos:column="37"> <expr><lit:literal type="string" pos:line="10" pos:column="38">"\\.intro"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name pos:line="11" pos:column="17">bool</name></type> <name pos:line="11" pos:column="22">_updatedDuringThisRun</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">FirstTimeIntroduction</name><parameter_list pos:line="13" pos:column="37">(<param><decl><type><name pos:line="13" pos:column="38">string</name></type> <name pos:line="13" pos:column="45">path</name></decl></param>)</parameter_list>
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><name pos:line="15" pos:column="13">_directoryPath</name> <op:operator pos:line="15" pos:column="28">=</op:operator> <name pos:line="15" pos:column="30">path</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">bool</name></type> <name pos:line="18" pos:column="21">ShouldIntroduce</name><parameter_list pos:line="18" pos:column="36">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <if pos:line="20" pos:column="13">if<condition pos:line="20" pos:column="15">(<expr><call><name><name pos:line="20" pos:column="16">File</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Exists</name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">_directoryPath</name><op:operator pos:line="20" pos:column="42">+</op:operator><name pos:line="20" pos:column="43">Intro</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="20" pos:column="50">
            <block pos:line="21" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="22" pos:column="17">var</name></type> <name pos:line="22" pos:column="21">lastWrite</name> =<init pos:line="22" pos:column="32"> <expr><call><name><name pos:line="22" pos:column="33">File</name><op:operator pos:line="22" pos:column="37">.</op:operator><name pos:line="22" pos:column="38">GetLastWriteTime</name></name><argument_list pos:line="22" pos:column="54">(<argument><expr><name pos:line="22" pos:column="55">_directoryPath</name> <op:operator pos:line="22" pos:column="70">+</op:operator> <name pos:line="22" pos:column="72">Intro</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="23" pos:column="17">var</name></type> <name pos:line="23" pos:column="21">now</name> =<init pos:line="23" pos:column="26"> <expr><name><name pos:line="23" pos:column="27">DateTime</name><op:operator pos:line="23" pos:column="35">.</op:operator><name pos:line="23" pos:column="36">Now</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="24" pos:column="17">return <expr><call><name pos:line="24" pos:column="24">TooLongSinceLastSandoUsage</name><argument_list pos:line="24" pos:column="50">(<argument><expr><name pos:line="24" pos:column="51">lastWrite</name></expr></argument><op:operator pos:line="24" pos:column="60">,</op:operator> <argument><expr><name pos:line="24" pos:column="62">now</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="26" pos:column="13">return <expr><lit:literal type="boolean" pos:line="26" pos:column="20">true</lit:literal></expr>;</return>            
        }</block></function>

        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">Introduced</name><parameter_list pos:line="29" pos:column="31">()</parameter_list>
        <block pos:line="30" pos:column="9">{
            <try pos:line="31" pos:column="13">try
            <block pos:line="32" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">File</name><op:operator pos:line="33" pos:column="21">.</op:operator><name pos:line="33" pos:column="22">Create</name></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">_directoryPath</name> <op:operator pos:line="33" pos:column="44">+</op:operator> <name pos:line="33" pos:column="46">Intro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="35" pos:column="13">catch (<param><decl><type><name pos:line="35" pos:column="20">Exception</name></type> <name pos:line="35" pos:column="30">e</name></decl></param>)
            <block pos:line="36" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="37" pos:column="17">FileLogger</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">DefaultLogger</name><op:operator pos:line="37" pos:column="41">.</op:operator><name pos:line="37" pos:column="42">Error</name></name><argument_list pos:line="37" pos:column="47">(<argument><expr><call><name><name pos:line="37" pos:column="48">ExceptionFormatter</name><op:operator pos:line="37" pos:column="66">.</op:operator><name pos:line="37" pos:column="67">CreateMessage</name></name><argument_list pos:line="37" pos:column="80">(<argument><expr><name pos:line="37" pos:column="81">e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">Update</name><argument_list pos:line="39" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">Update</name><parameter_list pos:line="42" pos:column="27">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><op:operator pos:line="44" pos:column="17">!</op:operator><name pos:line="44" pos:column="18">_updatedDuringThisRun</name></expr>)</condition><then pos:line="44" pos:column="40">
            <block pos:line="45" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">string</name></type> <name pos:line="46" pos:column="24">path</name> =<init pos:line="46" pos:column="30"> <expr><name pos:line="46" pos:column="31">_directoryPath</name> <op:operator pos:line="46" pos:column="46">+</op:operator> <name pos:line="46" pos:column="48">Intro</name></expr></init></decl>;</decl_stmt>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name><name pos:line="47" pos:column="21">File</name><op:operator pos:line="47" pos:column="25">.</op:operator><name pos:line="47" pos:column="26">Exists</name></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="39">
                <block pos:line="48" pos:column="17">{
                    <try pos:line="49" pos:column="21">try
                    <block pos:line="50" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="51" pos:column="25">File</name><op:operator pos:line="51" pos:column="29">.</op:operator><name pos:line="51" pos:column="30">SetLastWriteTimeUtc</name></name><argument_list pos:line="51" pos:column="49">(<argument><expr><name pos:line="51" pos:column="50">path</name></expr></argument><op:operator pos:line="51" pos:column="54">,</op:operator> <argument><expr><name><name pos:line="51" pos:column="56">DateTime</name><op:operator pos:line="51" pos:column="64">.</op:operator><name pos:line="51" pos:column="65">UtcNow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="53" pos:column="21">catch (<param><decl><type><name pos:line="53" pos:column="28">Exception</name></type> <name pos:line="53" pos:column="38">e</name></decl></param>)
                    <block pos:line="54" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="55" pos:column="25">FileLogger</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">DefaultLogger</name><op:operator pos:line="55" pos:column="49">.</op:operator><name pos:line="55" pos:column="50">Error</name></name><argument_list pos:line="55" pos:column="55">(<argument><expr><call><name><name pos:line="55" pos:column="56">ExceptionFormatter</name><op:operator pos:line="55" pos:column="74">.</op:operator><name pos:line="55" pos:column="75">CreateMessage</name></name><argument_list pos:line="55" pos:column="88">(<argument><expr><name pos:line="55" pos:column="89">e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                    <expr_stmt><expr><name pos:line="57" pos:column="21">_updatedDuringThisRun</name> <op:operator pos:line="57" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="57" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">private</specifier> <specifier pos:line="62" pos:column="17">static</specifier> <name pos:line="62" pos:column="24">bool</name></type> <name pos:line="62" pos:column="29">TooLongSinceLastSandoUsage</name><parameter_list pos:line="62" pos:column="55">(<param><decl><type><name pos:line="62" pos:column="56">DateTime</name></type> <name pos:line="62" pos:column="65">lastWrite</name></decl></param><op:operator pos:line="62" pos:column="74">,</op:operator> <param><decl><type><name pos:line="62" pos:column="76">DateTime</name></type> <name pos:line="62" pos:column="85">now</name></decl></param>)</parameter_list>
        <block pos:line="63" pos:column="9">{
            <return pos:line="64" pos:column="13">return <expr><call><name><name pos:line="64" pos:column="20">now</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">Subtract</name></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">lastWrite</name></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="43">.</op:operator><name pos:line="64" pos:column="44">TotalDays</name><op:operator pos:line="64" pos:column="53">&gt;</op:operator><lit:literal type="number" pos:line="64" pos:column="54">4</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
