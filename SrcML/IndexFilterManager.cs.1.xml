<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\IndexFiltering\IndexFilterManager.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Xml</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Serialization</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Extensions</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Logging</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">IndexerContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Linq</name></name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">log4net</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">VisualStudio</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">SolutionMonitor</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Core</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">Sando</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">Indexer</name><op:operator pos:line="16" pos:column="24">.</op:operator><name pos:line="16" pos:column="25">IndexFiltering</name></name>
<block pos:line="17" pos:column="1">{
    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">IndexFilterManager</name> <super pos:line="18" pos:column="37">: <name pos:line="18" pos:column="39">IIndexFilterManager</name></super>
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">protected</specifier> <name pos:line="20" pos:column="19">IndexFilterSettings</name></type> <name pos:line="20" pos:column="39">IndexFilterSettings</name> <block pos:line="20" pos:column="59">{ <function><name pos:line="20" pos:column="61">get</name>;</function> private <function><name pos:line="20" pos:column="74">set</name>;</function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">protected</specifier> <name pos:line="22" pos:column="19">ILog</name></type> <name pos:line="22" pos:column="24">Logger</name> <block pos:line="22" pos:column="31">{ <function><name pos:line="22" pos:column="33">get</name>;</function> <function><name pos:line="22" pos:column="38">set</name>;</function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">const</name> <name pos:line="24" pos:column="23">string</name></type> <name pos:line="24" pos:column="30">IndexFilterSettingsFileName</name> =<init pos:line="24" pos:column="59"> <expr><lit:literal type="string" pos:line="24" pos:column="60">".sandoignore.xml"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">const</name> <name pos:line="25" pos:column="23">string</name></type> <name pos:line="25" pos:column="30">IndexFilterSettingsLogFileName</name> =<init pos:line="25" pos:column="62"> <expr><lit:literal type="string" pos:line="25" pos:column="63">".sandoignore.log"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">string</name></type> <name pos:line="26" pos:column="24">IndexFilterSettingsFilePath</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">IndexFilterManager</name><parameter_list pos:line="28" pos:column="34">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">solutionKey</name> =<init pos:line="30" pos:column="30"> <expr><call><name><name pos:line="30" pos:column="31">ServiceLocator</name><op:operator pos:line="30" pos:column="45">.</op:operator><name><name pos:line="30" pos:column="46">Resolve</name><argument_list pos:line="30" pos:column="53">&lt;<argument><name pos:line="30" pos:column="54">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="31" pos:column="13">IndexFilterSettingsFilePath</name> <op:operator pos:line="31" pos:column="41">=</op:operator> <call><name><name pos:line="31" pos:column="43">Path</name><op:operator pos:line="31" pos:column="47">.</op:operator><name pos:line="31" pos:column="48">Combine</name></name><argument_list pos:line="31" pos:column="55">(<argument><expr><call><name><name pos:line="31" pos:column="56">PathManager</name><op:operator pos:line="31" pos:column="67">.</op:operator><name pos:line="31" pos:column="68">Instance</name><op:operator pos:line="31" pos:column="76">.</op:operator><name pos:line="31" pos:column="77">GetIndexPath</name></name><argument_list pos:line="31" pos:column="89">(<argument><expr><name pos:line="31" pos:column="90">solutionKey</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="31" pos:column="102">,</op:operator> <argument><expr><name pos:line="31" pos:column="104">IndexFilterSettingsFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">IndexFilterSettings</name> <op:operator pos:line="32" pos:column="33">=</op:operator> <call><name><name pos:line="32" pos:column="35">File</name><op:operator pos:line="32" pos:column="39">.</op:operator><name pos:line="32" pos:column="40">Exists</name></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name pos:line="32" pos:column="47">IndexFilterSettingsFilePath</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="76">?</op:operator> <call><name pos:line="32" pos:column="78">GetIndexFilterSettingsFromFile</name><argument_list pos:line="32" pos:column="108">(<argument><expr><name pos:line="32" pos:column="109">IndexFilterSettingsFilePath</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="138">:</op:operator> <call><name pos:line="32" pos:column="140">GetDefaultIndexFilterSettings</name><argument_list pos:line="32" pos:column="169">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">Logger</name> <op:operator pos:line="33" pos:column="20">=</op:operator> <call><name><name pos:line="33" pos:column="22">FileLogger</name><op:operator pos:line="33" pos:column="32">.</op:operator><name pos:line="33" pos:column="33">CreateFileLogger</name></name><argument_list pos:line="33" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="50">"IndexFilterManagerLogger"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="76">,</op:operator> <argument><expr><call><name><name pos:line="33" pos:column="78">Path</name><op:operator pos:line="33" pos:column="82">.</op:operator><name pos:line="33" pos:column="83">Combine</name></name><argument_list pos:line="33" pos:column="90">(<argument><expr><call><name><name pos:line="33" pos:column="91">PathManager</name><op:operator pos:line="33" pos:column="102">.</op:operator><name pos:line="33" pos:column="103">Instance</name><op:operator pos:line="33" pos:column="111">.</op:operator><name pos:line="33" pos:column="112">GetIndexPath</name></name><argument_list pos:line="33" pos:column="124">(<argument><expr><name pos:line="33" pos:column="125">solutionKey</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="33" pos:column="137">,</op:operator> <argument><expr><name pos:line="33" pos:column="139">IndexFilterSettingsLogFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">Dispose</name><parameter_list pos:line="36" pos:column="28">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">SaveIndexFilterSettingsToFile</name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">IndexFilterSettings</name></expr></argument><op:operator pos:line="38" pos:column="62">,</op:operator> <argument><expr><name pos:line="38" pos:column="64">IndexFilterSettingsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <constructor><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">IndexFilterManager</name><parameter_list pos:line="41" pos:column="34">(<param><decl><type><name pos:line="41" pos:column="35">IndexFilterSettings</name></type> <name pos:line="41" pos:column="55">indexFilterSettings</name></decl></param><op:operator pos:line="41" pos:column="74">,</op:operator> <param><decl><type><name pos:line="41" pos:column="76">ILog</name></type> <name pos:line="41" pos:column="81">logger</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Contract</name><op:operator pos:line="43" pos:column="21">.</op:operator><name pos:line="43" pos:column="22">Requires</name></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">indexFilterSettings</name> <op:operator pos:line="43" pos:column="51">!=</op:operator> <name pos:line="43" pos:column="54">null</name></expr></argument><op:operator pos:line="43" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="43" pos:column="60">"IndexFilterManager:Constructor - index filter settings cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Contract</name><op:operator pos:line="44" pos:column="21">.</op:operator><name pos:line="44" pos:column="22">Requires</name></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">logger</name> <op:operator pos:line="44" pos:column="38">!=</op:operator> <name pos:line="44" pos:column="41">null</name></expr></argument><op:operator pos:line="44" pos:column="45">,</op:operator> <argument><expr><lit:literal type="string" pos:line="44" pos:column="47">"IndexFilterManager:Constructor - logger cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="46" pos:column="13">IndexFilterSettings</name> <op:operator pos:line="46" pos:column="33">=</op:operator> <name pos:line="46" pos:column="35">indexFilterSettings</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">Logger</name> <op:operator pos:line="47" pos:column="20">=</op:operator> <name pos:line="47" pos:column="22">logger</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">bool</name></type> <name pos:line="50" pos:column="21">ShouldFileBeIndexed</name><parameter_list pos:line="50" pos:column="40">(<param><decl><type><name pos:line="50" pos:column="41">string</name></type> <name pos:line="50" pos:column="48">fullFilePath</name></decl></param>)</parameter_list>
        <block pos:line="51" pos:column="9">{
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">(<expr><call><name><name pos:line="52" pos:column="17">String</name><op:operator pos:line="52" pos:column="23">.</op:operator><name pos:line="52" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">fullFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="52" pos:column="57">
                <return pos:line="53" pos:column="17">return <expr><lit:literal type="boolean" pos:line="53" pos:column="24">false</lit:literal></expr>;</return></then></if>
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><call><name><name pos:line="54" pos:column="17">File</name><op:operator pos:line="54" pos:column="21">.</op:operator><name pos:line="54" pos:column="22">Exists</name></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">fullFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="43">
            <block pos:line="55" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">var</name></type> <name pos:line="56" pos:column="21">fileInfo</name> =<init pos:line="56" pos:column="31"> <expr><op:operator pos:line="56" pos:column="32">new</op:operator> <call><name pos:line="56" pos:column="36">FileInfo</name><argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name><name pos:line="58" pos:column="21">IndexFilterSettings</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">IgnoredExtensions</name><op:operator pos:line="58" pos:column="58">.</op:operator><name pos:line="58" pos:column="59">Contains</name></name><argument_list pos:line="58" pos:column="67">(<argument><expr><name><name pos:line="58" pos:column="68">fileInfo</name><op:operator pos:line="58" pos:column="76">.</op:operator><name pos:line="58" pos:column="77">Extension</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="58" pos:column="88">
                <block pos:line="59" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="60" pos:column="21">Logger</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">Info</name></name><argument_list pos:line="60" pos:column="32">(<argument><expr><call><name pos:line="60" pos:column="33">GetRuleCode</name><argument_list pos:line="60" pos:column="44">(<argument><expr><name><name pos:line="60" pos:column="45">IndexFilterRuleCode</name><op:operator pos:line="60" pos:column="64">.</op:operator><name pos:line="60" pos:column="65">IgnoredExtensions</name></name></expr></argument><op:operator pos:line="60" pos:column="82">,</op:operator> <argument><expr><name><name pos:line="60" pos:column="84">fileInfo</name><op:operator pos:line="60" pos:column="92">.</op:operator><name pos:line="60" pos:column="93">Extension</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="61" pos:column="21">return <expr><lit:literal type="boolean" pos:line="61" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>

                <if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><call><name><name pos:line="64" pos:column="21">IndexFilterSettings</name><op:operator pos:line="64" pos:column="40">.</op:operator><name pos:line="64" pos:column="41">IgnoredFileNames</name><op:operator pos:line="64" pos:column="57">.</op:operator><name pos:line="64" pos:column="58">Contains</name></name><argument_list pos:line="64" pos:column="66">(<argument><expr><name><name pos:line="64" pos:column="67">fileInfo</name><op:operator pos:line="64" pos:column="75">.</op:operator><name pos:line="64" pos:column="76">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="64" pos:column="82">
                <block pos:line="65" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="66" pos:column="21">Logger</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">Info</name></name><argument_list pos:line="66" pos:column="32">(<argument><expr><call><name pos:line="66" pos:column="33">GetRuleCode</name><argument_list pos:line="66" pos:column="44">(<argument><expr><name><name pos:line="66" pos:column="45">IndexFilterRuleCode</name><op:operator pos:line="66" pos:column="64">.</op:operator><name pos:line="66" pos:column="65">IgnoredFileNames</name></name></expr></argument><op:operator pos:line="66" pos:column="81">,</op:operator> <argument><expr><name><name pos:line="66" pos:column="83">fileInfo</name><op:operator pos:line="66" pos:column="91">.</op:operator><name pos:line="66" pos:column="92">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="67" pos:column="21">return <expr><lit:literal type="boolean" pos:line="67" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="70" pos:column="17">var</name></type> <name pos:line="70" pos:column="21">directoryInfo</name> =<init pos:line="70" pos:column="36"> <expr><name><name pos:line="70" pos:column="37">fileInfo</name><op:operator pos:line="70" pos:column="45">.</op:operator><name pos:line="70" pos:column="46">Directory</name></name></expr></init></decl>;</decl_stmt>
                <while pos:line="71" pos:column="17">while <condition pos:line="71" pos:column="23">(<expr><name pos:line="71" pos:column="24">directoryInfo</name> <op:operator pos:line="71" pos:column="38">!=</op:operator> <name pos:line="71" pos:column="41">null</name></expr>)</condition>
                <block pos:line="72" pos:column="17">{
                    <if pos:line="73" pos:column="21">if <condition pos:line="73" pos:column="24">(<expr><call><name><name pos:line="73" pos:column="25">IndexFilterSettings</name><op:operator pos:line="73" pos:column="44">.</op:operator><name pos:line="73" pos:column="45">IgnoredDirectories</name><op:operator pos:line="73" pos:column="63">.</op:operator><name pos:line="73" pos:column="64">Contains</name></name><argument_list pos:line="73" pos:column="72">(<argument><expr><name><name pos:line="73" pos:column="73">directoryInfo</name><op:operator pos:line="73" pos:column="86">.</op:operator><name pos:line="73" pos:column="87">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="73" pos:column="93">
                    <block pos:line="74" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="75" pos:column="25">Logger</name><op:operator pos:line="75" pos:column="31">.</op:operator><name pos:line="75" pos:column="32">Info</name></name><argument_list pos:line="75" pos:column="36">(<argument><expr><call><name pos:line="75" pos:column="37">GetRuleCode</name><argument_list pos:line="75" pos:column="48">(<argument><expr><name><name pos:line="75" pos:column="49">IndexFilterRuleCode</name><op:operator pos:line="75" pos:column="68">.</op:operator><name pos:line="75" pos:column="69">IgnoredDirectories</name></name></expr></argument><op:operator pos:line="75" pos:column="87">,</op:operator> <argument><expr><name><name pos:line="75" pos:column="89">directoryInfo</name><op:operator pos:line="75" pos:column="102">.</op:operator><name pos:line="75" pos:column="103">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="76" pos:column="25">return <expr><lit:literal type="boolean" pos:line="76" pos:column="32">false</lit:literal></expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="78" pos:column="21">directoryInfo</name> <op:operator pos:line="78" pos:column="35">=</op:operator> <name><name pos:line="78" pos:column="37">directoryInfo</name><op:operator pos:line="78" pos:column="50">.</op:operator><name pos:line="78" pos:column="51">Parent</name></name></expr>;</expr_stmt>
                }</block></while>

                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">invalidPathCharacters</name> =<init pos:line="81" pos:column="44"> <expr><call><name><name pos:line="81" pos:column="45">Path</name><op:operator pos:line="81" pos:column="49">.</op:operator><name pos:line="81" pos:column="50">GetInvalidPathChars</name></name><argument_list pos:line="81" pos:column="69">()</argument_list></call><op:operator pos:line="81" pos:column="71">.</op:operator><call><name pos:line="81" pos:column="72">ToList</name><argument_list pos:line="81" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="82" pos:column="17">invalidPathCharacters</name><op:operator pos:line="82" pos:column="38">.</op:operator><name pos:line="82" pos:column="39">Remove</name></name><argument_list pos:line="82" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="82" pos:column="46">'*'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <foreach pos:line="83" pos:column="17">foreach (<init><decl><type><name pos:line="83" pos:column="26">var</name></type> <name pos:line="83" pos:column="30">ignoredPathExpression</name> <init pos:line="83" pos:column="52">in <expr><name><name pos:line="83" pos:column="55">IndexFilterSettings</name><op:operator pos:line="83" pos:column="74">.</op:operator><name pos:line="83" pos:column="75">IgnoredPathExpressions</name></name></expr></init></decl></init>)
                <block pos:line="84" pos:column="17">{
                    <if pos:line="85" pos:column="21">if <condition pos:line="85" pos:column="24">(<expr><call><name><name pos:line="85" pos:column="25">invalidPathCharacters</name><op:operator pos:line="85" pos:column="46">.</op:operator><name pos:line="85" pos:column="47">Any</name></name><argument_list pos:line="85" pos:column="50">(<argument><expr><name><name pos:line="85" pos:column="51">ignoredPathExpression</name><op:operator pos:line="85" pos:column="72">.</op:operator><name pos:line="85" pos:column="73">Contains</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="85" pos:column="83">
                    <block pos:line="86" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="87" pos:column="25">Logger</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">WarnFormat</name></name><argument_list pos:line="87" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="43">"Invalid path expression: {0}"</lit:literal></expr></argument><op:operator pos:line="87" pos:column="73">,</op:operator> <argument><expr><name pos:line="87" pos:column="75">ignoredPathExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue pos:line="88" pos:column="25">continue;</continue>
                    }</block></then></if>
                    <if pos:line="90" pos:column="21">if <condition pos:line="90" pos:column="24">(<expr><call><name pos:line="90" pos:column="25">PathMatches</name><argument_list pos:line="90" pos:column="36">(<argument><expr><name><name pos:line="90" pos:column="37">fileInfo</name><op:operator pos:line="90" pos:column="45">.</op:operator><name pos:line="90" pos:column="46">FullName</name></name></expr></argument><op:operator pos:line="90" pos:column="54">,</op:operator> <argument><expr><name pos:line="90" pos:column="56">ignoredPathExpression</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="79">
                    <block pos:line="91" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="92" pos:column="25">Logger</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">Info</name></name><argument_list pos:line="92" pos:column="36">(<argument><expr><call><name pos:line="92" pos:column="37">GetRuleCode</name><argument_list pos:line="92" pos:column="48">(<argument><expr><name><name pos:line="92" pos:column="49">IndexFilterRuleCode</name><op:operator pos:line="92" pos:column="68">.</op:operator><name pos:line="92" pos:column="69">IgnoredPathExpressions</name></name></expr></argument><op:operator pos:line="92" pos:column="91">,</op:operator> <argument><expr><name pos:line="92" pos:column="93">ignoredPathExpression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="93" pos:column="25">return <expr><lit:literal type="boolean" pos:line="93" pos:column="32">false</lit:literal></expr>;</return>
                    }</block></then></if>
                }</block></foreach>

                <foreach pos:line="97" pos:column="17">foreach (<init><decl><type><name pos:line="97" pos:column="26">var</name></type> <name pos:line="97" pos:column="30">ignoredPathRegularExpression</name> <init pos:line="97" pos:column="59">in <expr><name><name pos:line="97" pos:column="62">IndexFilterSettings</name><op:operator pos:line="97" pos:column="81">.</op:operator><name pos:line="97" pos:column="82">IgnoredPathRegularExpressions</name></name></expr></init></decl></init>)
                <block pos:line="98" pos:column="17">{
                    <try pos:line="99" pos:column="21">try
                    <block pos:line="100" pos:column="21">{
                        <if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><call><name><name pos:line="101" pos:column="29">Regex</name><op:operator pos:line="101" pos:column="34">.</op:operator><name pos:line="101" pos:column="35">IsMatch</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><name><name pos:line="101" pos:column="43">fileInfo</name><op:operator pos:line="101" pos:column="51">.</op:operator><name pos:line="101" pos:column="52">FullName</name></name></expr></argument><op:operator pos:line="101" pos:column="60">,</op:operator> <argument><expr><name pos:line="101" pos:column="62">ignoredPathRegularExpression</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="101" pos:column="92">
                        <block pos:line="102" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="103" pos:column="29">Logger</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">Info</name></name><argument_list pos:line="103" pos:column="40">(<argument><expr><call><name pos:line="103" pos:column="41">GetRuleCode</name><argument_list pos:line="103" pos:column="52">(<argument><expr><name><name pos:line="103" pos:column="53">IndexFilterRuleCode</name><op:operator pos:line="103" pos:column="72">.</op:operator><name pos:line="103" pos:column="73">IgnoredPathRegularExpressions</name></name></expr></argument><op:operator pos:line="103" pos:column="102">,</op:operator> <argument><expr><name pos:line="103" pos:column="104">ignoredPathRegularExpression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return pos:line="104" pos:column="29">return <expr><lit:literal type="boolean" pos:line="104" pos:column="36">false</lit:literal></expr>;</return>
                        }</block></then></if>
                    }</block>
                    <catch pos:line="107" pos:column="21">catch (<param><decl><type><name pos:line="107" pos:column="28">ArgumentException</name></type> <name pos:line="107" pos:column="46">e</name></decl></param>)
                    <block pos:line="108" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="109" pos:column="25">Logger</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">WarnFormat</name></name><argument_list pos:line="109" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="43">"Invalid path regular expression: {0}"</lit:literal></expr></argument><op:operator pos:line="109" pos:column="81">,</op:operator> <argument><expr><name pos:line="109" pos:column="83">ignoredPathRegularExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></foreach>
            }</block></then></if>
            <return pos:line="113" pos:column="13">return <expr><lit:literal type="boolean" pos:line="113" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="116" pos:column="9">private</specifier> <specifier pos:line="116" pos:column="17">static</specifier> <name pos:line="116" pos:column="24">IndexFilterSettings</name></type> <name pos:line="116" pos:column="44">GetIndexFilterSettingsFromFile</name><parameter_list pos:line="116" pos:column="74">(<param><decl><type><name pos:line="116" pos:column="75">string</name></type> <name pos:line="116" pos:column="82">indexFilterSettingsFilePath</name></decl></param>)</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">TextReader</name></type> <name pos:line="118" pos:column="24">textReader</name> =<init pos:line="118" pos:column="36"> <expr><name pos:line="118" pos:column="37">null</name></expr></init></decl>;</decl_stmt>
            <try pos:line="119" pos:column="13">try
            <block pos:line="120" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">var</name></type> <name pos:line="121" pos:column="21">xmlSerializer</name> =<init pos:line="121" pos:column="36"> <expr><op:operator pos:line="121" pos:column="37">new</op:operator> <call><name pos:line="121" pos:column="41">XmlSerializer</name><argument_list pos:line="121" pos:column="54">(<argument><expr><call><name pos:line="121" pos:column="55">typeof</name><argument_list pos:line="121" pos:column="61">(<argument><expr><name pos:line="121" pos:column="62">IndexFilterSettings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="122" pos:column="17">textReader</name> <op:operator pos:line="122" pos:column="28">=</op:operator> <op:operator pos:line="122" pos:column="30">new</op:operator> <call><name pos:line="122" pos:column="34">StreamReader</name><argument_list pos:line="122" pos:column="46">(<argument><expr><name pos:line="122" pos:column="47">indexFilterSettingsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">indexFilterSettings</name> =<init pos:line="123" pos:column="42"> <expr><op:operator pos:line="123" pos:column="43">(</op:operator><name pos:line="123" pos:column="44">IndexFilterSettings</name><op:operator pos:line="123" pos:column="63">)</op:operator> <call><name><name pos:line="123" pos:column="65">xmlSerializer</name><op:operator pos:line="123" pos:column="78">.</op:operator><name pos:line="123" pos:column="79">Deserialize</name></name><argument_list pos:line="123" pos:column="90">(<argument><expr><name pos:line="123" pos:column="91">textReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="124" pos:column="17">return <expr><name pos:line="124" pos:column="24">indexFilterSettings</name></expr>;</return>
            }</block>
            <finally pos:line="126" pos:column="13">finally
            <block pos:line="127" pos:column="13">{
                <if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name pos:line="128" pos:column="21">textReader</name> <op:operator pos:line="128" pos:column="32">!=</op:operator> <name pos:line="128" pos:column="35">null</name></expr>)</condition><then pos:line="128" pos:column="40">
                    <expr_stmt><expr><call><name><name pos:line="129" pos:column="21">textReader</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">Close</name></name><argument_list pos:line="129" pos:column="37">()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <specifier pos:line="133" pos:column="17">static</specifier> <name pos:line="133" pos:column="24">void</name></type> <name pos:line="133" pos:column="29">SaveIndexFilterSettingsToFile</name><parameter_list pos:line="133" pos:column="58">(<param><decl><type><name pos:line="133" pos:column="59">IndexFilterSettings</name></type> <name pos:line="133" pos:column="79">currentFilterSettings</name></decl></param><op:operator pos:line="133" pos:column="100">,</op:operator> <param><decl><type><name pos:line="133" pos:column="102">string</name></type> <name pos:line="133" pos:column="109">indexStatePath</name></decl></param>)</parameter_list>
        <block pos:line="134" pos:column="9">{
            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><name pos:line="135" pos:column="17">currentFilterSettings</name> <op:operator pos:line="135" pos:column="39">==</op:operator> <name pos:line="135" pos:column="42">null</name></expr>)</condition><then pos:line="135" pos:column="47">
                <return pos:line="136" pos:column="17">return;</return></then></if>

            <decl_stmt><decl><type><name pos:line="138" pos:column="13">XmlSerializer</name></type> <name pos:line="138" pos:column="27">xmlSerializer</name> =<init pos:line="138" pos:column="42"> <expr><name pos:line="138" pos:column="43">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">TextWriter</name></type> <name pos:line="139" pos:column="24">textWriter</name> =<init pos:line="139" pos:column="36"> <expr><name pos:line="139" pos:column="37">null</name></expr></init></decl>;</decl_stmt>
            <try pos:line="140" pos:column="13">try
            <block pos:line="141" pos:column="13">{
                <expr_stmt><expr><name pos:line="142" pos:column="17">xmlSerializer</name> <op:operator pos:line="142" pos:column="31">=</op:operator> <op:operator pos:line="142" pos:column="33">new</op:operator> <call><name pos:line="142" pos:column="37">XmlSerializer</name><argument_list pos:line="142" pos:column="50">(<argument><expr><call><name pos:line="142" pos:column="51">typeof</name><argument_list pos:line="142" pos:column="57">(<argument><expr><name pos:line="142" pos:column="58">IndexFilterSettings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="143" pos:column="17">textWriter</name> <op:operator pos:line="143" pos:column="28">=</op:operator> <op:operator pos:line="143" pos:column="30">new</op:operator> <call><name pos:line="143" pos:column="34">StreamWriter</name><argument_list pos:line="143" pos:column="46">(<argument><expr><name pos:line="143" pos:column="47">indexStatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="144" pos:column="17">xmlSerializer</name><op:operator pos:line="144" pos:column="30">.</op:operator><name pos:line="144" pos:column="31">Serialize</name></name><argument_list pos:line="144" pos:column="40">(<argument><expr><name pos:line="144" pos:column="41">textWriter</name></expr></argument><op:operator pos:line="144" pos:column="51">,</op:operator> <argument><expr><name pos:line="144" pos:column="53">currentFilterSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="146" pos:column="13">finally
            <block pos:line="147" pos:column="13">{
                <if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">textWriter</name> <op:operator pos:line="148" pos:column="32">!=</op:operator> <name pos:line="148" pos:column="35">null</name></expr>)</condition><then pos:line="148" pos:column="40">
                    <expr_stmt><expr><call><name><name pos:line="149" pos:column="21">textWriter</name><op:operator pos:line="149" pos:column="31">.</op:operator><name pos:line="149" pos:column="32">Close</name></name><argument_list pos:line="149" pos:column="37">()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier pos:line="153" pos:column="9">private</specifier> <specifier pos:line="153" pos:column="17">static</specifier> <name pos:line="153" pos:column="24">IndexFilterSettings</name></type> <name pos:line="153" pos:column="44">GetDefaultIndexFilterSettings</name><parameter_list pos:line="153" pos:column="73">()</parameter_list>
        <block pos:line="154" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">indexFilterSettings</name> =<init pos:line="155" pos:column="38"> <expr><op:operator pos:line="155" pos:column="39">new</op:operator> <name pos:line="155" pos:column="43">IndexFilterSettings</name>
                <block pos:line="156" pos:column="17">{
                    <expr><name pos:line="157" pos:column="21">IgnoredExtensions</name> <op:operator pos:line="157" pos:column="39">=</op:operator> <op:operator pos:line="157" pos:column="41">new</op:operator> <name><name pos:line="157" pos:column="45">List</name><argument_list pos:line="157" pos:column="49">&lt;<argument><name pos:line="157" pos:column="50">string</name></argument>&gt;</argument_list></name>
                        <block pos:line="158" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="159" pos:column="29">".tmp"</lit:literal></expr><op:operator pos:line="159" pos:column="35">,</op:operator>
                            <expr><lit:literal type="string" pos:line="160" pos:column="29">".db"</lit:literal></expr>
                        }</block></expr><op:operator pos:line="161" pos:column="26">,</op:operator>
                    <expr><name pos:line="162" pos:column="21">IgnoredDirectories</name> <op:operator pos:line="162" pos:column="40">=</op:operator> <op:operator pos:line="162" pos:column="42">new</op:operator> <name><name pos:line="162" pos:column="46">List</name><argument_list pos:line="162" pos:column="50">&lt;<argument><name pos:line="162" pos:column="51">string</name></argument>&gt;</argument_list></name>
                        <block pos:line="163" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="164" pos:column="29">"bin"</lit:literal></expr><op:operator pos:line="164" pos:column="34">,</op:operator>
                            <expr><lit:literal type="string" pos:line="165" pos:column="29">"obj"</lit:literal></expr><op:operator pos:line="165" pos:column="34">,</op:operator>
                            <expr><lit:literal type="string" pos:line="166" pos:column="29">".hg"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <return pos:line="169" pos:column="13">return <expr><name pos:line="169" pos:column="20">indexFilterSettings</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="172" pos:column="9">private</specifier> <specifier pos:line="172" pos:column="17">static</specifier> <name pos:line="172" pos:column="24">bool</name></type> <name pos:line="172" pos:column="29">PathMatches</name><parameter_list pos:line="172" pos:column="40">(<param><decl><type><name pos:line="172" pos:column="41">string</name></type> <name pos:line="172" pos:column="48">fullFilePath</name></decl></param><op:operator pos:line="172" pos:column="60">,</op:operator> <param><decl><type><name pos:line="172" pos:column="62">string</name></type> <name pos:line="172" pos:column="69">ignoredPathExpression</name></decl></param>)</parameter_list>
        <block pos:line="173" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">pathParts</name> =<init pos:line="174" pos:column="28"> <expr><call><name><name pos:line="174" pos:column="29">ignoredPathExpression</name><op:operator pos:line="174" pos:column="50">.</op:operator><name pos:line="174" pos:column="51">Split</name></name><argument_list pos:line="174" pos:column="56">(<argument><expr><op:operator pos:line="174" pos:column="57">new</op:operator><index pos:line="174" pos:column="60">[]</index> <block pos:line="174" pos:column="63">{ <expr><lit:literal type="char" pos:line="174" pos:column="65">'*'</lit:literal></expr><op:operator pos:line="174" pos:column="68">,</op:operator> <expr><lit:literal type="char" pos:line="174" pos:column="70">'?'</lit:literal></expr> }</block></expr></argument><op:operator pos:line="174" pos:column="75">,</op:operator> <argument><expr><name><name pos:line="174" pos:column="77">StringSplitOptions</name><op:operator pos:line="174" pos:column="95">.</op:operator><name pos:line="174" pos:column="96">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call><op:operator pos:line="174" pos:column="115">.</op:operator><call><name pos:line="174" pos:column="116">AsEnumerable</name><argument_list pos:line="174" pos:column="128">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="175" pos:column="13">pathParts</name> <op:operator pos:line="175" pos:column="23">=</op:operator> <call><name><name pos:line="175" pos:column="25">pathParts</name><op:operator pos:line="175" pos:column="34">.</op:operator><name pos:line="175" pos:column="35">Select</name></name><argument_list pos:line="175" pos:column="41">(<argument><expr><name><name pos:line="175" pos:column="42">Regex</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">Escape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">regex</name> =<init pos:line="176" pos:column="24"> <expr><call><name><name pos:line="176" pos:column="25">String</name><op:operator pos:line="176" pos:column="31">.</op:operator><name pos:line="176" pos:column="32">Join</name></name><argument_list pos:line="176" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="37">"(.*)"</lit:literal></expr></argument><op:operator pos:line="176" pos:column="43">,</op:operator> <argument><expr><name pos:line="176" pos:column="45">pathParts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="177" pos:column="13">return <expr><call><name><name pos:line="177" pos:column="20">Regex</name><op:operator pos:line="177" pos:column="25">.</op:operator><name pos:line="177" pos:column="26">IsMatch</name></name><argument_list pos:line="177" pos:column="33">(<argument><expr><name pos:line="177" pos:column="34">fullFilePath</name></expr></argument><op:operator pos:line="177" pos:column="46">,</op:operator> <argument><expr><name pos:line="177" pos:column="48">regex</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="180" pos:column="9">private</specifier> <name pos:line="180" pos:column="17">string</name></type> <name pos:line="180" pos:column="24">GetRuleCode</name><parameter_list pos:line="180" pos:column="35">(<param><decl><type><name pos:line="180" pos:column="36">IndexFilterRuleCode</name></type> <name pos:line="180" pos:column="56">indexFilterRuleCode</name></decl></param><op:operator pos:line="180" pos:column="75">,</op:operator> <param><decl><type><name pos:line="180" pos:column="77">string</name></type> <name pos:line="180" pos:column="84">ruleBody</name></decl></param>)</parameter_list>
        <block pos:line="181" pos:column="9">{
            <return pos:line="182" pos:column="13">return <expr><call><name><name pos:line="182" pos:column="20">String</name><op:operator pos:line="182" pos:column="26">.</op:operator><name pos:line="182" pos:column="27">Format</name></name><argument_list pos:line="182" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="34">"{0}: {1}"</lit:literal></expr></argument><op:operator pos:line="182" pos:column="44">,</op:operator> <argument><expr><name pos:line="182" pos:column="46">indexFilterRuleCode</name></expr></argument><op:operator pos:line="182" pos:column="65">,</op:operator> <argument><expr><name pos:line="182" pos:column="67">ruleBody</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <enum><specifier pos:line="185" pos:column="9">private</specifier> enum <name pos:line="185" pos:column="22">IndexFilterRuleCode</name>
        <block pos:line="186" pos:column="9">{
            <expr><name pos:line="187" pos:column="13">IgnoredExtensions</name></expr><op:operator pos:line="187" pos:column="30">,</op:operator>
            <expr><name pos:line="188" pos:column="13">IgnoredFileNames</name></expr><op:operator pos:line="188" pos:column="29">,</op:operator>
            <expr><name pos:line="189" pos:column="13">IgnoredDirectories</name></expr><op:operator pos:line="189" pos:column="31">,</op:operator>
            <expr><name pos:line="190" pos:column="13">IgnoredPathExpressions</name></expr><op:operator pos:line="190" pos:column="35">,</op:operator>
            <expr><name pos:line="191" pos:column="13">IgnoredPathRegularExpressions</name></expr>
        }</block></enum>

        <function><type><specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">AddFileExclusion</name><parameter_list pos:line="194" pos:column="37">(<param><decl><type><name pos:line="194" pos:column="38">string</name></type> <name pos:line="194" pos:column="45">path</name></decl></param>)</parameter_list>
        <block pos:line="195" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">this</name><op:operator pos:line="196" pos:column="17">.</op:operator><name pos:line="196" pos:column="18">IndexFilterSettings</name><op:operator pos:line="196" pos:column="37">.</op:operator><name pos:line="196" pos:column="38">IgnoredFileNames</name><op:operator pos:line="196" pos:column="54">.</op:operator><name pos:line="196" pos:column="55">Add</name></name><argument_list pos:line="196" pos:column="58">(<argument><expr><name pos:line="196" pos:column="59">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
