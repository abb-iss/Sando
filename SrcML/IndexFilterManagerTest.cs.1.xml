<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\IndexFiltering\IndexFilterManagerTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">IndexerContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Indexer</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">IndexFiltering</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">log4net</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">log4net</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Config</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Indexer</name><op:operator pos:line="12" pos:column="24">.</op:operator><name pos:line="12" pos:column="25">UnitTests</name><op:operator pos:line="12" pos:column="34">.</op:operator><name pos:line="12" pos:column="35">IndexFiltering</name></name>
<block pos:line="13" pos:column="1">{
    <class><attribute pos:line="14" pos:column="5">[<expr><name pos:line="14" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">IndexFilterManagerTest</name>
    <block pos:line="16" pos:column="5">{
        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsFalseIfExtensionRuleMatches</name><parameter_list pos:line="18" pos:column="93">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">testFileName</name> =<init pos:line="20" pos:column="31"> <expr><lit:literal type="string" pos:line="20" pos:column="32">"index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="21" pos:column="13">try
            <block pos:line="22" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="23" pos:column="17">var</name></type> <name pos:line="23" pos:column="21">indexFilterSettings</name> =<init pos:line="23" pos:column="42"> <expr><op:operator pos:line="23" pos:column="43">new</op:operator> <name pos:line="23" pos:column="47">IndexFilterSettings</name>
                    <block pos:line="24" pos:column="21">{
                        <expr><name pos:line="25" pos:column="25">IgnoredExtensions</name> <op:operator pos:line="25" pos:column="43">=</op:operator> <op:operator pos:line="25" pos:column="45">new</op:operator> <name><name pos:line="25" pos:column="49">List</name><argument_list pos:line="25" pos:column="53">&lt;<argument><name pos:line="25" pos:column="54">string</name></argument>&gt;</argument_list></name> <block pos:line="25" pos:column="62">{<expr><lit:literal type="string" pos:line="25" pos:column="63">"tmp"</lit:literal></expr><op:operator pos:line="25" pos:column="68">,</op:operator> <expr><lit:literal type="string" pos:line="25" pos:column="70">".xml"</lit:literal></expr>}</block></expr>
                    }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="27" pos:column="17">var</name></type> <name pos:line="27" pos:column="21">logger</name> =<init pos:line="27" pos:column="29"> <expr><call><name pos:line="27" pos:column="30">CreateLog</name><argument_list pos:line="27" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="28" pos:column="17">var</name></type> <name pos:line="28" pos:column="21">indexFilterManager</name> =<init pos:line="28" pos:column="41"> <expr><op:operator pos:line="28" pos:column="42">new</op:operator> <call><name pos:line="28" pos:column="46">IndexFilterManager</name><argument_list pos:line="28" pos:column="64">(<argument><expr><name pos:line="28" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="28" pos:column="84">,</op:operator> <argument><expr><name pos:line="28" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="29" pos:column="17">var</name></type> <name pos:line="29" pos:column="21">fullFilePath</name> =<init pos:line="29" pos:column="35"> <expr><call><name pos:line="29" pos:column="36">CreateTestFile</name><argument_list pos:line="29" pos:column="50">(<argument><expr><name pos:line="29" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">var</name></type> <name pos:line="30" pos:column="21">expected</name> =<init pos:line="30" pos:column="31"> <expr><lit:literal type="boolean" pos:line="30" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">actual</name> =<init pos:line="31" pos:column="29"> <expr><call><name><name pos:line="31" pos:column="30">indexFilterManager</name><op:operator pos:line="31" pos:column="48">.</op:operator><name pos:line="31" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="31" pos:column="68">(<argument><expr><name pos:line="31" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">Assert</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">AreEqual</name></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">expected</name></expr></argument><op:operator pos:line="32" pos:column="41">,</op:operator> <argument><expr><name pos:line="32" pos:column="43">actual</name></expr></argument><op:operator pos:line="32" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="32" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="34" pos:column="13">finally
            <block pos:line="35" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">DeleteTestFile</name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsTrueIfNoExtensionRuleMatches</name><parameter_list pos:line="41" pos:column="94">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">testFileName</name> =<init pos:line="43" pos:column="31"> <expr><lit:literal type="string" pos:line="43" pos:column="32">"index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="44" pos:column="13">try
            <block pos:line="45" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">var</name></type> <name pos:line="46" pos:column="21">indexFilterSettings</name> =<init pos:line="46" pos:column="42"> <expr><op:operator pos:line="46" pos:column="43">new</op:operator> <name pos:line="46" pos:column="47">IndexFilterSettings</name>
                <block pos:line="47" pos:column="17">{
                    <expr><name pos:line="48" pos:column="21">IgnoredExtensions</name> <op:operator pos:line="48" pos:column="39">=</op:operator> <op:operator pos:line="48" pos:column="41">new</op:operator> <name><name pos:line="48" pos:column="45">List</name><argument_list pos:line="48" pos:column="49">&lt;<argument><name pos:line="48" pos:column="50">string</name></argument>&gt;</argument_list></name> <block pos:line="48" pos:column="58">{ <expr><lit:literal type="string" pos:line="48" pos:column="60">".xaml"</lit:literal></expr><op:operator pos:line="48" pos:column="67">,</op:operator> <expr><lit:literal type="string" pos:line="48" pos:column="69">".tmp"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">var</name></type> <name pos:line="50" pos:column="21">logger</name> =<init pos:line="50" pos:column="29"> <expr><call><name pos:line="50" pos:column="30">CreateLog</name><argument_list pos:line="50" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="51" pos:column="17">var</name></type> <name pos:line="51" pos:column="21">indexFilterManager</name> =<init pos:line="51" pos:column="41"> <expr><op:operator pos:line="51" pos:column="42">new</op:operator> <call><name pos:line="51" pos:column="46">IndexFilterManager</name><argument_list pos:line="51" pos:column="64">(<argument><expr><name pos:line="51" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="51" pos:column="84">,</op:operator> <argument><expr><name pos:line="51" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="52" pos:column="17">var</name></type> <name pos:line="52" pos:column="21">fullFilePath</name> =<init pos:line="52" pos:column="35"> <expr><call><name pos:line="52" pos:column="36">CreateTestFile</name><argument_list pos:line="52" pos:column="50">(<argument><expr><name pos:line="52" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="53" pos:column="17">var</name></type> <name pos:line="53" pos:column="21">expected</name> =<init pos:line="53" pos:column="31"> <expr><lit:literal type="boolean" pos:line="53" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="54" pos:column="17">var</name></type> <name pos:line="54" pos:column="21">actual</name> =<init pos:line="54" pos:column="29"> <expr><call><name><name pos:line="54" pos:column="30">indexFilterManager</name><op:operator pos:line="54" pos:column="48">.</op:operator><name pos:line="54" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="54" pos:column="68">(<argument><expr><name pos:line="54" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="55" pos:column="17">Assert</name><op:operator pos:line="55" pos:column="23">.</op:operator><name pos:line="55" pos:column="24">AreEqual</name></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">expected</name></expr></argument><op:operator pos:line="55" pos:column="41">,</op:operator> <argument><expr><name pos:line="55" pos:column="43">actual</name></expr></argument><op:operator pos:line="55" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="55" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="57" pos:column="13">finally
            <block pos:line="58" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="59" pos:column="17">DeleteTestFile</name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="63" pos:column="9">[<expr><name pos:line="63" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsFalseIfFileNameRuleMatches</name><parameter_list pos:line="64" pos:column="92">()</parameter_list>
        <block pos:line="65" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">testFileName</name> =<init pos:line="66" pos:column="31"> <expr><lit:literal type="string" pos:line="66" pos:column="32">"index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="67" pos:column="13">try
            <block pos:line="68" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">var</name></type> <name pos:line="69" pos:column="21">indexFilterSettings</name> =<init pos:line="69" pos:column="42"> <expr><op:operator pos:line="69" pos:column="43">new</op:operator> <name pos:line="69" pos:column="47">IndexFilterSettings</name>
                <block pos:line="70" pos:column="17">{
                    <expr><name pos:line="71" pos:column="21">IgnoredFileNames</name> <op:operator pos:line="71" pos:column="38">=</op:operator> <op:operator pos:line="71" pos:column="40">new</op:operator> <name><name pos:line="71" pos:column="44">List</name><argument_list pos:line="71" pos:column="48">&lt;<argument><name pos:line="71" pos:column="49">string</name></argument>&gt;</argument_list></name> <block pos:line="71" pos:column="57">{ <expr><lit:literal type="string" pos:line="71" pos:column="59">"index.tmp"</lit:literal></expr><op:operator pos:line="71" pos:column="70">,</op:operator> <expr><lit:literal type="string" pos:line="71" pos:column="72">"index.xml"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="73" pos:column="17">var</name></type> <name pos:line="73" pos:column="21">logger</name> =<init pos:line="73" pos:column="29"> <expr><call><name pos:line="73" pos:column="30">CreateLog</name><argument_list pos:line="73" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">var</name></type> <name pos:line="74" pos:column="21">indexFilterManager</name> =<init pos:line="74" pos:column="41"> <expr><op:operator pos:line="74" pos:column="42">new</op:operator> <call><name pos:line="74" pos:column="46">IndexFilterManager</name><argument_list pos:line="74" pos:column="64">(<argument><expr><name pos:line="74" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="74" pos:column="84">,</op:operator> <argument><expr><name pos:line="74" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="75" pos:column="17">var</name></type> <name pos:line="75" pos:column="21">fullFilePath</name> =<init pos:line="75" pos:column="35"> <expr><call><name pos:line="75" pos:column="36">CreateTestFile</name><argument_list pos:line="75" pos:column="50">(<argument><expr><name pos:line="75" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="76" pos:column="17">var</name></type> <name pos:line="76" pos:column="21">expected</name> =<init pos:line="76" pos:column="31"> <expr><lit:literal type="boolean" pos:line="76" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="77" pos:column="17">var</name></type> <name pos:line="77" pos:column="21">actual</name> =<init pos:line="77" pos:column="29"> <expr><call><name><name pos:line="77" pos:column="30">indexFilterManager</name><op:operator pos:line="77" pos:column="48">.</op:operator><name pos:line="77" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="77" pos:column="68">(<argument><expr><name pos:line="77" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="78" pos:column="17">Assert</name><op:operator pos:line="78" pos:column="23">.</op:operator><name pos:line="78" pos:column="24">AreEqual</name></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">expected</name></expr></argument><op:operator pos:line="78" pos:column="41">,</op:operator> <argument><expr><name pos:line="78" pos:column="43">actual</name></expr></argument><op:operator pos:line="78" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="78" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="80" pos:column="13">finally
            <block pos:line="81" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">DeleteTestFile</name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="86" pos:column="9">[<expr><name pos:line="86" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsTrueIfNoFileNameRuleMatches</name><parameter_list pos:line="87" pos:column="93">()</parameter_list>
        <block pos:line="88" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">testFileName</name> =<init pos:line="89" pos:column="31"> <expr><lit:literal type="string" pos:line="89" pos:column="32">"index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="90" pos:column="13">try
            <block pos:line="91" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="92" pos:column="17">var</name></type> <name pos:line="92" pos:column="21">indexFilterSettings</name> =<init pos:line="92" pos:column="42"> <expr><op:operator pos:line="92" pos:column="43">new</op:operator> <name pos:line="92" pos:column="47">IndexFilterSettings</name>
                <block pos:line="93" pos:column="17">{
                    <expr><name pos:line="94" pos:column="21">IgnoredFileNames</name> <op:operator pos:line="94" pos:column="38">=</op:operator> <op:operator pos:line="94" pos:column="40">new</op:operator> <name><name pos:line="94" pos:column="44">List</name><argument_list pos:line="94" pos:column="48">&lt;<argument><name pos:line="94" pos:column="49">string</name></argument>&gt;</argument_list></name> <block pos:line="94" pos:column="57">{ <expr><lit:literal type="string" pos:line="94" pos:column="59">"index.xaml"</lit:literal></expr><op:operator pos:line="94" pos:column="71">,</op:operator> <expr><lit:literal type="string" pos:line="94" pos:column="73">"debug.tmp"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="96" pos:column="17">var</name></type> <name pos:line="96" pos:column="21">logger</name> =<init pos:line="96" pos:column="29"> <expr><call><name pos:line="96" pos:column="30">CreateLog</name><argument_list pos:line="96" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="97" pos:column="17">var</name></type> <name pos:line="97" pos:column="21">indexFilterManager</name> =<init pos:line="97" pos:column="41"> <expr><op:operator pos:line="97" pos:column="42">new</op:operator> <call><name pos:line="97" pos:column="46">IndexFilterManager</name><argument_list pos:line="97" pos:column="64">(<argument><expr><name pos:line="97" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="97" pos:column="84">,</op:operator> <argument><expr><name pos:line="97" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="98" pos:column="17">var</name></type> <name pos:line="98" pos:column="21">fullFilePath</name> =<init pos:line="98" pos:column="35"> <expr><call><name pos:line="98" pos:column="36">CreateTestFile</name><argument_list pos:line="98" pos:column="50">(<argument><expr><name pos:line="98" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="99" pos:column="17">var</name></type> <name pos:line="99" pos:column="21">expected</name> =<init pos:line="99" pos:column="31"> <expr><lit:literal type="boolean" pos:line="99" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">var</name></type> <name pos:line="100" pos:column="21">actual</name> =<init pos:line="100" pos:column="29"> <expr><call><name><name pos:line="100" pos:column="30">indexFilterManager</name><op:operator pos:line="100" pos:column="48">.</op:operator><name pos:line="100" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="100" pos:column="68">(<argument><expr><name pos:line="100" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="101" pos:column="17">Assert</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">AreEqual</name></name><argument_list pos:line="101" pos:column="32">(<argument><expr><name pos:line="101" pos:column="33">expected</name></expr></argument><op:operator pos:line="101" pos:column="41">,</op:operator> <argument><expr><name pos:line="101" pos:column="43">actual</name></expr></argument><op:operator pos:line="101" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="101" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="103" pos:column="13">finally
            <block pos:line="104" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="105" pos:column="17">DeleteTestFile</name><argument_list pos:line="105" pos:column="31">(<argument><expr><name pos:line="105" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="109" pos:column="9">[<expr><name pos:line="109" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsFalseIfDirectoryRuleMatches</name><parameter_list pos:line="110" pos:column="93">()</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">testDirectoryName</name> =<init pos:line="112" pos:column="36"> <expr><lit:literal type="string" pos:line="112" pos:column="37">"bin"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">testFileName</name> =<init pos:line="113" pos:column="31"> <expr><lit:literal type="string" pos:line="113" pos:column="32">"bin\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="114" pos:column="13">try
            <block pos:line="115" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">indexFilterSettings</name> =<init pos:line="116" pos:column="42"> <expr><op:operator pos:line="116" pos:column="43">new</op:operator> <name pos:line="116" pos:column="47">IndexFilterSettings</name>
                <block pos:line="117" pos:column="17">{
                    <expr><name pos:line="118" pos:column="21">IgnoredDirectories</name> <op:operator pos:line="118" pos:column="40">=</op:operator> <op:operator pos:line="118" pos:column="42">new</op:operator> <name><name pos:line="118" pos:column="46">List</name><argument_list pos:line="118" pos:column="50">&lt;<argument><name pos:line="118" pos:column="51">string</name></argument>&gt;</argument_list></name> <block pos:line="118" pos:column="59">{ <expr><lit:literal type="string" pos:line="118" pos:column="61">"bin"</lit:literal></expr><op:operator pos:line="118" pos:column="66">,</op:operator> <expr><lit:literal type="string" pos:line="118" pos:column="68">"obj"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="120" pos:column="17">var</name></type> <name pos:line="120" pos:column="21">logger</name> =<init pos:line="120" pos:column="29"> <expr><call><name pos:line="120" pos:column="30">CreateLog</name><argument_list pos:line="120" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">var</name></type> <name pos:line="121" pos:column="21">indexFilterManager</name> =<init pos:line="121" pos:column="41"> <expr><op:operator pos:line="121" pos:column="42">new</op:operator> <call><name pos:line="121" pos:column="46">IndexFilterManager</name><argument_list pos:line="121" pos:column="64">(<argument><expr><name pos:line="121" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="121" pos:column="84">,</op:operator> <argument><expr><name pos:line="121" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="122" pos:column="17">CreateTestDirectory</name><argument_list pos:line="122" pos:column="36">(<argument><expr><name pos:line="122" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">fullFilePath</name> =<init pos:line="123" pos:column="35"> <expr><call><name pos:line="123" pos:column="36">CreateTestFile</name><argument_list pos:line="123" pos:column="50">(<argument><expr><name pos:line="123" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">expected</name> =<init pos:line="124" pos:column="31"> <expr><lit:literal type="boolean" pos:line="124" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">var</name></type> <name pos:line="125" pos:column="21">actual</name> =<init pos:line="125" pos:column="29"> <expr><call><name><name pos:line="125" pos:column="30">indexFilterManager</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="125" pos:column="68">(<argument><expr><name pos:line="125" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">Assert</name><op:operator pos:line="126" pos:column="23">.</op:operator><name pos:line="126" pos:column="24">AreEqual</name></name><argument_list pos:line="126" pos:column="32">(<argument><expr><name pos:line="126" pos:column="33">expected</name></expr></argument><op:operator pos:line="126" pos:column="41">,</op:operator> <argument><expr><name pos:line="126" pos:column="43">actual</name></expr></argument><op:operator pos:line="126" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="126" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="128" pos:column="13">finally
            <block pos:line="129" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="130" pos:column="17">DeleteTestFile</name><argument_list pos:line="130" pos:column="31">(<argument><expr><name pos:line="130" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="131" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="131" pos:column="36">(<argument><expr><name pos:line="131" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="135" pos:column="9">[<expr><name pos:line="135" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">void</name></type> <name pos:line="136" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsTrueIfNoDirectoryRuleMatches</name><parameter_list pos:line="136" pos:column="94">()</parameter_list>
        <block pos:line="137" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">testDirectoryName</name> =<init pos:line="138" pos:column="36"> <expr><lit:literal type="string" pos:line="138" pos:column="37">"project"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">testFileName</name> =<init pos:line="139" pos:column="31"> <expr><lit:literal type="string" pos:line="139" pos:column="32">"project\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="140" pos:column="13">try
            <block pos:line="141" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="142" pos:column="17">var</name></type> <name pos:line="142" pos:column="21">indexFilterSettings</name> =<init pos:line="142" pos:column="42"> <expr><op:operator pos:line="142" pos:column="43">new</op:operator> <name pos:line="142" pos:column="47">IndexFilterSettings</name>
                <block pos:line="143" pos:column="17">{
                    <expr><name pos:line="144" pos:column="21">IgnoredDirectories</name> <op:operator pos:line="144" pos:column="40">=</op:operator> <op:operator pos:line="144" pos:column="42">new</op:operator> <name><name pos:line="144" pos:column="46">List</name><argument_list pos:line="144" pos:column="50">&lt;<argument><name pos:line="144" pos:column="51">string</name></argument>&gt;</argument_list></name> <block pos:line="144" pos:column="59">{ <expr><lit:literal type="string" pos:line="144" pos:column="61">"bin"</lit:literal></expr><op:operator pos:line="144" pos:column="66">,</op:operator> <expr><lit:literal type="string" pos:line="144" pos:column="68">"obj"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="146" pos:column="17">var</name></type> <name pos:line="146" pos:column="21">logger</name> =<init pos:line="146" pos:column="29"> <expr><call><name pos:line="146" pos:column="30">CreateLog</name><argument_list pos:line="146" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="147" pos:column="17">var</name></type> <name pos:line="147" pos:column="21">indexFilterManager</name> =<init pos:line="147" pos:column="41"> <expr><op:operator pos:line="147" pos:column="42">new</op:operator> <call><name pos:line="147" pos:column="46">IndexFilterManager</name><argument_list pos:line="147" pos:column="64">(<argument><expr><name pos:line="147" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="147" pos:column="84">,</op:operator> <argument><expr><name pos:line="147" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="148" pos:column="17">CreateTestDirectory</name><argument_list pos:line="148" pos:column="36">(<argument><expr><name pos:line="148" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="149" pos:column="17">var</name></type> <name pos:line="149" pos:column="21">fullFilePath</name> =<init pos:line="149" pos:column="35"> <expr><call><name pos:line="149" pos:column="36">CreateTestFile</name><argument_list pos:line="149" pos:column="50">(<argument><expr><name pos:line="149" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="150" pos:column="17">var</name></type> <name pos:line="150" pos:column="21">expected</name> =<init pos:line="150" pos:column="31"> <expr><lit:literal type="boolean" pos:line="150" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="151" pos:column="17">var</name></type> <name pos:line="151" pos:column="21">actual</name> =<init pos:line="151" pos:column="29"> <expr><call><name><name pos:line="151" pos:column="30">indexFilterManager</name><op:operator pos:line="151" pos:column="48">.</op:operator><name pos:line="151" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="151" pos:column="68">(<argument><expr><name pos:line="151" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="152" pos:column="17">Assert</name><op:operator pos:line="152" pos:column="23">.</op:operator><name pos:line="152" pos:column="24">AreEqual</name></name><argument_list pos:line="152" pos:column="32">(<argument><expr><name pos:line="152" pos:column="33">expected</name></expr></argument><op:operator pos:line="152" pos:column="41">,</op:operator> <argument><expr><name pos:line="152" pos:column="43">actual</name></expr></argument><op:operator pos:line="152" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="152" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="154" pos:column="13">finally
            <block pos:line="155" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="156" pos:column="17">DeleteTestFile</name><argument_list pos:line="156" pos:column="31">(<argument><expr><name pos:line="156" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="157" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="157" pos:column="36">(<argument><expr><name pos:line="157" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">void</name></type> <name pos:line="162" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsFalseIfPathExpressionsRuleMatches</name><parameter_list pos:line="162" pos:column="99">()</parameter_list>
        <block pos:line="163" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">testDirectoryName</name> =<init pos:line="164" pos:column="36"> <expr><lit:literal type="string" pos:line="164" pos:column="37">"bin"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">testFileName</name> =<init pos:line="165" pos:column="31"> <expr><lit:literal type="string" pos:line="165" pos:column="32">"bin\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="166" pos:column="13">try
            <block pos:line="167" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="168" pos:column="17">var</name></type> <name pos:line="168" pos:column="21">indexFilterSettings</name> =<init pos:line="168" pos:column="42"> <expr><op:operator pos:line="168" pos:column="43">new</op:operator> <name pos:line="168" pos:column="47">IndexFilterSettings</name>
                <block pos:line="169" pos:column="17">{
                    <expr><name pos:line="170" pos:column="21">IgnoredPathExpressions</name> <op:operator pos:line="170" pos:column="44">=</op:operator> <op:operator pos:line="170" pos:column="46">new</op:operator> <name><name pos:line="170" pos:column="50">List</name><argument_list pos:line="170" pos:column="54">&lt;<argument><name pos:line="170" pos:column="55">string</name></argument>&gt;</argument_list></name> <block pos:line="170" pos:column="63">{ <expr><lit:literal type="string" pos:line="170" pos:column="65">"bin\\*"</lit:literal></expr><op:operator pos:line="170" pos:column="73">,</op:operator> <expr><lit:literal type="string" pos:line="170" pos:column="75">"obj/*"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="172" pos:column="17">var</name></type> <name pos:line="172" pos:column="21">logger</name> =<init pos:line="172" pos:column="29"> <expr><call><name pos:line="172" pos:column="30">CreateLog</name><argument_list pos:line="172" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="173" pos:column="17">var</name></type> <name pos:line="173" pos:column="21">indexFilterManager</name> =<init pos:line="173" pos:column="41"> <expr><op:operator pos:line="173" pos:column="42">new</op:operator> <call><name pos:line="173" pos:column="46">IndexFilterManager</name><argument_list pos:line="173" pos:column="64">(<argument><expr><name pos:line="173" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="173" pos:column="84">,</op:operator> <argument><expr><name pos:line="173" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="174" pos:column="17">CreateTestDirectory</name><argument_list pos:line="174" pos:column="36">(<argument><expr><name pos:line="174" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="175" pos:column="17">var</name></type> <name pos:line="175" pos:column="21">fullFilePath</name> =<init pos:line="175" pos:column="35"> <expr><call><name pos:line="175" pos:column="36">CreateTestFile</name><argument_list pos:line="175" pos:column="50">(<argument><expr><name pos:line="175" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="176" pos:column="17">var</name></type> <name pos:line="176" pos:column="21">expected</name> =<init pos:line="176" pos:column="31"> <expr><lit:literal type="boolean" pos:line="176" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="177" pos:column="17">var</name></type> <name pos:line="177" pos:column="21">actual</name> =<init pos:line="177" pos:column="29"> <expr><call><name><name pos:line="177" pos:column="30">indexFilterManager</name><op:operator pos:line="177" pos:column="48">.</op:operator><name pos:line="177" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="177" pos:column="68">(<argument><expr><name pos:line="177" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">Assert</name><op:operator pos:line="178" pos:column="23">.</op:operator><name pos:line="178" pos:column="24">AreEqual</name></name><argument_list pos:line="178" pos:column="32">(<argument><expr><name pos:line="178" pos:column="33">expected</name></expr></argument><op:operator pos:line="178" pos:column="41">,</op:operator> <argument><expr><name pos:line="178" pos:column="43">actual</name></expr></argument><op:operator pos:line="178" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="178" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="180" pos:column="13">finally
            <block pos:line="181" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="182" pos:column="17">DeleteTestFile</name><argument_list pos:line="182" pos:column="31">(<argument><expr><name pos:line="182" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="183" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="183" pos:column="36">(<argument><expr><name pos:line="183" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="187" pos:column="9">[<expr><name pos:line="187" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="188" pos:column="9">public</specifier> <name pos:line="188" pos:column="16">void</name></type> <name pos:line="188" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsTrueIfNoPathExpressionsRuleMatches</name><parameter_list pos:line="188" pos:column="100">()</parameter_list>
        <block pos:line="189" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">var</name></type> <name pos:line="190" pos:column="17">testDirectoryName</name> =<init pos:line="190" pos:column="36"> <expr><lit:literal type="string" pos:line="190" pos:column="37">"project"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">testFileName</name> =<init pos:line="191" pos:column="31"> <expr><lit:literal type="string" pos:line="191" pos:column="32">"project\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="192" pos:column="13">try
            <block pos:line="193" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="194" pos:column="17">var</name></type> <name pos:line="194" pos:column="21">indexFilterSettings</name> =<init pos:line="194" pos:column="42"> <expr><op:operator pos:line="194" pos:column="43">new</op:operator> <name pos:line="194" pos:column="47">IndexFilterSettings</name>
                <block pos:line="195" pos:column="17">{
                    <expr><name pos:line="196" pos:column="21">IgnoredPathExpressions</name> <op:operator pos:line="196" pos:column="44">=</op:operator> <op:operator pos:line="196" pos:column="46">new</op:operator> <name><name pos:line="196" pos:column="50">List</name><argument_list pos:line="196" pos:column="54">&lt;<argument><name pos:line="196" pos:column="55">string</name></argument>&gt;</argument_list></name> <block pos:line="196" pos:column="63">{ <expr><lit:literal type="string" pos:line="196" pos:column="65">"bin\\*"</lit:literal></expr><op:operator pos:line="196" pos:column="73">,</op:operator> <expr><lit:literal type="string" pos:line="196" pos:column="75">"obj\\*"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="198" pos:column="17">var</name></type> <name pos:line="198" pos:column="21">logger</name> =<init pos:line="198" pos:column="29"> <expr><call><name pos:line="198" pos:column="30">CreateLog</name><argument_list pos:line="198" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="199" pos:column="17">var</name></type> <name pos:line="199" pos:column="21">indexFilterManager</name> =<init pos:line="199" pos:column="41"> <expr><op:operator pos:line="199" pos:column="42">new</op:operator> <call><name pos:line="199" pos:column="46">IndexFilterManager</name><argument_list pos:line="199" pos:column="64">(<argument><expr><name pos:line="199" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="199" pos:column="84">,</op:operator> <argument><expr><name pos:line="199" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="200" pos:column="17">CreateTestDirectory</name><argument_list pos:line="200" pos:column="36">(<argument><expr><name pos:line="200" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="201" pos:column="17">var</name></type> <name pos:line="201" pos:column="21">fullFilePath</name> =<init pos:line="201" pos:column="35"> <expr><call><name pos:line="201" pos:column="36">CreateTestFile</name><argument_list pos:line="201" pos:column="50">(<argument><expr><name pos:line="201" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="202" pos:column="17">var</name></type> <name pos:line="202" pos:column="21">expected</name> =<init pos:line="202" pos:column="31"> <expr><lit:literal type="boolean" pos:line="202" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="203" pos:column="17">var</name></type> <name pos:line="203" pos:column="21">actual</name> =<init pos:line="203" pos:column="29"> <expr><call><name><name pos:line="203" pos:column="30">indexFilterManager</name><op:operator pos:line="203" pos:column="48">.</op:operator><name pos:line="203" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="203" pos:column="68">(<argument><expr><name pos:line="203" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">Assert</name><op:operator pos:line="204" pos:column="23">.</op:operator><name pos:line="204" pos:column="24">AreEqual</name></name><argument_list pos:line="204" pos:column="32">(<argument><expr><name pos:line="204" pos:column="33">expected</name></expr></argument><op:operator pos:line="204" pos:column="41">,</op:operator> <argument><expr><name pos:line="204" pos:column="43">actual</name></expr></argument><op:operator pos:line="204" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="204" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="206" pos:column="13">finally
            <block pos:line="207" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="208" pos:column="17">DeleteTestFile</name><argument_list pos:line="208" pos:column="31">(<argument><expr><name pos:line="208" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="209" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="209" pos:column="36">(<argument><expr><name pos:line="209" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="213" pos:column="9">[<expr><name pos:line="213" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="214" pos:column="9">public</specifier> <name pos:line="214" pos:column="16">void</name></type> <name pos:line="214" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsFalseIfPathRegularExpressionsRuleMatches</name><parameter_list pos:line="214" pos:column="106">()</parameter_list>
        <block pos:line="215" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">testDirectoryName</name> =<init pos:line="216" pos:column="36"> <expr><lit:literal type="string" pos:line="216" pos:column="37">"bin"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="217" pos:column="13">var</name></type> <name pos:line="217" pos:column="17">testFileName</name> =<init pos:line="217" pos:column="31"> <expr><lit:literal type="string" pos:line="217" pos:column="32">"bin\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="218" pos:column="13">try
            <block pos:line="219" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="220" pos:column="17">var</name></type> <name pos:line="220" pos:column="21">indexFilterSettings</name> =<init pos:line="220" pos:column="42"> <expr><op:operator pos:line="220" pos:column="43">new</op:operator> <name pos:line="220" pos:column="47">IndexFilterSettings</name>
                <block pos:line="221" pos:column="17">{
                    <expr><name pos:line="222" pos:column="21">IgnoredPathRegularExpressions</name> <op:operator pos:line="222" pos:column="51">=</op:operator> <op:operator pos:line="222" pos:column="53">new</op:operator> <name><name pos:line="222" pos:column="57">List</name><argument_list pos:line="222" pos:column="61">&lt;<argument><name pos:line="222" pos:column="62">string</name></argument>&gt;</argument_list></name> <block pos:line="222" pos:column="70">{ <expr><lit:literal type="string" pos:line="222" pos:column="72">@"bin\\.*\.xml"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="224" pos:column="17">var</name></type> <name pos:line="224" pos:column="21">logger</name> =<init pos:line="224" pos:column="29"> <expr><call><name pos:line="224" pos:column="30">CreateLog</name><argument_list pos:line="224" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="225" pos:column="17">var</name></type> <name pos:line="225" pos:column="21">indexFilterManager</name> =<init pos:line="225" pos:column="41"> <expr><op:operator pos:line="225" pos:column="42">new</op:operator> <call><name pos:line="225" pos:column="46">IndexFilterManager</name><argument_list pos:line="225" pos:column="64">(<argument><expr><name pos:line="225" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="225" pos:column="84">,</op:operator> <argument><expr><name pos:line="225" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="226" pos:column="17">CreateTestDirectory</name><argument_list pos:line="226" pos:column="36">(<argument><expr><name pos:line="226" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="227" pos:column="17">var</name></type> <name pos:line="227" pos:column="21">fullFilePath</name> =<init pos:line="227" pos:column="35"> <expr><call><name pos:line="227" pos:column="36">CreateTestFile</name><argument_list pos:line="227" pos:column="50">(<argument><expr><name pos:line="227" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="228" pos:column="17">var</name></type> <name pos:line="228" pos:column="21">expected</name> =<init pos:line="228" pos:column="31"> <expr><lit:literal type="boolean" pos:line="228" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="229" pos:column="17">var</name></type> <name pos:line="229" pos:column="21">actual</name> =<init pos:line="229" pos:column="29"> <expr><call><name><name pos:line="229" pos:column="30">indexFilterManager</name><op:operator pos:line="229" pos:column="48">.</op:operator><name pos:line="229" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="229" pos:column="68">(<argument><expr><name pos:line="229" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="230" pos:column="17">Assert</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">AreEqual</name></name><argument_list pos:line="230" pos:column="32">(<argument><expr><name pos:line="230" pos:column="33">expected</name></expr></argument><op:operator pos:line="230" pos:column="41">,</op:operator> <argument><expr><name pos:line="230" pos:column="43">actual</name></expr></argument><op:operator pos:line="230" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="230" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="232" pos:column="13">finally
            <block pos:line="233" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="234" pos:column="17">DeleteTestFile</name><argument_list pos:line="234" pos:column="31">(<argument><expr><name pos:line="234" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="235" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="235" pos:column="36">(<argument><expr><name pos:line="235" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="239" pos:column="9">[<expr><name pos:line="239" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="240" pos:column="9">public</specifier> <name pos:line="240" pos:column="16">void</name></type> <name pos:line="240" pos:column="21">IndexFilterManager_ShouldFileBeIndexedReturnsTrueIfNoPathRegularExpressionsRuleMatches</name><parameter_list pos:line="240" pos:column="107">()</parameter_list>
        <block pos:line="241" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">testDirectoryName</name> =<init pos:line="242" pos:column="36"> <expr><lit:literal type="string" pos:line="242" pos:column="37">"project"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">var</name></type> <name pos:line="243" pos:column="17">testFileName</name> =<init pos:line="243" pos:column="31"> <expr><lit:literal type="string" pos:line="243" pos:column="32">"project\\index.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="244" pos:column="13">try
            <block pos:line="245" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="246" pos:column="17">var</name></type> <name pos:line="246" pos:column="21">indexFilterSettings</name> =<init pos:line="246" pos:column="42"> <expr><op:operator pos:line="246" pos:column="43">new</op:operator> <name pos:line="246" pos:column="47">IndexFilterSettings</name>
                <block pos:line="247" pos:column="17">{
                    <expr><name pos:line="248" pos:column="21">IgnoredPathRegularExpressions</name> <op:operator pos:line="248" pos:column="51">=</op:operator> <op:operator pos:line="248" pos:column="53">new</op:operator> <name><name pos:line="248" pos:column="57">List</name><argument_list pos:line="248" pos:column="61">&lt;<argument><name pos:line="248" pos:column="62">string</name></argument>&gt;</argument_list></name> <block pos:line="248" pos:column="70">{ <expr><lit:literal type="string" pos:line="248" pos:column="72">@"bin\\.*\.xml"</lit:literal></expr> }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="250" pos:column="17">var</name></type> <name pos:line="250" pos:column="21">logger</name> =<init pos:line="250" pos:column="29"> <expr><call><name pos:line="250" pos:column="30">CreateLog</name><argument_list pos:line="250" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="251" pos:column="17">var</name></type> <name pos:line="251" pos:column="21">indexFilterManager</name> =<init pos:line="251" pos:column="41"> <expr><op:operator pos:line="251" pos:column="42">new</op:operator> <call><name pos:line="251" pos:column="46">IndexFilterManager</name><argument_list pos:line="251" pos:column="64">(<argument><expr><name pos:line="251" pos:column="65">indexFilterSettings</name></expr></argument><op:operator pos:line="251" pos:column="84">,</op:operator> <argument><expr><name pos:line="251" pos:column="86">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="252" pos:column="17">CreateTestDirectory</name><argument_list pos:line="252" pos:column="36">(<argument><expr><name pos:line="252" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="253" pos:column="17">var</name></type> <name pos:line="253" pos:column="21">fullFilePath</name> =<init pos:line="253" pos:column="35"> <expr><call><name pos:line="253" pos:column="36">CreateTestFile</name><argument_list pos:line="253" pos:column="50">(<argument><expr><name pos:line="253" pos:column="51">testFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="254" pos:column="17">var</name></type> <name pos:line="254" pos:column="21">expected</name> =<init pos:line="254" pos:column="31"> <expr><lit:literal type="boolean" pos:line="254" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="255" pos:column="17">var</name></type> <name pos:line="255" pos:column="21">actual</name> =<init pos:line="255" pos:column="29"> <expr><call><name><name pos:line="255" pos:column="30">indexFilterManager</name><op:operator pos:line="255" pos:column="48">.</op:operator><name pos:line="255" pos:column="49">ShouldFileBeIndexed</name></name><argument_list pos:line="255" pos:column="68">(<argument><expr><name pos:line="255" pos:column="69">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="256" pos:column="17">Assert</name><op:operator pos:line="256" pos:column="23">.</op:operator><name pos:line="256" pos:column="24">AreEqual</name></name><argument_list pos:line="256" pos:column="32">(<argument><expr><name pos:line="256" pos:column="33">expected</name></expr></argument><op:operator pos:line="256" pos:column="41">,</op:operator> <argument><expr><name pos:line="256" pos:column="43">actual</name></expr></argument><op:operator pos:line="256" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="256" pos:column="51">"Invalid result from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="258" pos:column="13">finally
            <block pos:line="259" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="260" pos:column="17">DeleteTestFile</name><argument_list pos:line="260" pos:column="31">(<argument><expr><name pos:line="260" pos:column="32">testFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="261" pos:column="17">DeleteTestDirectory</name><argument_list pos:line="261" pos:column="36">(<argument><expr><name pos:line="261" pos:column="37">testDirectoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="265" pos:column="9">[<expr><name pos:line="265" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="266" pos:column="9">public</specifier> <name pos:line="266" pos:column="16">void</name></type> <name pos:line="266" pos:column="21">ResetContract</name><parameter_list pos:line="266" pos:column="34">()</parameter_list>
        <block pos:line="267" pos:column="9">{
            <expr_stmt><expr><name pos:line="268" pos:column="13">contractFailed</name> <op:operator pos:line="268" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="268" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="269" pos:column="13">Contract</name><op:operator pos:line="269" pos:column="21">.</op:operator><name pos:line="269" pos:column="22">ContractFailed</name></name> <op:operator pos:line="269" pos:column="37">+=</op:operator> <op:operator pos:line="269" pos:column="40">(</op:operator><name pos:line="269" pos:column="41">sender</name><op:operator pos:line="269" pos:column="47">,</op:operator> <name pos:line="269" pos:column="49">e</name><op:operator pos:line="269" pos:column="50">)</op:operator> =&gt;
            <block pos:line="270" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="271" pos:column="17">e</name><op:operator pos:line="271" pos:column="18">.</op:operator><name pos:line="271" pos:column="19">SetHandled</name></name><argument_list pos:line="271" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="272" pos:column="17">e</name><op:operator pos:line="272" pos:column="18">.</op:operator><name pos:line="272" pos:column="19">SetUnwind</name></name><argument_list pos:line="272" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="273" pos:column="17">contractFailed</name> <op:operator pos:line="273" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="273" pos:column="34">true</lit:literal></expr>;</expr_stmt>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="277" pos:column="9">private</specifier> <specifier pos:line="277" pos:column="17">static</specifier> <name pos:line="277" pos:column="24">ILog</name></type> <name pos:line="277" pos:column="29">CreateLog</name><parameter_list pos:line="277" pos:column="38">()</parameter_list>
        <block pos:line="278" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="279" pos:column="13">string</name></type> <name pos:line="279" pos:column="20">configurationContent</name> =<init pos:line="279" pos:column="42">
                <expr><lit:literal type="string" pos:line="280" pos:column="17">@"&lt;?xml version='1.0'?&gt;
				&lt;log4net&gt;
					&lt;appender name='MemoryAppender' type='log4net.Appender.MemoryAppender'&gt;
					&lt;/appender&gt;
					&lt;root&gt;
						&lt;level value='DEBUG' /&gt;
						&lt;appender-ref ref='MemoryAppender' /&gt;
					&lt;/root&gt;
				&lt;/log4net&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">XmlConfigurator</name><op:operator pos:line="289" pos:column="28">.</op:operator><name pos:line="289" pos:column="29">Configure</name></name><argument_list pos:line="289" pos:column="38">(<argument><expr><op:operator pos:line="289" pos:column="39">new</op:operator> <call><name pos:line="289" pos:column="43">MemoryStream</name><argument_list pos:line="289" pos:column="55">(<argument><expr><call><name><name pos:line="289" pos:column="56">ASCIIEncoding</name><op:operator pos:line="289" pos:column="69">.</op:operator><name pos:line="289" pos:column="70">Default</name><op:operator pos:line="289" pos:column="77">.</op:operator><name pos:line="289" pos:column="78">GetBytes</name></name><argument_list pos:line="289" pos:column="86">(<argument><expr><name pos:line="289" pos:column="87">configurationContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="290" pos:column="13">return <expr><call><name><name pos:line="290" pos:column="20">LogManager</name><op:operator pos:line="290" pos:column="30">.</op:operator><name pos:line="290" pos:column="31">GetLogger</name></name><argument_list pos:line="290" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="41">"TestLogger"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="293" pos:column="9">private</specifier> <name pos:line="293" pos:column="17">string</name></type> <name pos:line="293" pos:column="24">CreateTestFile</name><parameter_list pos:line="293" pos:column="38">(<param><decl><type><name pos:line="293" pos:column="39">string</name></type> <name pos:line="293" pos:column="46">fileName</name></decl></param>)</parameter_list>
        <block pos:line="294" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="295" pos:column="13">var</name></type> <name pos:line="295" pos:column="17">tmpDir</name> =<init pos:line="295" pos:column="25"> <expr><call><name><name pos:line="295" pos:column="26">Path</name><op:operator pos:line="295" pos:column="30">.</op:operator><name pos:line="295" pos:column="31">GetTempPath</name></name><argument_list pos:line="295" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="296" pos:column="13">var</name></type> <name pos:line="296" pos:column="17">fullFilePath</name> =<init pos:line="296" pos:column="31"> <expr><call><name><name pos:line="296" pos:column="32">Path</name><op:operator pos:line="296" pos:column="36">.</op:operator><name pos:line="296" pos:column="37">Combine</name></name><argument_list pos:line="296" pos:column="44">(<argument><expr><name pos:line="296" pos:column="45">tmpDir</name></expr></argument><op:operator pos:line="296" pos:column="51">,</op:operator> <argument><expr><name pos:line="296" pos:column="53">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="297" pos:column="13">if <condition pos:line="297" pos:column="16">(<expr><op:operator pos:line="297" pos:column="17">!</op:operator><call><name><name pos:line="297" pos:column="18">File</name><op:operator pos:line="297" pos:column="22">.</op:operator><name pos:line="297" pos:column="23">Exists</name></name><argument_list pos:line="297" pos:column="29">(<argument><expr><name pos:line="297" pos:column="30">fullFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="297" pos:column="44">
                <expr_stmt><expr><call><name><name pos:line="298" pos:column="17">File</name><op:operator pos:line="298" pos:column="21">.</op:operator><name pos:line="298" pos:column="22">WriteAllText</name></name><argument_list pos:line="298" pos:column="34">(<argument><expr><name pos:line="298" pos:column="35">fullFilePath</name></expr></argument><op:operator pos:line="298" pos:column="47">,</op:operator> <argument><expr><name><name pos:line="298" pos:column="49">String</name><op:operator pos:line="298" pos:column="55">.</op:operator><name pos:line="298" pos:column="56">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return pos:line="299" pos:column="13">return <expr><name pos:line="299" pos:column="20">fullFilePath</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="302" pos:column="9">private</specifier> <name pos:line="302" pos:column="17">void</name></type> <name pos:line="302" pos:column="22">DeleteTestFile</name><parameter_list pos:line="302" pos:column="36">(<param><decl><type><name pos:line="302" pos:column="37">string</name></type> <name pos:line="302" pos:column="44">fileName</name></decl></param>)</parameter_list>
        <block pos:line="303" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">tmpDir</name> =<init pos:line="304" pos:column="25"> <expr><call><name><name pos:line="304" pos:column="26">Path</name><op:operator pos:line="304" pos:column="30">.</op:operator><name pos:line="304" pos:column="31">GetTempPath</name></name><argument_list pos:line="304" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="305" pos:column="13">var</name></type> <name pos:line="305" pos:column="17">fullFilePath</name> =<init pos:line="305" pos:column="31"> <expr><call><name><name pos:line="305" pos:column="32">Path</name><op:operator pos:line="305" pos:column="36">.</op:operator><name pos:line="305" pos:column="37">Combine</name></name><argument_list pos:line="305" pos:column="44">(<argument><expr><name pos:line="305" pos:column="45">tmpDir</name></expr></argument><op:operator pos:line="305" pos:column="51">,</op:operator> <argument><expr><name pos:line="305" pos:column="53">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="306" pos:column="13">if <condition pos:line="306" pos:column="16">(<expr><call><name><name pos:line="306" pos:column="17">File</name><op:operator pos:line="306" pos:column="21">.</op:operator><name pos:line="306" pos:column="22">Exists</name></name><argument_list pos:line="306" pos:column="28">(<argument><expr><name pos:line="306" pos:column="29">fullFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="306" pos:column="43">
                <expr_stmt><expr><call><name><name pos:line="307" pos:column="17">File</name><op:operator pos:line="307" pos:column="21">.</op:operator><name pos:line="307" pos:column="22">Delete</name></name><argument_list pos:line="307" pos:column="28">(<argument><expr><name pos:line="307" pos:column="29">fullFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="310" pos:column="9">private</specifier> <name pos:line="310" pos:column="17">string</name></type> <name pos:line="310" pos:column="24">CreateTestDirectory</name><parameter_list pos:line="310" pos:column="43">(<param><decl><type><name pos:line="310" pos:column="44">string</name></type> <name pos:line="310" pos:column="51">directoryName</name></decl></param>)</parameter_list>
        <block pos:line="311" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="312" pos:column="13">var</name></type> <name pos:line="312" pos:column="17">tmpDir</name> =<init pos:line="312" pos:column="25"> <expr><call><name><name pos:line="312" pos:column="26">Path</name><op:operator pos:line="312" pos:column="30">.</op:operator><name pos:line="312" pos:column="31">GetTempPath</name></name><argument_list pos:line="312" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="313" pos:column="13">var</name></type> <name pos:line="313" pos:column="17">fullDirectoryPath</name> =<init pos:line="313" pos:column="36"> <expr><call><name><name pos:line="313" pos:column="37">Path</name><op:operator pos:line="313" pos:column="41">.</op:operator><name pos:line="313" pos:column="42">Combine</name></name><argument_list pos:line="313" pos:column="49">(<argument><expr><name pos:line="313" pos:column="50">tmpDir</name></expr></argument><op:operator pos:line="313" pos:column="56">,</op:operator> <argument><expr><name pos:line="313" pos:column="58">directoryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="314" pos:column="13">if <condition pos:line="314" pos:column="16">(<expr><op:operator pos:line="314" pos:column="17">!</op:operator><call><name><name pos:line="314" pos:column="18">Directory</name><op:operator pos:line="314" pos:column="27">.</op:operator><name pos:line="314" pos:column="28">Exists</name></name><argument_list pos:line="314" pos:column="34">(<argument><expr><name pos:line="314" pos:column="35">fullDirectoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="314" pos:column="54">
                <expr_stmt><expr><call><name><name pos:line="315" pos:column="17">Directory</name><op:operator pos:line="315" pos:column="26">.</op:operator><name pos:line="315" pos:column="27">CreateDirectory</name></name><argument_list pos:line="315" pos:column="42">(<argument><expr><name pos:line="315" pos:column="43">fullDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return pos:line="316" pos:column="13">return <expr><name pos:line="316" pos:column="20">fullDirectoryPath</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="319" pos:column="9">private</specifier> <name pos:line="319" pos:column="17">void</name></type> <name pos:line="319" pos:column="22">DeleteTestDirectory</name><parameter_list pos:line="319" pos:column="41">(<param><decl><type><name pos:line="319" pos:column="42">string</name></type> <name pos:line="319" pos:column="49">directoryName</name></decl></param>)</parameter_list>
        <block pos:line="320" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">tmpDir</name> =<init pos:line="321" pos:column="25"> <expr><call><name><name pos:line="321" pos:column="26">Path</name><op:operator pos:line="321" pos:column="30">.</op:operator><name pos:line="321" pos:column="31">GetTempPath</name></name><argument_list pos:line="321" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="322" pos:column="13">var</name></type> <name pos:line="322" pos:column="17">fullDirectoryPath</name> =<init pos:line="322" pos:column="36"> <expr><call><name><name pos:line="322" pos:column="37">Path</name><op:operator pos:line="322" pos:column="41">.</op:operator><name pos:line="322" pos:column="42">Combine</name></name><argument_list pos:line="322" pos:column="49">(<argument><expr><name pos:line="322" pos:column="50">tmpDir</name></expr></argument><op:operator pos:line="322" pos:column="56">,</op:operator> <argument><expr><name pos:line="322" pos:column="58">directoryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="323" pos:column="13">if <condition pos:line="323" pos:column="16">(<expr><call><name><name pos:line="323" pos:column="17">Directory</name><op:operator pos:line="323" pos:column="26">.</op:operator><name pos:line="323" pos:column="27">Exists</name></name><argument_list pos:line="323" pos:column="33">(<argument><expr><name pos:line="323" pos:column="34">fullDirectoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="323" pos:column="53">
                <expr_stmt><expr><call><name><name pos:line="324" pos:column="17">Directory</name><op:operator pos:line="324" pos:column="26">.</op:operator><name pos:line="324" pos:column="27">Delete</name></name><argument_list pos:line="324" pos:column="33">(<argument><expr><name pos:line="324" pos:column="34">fullDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="327" pos:column="9">private</specifier> <name pos:line="327" pos:column="17">bool</name></type> <name pos:line="327" pos:column="22">contractFailed</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace></unit>
