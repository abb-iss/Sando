<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\IndexState\IndexStateManager.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Runtime</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">CompilerServices</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Serialization</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Collections</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">Generic</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Configuration</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">OptionsPages</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Indexer</name><op:operator pos:line="10" pos:column="24">.</op:operator><name pos:line="10" pos:column="25">IndexState</name></name>
<block pos:line="11" pos:column="1">{
	<class><specifier pos:line="12" pos:column="9">public</specifier> class <name pos:line="12" pos:column="22">IndexStateManager</name>
	<block pos:line="13" pos:column="9">{
		<function><type><attribute pos:line="14" pos:column="17">[<expr><call><name pos:line="14" pos:column="18">MethodImpl</name><argument_list pos:line="14" pos:column="28">(<argument><expr><name><name pos:line="14" pos:column="29">MethodImplOptions</name><op:operator pos:line="14" pos:column="46">.</op:operator><name pos:line="14" pos:column="47">Synchronized</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="15" pos:column="17">public</specifier> <specifier pos:line="15" pos:column="24">static</specifier> <name pos:line="15" pos:column="31">bool</name></type> <name pos:line="15" pos:column="36">IsIndexRecreationRequired</name><parameter_list pos:line="15" pos:column="61">()</parameter_list>
		<block pos:line="16" pos:column="17">{
			<if pos:line="17" pos:column="25">if<condition pos:line="17" pos:column="27">(<expr><call><name><name pos:line="17" pos:column="28">string</name><op:operator pos:line="17" pos:column="34">.</op:operator><name pos:line="17" pos:column="35">IsNullOrEmpty</name></name><argument_list pos:line="17" pos:column="48">(<argument><expr><name pos:line="17" pos:column="49">IndexDirectoryPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="17" pos:column="69">||</op:operator> <call><name><name pos:line="17" pos:column="72">string</name><op:operator pos:line="17" pos:column="78">.</op:operator><name pos:line="17" pos:column="79">IsNullOrEmpty</name></name><argument_list pos:line="17" pos:column="92">(<argument><expr><name pos:line="17" pos:column="93">IndexStatePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="17" pos:column="109"> 
			<block pos:line="18" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">ConstructIndexPaths</name><argument_list pos:line="19" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">IndexState</name></type> <name pos:line="21" pos:column="36">previousIndexState</name> =<init pos:line="21" pos:column="56"> <expr><call><name pos:line="21" pos:column="57">readPreviousIndexState</name><argument_list pos:line="21" pos:column="79">(<argument><expr><name pos:line="21" pos:column="80">IndexStatePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">sandoOptions</name> =<init pos:line="22" pos:column="31"> <expr><call><name><name pos:line="22" pos:column="32">ServiceLocator</name><op:operator pos:line="22" pos:column="46">.</op:operator><name><name pos:line="22" pos:column="47">Resolve</name><argument_list pos:line="22" pos:column="54">&lt;<argument><name pos:line="22" pos:column="55">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="22" pos:column="77">()</argument_list></call><op:operator pos:line="22" pos:column="79">.</op:operator><call><name pos:line="22" pos:column="80">GetSandoOptions</name><argument_list pos:line="22" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt> <empty_stmt pos:line="22" pos:column="99">;</empty_stmt>
			    
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">IndexState</name></type> <name pos:line="24" pos:column="36">currentIndexState</name> =<init pos:line="24" pos:column="55"> <expr><call><name pos:line="24" pos:column="56">readCurrentIndexState</name><argument_list pos:line="24" pos:column="77">(<argument><expr><name pos:line="24" pos:column="78">IndexDirectoryPath</name></expr></argument><op:operator pos:line="24" pos:column="96">,</op:operator> <argument><expr><name><name pos:line="24" pos:column="98">sandoOptions</name><op:operator pos:line="24" pos:column="110">.</op:operator><name pos:line="24" pos:column="111">ExtensionPointsConfigurationFilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">bool</name></type> <name pos:line="25" pos:column="30">result</name> =<init pos:line="25" pos:column="38"> <expr><name pos:line="25" pos:column="39">previousIndexState</name> <op:operator pos:line="25" pos:column="58">==</op:operator> <name pos:line="25" pos:column="61">null</name> <op:operator pos:line="25" pos:column="66">||</op:operator> <op:operator pos:line="25" pos:column="69">!</op:operator><call><name><name pos:line="25" pos:column="70">previousIndexState</name><op:operator pos:line="25" pos:column="88">.</op:operator><name pos:line="25" pos:column="89">Equals</name></name><argument_list pos:line="25" pos:column="95">(<argument><expr><name pos:line="25" pos:column="96">currentIndexState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">saveIndexState</name><argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">currentIndexState</name></expr></argument><op:operator pos:line="26" pos:column="57">,</op:operator> <argument><expr><name pos:line="26" pos:column="59">IndexStatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="27" pos:column="25">return <expr><name pos:line="27" pos:column="32">result</name></expr>;</return>
		}</block></function>

		<function><type><attribute pos:line="30" pos:column="17">[<expr><call><name pos:line="30" pos:column="18">MethodImpl</name><argument_list pos:line="30" pos:column="28">(<argument><expr><name><name pos:line="30" pos:column="29">MethodImplOptions</name><op:operator pos:line="30" pos:column="46">.</op:operator><name pos:line="30" pos:column="47">Synchronized</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">void</name></type> <name pos:line="31" pos:column="36">SaveCurrentIndexState</name><parameter_list pos:line="31" pos:column="57">()</parameter_list> 
		<block pos:line="32" pos:column="17">{
			<if pos:line="33" pos:column="25">if<condition pos:line="33" pos:column="27">(<expr><call><name><name pos:line="33" pos:column="28">string</name><op:operator pos:line="33" pos:column="34">.</op:operator><name pos:line="33" pos:column="35">IsNullOrEmpty</name></name><argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">IndexDirectoryPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="33" pos:column="69">||</op:operator> <call><name><name pos:line="33" pos:column="72">string</name><op:operator pos:line="33" pos:column="78">.</op:operator><name pos:line="33" pos:column="79">IsNullOrEmpty</name></name><argument_list pos:line="33" pos:column="92">(<argument><expr><name pos:line="33" pos:column="93">IndexStatePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="33" pos:column="109"> 
			<block pos:line="34" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="35" pos:column="33">ConstructIndexPaths</name><argument_list pos:line="35" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">sandoOptions</name> =<init pos:line="37" pos:column="31"> <expr><call><name><name pos:line="37" pos:column="32">ServiceLocator</name><op:operator pos:line="37" pos:column="46">.</op:operator><name><name pos:line="37" pos:column="47">Resolve</name><argument_list pos:line="37" pos:column="54">&lt;<argument><name pos:line="37" pos:column="55">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="77">()</argument_list></call><op:operator pos:line="37" pos:column="79">.</op:operator><call><name pos:line="37" pos:column="80">GetSandoOptions</name><argument_list pos:line="37" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">IndexState</name></type> <name pos:line="38" pos:column="24">currentIndexState</name> =<init pos:line="38" pos:column="43"> <expr><call><name pos:line="38" pos:column="44">readCurrentIndexState</name><argument_list pos:line="38" pos:column="65">(<argument><expr><name pos:line="38" pos:column="66">IndexDirectoryPath</name></expr></argument><op:operator pos:line="38" pos:column="84">,</op:operator> <argument><expr><name><name pos:line="38" pos:column="86">sandoOptions</name><op:operator pos:line="38" pos:column="98">.</op:operator><name pos:line="38" pos:column="99">ExtensionPointsConfigurationFilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">saveIndexState</name><argument_list pos:line="39" pos:column="39">(<argument><expr><name pos:line="39" pos:column="40">currentIndexState</name></expr></argument><op:operator pos:line="39" pos:column="57">,</op:operator> <argument><expr><name pos:line="39" pos:column="59">IndexStatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="42" pos:column="17">private</specifier> <specifier pos:line="42" pos:column="25">static</specifier> <name pos:line="42" pos:column="32">void</name></type> <name pos:line="42" pos:column="37">ConstructIndexPaths</name><parameter_list pos:line="42" pos:column="56">()</parameter_list> <block pos:line="42" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">string</name></type> <name pos:line="43" pos:column="32">assemblyPath</name> =<init pos:line="43" pos:column="46"> <expr><call><name><name pos:line="43" pos:column="47">Assembly</name><op:operator pos:line="43" pos:column="55">.</op:operator><name pos:line="43" pos:column="56">GetCallingAssembly</name></name><argument_list pos:line="43" pos:column="74">()</argument_list></call><op:operator pos:line="43" pos:column="76">.</op:operator><name pos:line="43" pos:column="77">Location</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="44" pos:column="25">IndexDirectoryPath</name> <op:operator pos:line="44" pos:column="44">=</op:operator> <call><name><name pos:line="44" pos:column="46">Directory</name><op:operator pos:line="44" pos:column="55">.</op:operator><name pos:line="44" pos:column="56">GetParent</name></name><argument_list pos:line="44" pos:column="65">(<argument><expr><name pos:line="44" pos:column="66">assemblyPath</name></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="79">.</op:operator><name pos:line="44" pos:column="80">FullName</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">IndexStatePath</name> <op:operator pos:line="45" pos:column="40">=</op:operator> <call><name><name pos:line="45" pos:column="42">Path</name><op:operator pos:line="45" pos:column="46">.</op:operator><name pos:line="45" pos:column="47">Combine</name></name><argument_list pos:line="45" pos:column="54">(<argument><expr><name pos:line="45" pos:column="55">IndexDirectoryPath</name></expr></argument><op:operator pos:line="45" pos:column="73">,</op:operator> <argument><expr><name pos:line="45" pos:column="75">IndexStateFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>


		<function><type><specifier pos:line="49" pos:column="17">private</specifier> <specifier pos:line="49" pos:column="25">static</specifier> <name pos:line="49" pos:column="32">IndexState</name></type> <name pos:line="49" pos:column="43">readPreviousIndexState</name><parameter_list pos:line="49" pos:column="65">(<param><decl><type><name pos:line="49" pos:column="66">string</name></type> <name pos:line="49" pos:column="73">indexStatePath</name></decl></param>)</parameter_list>
		<block pos:line="50" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">IndexState</name></type> <name pos:line="51" pos:column="36">previousIndexState</name> =<init pos:line="51" pos:column="56"> <expr><op:operator pos:line="51" pos:column="57">new</op:operator> <call><name pos:line="51" pos:column="61">IndexState</name><argument_list pos:line="51" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="52" pos:column="25">if<condition pos:line="52" pos:column="27">(<expr><op:operator pos:line="52" pos:column="28">!</op:operator><call><name><name pos:line="52" pos:column="29">File</name><op:operator pos:line="52" pos:column="33">.</op:operator><name pos:line="52" pos:column="34">Exists</name></name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">indexStatePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="52" pos:column="57">
			<block pos:line="53" pos:column="25">{
				<return pos:line="54" pos:column="33">return <expr><name pos:line="54" pos:column="40">null</name></expr>;</return> <comment type="line" pos:line="54" pos:column="46">//no file - solution indexed for the first time</comment>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="57" pos:column="25">XmlSerializer</name></type> <name pos:line="57" pos:column="39">xmlSerializer</name> =<init pos:line="57" pos:column="54"> <expr><name pos:line="57" pos:column="55">null</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">TextReader</name></type> <name pos:line="58" pos:column="36">textReader</name> =<init pos:line="58" pos:column="48"> <expr><name pos:line="58" pos:column="49">null</name></expr></init></decl>;</decl_stmt>
			<try pos:line="59" pos:column="25">try
			<block pos:line="60" pos:column="25">{
				<expr_stmt><expr><name pos:line="61" pos:column="33">xmlSerializer</name> <op:operator pos:line="61" pos:column="47">=</op:operator> <op:operator pos:line="61" pos:column="49">new</op:operator> <call><name pos:line="61" pos:column="53">XmlSerializer</name><argument_list pos:line="61" pos:column="66">(<argument><expr><call><name pos:line="61" pos:column="67">typeof</name><argument_list pos:line="61" pos:column="73">(<argument><expr><name pos:line="61" pos:column="74">IndexState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">textReader</name> <op:operator pos:line="62" pos:column="44">=</op:operator> <op:operator pos:line="62" pos:column="46">new</op:operator> <call><name pos:line="62" pos:column="50">StreamReader</name><argument_list pos:line="62" pos:column="62">(<argument><expr><name pos:line="62" pos:column="63">indexStatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="63" pos:column="33">previousIndexState</name> <op:operator pos:line="63" pos:column="52">=</op:operator> <op:operator pos:line="63" pos:column="54">(</op:operator><name pos:line="63" pos:column="55">IndexState</name><op:operator pos:line="63" pos:column="65">)</op:operator><call><name><name pos:line="63" pos:column="66">xmlSerializer</name><op:operator pos:line="63" pos:column="79">.</op:operator><name pos:line="63" pos:column="80">Deserialize</name></name><argument_list pos:line="63" pos:column="91">(<argument><expr><name pos:line="63" pos:column="92">textReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<finally pos:line="65" pos:column="25">finally
			<block pos:line="66" pos:column="25">{
				<if pos:line="67" pos:column="33">if<condition pos:line="67" pos:column="35">(<expr><name pos:line="67" pos:column="36">textReader</name> <op:operator pos:line="67" pos:column="47">!=</op:operator> <name pos:line="67" pos:column="50">null</name></expr>)</condition><then pos:line="67" pos:column="55">
					<expr_stmt><expr><call><name><name pos:line="68" pos:column="41">textReader</name><op:operator pos:line="68" pos:column="51">.</op:operator><name pos:line="68" pos:column="52">Close</name></name><argument_list pos:line="68" pos:column="57">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></finally></try>
			<return pos:line="70" pos:column="25">return <expr><name pos:line="70" pos:column="32">previousIndexState</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="73" pos:column="17">private</specifier> <specifier pos:line="73" pos:column="25">static</specifier> <name pos:line="73" pos:column="32">IndexState</name></type> <name pos:line="73" pos:column="43">readCurrentIndexState</name><parameter_list pos:line="73" pos:column="64">(<param><decl><type><name pos:line="73" pos:column="65">string</name></type> <name pos:line="73" pos:column="72">indexDirectoryPath</name></decl></param><op:operator pos:line="73" pos:column="90">,</op:operator> <param><decl><type><name pos:line="73" pos:column="92">string</name></type> <name pos:line="73" pos:column="99">extensionPointsConfigurationPath</name></decl></param>)</parameter_list>
		<block pos:line="74" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">IndexState</name></type> <name pos:line="75" pos:column="36">currentIndexState</name> =<init pos:line="75" pos:column="55"> <expr><op:operator pos:line="75" pos:column="56">new</op:operator> <call><name pos:line="75" pos:column="60">IndexState</name><argument_list pos:line="75" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="76" pos:column="25">findAndAddRelevantFilesToIndexState</name><argument_list pos:line="76" pos:column="60">(<argument><expr><name pos:line="76" pos:column="61">indexDirectoryPath</name></expr></argument><op:operator pos:line="76" pos:column="79">,</op:operator> <argument><expr><name pos:line="76" pos:column="81">currentIndexState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">string</name></type> <name pos:line="77" pos:column="32">extensionPointsConfigurationFilePath</name> =<init pos:line="77" pos:column="70"> <expr><call><name><name pos:line="77" pos:column="71">Path</name><op:operator pos:line="77" pos:column="75">.</op:operator><name pos:line="77" pos:column="76">Combine</name></name><argument_list pos:line="77" pos:column="83">(<argument><expr><name pos:line="77" pos:column="84">extensionPointsConfigurationPath</name></expr></argument><op:operator pos:line="77" pos:column="116">,</op:operator> <argument><expr><lit:literal type="string" pos:line="77" pos:column="118">"ExtensionPointsConfiguration.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="78" pos:column="25">FileInfo</name></type> <name pos:line="78" pos:column="34">configFileInfo</name> =<init pos:line="78" pos:column="50"> <expr><op:operator pos:line="78" pos:column="51">new</op:operator> <call><name pos:line="78" pos:column="55">FileInfo</name><argument_list pos:line="78" pos:column="63">(<argument><expr><name pos:line="78" pos:column="64">extensionPointsConfigurationFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="79" pos:column="25">currentIndexState</name><op:operator pos:line="79" pos:column="42">.</op:operator><name pos:line="79" pos:column="43">RelevantFilesInfo</name><op:operator pos:line="79" pos:column="60">.</op:operator><name pos:line="79" pos:column="61">Add</name></name><argument_list pos:line="79" pos:column="64">(<argument><expr><op:operator pos:line="79" pos:column="65">new</op:operator> <call><name pos:line="79" pos:column="69">RelevantFileInfo</name><argument_list pos:line="79" pos:column="85">()</argument_list></call> <block pos:line="79" pos:column="88">{ <expr><name pos:line="79" pos:column="90">FullName</name> <op:operator pos:line="79" pos:column="99">=</op:operator> <name><name pos:line="79" pos:column="101">configFileInfo</name><op:operator pos:line="79" pos:column="115">.</op:operator><name pos:line="79" pos:column="116">FullName</name></name></expr><op:operator pos:line="79" pos:column="124">,</op:operator> <expr><name pos:line="79" pos:column="126">LastWriteTime</name> <op:operator pos:line="79" pos:column="140">=</op:operator> <name><name pos:line="79" pos:column="142">configFileInfo</name><op:operator pos:line="79" pos:column="156">.</op:operator><name pos:line="79" pos:column="157">LastWriteTime</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="80" pos:column="25">return <expr><name pos:line="80" pos:column="32">currentIndexState</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="83" pos:column="17">private</specifier> <specifier pos:line="83" pos:column="25">static</specifier> <name pos:line="83" pos:column="32">void</name></type> <name pos:line="83" pos:column="37">findAndAddRelevantFilesToIndexState</name><parameter_list pos:line="83" pos:column="72">(<param><decl><type><name pos:line="83" pos:column="73">string</name></type> <name pos:line="83" pos:column="80">directoryPath</name></decl></param><op:operator pos:line="83" pos:column="93">,</op:operator> <param><decl><type><name pos:line="83" pos:column="95">IndexState</name></type> <name pos:line="83" pos:column="106">currentIndexState</name></decl></param>)</parameter_list>
		<block pos:line="84" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">DirectoryInfo</name></type> <name pos:line="85" pos:column="39">directoryInfo</name> =<init pos:line="85" pos:column="54"> <expr><op:operator pos:line="85" pos:column="55">new</op:operator> <call><name pos:line="85" pos:column="59">DirectoryInfo</name><argument_list pos:line="85" pos:column="72">(<argument><expr><name pos:line="85" pos:column="73">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="86" pos:column="25">IEnumerable</name><argument_list pos:line="86" pos:column="36">&lt;<argument><name pos:line="86" pos:column="37">RelevantFileInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="55">relevantFilesInfo</name> =<init pos:line="86" pos:column="74"> <expr><linq><from pos:line="86" pos:column="75">from <expr><name pos:line="86" pos:column="80">fileInfo</name></expr> <in pos:line="86" pos:column="89">in <expr><call><name><name pos:line="86" pos:column="92">directoryInfo</name><op:operator pos:line="86" pos:column="105">.</op:operator><name pos:line="86" pos:column="106">EnumerateFiles</name></name><argument_list pos:line="86" pos:column="120">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="121">"*.dll"</lit:literal></expr></argument><op:operator pos:line="86" pos:column="128">,</op:operator> <argument><expr><name><name pos:line="86" pos:column="130">SearchOption</name><op:operator pos:line="86" pos:column="142">.</op:operator><name pos:line="86" pos:column="143">AllDirectories</name></name></expr></argument>)</argument_list></call></expr></in></from>
															  <select pos:line="87" pos:column="123">select <expr><op:operator pos:line="87" pos:column="130">new</op:operator> <name pos:line="87" pos:column="134">RelevantFileInfo</name>
															  <block pos:line="88" pos:column="123">{
																  <expr><name pos:line="89" pos:column="131">FullName</name> <op:operator pos:line="89" pos:column="140">=</op:operator> <name><name pos:line="89" pos:column="142">fileInfo</name><op:operator pos:line="89" pos:column="150">.</op:operator><name pos:line="89" pos:column="151">FullName</name></name></expr><op:operator pos:line="89" pos:column="159">,</op:operator>
																  <expr><name pos:line="90" pos:column="131">LastWriteTime</name> <op:operator pos:line="90" pos:column="145">=</op:operator> <name><name pos:line="90" pos:column="147">fileInfo</name><op:operator pos:line="90" pos:column="155">.</op:operator><name pos:line="90" pos:column="156">LastWriteTime</name></name></expr>
															  }</block></expr></select></linq></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="92" pos:column="25">currentIndexState</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">RelevantFilesInfo</name><op:operator pos:line="92" pos:column="60">.</op:operator><name pos:line="92" pos:column="61">AddRange</name></name><argument_list pos:line="92" pos:column="69">(<argument><expr><name pos:line="92" pos:column="70">relevantFilesInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="95" pos:column="17">private</specifier> <specifier pos:line="95" pos:column="25">static</specifier> <name pos:line="95" pos:column="32">void</name></type> <name pos:line="95" pos:column="37">saveIndexState</name><parameter_list pos:line="95" pos:column="51">(<param><decl><type><name pos:line="95" pos:column="52">IndexState</name></type> <name pos:line="95" pos:column="63">currentIndexState</name></decl></param><op:operator pos:line="95" pos:column="80">,</op:operator> <param><decl><type><name pos:line="95" pos:column="82">string</name></type> <name pos:line="95" pos:column="89">indexStatePath</name></decl></param>)</parameter_list>
		<block pos:line="96" pos:column="17">{
			<if pos:line="97" pos:column="25">if<condition pos:line="97" pos:column="27">(<expr><name pos:line="97" pos:column="28">currentIndexState</name> <op:operator pos:line="97" pos:column="46">==</op:operator> <name pos:line="97" pos:column="49">null</name></expr>)</condition><then pos:line="97" pos:column="54">
				<return pos:line="98" pos:column="33">return;</return></then></if>

			<decl_stmt><decl><type><name pos:line="100" pos:column="25">XmlSerializer</name></type> <name pos:line="100" pos:column="39">xmlSerializer</name> =<init pos:line="100" pos:column="54"> <expr><name pos:line="100" pos:column="55">null</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="101" pos:column="25">TextWriter</name></type> <name pos:line="101" pos:column="36">textWriter</name> =<init pos:line="101" pos:column="48"> <expr><name pos:line="101" pos:column="49">null</name></expr></init></decl>;</decl_stmt>
			<try pos:line="102" pos:column="25">try
			<block pos:line="103" pos:column="25">{
				<expr_stmt><expr><name pos:line="104" pos:column="33">xmlSerializer</name> <op:operator pos:line="104" pos:column="47">=</op:operator> <op:operator pos:line="104" pos:column="49">new</op:operator> <call><name pos:line="104" pos:column="53">XmlSerializer</name><argument_list pos:line="104" pos:column="66">(<argument><expr><call><name pos:line="104" pos:column="67">typeof</name><argument_list pos:line="104" pos:column="73">(<argument><expr><name pos:line="104" pos:column="74">IndexState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="105" pos:column="33">textWriter</name> <op:operator pos:line="105" pos:column="44">=</op:operator> <op:operator pos:line="105" pos:column="46">new</op:operator> <call><name pos:line="105" pos:column="50">StreamWriter</name><argument_list pos:line="105" pos:column="62">(<argument><expr><name pos:line="105" pos:column="63">indexStatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">xmlSerializer</name><op:operator pos:line="106" pos:column="46">.</op:operator><name pos:line="106" pos:column="47">Serialize</name></name><argument_list pos:line="106" pos:column="56">(<argument><expr><name pos:line="106" pos:column="57">textWriter</name></expr></argument><op:operator pos:line="106" pos:column="67">,</op:operator> <argument><expr><name pos:line="106" pos:column="69">currentIndexState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<finally pos:line="108" pos:column="25">finally
			<block pos:line="109" pos:column="25">{
				<if pos:line="110" pos:column="33">if<condition pos:line="110" pos:column="35">(<expr><name pos:line="110" pos:column="36">textWriter</name> <op:operator pos:line="110" pos:column="47">!=</op:operator> <name pos:line="110" pos:column="50">null</name></expr>)</condition><then pos:line="110" pos:column="55">
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">textWriter</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">Close</name></name><argument_list pos:line="111" pos:column="57">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></finally></try>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="115" pos:column="17">private</specifier> <specifier pos:line="115" pos:column="25">static</specifier> <name pos:line="115" pos:column="32">string</name></type> <name pos:line="115" pos:column="39">IndexDirectoryPath</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="116" pos:column="17">private</specifier> <specifier pos:line="116" pos:column="25">static</specifier> <name pos:line="116" pos:column="32">string</name></type> <name pos:line="116" pos:column="39">IndexStatePath</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="117" pos:column="17">private</specifier> <specifier pos:line="117" pos:column="25">static</specifier> <name pos:line="117" pos:column="32">string</name></type> <name pos:line="117" pos:column="39">IndexStateFileName</name> =<init pos:line="117" pos:column="59"> <expr><lit:literal type="string" pos:line="117" pos:column="60">"sandoindexstate.xml"</lit:literal></expr></init></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
