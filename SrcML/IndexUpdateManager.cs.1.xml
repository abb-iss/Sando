<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UI\UI\Monitoring\IndexUpdateManager.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Xml</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Core</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Extensions</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Extensions</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">Logging</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Indexer</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Indexer</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Documents</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Indexer</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">IndexState</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Diagnostics</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Sando</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">UI</name><op:operator pos:line="13" pos:column="19">.</op:operator><name pos:line="13" pos:column="20">Monitoring</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">IndexUpdateManager</name>
	<block pos:line="16" pos:column="9">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <specifier pos:line="17" pos:column="17">readonly</specifier> <name pos:line="17" pos:column="26">DocumentIndexer</name></type> <name pos:line="17" pos:column="42">_currentIndexer</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">IndexUpdateManager</name><parameter_list pos:line="19" pos:column="34">()</parameter_list>
        <block pos:line="20" pos:column="9">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">_currentIndexer</name> <op:operator pos:line="21" pos:column="29">=</op:operator> <call><name><name pos:line="21" pos:column="31">ServiceLocator</name><op:operator pos:line="21" pos:column="45">.</op:operator><name><name pos:line="21" pos:column="46">Resolve</name><argument_list pos:line="21" pos:column="53">&lt;<argument><name pos:line="21" pos:column="54">DocumentIndexer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="21" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">Update</name><parameter_list pos:line="24" pos:column="27">(<param><decl><type><name pos:line="24" pos:column="28">string</name></type> <name pos:line="24" pos:column="35">filePath</name></decl></param><op:operator pos:line="24" pos:column="43">,</op:operator> <param><decl><type><name pos:line="24" pos:column="45">XElement</name></type> <name pos:line="24" pos:column="54">xElement</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">fileInfo</name> =<init pos:line="26" pos:column="27"> <expr><op:operator pos:line="26" pos:column="28">new</op:operator> <call><name pos:line="26" pos:column="32">FileInfo</name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">FileLogger</name><op:operator pos:line="27" pos:column="23">.</op:operator><name pos:line="27" pos:column="24">DefaultLogger</name><op:operator pos:line="27" pos:column="37">.</op:operator><name pos:line="27" pos:column="38">Info</name></name><argument_list pos:line="27" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="43">"IndexUpdateManager.Update(): "</lit:literal> <op:operator pos:line="27" pos:column="75">+</op:operator> <name pos:line="27" pos:column="77">filePath</name> <op:operator pos:line="27" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="27" pos:column="88">" ["</lit:literal> <op:operator pos:line="27" pos:column="93">+</op:operator> <name><name pos:line="27" pos:column="95">fileInfo</name><op:operator pos:line="27" pos:column="103">.</op:operator><name pos:line="27" pos:column="104">Extension</name></name> <op:operator pos:line="27" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="27" pos:column="116">"]"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="28" pos:column="13">try
            <block pos:line="29" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">var</name></type> <name pos:line="30" pos:column="21">parsed</name> =<init pos:line="30" pos:column="29"> <expr><call><name><name pos:line="30" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="30" pos:column="55">.</op:operator><name pos:line="30" pos:column="56">Instance</name><op:operator pos:line="30" pos:column="64">.</op:operator><name pos:line="30" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="30" pos:column="88">(<argument><expr><name><name pos:line="30" pos:column="89">fileInfo</name><op:operator pos:line="30" pos:column="97">.</op:operator><name pos:line="30" pos:column="98">Extension</name></name></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="108">.</op:operator><call><name pos:line="30" pos:column="109">Parse</name><argument_list pos:line="30" pos:column="114">(<argument><expr><name pos:line="30" pos:column="115">filePath</name></expr></argument><op:operator pos:line="30" pos:column="123">,</op:operator> <argument><expr><name pos:line="30" pos:column="125">xElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="32" pos:column="17">var</name></type> <name pos:line="32" pos:column="21">unresolvedElements</name> =<init pos:line="32" pos:column="41"> <expr><call><name><name pos:line="32" pos:column="42">parsed</name><op:operator pos:line="32" pos:column="48">.</op:operator><name pos:line="32" pos:column="49">FindAll</name></name><argument_list pos:line="32" pos:column="56">(<argument><expr><name pos:line="32" pos:column="57">pe</name> <op:operator pos:line="32" pos:column="60">=&gt;</op:operator> <name pos:line="32" pos:column="63">pe</name> <op:operator pos:line="32" pos:column="66">is</op:operator> <name pos:line="32" pos:column="69">CppUnresolvedMethodElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">unresolvedElements</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">Count</name></name> <op:operator pos:line="33" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="33" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="33" pos:column="50">
                <block pos:line="34" pos:column="17">{
                    <comment type="line" pos:line="35" pos:column="21">//first generate program elements for all the included headers</comment>
                    <decl_stmt><decl><type><name pos:line="36" pos:column="21">var</name></type> <name pos:line="36" pos:column="25">headerElements</name> =<init pos:line="36" pos:column="41"> <expr><call><name><name pos:line="36" pos:column="42">CppHeaderElementResolver</name><op:operator pos:line="36" pos:column="66">.</op:operator><name pos:line="36" pos:column="67">GenerateCppHeaderElements</name></name><argument_list pos:line="36" pos:column="92">(<argument><expr><name pos:line="36" pos:column="93">filePath</name></expr></argument><op:operator pos:line="36" pos:column="101">,</op:operator> <argument><expr><name pos:line="36" pos:column="103">unresolvedElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line" pos:line="38" pos:column="21">//then try to resolve</comment>
                    <foreach pos:line="39" pos:column="21">foreach (<init><decl><type><name pos:line="39" pos:column="30">CppUnresolvedMethodElement</name></type> <name pos:line="39" pos:column="57">unresolvedElement</name> <init pos:line="39" pos:column="75">in <expr><name pos:line="39" pos:column="78">unresolvedElements</name></expr></init></decl></init>)
                    <block pos:line="40" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="41" pos:column="25">var</name></type> <name pos:line="41" pos:column="29">document</name> =<init pos:line="41" pos:column="39"> <expr><call><name><name pos:line="41" pos:column="40">CppHeaderElementResolver</name><op:operator pos:line="41" pos:column="64">.</op:operator><name pos:line="41" pos:column="65">GetDocumentForUnresolvedCppMethod</name></name><argument_list pos:line="41" pos:column="98">(<argument><expr><name pos:line="41" pos:column="99">unresolvedElement</name></expr></argument><op:operator pos:line="41" pos:column="116">,</op:operator> <argument><expr><name pos:line="41" pos:column="118">headerElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name pos:line="42" pos:column="29">document</name> <op:operator pos:line="42" pos:column="38">!=</op:operator> <name pos:line="42" pos:column="41">null</name></expr>)</condition><then pos:line="42" pos:column="46">
                        <block pos:line="43" pos:column="25">{
                            <comment type="line" pos:line="44" pos:column="29">//writeLog( "- DI.AddDocument()");</comment>
                            <expr_stmt><expr><call><name><name pos:line="45" pos:column="29">_currentIndexer</name><op:operator pos:line="45" pos:column="44">.</op:operator><name pos:line="45" pos:column="45">AddDocument</name></name><argument_list pos:line="45" pos:column="56">(<argument><expr><name pos:line="45" pos:column="57">document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></foreach>
                }</block></then></if>

                <foreach pos:line="50" pos:column="17">foreach (<init><decl><type><name pos:line="50" pos:column="26">var</name></type> <name pos:line="50" pos:column="30">programElement</name> <init pos:line="50" pos:column="45">in <expr><name pos:line="50" pos:column="48">parsed</name></expr></init></decl></init>)
                <block pos:line="51" pos:column="17">{
                    <if pos:line="52" pos:column="21">if <condition pos:line="52" pos:column="24">(<expr><op:operator pos:line="52" pos:column="25">!</op:operator><op:operator pos:line="52" pos:column="26">(</op:operator><name pos:line="52" pos:column="27">programElement</name> <op:operator pos:line="52" pos:column="42">is</op:operator> <name pos:line="52" pos:column="45">CppUnresolvedMethodElement</name><op:operator pos:line="52" pos:column="71">)</op:operator></expr>)</condition><then pos:line="52" pos:column="73">
                    <block pos:line="53" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="54" pos:column="25">var</name></type> <name pos:line="54" pos:column="29">document</name> =<init pos:line="54" pos:column="39"> <expr><call><name><name pos:line="54" pos:column="40">DocumentFactory</name><op:operator pos:line="54" pos:column="55">.</op:operator><name pos:line="54" pos:column="56">Create</name></name><argument_list pos:line="54" pos:column="62">(<argument><expr><name pos:line="54" pos:column="63">programElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name pos:line="55" pos:column="29">document</name> <op:operator pos:line="55" pos:column="38">!=</op:operator> <name pos:line="55" pos:column="41">null</name></expr>)</condition><then pos:line="55" pos:column="46">
                        <block pos:line="56" pos:column="25">{
                            <comment type="line" pos:line="57" pos:column="29">//writeLog( "- DI.AddDocument()");</comment>
                            <expr_stmt><expr><call><name><name pos:line="58" pos:column="29">_currentIndexer</name><op:operator pos:line="58" pos:column="44">.</op:operator><name pos:line="58" pos:column="45">AddDocument</name></name><argument_list pos:line="58" pos:column="56">(<argument><expr><name pos:line="58" pos:column="57">document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></foreach>
            }</block>
            <catch pos:line="63" pos:column="13">catch (<param><decl><type><name pos:line="63" pos:column="20">Exception</name></type> <name pos:line="63" pos:column="30">e</name></decl></param>)
            <block pos:line="64" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">FileLogger</name><op:operator pos:line="65" pos:column="27">.</op:operator><name pos:line="65" pos:column="28">DefaultLogger</name><op:operator pos:line="65" pos:column="41">.</op:operator><name pos:line="65" pos:column="42">Info</name></name><argument_list pos:line="65" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="47">"Exception in IndexUpdateManager.Update() "</lit:literal> <op:operator pos:line="65" pos:column="91">+</op:operator> <name><name pos:line="65" pos:column="93">e</name><op:operator pos:line="65" pos:column="94">.</op:operator><name pos:line="65" pos:column="95">Message</name></name> <op:operator pos:line="65" pos:column="103">+</op:operator> <lit:literal type="string" pos:line="65" pos:column="105">"\n"</lit:literal> <op:operator pos:line="65" pos:column="110">+</op:operator> <name><name pos:line="65" pos:column="112">e</name><op:operator pos:line="65" pos:column="113">.</op:operator><name pos:line="65" pos:column="114">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>
	}</block></class>
}</block></namespace>
</unit>
