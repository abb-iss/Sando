<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\InheritanceParserTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">NUnit</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">UnitTestHelpers</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Parser</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">UnitTests</name></name>
<block pos:line="8" pos:column="1">{
	<class><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="10" pos:column="9">public</specifier> class <name pos:line="10" pos:column="22">InheritanceParserTest</name>
	<block pos:line="11" pos:column="9">{
	    <decl_stmt><decl><type><specifier pos:line="12" pos:column="13">private</specifier> <name><name pos:line="12" pos:column="21">ABB</name><op:operator pos:line="12" pos:column="24">.</op:operator><name pos:line="12" pos:column="25">SrcML</name><op:operator pos:line="12" pos:column="30">.</op:operator><name pos:line="12" pos:column="31">SrcMLGenerator</name></name></type> <name pos:line="12" pos:column="46">generator</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">FixtureSetUp</name><parameter_list pos:line="15" pos:column="33">()</parameter_list> <block pos:line="15" pos:column="36">{
            <comment type="line" pos:line="16" pos:column="13">//TestUtils.InitializeDefaultExtensionPoints();</comment>
            <expr_stmt><expr><name pos:line="17" pos:column="13">generator</name> <op:operator pos:line="17" pos:column="23">=</op:operator> <op:operator pos:line="17" pos:column="25">new</op:operator> <call><name><name pos:line="17" pos:column="29">ABB</name><op:operator pos:line="17" pos:column="32">.</op:operator><name pos:line="17" pos:column="33">SrcML</name><op:operator pos:line="17" pos:column="38">.</op:operator><name pos:line="17" pos:column="39">SrcMLGenerator</name></name><argument_list pos:line="17" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="54">@"LIBS\SrcML"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="20" pos:column="17">[<expr><name pos:line="20" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="21" pos:column="17">public</specifier> <name pos:line="21" pos:column="24">void</name></type> <name pos:line="21" pos:column="29">ParseProperties</name><parameter_list pos:line="21" pos:column="44">()</parameter_list>
		<block pos:line="22" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">parser</name> =<init pos:line="23" pos:column="25"> <expr><op:operator pos:line="23" pos:column="26">new</op:operator> <call><name pos:line="23" pos:column="30">SrcMLCSharpParser</name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">var</name></type> <name pos:line="24" pos:column="29">elements</name> =<init pos:line="24" pos:column="39"> <expr><call><name><name pos:line="24" pos:column="40">parser</name><op:operator pos:line="24" pos:column="46">.</op:operator><name pos:line="24" pos:column="47">Parse</name></name><argument_list pos:line="24" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="53">"TestFiles\\ShortInheritance.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">bool</name></type> <name pos:line="25" pos:column="30">seenClass</name> =<init pos:line="25" pos:column="41"> <expr><lit:literal type="boolean" pos:line="25" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">int</name></type> <name pos:line="26" pos:column="29">countProperties</name> =<init pos:line="26" pos:column="46"> <expr><lit:literal type="number" pos:line="26" pos:column="47">0</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="27" pos:column="25">foreach (<init><decl><type><name pos:line="27" pos:column="34">var</name></type> <name pos:line="27" pos:column="38">programElement</name> <init pos:line="27" pos:column="53">in <expr><name pos:line="27" pos:column="56">elements</name></expr></init></decl></init>)
			<block pos:line="28" pos:column="25">{
				<if pos:line="29" pos:column="33">if<condition pos:line="29" pos:column="35">(<expr><name><name pos:line="29" pos:column="36">programElement</name><op:operator pos:line="29" pos:column="50">.</op:operator><name pos:line="29" pos:column="51">ProgramElementType</name></name> <op:operator pos:line="29" pos:column="70">==</op:operator> <name><name pos:line="29" pos:column="73">ProgramElementType</name><op:operator pos:line="29" pos:column="91">.</op:operator><name pos:line="29" pos:column="92">Class</name></name></expr>)</condition><then pos:line="29" pos:column="98">
					<expr_stmt><expr><name pos:line="30" pos:column="41">seenClass</name> <op:operator pos:line="30" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="30" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="31" pos:column="33">if<condition pos:line="31" pos:column="35">(<expr><name><name pos:line="31" pos:column="36">programElement</name><op:operator pos:line="31" pos:column="50">.</op:operator><name pos:line="31" pos:column="51">ProgramElementType</name></name> <op:operator pos:line="31" pos:column="70">==</op:operator> <name><name pos:line="31" pos:column="73">ProgramElementType</name><op:operator pos:line="31" pos:column="91">.</op:operator><name pos:line="31" pos:column="92">Property</name></name></expr>)</condition><then pos:line="31" pos:column="101">
					<expr_stmt><expr><name pos:line="32" pos:column="41">countProperties</name><op:operator pos:line="32" pos:column="56">++</op:operator></expr>;</expr_stmt></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="34" pos:column="25">Assert</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">IsTrue</name></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name pos:line="34" pos:column="39">seenClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="35" pos:column="25">Assert</name><op:operator pos:line="35" pos:column="31">.</op:operator><name pos:line="35" pos:column="32">IsTrue</name></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">countProperties</name><op:operator pos:line="35" pos:column="54">==</op:operator><lit:literal type="number" pos:line="35" pos:column="56">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="38" pos:column="17">[<expr><name pos:line="38" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="39" pos:column="17">public</specifier> <name pos:line="39" pos:column="24">void</name></type> <name pos:line="39" pos:column="29">ParseMultipleParents</name><parameter_list pos:line="39" pos:column="49">()</parameter_list>
		<block pos:line="40" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">parser</name> =<init pos:line="41" pos:column="25"> <expr><op:operator pos:line="41" pos:column="26">new</op:operator> <call><name pos:line="41" pos:column="30">SrcMLCSharpParser</name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="42" pos:column="25">var</name></type> <name pos:line="42" pos:column="29">elements</name> =<init pos:line="42" pos:column="39"> <expr><call><name><name pos:line="42" pos:column="40">parser</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">Parse</name></name><argument_list pos:line="42" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="53">"TestFiles\\MultiParentTest.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">bool</name></type> <name pos:line="43" pos:column="30">seenClass</name> =<init pos:line="43" pos:column="41"> <expr><lit:literal type="boolean" pos:line="43" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="44" pos:column="25">foreach(<init><decl><type><name pos:line="44" pos:column="33">var</name></type> <name pos:line="44" pos:column="37">programElement</name> <init pos:line="44" pos:column="52">in <expr><name pos:line="44" pos:column="55">elements</name></expr></init></decl></init>)
			<block pos:line="45" pos:column="25">{
				<if pos:line="46" pos:column="33">if<condition pos:line="46" pos:column="35">(<expr><name><name pos:line="46" pos:column="36">programElement</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">ProgramElementType</name></name> <op:operator pos:line="46" pos:column="70">==</op:operator> <name><name pos:line="46" pos:column="73">ProgramElementType</name><op:operator pos:line="46" pos:column="91">.</op:operator><name pos:line="46" pos:column="92">Class</name></name></expr>)</condition><then pos:line="46" pos:column="98">
				<block pos:line="47" pos:column="33">{
					<expr_stmt><expr><name pos:line="48" pos:column="41">seenClass</name> <op:operator pos:line="48" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="48" pos:column="53">true</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="49" pos:column="41">var</name></type> <name pos:line="49" pos:column="45">classElement</name> =<init pos:line="49" pos:column="59"> <expr><name pos:line="49" pos:column="60">programElement</name> <op:operator pos:line="49" pos:column="75">as</op:operator> <name pos:line="49" pos:column="78">ClassElement</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="50" pos:column="41">int</name></type> <name pos:line="50" pos:column="45">numParents</name> =<init pos:line="50" pos:column="57"> <expr><lit:literal type="number" pos:line="50" pos:column="58">0</lit:literal></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="51" pos:column="41">//TODO - not sure how we will be able to determine which are interfaces and which are classes</comment>
					<comment type="line" pos:line="52" pos:column="41">//might have to just put all but the first one in interfaces?</comment>
					<if pos:line="53" pos:column="41">if<condition pos:line="53" pos:column="43">(<expr><name><name pos:line="53" pos:column="44">classElement</name><op:operator pos:line="53" pos:column="56">.</op:operator><name pos:line="53" pos:column="57">ImplementedInterfaces</name></name> <op:operator pos:line="53" pos:column="79">!=</op:operator> <name><name pos:line="53" pos:column="82">String</name><op:operator pos:line="53" pos:column="88">.</op:operator><name pos:line="53" pos:column="89">Empty</name></name></expr>)</condition><then pos:line="53" pos:column="95">
					<block pos:line="54" pos:column="41">{
						<expr_stmt><expr><name pos:line="55" pos:column="49">numParents</name> <op:operator pos:line="55" pos:column="60">+=</op:operator> <call><name><name pos:line="55" pos:column="63">classElement</name><op:operator pos:line="55" pos:column="75">.</op:operator><name pos:line="55" pos:column="76">ImplementedInterfaces</name><op:operator pos:line="55" pos:column="97">.</op:operator><name pos:line="55" pos:column="98">Split</name></name><argument_list pos:line="55" pos:column="103">(<argument><expr><lit:literal type="char" pos:line="55" pos:column="104">' '</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="108">.</op:operator><call><name pos:line="55" pos:column="109">Count</name><argument_list pos:line="55" pos:column="114">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if pos:line="57" pos:column="41">if<condition pos:line="57" pos:column="43">(<expr><name><name pos:line="57" pos:column="44">classElement</name><op:operator pos:line="57" pos:column="56">.</op:operator><name pos:line="57" pos:column="57">ExtendedClasses</name></name> <op:operator pos:line="57" pos:column="73">!=</op:operator> <name><name pos:line="57" pos:column="76">String</name><op:operator pos:line="57" pos:column="82">.</op:operator><name pos:line="57" pos:column="83">Empty</name></name></expr>)</condition><then pos:line="57" pos:column="89">
					<block pos:line="58" pos:column="41">{
						<expr_stmt><expr><name pos:line="59" pos:column="49">numParents</name> <op:operator pos:line="59" pos:column="60">+=</op:operator> <call><name><name pos:line="59" pos:column="63">classElement</name><op:operator pos:line="59" pos:column="75">.</op:operator><name pos:line="59" pos:column="76">ExtendedClasses</name><op:operator pos:line="59" pos:column="91">.</op:operator><name pos:line="59" pos:column="92">Split</name></name><argument_list pos:line="59" pos:column="97">(<argument><expr><lit:literal type="char" pos:line="59" pos:column="98">' '</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="102">.</op:operator><call><name pos:line="59" pos:column="103">Count</name><argument_list pos:line="59" pos:column="108">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="61" pos:column="41">Assert</name><op:operator pos:line="61" pos:column="47">.</op:operator><name pos:line="61" pos:column="48">IsTrue</name></name><argument_list pos:line="61" pos:column="54">(<argument><expr><name pos:line="61" pos:column="55">numParents</name><op:operator pos:line="61" pos:column="65">==</op:operator><lit:literal type="number" pos:line="61" pos:column="67">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="64" pos:column="25">Assert</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">IsTrue</name></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">seenClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		}</block></function>

		<function><type><attribute pos:line="67" pos:column="17">[<expr><name pos:line="67" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="68" pos:column="17">public</specifier> <name pos:line="68" pos:column="24">void</name></type> <name pos:line="68" pos:column="29">ClassInheritanceTest</name><parameter_list pos:line="68" pos:column="49">()</parameter_list>
		<block pos:line="69" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">bool</name></type> <name pos:line="70" pos:column="30">seenClass</name> =<init pos:line="70" pos:column="41"> <expr><lit:literal type="boolean" pos:line="70" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">parser</name> =<init pos:line="71" pos:column="25"> <expr><op:operator pos:line="71" pos:column="26">new</op:operator> <call><name pos:line="71" pos:column="30">SrcMLCSharpParser</name><argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">var</name></type> <name pos:line="72" pos:column="29">elements</name> =<init pos:line="72" pos:column="39"> <expr><call><name><name pos:line="72" pos:column="40">parser</name><op:operator pos:line="72" pos:column="46">.</op:operator><name pos:line="72" pos:column="47">Parse</name></name><argument_list pos:line="72" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="53">"TestFiles\\InheritanceCSharpFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">Assert</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">IsNotNull</name></name><argument_list pos:line="73" pos:column="41">(<argument><expr><name pos:line="73" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="74" pos:column="25">Assert</name><op:operator pos:line="74" pos:column="31">.</op:operator><name pos:line="74" pos:column="32">IsTrue</name></name><argument_list pos:line="74" pos:column="38">(<argument><expr><name><name pos:line="74" pos:column="39">elements</name><op:operator pos:line="74" pos:column="47">.</op:operator><name pos:line="74" pos:column="48">Count</name></name> <op:operator pos:line="74" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="74" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="75" pos:column="25">foreach(<init><decl><type><name pos:line="75" pos:column="33">ProgramElement</name></type> <name pos:line="75" pos:column="48">pe</name> <init pos:line="75" pos:column="51">in <expr><name pos:line="75" pos:column="54">elements</name></expr></init></decl></init>)
			<block pos:line="76" pos:column="25">{
				<if pos:line="77" pos:column="33">if<condition pos:line="77" pos:column="35">(<expr><name pos:line="77" pos:column="36">pe</name> <op:operator pos:line="77" pos:column="39">is</op:operator> <name pos:line="77" pos:column="42">ClassElement</name></expr>)</condition><then pos:line="77" pos:column="55">
				<block pos:line="78" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="79" pos:column="41">ClassElement</name></type> <name pos:line="79" pos:column="54">classElem</name> =<init pos:line="79" pos:column="65"> <expr><op:operator pos:line="79" pos:column="66">(</op:operator><name pos:line="79" pos:column="67">ClassElement</name><op:operator pos:line="79" pos:column="79">)</op:operator><name pos:line="79" pos:column="80">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="80" pos:column="41">if<condition pos:line="80" pos:column="43">(<expr><name><name pos:line="80" pos:column="44">classElem</name><op:operator pos:line="80" pos:column="53">.</op:operator><name pos:line="80" pos:column="54">Name</name></name> <op:operator pos:line="80" pos:column="59">==</op:operator> <lit:literal type="string" pos:line="80" pos:column="62">"IndexerException"</lit:literal></expr>)</condition><then pos:line="80" pos:column="81">
					<block pos:line="81" pos:column="41">{
						<expr_stmt><expr><name pos:line="82" pos:column="49">seenClass</name> <op:operator pos:line="82" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="61">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="83" pos:column="49">Assert</name><op:operator pos:line="83" pos:column="55">.</op:operator><name pos:line="83" pos:column="56">AreEqual</name></name><argument_list pos:line="83" pos:column="64">(<argument><expr><name><name pos:line="83" pos:column="65">classElem</name><op:operator pos:line="83" pos:column="74">.</op:operator><name pos:line="83" pos:column="75">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="83" pos:column="95">,</op:operator> <argument><expr><lit:literal type="number" pos:line="83" pos:column="97">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="84" pos:column="49">Assert</name><op:operator pos:line="84" pos:column="55">.</op:operator><name pos:line="84" pos:column="56">AreEqual</name></name><argument_list pos:line="84" pos:column="64">(<argument><expr><name><name pos:line="84" pos:column="65">classElem</name><op:operator pos:line="84" pos:column="74">.</op:operator><name pos:line="84" pos:column="75">AccessLevel</name></name></expr></argument><op:operator pos:line="84" pos:column="86">,</op:operator> <argument><expr><name><name pos:line="84" pos:column="88">AccessLevel</name><op:operator pos:line="84" pos:column="99">.</op:operator><name pos:line="84" pos:column="100">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="85" pos:column="49">Assert</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">AreEqual</name></name><argument_list pos:line="85" pos:column="64">(<argument><expr><name><name pos:line="85" pos:column="65">classElem</name><op:operator pos:line="85" pos:column="74">.</op:operator><name pos:line="85" pos:column="75">Namespace</name></name></expr></argument><op:operator pos:line="85" pos:column="84">,</op:operator> <argument><expr><lit:literal type="string" pos:line="85" pos:column="86">"Sando.Indexer.Exceptions"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line" pos:line="86" pos:column="49">//TODO - make this not dependent upon your path...</comment>
						<comment type="line" pos:line="87" pos:column="49">//Assert.AreEqual(classElem.FullFilePath, "C:\\Users\\kosta\\sando\\Parser\\Parser.UnitTests\\TestFiles\\InheritanceCSharpFile.txt");</comment>
						<expr_stmt><expr><call><name><name pos:line="88" pos:column="49">Assert</name><op:operator pos:line="88" pos:column="55">.</op:operator><name pos:line="88" pos:column="56">AreEqual</name></name><argument_list pos:line="88" pos:column="64">(<argument><expr><name><name pos:line="88" pos:column="65">classElem</name><op:operator pos:line="88" pos:column="74">.</op:operator><name pos:line="88" pos:column="75">ExtendedClasses</name></name></expr></argument><op:operator pos:line="88" pos:column="90">,</op:operator> <argument><expr><lit:literal type="string" pos:line="88" pos:column="92">"SandoException"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="92" pos:column="25">Assert</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">IsTrue</name></name><argument_list pos:line="92" pos:column="38">(<argument><expr><name pos:line="92" pos:column="39">seenClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>
}</block></namespace>
</unit>
