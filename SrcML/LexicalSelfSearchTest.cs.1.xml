<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\Search\LexicalSelfSearchTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Searching</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Criteria</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">UI</name><op:operator pos:line="15" pos:column="15">.</op:operator><name pos:line="15" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="16" pos:column="1">using <name pos:line="16" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Recommender</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">Sando</name><op:operator pos:line="19" pos:column="16">.</op:operator><name pos:line="19" pos:column="17">IntegrationTests</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">Search</name></name>
<block pos:line="20" pos:column="1">{
	<class><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="22" pos:column="9">public</specifier> class <name pos:line="22" pos:column="22">LexicalSelfSearchTest</name> <super pos:line="22" pos:column="44">:<name pos:line="22" pos:column="45">AutomaticallyIndexingTestClass</name></super>
	<block pos:line="23" pos:column="9">{
		<function><type><attribute pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">void</name></type> <name pos:line="25" pos:column="29">ExactLexMatchSearch1</name><parameter_list pos:line="25" pos:column="49">()</parameter_list>
		<block pos:line="26" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">string</name></type> <name pos:line="27" pos:column="20">keywords</name> =<init pos:line="27" pos:column="30"> <expr><lit:literal type="string" pos:line="27" pos:column="31">"LexicalSelfSearchTest"</lit:literal></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name pos:line="28" pos:column="21">var</name></type> <name pos:line="28" pos:column="25">expectedLowestRank</name> =<init pos:line="28" pos:column="45"> <expr><lit:literal type="number" pos:line="28" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="29" pos:column="25">Predicate</name><argument_list pos:line="29" pos:column="34">&lt;<argument><name pos:line="29" pos:column="35">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="53">predicate</name> =<init pos:line="29" pos:column="64"> <expr><name pos:line="29" pos:column="65">el</name> <op:operator pos:line="29" pos:column="68">=&gt;</op:operator> <name><name pos:line="29" pos:column="71">el</name><op:operator pos:line="29" pos:column="73">.</op:operator><name pos:line="29" pos:column="74">ProgramElement</name><op:operator pos:line="29" pos:column="88">.</op:operator><name pos:line="29" pos:column="89">ProgramElementType</name></name> <op:operator pos:line="29" pos:column="108">==</op:operator> <name><name pos:line="29" pos:column="111">ProgramElementType</name><op:operator pos:line="29" pos:column="129">.</op:operator><name pos:line="29" pos:column="130">Class</name></name> <op:operator pos:line="29" pos:column="136">&amp;&amp;</op:operator> <op:operator pos:line="29" pos:column="139">(</op:operator><name><name pos:line="29" pos:column="140">el</name><op:operator pos:line="29" pos:column="142">.</op:operator><name pos:line="29" pos:column="143">ProgramElement</name><op:operator pos:line="29" pos:column="157">.</op:operator><name pos:line="29" pos:column="158">Name</name></name> <op:operator pos:line="29" pos:column="163">==</op:operator> <lit:literal type="string" pos:line="29" pos:column="166">"LexicalSelfSearchTest"</lit:literal><op:operator pos:line="29" pos:column="189">)</op:operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">EnsureRankingPrettyGood</name><argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">keywords</name></expr></argument><op:operator pos:line="30" pos:column="57">,</op:operator> <argument><expr><name pos:line="30" pos:column="59">predicate</name></expr></argument><op:operator pos:line="30" pos:column="68">,</op:operator> <argument><expr><name pos:line="30" pos:column="70">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ExactLexMatchSearch2</name><parameter_list pos:line="34" pos:column="41">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">string</name></type> <name pos:line="36" pos:column="20">keywords</name> =<init pos:line="36" pos:column="30"> <expr><lit:literal type="string" pos:line="36" pos:column="31">"lexicalselfsearchtest"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">expectedLowestRank</name> =<init pos:line="37" pos:column="37"> <expr><lit:literal type="number" pos:line="37" pos:column="38">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="38" pos:column="13">Predicate</name><argument_list pos:line="38" pos:column="22">&lt;<argument><name pos:line="38" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="41">predicate</name> =<init pos:line="38" pos:column="52"> <expr><name pos:line="38" pos:column="53">el</name> <op:operator pos:line="38" pos:column="56">=&gt;</op:operator> <name><name pos:line="38" pos:column="59">el</name><op:operator pos:line="38" pos:column="61">.</op:operator><name pos:line="38" pos:column="62">ProgramElement</name><op:operator pos:line="38" pos:column="76">.</op:operator><name pos:line="38" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="38" pos:column="96">==</op:operator> <name><name pos:line="38" pos:column="99">ProgramElementType</name><op:operator pos:line="38" pos:column="117">.</op:operator><name pos:line="38" pos:column="118">Class</name></name> <op:operator pos:line="38" pos:column="124">&amp;&amp;</op:operator> <op:operator pos:line="38" pos:column="127">(</op:operator><name><name pos:line="38" pos:column="128">el</name><op:operator pos:line="38" pos:column="130">.</op:operator><name pos:line="38" pos:column="131">ProgramElement</name><op:operator pos:line="38" pos:column="145">.</op:operator><name pos:line="38" pos:column="146">Name</name></name> <op:operator pos:line="38" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="38" pos:column="154">"LexicalSelfSearchTest"</lit:literal><op:operator pos:line="38" pos:column="177">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">keywords</name></expr></argument><op:operator pos:line="39" pos:column="45">,</op:operator> <argument><expr><name pos:line="39" pos:column="47">predicate</name></expr></argument><op:operator pos:line="39" pos:column="56">,</op:operator> <argument><expr><name pos:line="39" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">ExactLexMatchSearch3</name><parameter_list pos:line="43" pos:column="41">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">string</name></type> <name pos:line="45" pos:column="20">keywords</name> =<init pos:line="45" pos:column="30"> <expr><lit:literal type="string" pos:line="45" pos:column="31">"LexicalSelf"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">expectedLowestRank</name> =<init pos:line="46" pos:column="37"> <expr><lit:literal type="number" pos:line="46" pos:column="38">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="47" pos:column="13">Predicate</name><argument_list pos:line="47" pos:column="22">&lt;<argument><name pos:line="47" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="41">predicate</name> =<init pos:line="47" pos:column="52"> <expr><name pos:line="47" pos:column="53">el</name> <op:operator pos:line="47" pos:column="56">=&gt;</op:operator> <name><name pos:line="47" pos:column="59">el</name><op:operator pos:line="47" pos:column="61">.</op:operator><name pos:line="47" pos:column="62">ProgramElement</name><op:operator pos:line="47" pos:column="76">.</op:operator><name pos:line="47" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="47" pos:column="96">==</op:operator> <name><name pos:line="47" pos:column="99">ProgramElementType</name><op:operator pos:line="47" pos:column="117">.</op:operator><name pos:line="47" pos:column="118">Class</name></name> <op:operator pos:line="47" pos:column="124">&amp;&amp;</op:operator> <op:operator pos:line="47" pos:column="127">(</op:operator><name><name pos:line="47" pos:column="128">el</name><op:operator pos:line="47" pos:column="130">.</op:operator><name pos:line="47" pos:column="131">ProgramElement</name><op:operator pos:line="47" pos:column="145">.</op:operator><name pos:line="47" pos:column="146">Name</name></name> <op:operator pos:line="47" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="47" pos:column="154">"LexicalSelfSearchTest"</lit:literal><op:operator pos:line="47" pos:column="177">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">keywords</name></expr></argument><op:operator pos:line="48" pos:column="45">,</op:operator> <argument><expr><name pos:line="48" pos:column="47">predicate</name></expr></argument><op:operator pos:line="48" pos:column="56">,</op:operator> <argument><expr><name pos:line="48" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<comment type="block" pos:line="51" pos:column="17">/*
        private void EyeIsBullsThis() { 
		  //bulls eye bulls eye bulls eye is here
		}
        private void ThisIsBullsEye() { }
        private void ThisIsBulls() { }
      
        [Test]
        public void PreferenceForWordOrderTest()
        {
            string keywords = "ThisIsBullsEye";
            var expectedLowestRank = 1;
            Predicate&lt;CodeSearchResult&gt; predicate = el =&gt; el.Element.ProgramElementType == ProgramElementType.Method &amp;&amp; (el.Element.Name == "ThisIsBullsEye");
            List&lt;CodeSearchResult&gt; results = EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);
        }
		*/</comment>

        <function><type><specifier pos:line="68" pos:column="9">private</specifier> <name pos:line="68" pos:column="17">void</name></type> <name pos:line="68" pos:column="22">PumpkinSpiceLatte</name><parameter_list pos:line="68" pos:column="39">()</parameter_list> <block pos:line="68" pos:column="42">{ }</block></function>
        <function><type><specifier pos:line="69" pos:column="9">private</specifier> <name pos:line="69" pos:column="17">void</name></type> <name pos:line="69" pos:column="22">Pumpkin</name><parameter_list pos:line="69" pos:column="29">()</parameter_list> <block pos:line="69" pos:column="32">{ }</block></function>
        <function><type><specifier pos:line="70" pos:column="9">private</specifier> <name pos:line="70" pos:column="17">void</name></type> <name pos:line="70" pos:column="22">LattePumpkinSpice</name><parameter_list pos:line="70" pos:column="39">()</parameter_list> <block pos:line="70" pos:column="42">{ }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">PreferenceForShortestMatch</name><parameter_list pos:line="73" pos:column="47">()</parameter_list>
        <block pos:line="74" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">string</name></type> <name pos:line="75" pos:column="20">keywords</name> =<init pos:line="75" pos:column="30"> <expr><lit:literal type="string" pos:line="75" pos:column="31">"Pumpkin"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">expectedLowestRank</name> =<init pos:line="76" pos:column="37"> <expr><lit:literal type="number" pos:line="76" pos:column="38">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="77" pos:column="13">Predicate</name><argument_list pos:line="77" pos:column="22">&lt;<argument><name pos:line="77" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="41">predicate</name> =<init pos:line="77" pos:column="52"> <expr><name pos:line="77" pos:column="53">el</name> <op:operator pos:line="77" pos:column="56">=&gt;</op:operator> <name><name pos:line="77" pos:column="59">el</name><op:operator pos:line="77" pos:column="61">.</op:operator><name pos:line="77" pos:column="62">ProgramElement</name><op:operator pos:line="77" pos:column="76">.</op:operator><name pos:line="77" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="77" pos:column="96">==</op:operator> <name><name pos:line="77" pos:column="99">ProgramElementType</name><op:operator pos:line="77" pos:column="117">.</op:operator><name pos:line="77" pos:column="118">Method</name></name> <op:operator pos:line="77" pos:column="125">&amp;&amp;</op:operator> <op:operator pos:line="77" pos:column="128">(</op:operator><name><name pos:line="77" pos:column="129">el</name><op:operator pos:line="77" pos:column="131">.</op:operator><name pos:line="77" pos:column="132">ProgramElement</name><op:operator pos:line="77" pos:column="146">.</op:operator><name pos:line="77" pos:column="147">Name</name></name> <op:operator pos:line="77" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="77" pos:column="155">"Pumpkin"</lit:literal><op:operator pos:line="77" pos:column="164">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="78" pos:column="13">List</name><argument_list pos:line="78" pos:column="17">&lt;<argument><name pos:line="78" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="36">results</name> =<init pos:line="78" pos:column="45"> <expr><call><name pos:line="78" pos:column="46">EnsureRankingPrettyGood</name><argument_list pos:line="78" pos:column="69">(<argument><expr><name pos:line="78" pos:column="70">keywords</name></expr></argument><op:operator pos:line="78" pos:column="78">,</op:operator> <argument><expr><name pos:line="78" pos:column="80">predicate</name></expr></argument><op:operator pos:line="78" pos:column="89">,</op:operator> <argument><expr><name pos:line="78" pos:column="91">expectedLowestRank</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">IsTrue</name></name><argument_list pos:line="79" pos:column="26">(<argument><expr><name><name pos:line="79" pos:column="27">results</name><op:operator pos:line="79" pos:column="34">.</op:operator><name pos:line="79" pos:column="35">Count</name></name> <op:operator pos:line="79" pos:column="41">&gt;=</op:operator> <lit:literal type="number" pos:line="79" pos:column="44">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">IsTrue</name></name><argument_list pos:line="80" pos:column="26">(<argument><expr><name><name pos:line="80" pos:column="27">results</name><index pos:line="80" pos:column="34">[<expr><lit:literal type="number" pos:line="80" pos:column="35">0</lit:literal></expr>]</index></name><op:operator pos:line="80" pos:column="37">.</op:operator><name pos:line="80" pos:column="38">Score</name> <op:operator pos:line="80" pos:column="44">&gt;</op:operator> <name><name pos:line="80" pos:column="46">results</name><index pos:line="80" pos:column="53">[<expr><lit:literal type="number" pos:line="80" pos:column="54">1</lit:literal></expr>]</index></name><op:operator pos:line="80" pos:column="56">.</op:operator><name pos:line="80" pos:column="57">Score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">IsTrue</name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name><name pos:line="81" pos:column="27">results</name><index pos:line="81" pos:column="34">[<expr><lit:literal type="number" pos:line="81" pos:column="35">0</lit:literal></expr>]</index></name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">Score</name> <op:operator pos:line="81" pos:column="44">&gt;</op:operator> <name><name pos:line="81" pos:column="46">results</name><index pos:line="81" pos:column="53">[<expr><lit:literal type="number" pos:line="81" pos:column="54">2</lit:literal></expr>]</index></name><op:operator pos:line="81" pos:column="56">.</op:operator><name pos:line="81" pos:column="57">Score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

<comment type="block" pos:line="84" pos:column="1">/*
		private class CaramelMacchiato 
		{ 
			//caramel is sweet
		}

		[Test]
		public void PreferenceForMethodsAndClasses()
		{
			string keywords = "caramel";
			var expectedLowestRank = 1;
			Predicate&lt;CodeSearchResult&gt; predicate = el =&gt; el.Element.ProgramElementType == ProgramElementType.Class &amp;&amp; (el.Element.Name == "CaramelMacchiato");
			List&lt;CodeSearchResult&gt; results = EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);
			CodeSearchResult classResult = results.Find(predicate);
			Assert.IsTrue((classResult.Element as ClassElement).Body.Contains("sweet"));
		}

        [Test]
        public void IncompleteTermTest()
        {
            string keywords = "caram";
            var expectedLowestRank = 1;
            Predicate&lt;CodeSearchResult&gt; predicate = el =&gt; el.Element.ProgramElementType == ProgramElementType.Class &amp;&amp; (el.Element.Name == "CaramelMacchiato");
            List&lt;CodeSearchResult&gt; results = EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);
        }
*/</comment>

		<function><type><attribute pos:line="111" pos:column="17">[<expr><name pos:line="111" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="112" pos:column="17">public</specifier> <name pos:line="112" pos:column="24">void</name></type> <name pos:line="112" pos:column="29">QuotedExactQueryTest</name><parameter_list pos:line="112" pos:column="49">()</parameter_list>
		<block pos:line="113" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">string</name></type> <name pos:line="114" pos:column="20">keywords</name> =<init pos:line="114" pos:column="30"> <expr><lit:literal type="string" pos:line="114" pos:column="31">"\"private static void InitDte2()\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">expectedLowestRank</name> =<init pos:line="115" pos:column="37"> <expr><lit:literal type="number" pos:line="115" pos:column="38">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="116" pos:column="13">Predicate</name><argument_list pos:line="116" pos:column="22">&lt;<argument><name pos:line="116" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="41">predicate</name> =<init pos:line="116" pos:column="52"> <expr><name pos:line="116" pos:column="53">el</name> <op:operator pos:line="116" pos:column="56">=&gt;</op:operator> <name><name pos:line="116" pos:column="59">el</name><op:operator pos:line="116" pos:column="61">.</op:operator><name pos:line="116" pos:column="62">ProgramElement</name><op:operator pos:line="116" pos:column="76">.</op:operator><name pos:line="116" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="116" pos:column="96">==</op:operator> <name><name pos:line="116" pos:column="99">ProgramElementType</name><op:operator pos:line="116" pos:column="117">.</op:operator><name pos:line="116" pos:column="118">Method</name></name> <op:operator pos:line="116" pos:column="125">&amp;&amp;</op:operator> <op:operator pos:line="116" pos:column="128">(</op:operator><name><name pos:line="116" pos:column="129">el</name><op:operator pos:line="116" pos:column="131">.</op:operator><name pos:line="116" pos:column="132">ProgramElement</name><op:operator pos:line="116" pos:column="146">.</op:operator><name pos:line="116" pos:column="147">Name</name></name> <op:operator pos:line="116" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="116" pos:column="155">"InitDte2"</lit:literal><op:operator pos:line="116" pos:column="165">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="117" pos:column="13">List</name><argument_list pos:line="117" pos:column="17">&lt;<argument><name pos:line="117" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="117" pos:column="36">results</name> =<init pos:line="117" pos:column="45"> <expr><call><name pos:line="117" pos:column="46">EnsureRankingPrettyGood</name><argument_list pos:line="117" pos:column="69">(<argument><expr><name pos:line="117" pos:column="70">keywords</name></expr></argument><op:operator pos:line="117" pos:column="78">,</op:operator> <argument><expr><name pos:line="117" pos:column="80">predicate</name></expr></argument><op:operator pos:line="117" pos:column="89">,</op:operator> <argument><expr><name pos:line="117" pos:column="91">expectedLowestRank</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		}</block></function>


        <function><type><specifier pos:line="121" pos:column="9">public</specifier> <specifier pos:line="121" pos:column="16">override</specifier> <name pos:line="121" pos:column="25">string</name></type> <name pos:line="121" pos:column="32">GetIndexDirName</name><parameter_list pos:line="121" pos:column="47">()</parameter_list>
        <block pos:line="122" pos:column="9">{
            <return pos:line="123" pos:column="13">return <expr><lit:literal type="string" pos:line="123" pos:column="20">"LexSelfSearchTest"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="126" pos:column="9">public</specifier> <specifier pos:line="126" pos:column="16">override</specifier> <name pos:line="126" pos:column="25">string</name></type> <name pos:line="126" pos:column="32">GetFilesDirectory</name><parameter_list pos:line="126" pos:column="49">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <return pos:line="128" pos:column="13">return <expr><lit:literal type="string" pos:line="128" pos:column="20">"..\\.."</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="131" pos:column="9">public</specifier> <specifier pos:line="131" pos:column="16">override</specifier> <name pos:line="131" pos:column="25">TimeSpan</name><type:modifier pos:line="131" pos:column="33">?</type:modifier></type> <name pos:line="131" pos:column="35">GetTimeToCommit</name><parameter_list pos:line="131" pos:column="50">()</parameter_list>
        <block pos:line="132" pos:column="9">{
            <return pos:line="133" pos:column="13">return <expr><call><name><name pos:line="133" pos:column="20">TimeSpan</name><op:operator pos:line="133" pos:column="28">.</op:operator><name pos:line="133" pos:column="29">FromSeconds</name></name><argument_list pos:line="133" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="41">10</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">//[TestFixtureSetUp]</comment>
        <comment type="line" pos:line="137" pos:column="9">//public void Setup()</comment>
        <comment type="line" pos:line="138" pos:column="9">//</comment>{
        <comment type="line" pos:line="139" pos:column="9">//    TestUtils.InitializeDefaultExtensionPoints();</comment>
        <comment type="line" pos:line="140" pos:column="9">//    indexPath = Path.Combine(Path.GetTempPath(), "SelfSearchTest");</comment>
        <comment type="line" pos:line="141" pos:column="9">//    Directory.CreateDirectory(indexPath);</comment>
        <comment type="line" pos:line="142" pos:column="9">//    key = new SolutionKey(Guid.NewGuid(), "..\\..", indexPath);</comment>
        <comment type="line" pos:line="143" pos:column="9">//    ServiceLocator.RegisterInstance(key);</comment>

        <comment type="line" pos:line="145" pos:column="9">//    ServiceLocator.RegisterInstance&lt;Analyzer&gt;(new SnowballAnalyzer("English"));</comment>

        <comment type="line" pos:line="147" pos:column="9">//    var indexer = new DocumentIndexer(TimeSpan.FromSeconds(1));</comment>
        <comment type="line" pos:line="148" pos:column="9">//    ServiceLocator.RegisterInstance(indexer);</comment>

        <comment type="line" pos:line="150" pos:column="9">//    monitor = new SolutionMonitor(new SolutionWrapper(), indexer, false);</comment>

        <comment type="line" pos:line="152" pos:column="9">//    SwumManager.Instance.Initialize(key.IndexPath, true);</comment>
        <comment type="line" pos:line="153" pos:column="9">//    SwumManager.Instance.Generator = new ABB.SrcML.SrcMLGenerator("LIBS\\SrcML"); ;</comment>

        <comment type="line" pos:line="155" pos:column="9">//    //not an exaustive list, so it will be a bit of a messy parse</comment>
        <comment type="line" pos:line="156" pos:column="9">//    sandoDirsToAvoid = new List&lt;String&gt;() { "LIBS", ".hg", "bin", "obj" };</comment>

        <comment type="line" pos:line="158" pos:column="9">//    string startingPath = "..\\..";</comment>
        <comment type="line" pos:line="159" pos:column="9">//    string[] dirs = Directory.GetDirectories(startingPath);</comment>
        <comment type="line" pos:line="160" pos:column="9">//    ProcessDirectoryForTesting(dirs);</comment>

        <comment type="line" pos:line="162" pos:column="9">//    monitor.UpdateAfterAdditions();</comment>
        <comment type="line" pos:line="163" pos:column="9">//</comment>}

        <comment type="line" pos:line="165" pos:column="9">//[TestFixtureTearDown]</comment>
        <comment type="line" pos:line="166" pos:column="9">//public void TearDown()</comment>
        <comment type="line" pos:line="167" pos:column="9">//</comment>{
        <comment type="line" pos:line="168" pos:column="9">//    monitor.StopMonitoring(true);</comment>
        <comment type="line" pos:line="169" pos:column="9">//    Directory.Delete(indexPath, true);</comment>
        <comment type="line" pos:line="170" pos:column="9">//</comment>}

        <comment type="line" pos:line="172" pos:column="9">//private void ProcessDirectoryForTesting(string[] dirs)</comment>
        <comment type="line" pos:line="173" pos:column="9">//</comment>{
        <comment type="line" pos:line="174" pos:column="9">//    foreach (var dir in dirs)</comment>
        <comment type="line" pos:line="175" pos:column="9">//    {</comment>
        <comment type="line" pos:line="176" pos:column="9">//        if (sandoDirsToAvoid.Contains(Path.GetFileName(dir))) continue;</comment>

        <comment type="line" pos:line="178" pos:column="9">//        string[] subdirs = Directory.GetDirectories(dir);</comment>
        <comment type="line" pos:line="179" pos:column="9">//        ProcessDirectoryForTesting(subdirs);</comment>

        <comment type="line" pos:line="181" pos:column="9">//        string[] files = Directory.GetFiles(dir);</comment>
        <comment type="line" pos:line="182" pos:column="9">//        foreach (var file in files)</comment>
        <comment type="line" pos:line="183" pos:column="9">//        { </comment>
        <comment type="line" pos:line="184" pos:column="9">//            string fullPath = Path.GetFullPath(file);</comment>
        <comment type="line" pos:line="185" pos:column="9">//            if (Path.GetExtension(fullPath) == ".cs")</comment>
        <comment type="line" pos:line="186" pos:column="9">//            {</comment>
        <comment type="line" pos:line="187" pos:column="9">//                monitor.ProcessFileForTesting(fullPath);</comment>
        <comment type="line" pos:line="188" pos:column="9">//            }</comment>
        <comment type="line" pos:line="189" pos:column="9">//        }</comment>
        <comment type="line" pos:line="190" pos:column="9">//    }</comment>
        <comment type="line" pos:line="191" pos:column="9">//</comment>}

	

 		
				
	}</block></class>
}</block></namespace>
</unit>
