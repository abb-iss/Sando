<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core.UnitTests\Tools\LuceneDirectoryHelperTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Globalization</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">NUnit</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Framework</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">UnitTests</name></name>
<block pos:line="8" pos:column="1">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="10" pos:column="11">LuceneDirectoryHelperTest</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">GIVEN_SolutionFullNameIsNul_WHEN_GetOrCreateLuceneDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="13" pos:column="132">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">dir</name> =<init pos:line="15" pos:column="22"> <expr><call><name><name pos:line="15" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="15" pos:column="44">.</op:operator><name pos:line="15" pos:column="45">GetOrCreateLuceneDirectoryForSolution</name></name><argument_list pos:line="15" pos:column="82">(<argument><expr><name pos:line="15" pos:column="83">null</name></expr></argument><op:operator pos:line="15" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="15" pos:column="89">"C:\\lucene"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">AreEqual</name></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">String</name><op:operator pos:line="16" pos:column="35">.</op:operator><name pos:line="16" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="16" pos:column="41">,</op:operator> <argument><expr><name pos:line="16" pos:column="43">dir</name></expr></argument><op:operator pos:line="16" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="16" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">GIVEN_SolutionFullNameIsInvalidPath_WHEN_GetOrCreateLuceneDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="20" pos:column="140">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">dir</name> =<init pos:line="22" pos:column="22"> <expr><call><name><name pos:line="22" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="22" pos:column="44">.</op:operator><name pos:line="22" pos:column="45">GetOrCreateLuceneDirectoryForSolution</name></name><argument_list pos:line="22" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="83">"C:\\InvalidDir"</lit:literal></expr></argument><op:operator pos:line="22" pos:column="99">,</op:operator> <argument><expr><lit:literal type="string" pos:line="22" pos:column="101">"C:\\lucene"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">AreEqual</name></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name><name pos:line="23" pos:column="29">String</name><op:operator pos:line="23" pos:column="35">.</op:operator><name pos:line="23" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="23" pos:column="41">,</op:operator> <argument><expr><name pos:line="23" pos:column="43">dir</name></expr></argument><op:operator pos:line="23" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="23" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">GIVEN_LuceneDirectoryIsNull_WHEN_GetOrCreateLuceneDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="27" pos:column="132">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">dir</name> =<init pos:line="29" pos:column="22"> <expr><call><name><name pos:line="29" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="29" pos:column="44">.</op:operator><name pos:line="29" pos:column="45">GetOrCreateLuceneDirectoryForSolution</name></name><argument_list pos:line="29" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="83">"C:\\InvalidDir"</lit:literal></expr></argument><op:operator pos:line="29" pos:column="99">,</op:operator> <argument><expr><name pos:line="29" pos:column="101">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">AreEqual</name></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name><name pos:line="30" pos:column="29">String</name><op:operator pos:line="30" pos:column="35">.</op:operator><name pos:line="30" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="30" pos:column="41">,</op:operator> <argument><expr><name pos:line="30" pos:column="43">dir</name></expr></argument><op:operator pos:line="30" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="30" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">GIVEN_LuceneDirectoryParentPathIsInvalidPath_WHEN_GetOrCreateLuceneDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="34" pos:column="149">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">dir</name> =<init pos:line="36" pos:column="22"> <expr><call><name><name pos:line="36" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="36" pos:column="44">.</op:operator><name pos:line="36" pos:column="45">GetOrCreateLuceneDirectoryForSolution</name></name><argument_list pos:line="36" pos:column="82">(<argument><expr><name pos:line="36" pos:column="83">_solPath</name></expr></argument><op:operator pos:line="36" pos:column="91">,</op:operator> <argument><expr><lit:literal type="string" pos:line="36" pos:column="93">"invalidPath"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">AreEqual</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">String</name><op:operator pos:line="37" pos:column="35">.</op:operator><name pos:line="37" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="37" pos:column="41">,</op:operator> <argument><expr><name pos:line="37" pos:column="43">dir</name></expr></argument><op:operator pos:line="37" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="37" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">GIVEN_ValidPathAndLuceneDirectory_WHEN_GetOrCreateLuceneDirectoryForSolutionMethodIsCalled_THEN_ValidPathIsReturned</name><parameter_list pos:line="41" pos:column="136">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">dir</name> =<init pos:line="43" pos:column="22"> <expr><call><name><name pos:line="43" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="43" pos:column="44">.</op:operator><name pos:line="43" pos:column="45">GetOrCreateLuceneDirectoryForSolution</name></name><argument_list pos:line="43" pos:column="82">(<argument><expr><name pos:line="43" pos:column="83">_solPath</name></expr></argument><op:operator pos:line="43" pos:column="91">,</op:operator> <argument><expr><call><name><name pos:line="43" pos:column="93">Path</name><op:operator pos:line="43" pos:column="97">.</op:operator><name pos:line="43" pos:column="98">GetTempPath</name></name><argument_list pos:line="43" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">IsFalse</name></name><argument_list pos:line="44" pos:column="27">(<argument><expr><call><name><name pos:line="44" pos:column="28">String</name><op:operator pos:line="44" pos:column="34">.</op:operator><name pos:line="44" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="44" pos:column="53">(<argument><expr><name pos:line="44" pos:column="54">dir</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="44" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="44" pos:column="60">"Directory path must be a non empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">luceneDirectoryPath</name> =<init pos:line="45" pos:column="38"> <expr><call><name><name pos:line="45" pos:column="39">Path</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">Combine</name></name><argument_list pos:line="45" pos:column="51">(<argument><expr><call><name><name pos:line="45" pos:column="52">Path</name><op:operator pos:line="45" pos:column="56">.</op:operator><name pos:line="45" pos:column="57">GetTempPath</name></name><argument_list pos:line="45" pos:column="68">()</argument_list></call></expr></argument><op:operator pos:line="45" pos:column="70">,</op:operator> <argument><expr><call><name><name pos:line="45" pos:column="72">Path</name><op:operator pos:line="45" pos:column="76">.</op:operator><name pos:line="45" pos:column="77">GetTempPath</name></name><argument_list pos:line="45" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">IsTrue</name></name><argument_list pos:line="46" pos:column="26">(<argument><expr><call><name><name pos:line="46" pos:column="27">Directory</name><op:operator pos:line="46" pos:column="36">.</op:operator><name pos:line="46" pos:column="37">Exists</name></name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">luceneDirectoryPath</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="46" pos:column="64">,</op:operator> <argument><expr><lit:literal type="string" pos:line="46" pos:column="66">"Lucene directory path must be a valid directory path"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">solutionDirectoryPath</name> =<init pos:line="47" pos:column="40"> <expr><call><name><name pos:line="47" pos:column="41">Path</name><op:operator pos:line="47" pos:column="45">.</op:operator><name pos:line="47" pos:column="46">Combine</name></name><argument_list pos:line="47" pos:column="53">(<argument><expr><call><name><name pos:line="47" pos:column="54">Path</name><op:operator pos:line="47" pos:column="58">.</op:operator><name pos:line="47" pos:column="59">GetTempPath</name></name><argument_list pos:line="47" pos:column="70">()</argument_list></call></expr></argument><op:operator pos:line="47" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="47" pos:column="74">"lucene"</lit:literal></expr></argument><op:operator pos:line="47" pos:column="82">,</op:operator> <argument><expr><call><name><name pos:line="47" pos:column="84">Path</name><op:operator pos:line="47" pos:column="88">.</op:operator><name pos:line="47" pos:column="89">GetFileName</name></name><argument_list pos:line="47" pos:column="100">(<argument><expr><name pos:line="47" pos:column="101">dir</name></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="105">.</op:operator><call><name pos:line="47" pos:column="106">ToString</name><argument_list pos:line="47" pos:column="114">(<argument><expr><name><name pos:line="47" pos:column="115">CultureInfo</name><op:operator pos:line="47" pos:column="126">.</op:operator><name pos:line="47" pos:column="127">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsTrue</name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><call><name><name pos:line="48" pos:column="27">Directory</name><op:operator pos:line="48" pos:column="36">.</op:operator><name pos:line="48" pos:column="37">Exists</name></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">solutionDirectoryPath</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="48" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="48" pos:column="68">"Solution lucene directory path must be a valid directory path: "</lit:literal><op:operator pos:line="48" pos:column="133">+</op:operator> <name pos:line="48" pos:column="135">solutionDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">GIVEN_SolutionFullNameIsNul_WHEN_GetOrCreateSrcMlArchivesDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="52" pos:column="139">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">dir</name> =<init pos:line="54" pos:column="22"> <expr><call><name><name pos:line="54" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="54" pos:column="44">.</op:operator><name pos:line="54" pos:column="45">GetOrCreateSrcMlArchivesDirectoryForSolution</name></name><argument_list pos:line="54" pos:column="89">(<argument><expr><name pos:line="54" pos:column="90">null</name></expr></argument><op:operator pos:line="54" pos:column="94">,</op:operator> <argument><expr><lit:literal type="string" pos:line="54" pos:column="96">"C:\\lucene"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">AreEqual</name></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name><name pos:line="55" pos:column="29">String</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="55" pos:column="41">,</op:operator> <argument><expr><name pos:line="55" pos:column="43">dir</name></expr></argument><op:operator pos:line="55" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="55" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">GIVEN_SolutionFullNameIsInvalidPath_WHEN_GetOrCreateSrcMlArchivesDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="59" pos:column="147">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">dir</name> =<init pos:line="61" pos:column="22"> <expr><call><name><name pos:line="61" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="61" pos:column="44">.</op:operator><name pos:line="61" pos:column="45">GetOrCreateSrcMlArchivesDirectoryForSolution</name></name><argument_list pos:line="61" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="90">"InvalidDir"</lit:literal></expr></argument><op:operator pos:line="61" pos:column="102">,</op:operator> <argument><expr><lit:literal type="string" pos:line="61" pos:column="104">"C:\\srcmlarch"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreEqual</name></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name><name pos:line="62" pos:column="29">String</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="62" pos:column="41">,</op:operator> <argument><expr><name pos:line="62" pos:column="43">dir</name></expr></argument><op:operator pos:line="62" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="62" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">GIVEN_LuceneDirectoryIsNull_WHEN_GetOrCreateSrcMlArchivesDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="66" pos:column="139">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">dir</name> =<init pos:line="68" pos:column="22"> <expr><call><name><name pos:line="68" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="68" pos:column="44">.</op:operator><name pos:line="68" pos:column="45">GetOrCreateSrcMlArchivesDirectoryForSolution</name></name><argument_list pos:line="68" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="90">"InvalidDir"</lit:literal></expr></argument><op:operator pos:line="68" pos:column="102">,</op:operator> <argument><expr><name pos:line="68" pos:column="104">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">AreEqual</name></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name><name pos:line="69" pos:column="29">String</name><op:operator pos:line="69" pos:column="35">.</op:operator><name pos:line="69" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="69" pos:column="41">,</op:operator> <argument><expr><name pos:line="69" pos:column="43">dir</name></expr></argument><op:operator pos:line="69" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="69" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">GIVEN_LuceneDirectoryParentPathIsInvalidPath_WHEN_GetOrCreateSrcMlArchivesDirectoryForSolutionMethodIsCalled_THEN_EmptyStringIsReturned</name><parameter_list pos:line="73" pos:column="156">()</parameter_list>
        <block pos:line="74" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">dir</name> =<init pos:line="75" pos:column="22"> <expr><call><name><name pos:line="75" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="75" pos:column="44">.</op:operator><name pos:line="75" pos:column="45">GetOrCreateSrcMlArchivesDirectoryForSolution</name></name><argument_list pos:line="75" pos:column="89">(<argument><expr><name pos:line="75" pos:column="90">_solPath</name></expr></argument><op:operator pos:line="75" pos:column="98">,</op:operator> <argument><expr><lit:literal type="string" pos:line="75" pos:column="100">"invalidPath"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">AreEqual</name></name><argument_list pos:line="76" pos:column="28">(<argument><expr><name><name pos:line="76" pos:column="29">String</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">Empty</name></name></expr></argument><op:operator pos:line="76" pos:column="41">,</op:operator> <argument><expr><name pos:line="76" pos:column="43">dir</name></expr></argument><op:operator pos:line="76" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="76" pos:column="48">"Directory path should be an empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="79" pos:column="9">[<expr><name pos:line="79" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">GIVEN_ValidPathAndLuceneDirectory_WHEN_GetOrCreateSrcMlArchivesDirectoryForSolutionMethodIsCalled_THEN_ValidPathIsReturned</name><parameter_list pos:line="80" pos:column="143">()</parameter_list>
        <block pos:line="81" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">dir</name> =<init pos:line="82" pos:column="22"> <expr><call><name><name pos:line="82" pos:column="23">LuceneDirectoryHelper</name><op:operator pos:line="82" pos:column="44">.</op:operator><name pos:line="82" pos:column="45">GetOrCreateSrcMlArchivesDirectoryForSolution</name></name><argument_list pos:line="82" pos:column="89">(<argument><expr><name pos:line="82" pos:column="90">_solPath</name></expr></argument><op:operator pos:line="82" pos:column="98">,</op:operator> <argument><expr><call><name><name pos:line="82" pos:column="100">Path</name><op:operator pos:line="82" pos:column="104">.</op:operator><name pos:line="82" pos:column="105">GetTempPath</name></name><argument_list pos:line="82" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">IsFalse</name></name><argument_list pos:line="83" pos:column="27">(<argument><expr><call><name><name pos:line="83" pos:column="28">String</name><op:operator pos:line="83" pos:column="34">.</op:operator><name pos:line="83" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="83" pos:column="53">(<argument><expr><name pos:line="83" pos:column="54">dir</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="83" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="83" pos:column="60">"Directory path must be a non empty string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">srcMlArchivesDirectoryPath</name> =<init pos:line="84" pos:column="45"> <expr><call><name><name pos:line="84" pos:column="46">Path</name><op:operator pos:line="84" pos:column="50">.</op:operator><name pos:line="84" pos:column="51">Combine</name></name><argument_list pos:line="84" pos:column="58">(<argument><expr><call><name><name pos:line="84" pos:column="59">Path</name><op:operator pos:line="84" pos:column="63">.</op:operator><name pos:line="84" pos:column="64">GetTempPath</name></name><argument_list pos:line="84" pos:column="75">()</argument_list></call></expr></argument><op:operator pos:line="84" pos:column="77">,</op:operator> <argument><expr><call><name><name pos:line="84" pos:column="79">Path</name><op:operator pos:line="84" pos:column="83">.</op:operator><name pos:line="84" pos:column="84">GetTempPath</name></name><argument_list pos:line="84" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">IsTrue</name></name><argument_list pos:line="85" pos:column="26">(<argument><expr><call><name><name pos:line="85" pos:column="27">Directory</name><op:operator pos:line="85" pos:column="36">.</op:operator><name pos:line="85" pos:column="37">Exists</name></name><argument_list pos:line="85" pos:column="43">(<argument><expr><name pos:line="85" pos:column="44">srcMlArchivesDirectoryPath</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="85" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="85" pos:column="73">"Lucene directory path must be a valid directory path"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">solutionDirectoryPath</name> =<init pos:line="86" pos:column="40"> <expr><call><name><name pos:line="86" pos:column="41">Path</name><op:operator pos:line="86" pos:column="45">.</op:operator><name pos:line="86" pos:column="46">Combine</name></name><argument_list pos:line="86" pos:column="53">(<argument><expr><call><name><name pos:line="86" pos:column="54">Path</name><op:operator pos:line="86" pos:column="58">.</op:operator><name pos:line="86" pos:column="59">GetTempPath</name></name><argument_list pos:line="86" pos:column="70">()</argument_list></call></expr></argument><op:operator pos:line="86" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="86" pos:column="74">"srcMlArchives"</lit:literal></expr></argument><op:operator pos:line="86" pos:column="89">,</op:operator> <argument><expr><call><name><name pos:line="86" pos:column="91">Path</name><op:operator pos:line="86" pos:column="95">.</op:operator><name pos:line="86" pos:column="96">GetFileName</name></name><argument_list pos:line="86" pos:column="107">(<argument><expr><name pos:line="86" pos:column="108">dir</name></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="112">.</op:operator><call><name pos:line="86" pos:column="113">ToString</name><argument_list pos:line="86" pos:column="121">(<argument><expr><name><name pos:line="86" pos:column="122">CultureInfo</name><op:operator pos:line="86" pos:column="133">.</op:operator><name pos:line="86" pos:column="134">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">IsTrue</name></name><argument_list pos:line="87" pos:column="26">(<argument><expr><call><name><name pos:line="87" pos:column="27">Directory</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">Exists</name></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">solutionDirectoryPath</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="87" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="87" pos:column="68">"Solution srcMlArchives directory path must be a valid directory path: "</lit:literal><op:operator pos:line="87" pos:column="140">+</op:operator> <name pos:line="87" pos:column="142">solutionDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="90" pos:column="9">[<expr><name pos:line="90" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">SetUp</name><parameter_list pos:line="91" pos:column="26">()</parameter_list>
        <block pos:line="92" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">const</name> <name pos:line="93" pos:column="19">string</name></type> <name pos:line="93" pos:column="26">solutionName</name> =<init pos:line="93" pos:column="40"> <expr><lit:literal type="string" pos:line="93" pos:column="41">"sol.sln"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">_solPath</name> <op:operator pos:line="94" pos:column="22">=</op:operator> <call><name><name pos:line="94" pos:column="24">Path</name><op:operator pos:line="94" pos:column="28">.</op:operator><name pos:line="94" pos:column="29">Combine</name></name><argument_list pos:line="94" pos:column="36">(<argument><expr><call><name><name pos:line="94" pos:column="37">Path</name><op:operator pos:line="94" pos:column="41">.</op:operator><name pos:line="94" pos:column="42">GetTempPath</name></name><argument_list pos:line="94" pos:column="53">()</argument_list></call></expr></argument><op:operator pos:line="94" pos:column="55">,</op:operator> <argument><expr><name pos:line="94" pos:column="57">solutionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="95" pos:column="13">_hash</name> <op:operator pos:line="95" pos:column="19">=</op:operator> <call><name><name pos:line="95" pos:column="21">solutionName</name><op:operator pos:line="95" pos:column="33">.</op:operator><name pos:line="95" pos:column="34">GetHashCode</name></name><argument_list pos:line="95" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="96" pos:column="13">if<condition pos:line="96" pos:column="15">(<expr><op:operator pos:line="96" pos:column="16">!</op:operator><call><name><name pos:line="96" pos:column="17">File</name><op:operator pos:line="96" pos:column="21">.</op:operator><name pos:line="96" pos:column="22">Exists</name></name><argument_list pos:line="96" pos:column="28">(<argument><expr><name pos:line="96" pos:column="29">_solPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="39">
                <expr_stmt><expr><call><name><name pos:line="97" pos:column="17">File</name><op:operator pos:line="97" pos:column="21">.</op:operator><name pos:line="97" pos:column="22">WriteAllText</name></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name pos:line="97" pos:column="35">_solPath</name></expr></argument><op:operator pos:line="97" pos:column="43">,</op:operator> <argument><expr><lit:literal type="string" pos:line="97" pos:column="45">"content"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><attribute pos:line="100" pos:column="9">[<expr><name pos:line="100" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">TearDown</name><parameter_list pos:line="101" pos:column="29">()</parameter_list>
        <block pos:line="102" pos:column="9">{
            <if pos:line="103" pos:column="13">if <condition pos:line="103" pos:column="16">(<expr><call><name><name pos:line="103" pos:column="17">File</name><op:operator pos:line="103" pos:column="21">.</op:operator><name pos:line="103" pos:column="22">Exists</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><name pos:line="103" pos:column="29">_solPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="103" pos:column="39">
                <expr_stmt><expr><call><name><name pos:line="104" pos:column="17">File</name><op:operator pos:line="104" pos:column="21">.</op:operator><name pos:line="104" pos:column="22">Delete</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><name pos:line="104" pos:column="29">_solPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">private</specifier> <name pos:line="107" pos:column="17">string</name></type> <name pos:line="107" pos:column="24">_solPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="108" pos:column="9">private</specifier> <name pos:line="108" pos:column="17">int</name></type> <name pos:line="108" pos:column="21">_hash</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
