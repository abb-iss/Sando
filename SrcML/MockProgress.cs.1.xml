<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\MockProgress.cs" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// -----------------------------------------------------------------------</comment>
<comment type="line" pos:line="2" pos:column="1">// &lt;copyright file="MockProgress.cs" company="ABB"&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// TODO: Update copyright text.</comment>
<comment type="line" pos:line="4" pos:column="1">// &lt;/copyright&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">// -----------------------------------------------------------------------</comment>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">IntegrationTests</name></name>
<block pos:line="8" pos:column="1">{
    <using pos:line="9" pos:column="5">using <name pos:line="9" pos:column="11">System</name>;</using>
    <using pos:line="10" pos:column="5">using <name><name pos:line="10" pos:column="11">System</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Collections</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">Generic</name></name>;</using>
    <using pos:line="11" pos:column="5">using <name><name pos:line="11" pos:column="11">System</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Linq</name></name>;</using>
    <using pos:line="12" pos:column="5">using <name><name pos:line="12" pos:column="11">System</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Text</name></name>;</using>

    <comment type="line" pos:line="14" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="15" pos:column="5">/// TODO: Update summary.</comment>
    <comment type="line" pos:line="16" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="17" pos:column="5">public</specifier> class <name pos:line="17" pos:column="18">MockProgress</name> <super pos:line="17" pos:column="31">: <name pos:line="17" pos:column="33">IProgressCallback</name></super>
    <block pos:line="18" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">IInvoker</name></type> <name pos:line="19" pos:column="26">invoker</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">MockProgress</name><parameter_list pos:line="21" pos:column="28">(<param><decl><type><name pos:line="21" pos:column="29">IInvoker</name></type> <name pos:line="21" pos:column="38">invoker</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">this</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">invoker</name></name> <op:operator pos:line="23" pos:column="26">=</op:operator> <name pos:line="23" pos:column="28">invoker</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">MockProgress</name><parameter_list pos:line="26" pos:column="28">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <comment type="line" pos:line="28" pos:column="13">// TODO: Complete member initialization</comment>
        }</block></constructor>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">Begin</name><parameter_list pos:line="30" pos:column="26">(<param><decl><type><name pos:line="30" pos:column="27">int</name></type> <name pos:line="30" pos:column="31">minimum</name></decl></param><op:operator pos:line="30" pos:column="38">,</op:operator> <param><decl><type><name pos:line="30" pos:column="40">int</name></type> <name pos:line="30" pos:column="44">maximum</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <comment type="line" pos:line="32" pos:column="13">//throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">Begin</name><parameter_list pos:line="35" pos:column="26">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <comment type="line" pos:line="37" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">SetRange</name><parameter_list pos:line="40" pos:column="29">(<param><decl><type><name pos:line="40" pos:column="30">int</name></type> <name pos:line="40" pos:column="34">minimum</name></decl></param><op:operator pos:line="40" pos:column="41">,</op:operator> <param><decl><type><name pos:line="40" pos:column="43">int</name></type> <name pos:line="40" pos:column="47">maximum</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <comment type="line" pos:line="42" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">SetText</name><parameter_list pos:line="45" pos:column="28">(<param><decl><type><name pos:line="45" pos:column="29">string</name></type> <name pos:line="45" pos:column="36">text</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <comment type="line" pos:line="47" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">StepTo</name><parameter_list pos:line="50" pos:column="27">(<param><decl><type><name pos:line="50" pos:column="28">int</name></type> <name pos:line="50" pos:column="32">val</name></decl></param>)</parameter_list>
        <block pos:line="51" pos:column="9">{
            <comment type="line" pos:line="52" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">Increment</name><parameter_list pos:line="55" pos:column="30">(<param><decl><type><name pos:line="55" pos:column="31">int</name></type> <name pos:line="55" pos:column="35">val</name></decl></param>)</parameter_list>
        <block pos:line="56" pos:column="9">{
            <comment type="line" pos:line="57" pos:column="13">//throw new NotImplementedException();</comment>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">bool</name></type> <name pos:line="60" pos:column="21">IsAborting</name>
        <block pos:line="61" pos:column="9">{
            <function><name pos:line="62" pos:column="13">get</name> <block pos:line="62" pos:column="17">{ <throw pos:line="62" pos:column="19">throw <expr><op:operator pos:line="62" pos:column="25">new</op:operator> <call><name pos:line="62" pos:column="29">NotImplementedException</name><argument_list pos:line="62" pos:column="52">()</argument_list></call></expr>;</throw> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">End</name><parameter_list pos:line="65" pos:column="24">()</parameter_list>
        <block pos:line="66" pos:column="9">{
            <comment type="line" pos:line="67" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>



        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">Invoke</name><parameter_list pos:line="72" pos:column="27">(<param><decl><type><name><name pos:line="72" pos:column="28">System</name><op:operator pos:line="72" pos:column="34">.</op:operator><name pos:line="72" pos:column="35">Windows</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">Forms</name><op:operator pos:line="72" pos:column="48">.</op:operator><name pos:line="72" pos:column="49">MethodInvoker</name></name></type> <name pos:line="72" pos:column="63">globalSystemWindowsFormsMethodInvoker</name></decl></param>)</parameter_list>
        <block pos:line="73" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">invoker</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">Invoke</name></name><argument_list pos:line="74" pos:column="27">(<argument><expr><name pos:line="74" pos:column="28">globalSystemWindowsFormsMethodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">void</name></type> <name pos:line="77" pos:column="21">ShowDialog</name><parameter_list pos:line="77" pos:column="31">()</parameter_list>
        <block pos:line="78" pos:column="9">{
            <comment type="line" pos:line="79" pos:column="13">// throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">Close</name><parameter_list pos:line="82" pos:column="26">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <comment type="line" pos:line="84" pos:column="13">//throw new NotImplementedException();</comment>
        }</block></function>

        <function><type><specifier pos:line="87" pos:column="9">public</specifier> <specifier pos:line="87" pos:column="16">static</specifier> <name pos:line="87" pos:column="23">MockProgress</name></type> <name pos:line="87" pos:column="36">getProgress</name><parameter_list pos:line="87" pos:column="47">(<param><decl><type><name pos:line="87" pos:column="48">IInvoker</name></type> <name pos:line="87" pos:column="57">invoker</name></decl></param>)</parameter_list>
        <block pos:line="88" pos:column="9">{
            <return pos:line="89" pos:column="13">return <expr><op:operator pos:line="89" pos:column="20">new</op:operator> <call><name pos:line="89" pos:column="24">MockProgress</name><argument_list pos:line="89" pos:column="36">(<argument><expr><name pos:line="89" pos:column="37">invoker</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">Invoke</name><parameter_list pos:line="93" pos:column="27">(<param><decl><type><name><name pos:line="93" pos:column="28">System</name><op:operator pos:line="93" pos:column="34">.</op:operator><name pos:line="93" pos:column="35">Windows</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">Forms</name><op:operator pos:line="93" pos:column="48">.</op:operator><name pos:line="93" pos:column="49">MethodInvoker</name></name></type> <name pos:line="93" pos:column="63">methodInvoker</name></decl></param><op:operator pos:line="93" pos:column="76">,</op:operator> <param><decl><type><name pos:line="93" pos:column="78">bool</name></type> <name pos:line="93" pos:column="83">forceUi</name></decl></param>)</parameter_list>
        <block pos:line="94" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">invoker</name><op:operator pos:line="95" pos:column="20">.</op:operator><name pos:line="95" pos:column="21">Invoke</name></name><argument_list pos:line="95" pos:column="27">(<argument><expr><name pos:line="95" pos:column="28">methodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
