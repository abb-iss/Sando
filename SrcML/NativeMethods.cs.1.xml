<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UI\UI.UnitTests\TestFiles\FourCSFiles\NativeMethods.cs" pos:tabs="8" pos:line="1" pos:column="1">

<comment type="block" pos:line="3" pos:column="1">/**********************************************************************************
Shared Source License for Cropper
Copyright 9/07/2004 Brian Scott
http://blogs.geekdojo.net/brian

This license governs use of the accompanying software ('Software'), and your
use of the Software constitutes acceptance of this license.

You may use the Software for any commercial or noncommercial purpose,
including distributing derivative works.

In return, we simply require that you agree:
1. Not to remove any copyright or other notices from the Software. 
2. That if you distribute the Software in source code form you do so only
   under this license (i.e. you must include a complete copy of this license
   with your distribution), and if you distribute the Software solely in
   object form you only do so under a license that complies with this
   license.
3. That the Software comes "as is", with no warranties. None whatsoever.
   This means no express, implied or statutory warranty, including without
   limitation, warranties of merchantability or fitness for a particular
   purpose or any warranty of title or non-infringement. Also, you must pass
   this disclaimer on whenever you distribute the Software or derivative
   works.
4. That no contributor to the Software will be liable for any of those types
   of damages known as indirect, special, consequential, or incidental
   related to the Software or this license, to the maximum extent the law
   permits, no matter what legal theory its based on. Also, you must pass
   this limitation of liability on whenever you distribute the Software or
   derivative works.
5. That if you sue anyone over patents that you think may apply to the
   Software for a person's use of the Software, your license to the Software
   ends automatically.
6. That the patent rights, if any, granted in this license only apply to the
   Software, not to any derivative works you make.
7. That the Software is subject to U.S. export jurisdiction at the time it
   is licensed to you, and it may be subject to additional export or import
   laws in other places.  You agree to comply with all such laws and
   regulations that may apply to the Software after delivery of the software
   to you.
8. That if you are an agency of the U.S. Government, (i) Software provided
   pursuant to a solicitation issued on or after December 1, 1995, is
   provided with the commercial license rights set forth in this license,
   and (ii) Software provided pursuant to a solicitation issued prior to
   December 1, 1995, is provided with Restricted Rights as set forth in
   FAR, 48 C.F.R. 52.227-14 (June 1987) or DFAR, 48 C.F.R. 252.227-7013
   (Oct 1988), as applicable.
9. That your rights under this License end automatically if you breach it in
   any way.
10.That all rights not expressly granted to you in this license are reserved.

**********************************************************************************/</comment>





<using pos:line="60" pos:column="1">using <name pos:line="60" pos:column="7">System</name>;</using>
<using pos:line="61" pos:column="1">using <name><name pos:line="61" pos:column="7">System</name><op:operator pos:line="61" pos:column="13">.</op:operator><name pos:line="61" pos:column="14">Drawing</name></name>;</using>
<using pos:line="62" pos:column="1">using <name><name pos:line="62" pos:column="7">System</name><op:operator pos:line="62" pos:column="13">.</op:operator><name pos:line="62" pos:column="14">Drawing</name><op:operator pos:line="62" pos:column="21">.</op:operator><name pos:line="62" pos:column="22">Drawing2D</name></name>;</using>
<using pos:line="63" pos:column="1">using <name><name pos:line="63" pos:column="7">System</name><op:operator pos:line="63" pos:column="13">.</op:operator><name pos:line="63" pos:column="14">Runtime</name><op:operator pos:line="63" pos:column="21">.</op:operator><name pos:line="63" pos:column="22">InteropServices</name></name>;</using>
<using pos:line="64" pos:column="1">using <name><name pos:line="64" pos:column="7">System</name><op:operator pos:line="64" pos:column="13">.</op:operator><name pos:line="64" pos:column="14">Text</name></name>;</using>




<namespace pos:line="69" pos:column="1">namespace <name><name pos:line="69" pos:column="11">Fusion8</name><op:operator pos:line="69" pos:column="18">.</op:operator><name pos:line="69" pos:column="19">Cropper</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">Core</name></name>
<block pos:line="70" pos:column="1">{
    <comment type="line" pos:line="71" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="72" pos:column="5">/// Class for getting images of the desktop.</comment>
    <comment type="line" pos:line="73" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="74" pos:column="5">/// &lt;threadsafety static="false" instance="false"/&gt;</comment>
    <comment type="line" pos:line="75" pos:column="5">/// &lt;note type="caution"&gt;This class is not thread safe.&lt;/note&gt; </comment>
    <comment type="line" pos:line="76" pos:column="5">/// &lt;remarks&gt;This class has been scaled back to the essentials for capturing a segment of </comment>
    <comment type="line" pos:line="77" pos:column="5">/// the desktop in order to keep Cropper as small as possible.&lt;/remarks&gt;</comment>
    <class><specifier pos:line="78" pos:column="5">internal</specifier> <specifier pos:line="78" pos:column="14">static</specifier> class <name pos:line="78" pos:column="27">NativeMethods</name>
    <block pos:line="79" pos:column="5">{


        <function_decl><type><attribute pos:line="82" pos:column="9">[<expr><call><name pos:line="82" pos:column="10">DllImport</name><argument_list pos:line="82" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="82" pos:column="32">,</op:operator> <argument><expr><name pos:line="82" pos:column="34">CharSet</name> <op:operator pos:line="82" pos:column="42">=</op:operator> <name><name pos:line="82" pos:column="44">CharSet</name><op:operator pos:line="82" pos:column="51">.</op:operator><name pos:line="82" pos:column="52">Ansi</name></name></expr></argument><op:operator pos:line="82" pos:column="56">,</op:operator> <argument><expr><name pos:line="82" pos:column="58">ExactSpelling</name> <op:operator pos:line="82" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="74">true</lit:literal></expr></argument><op:operator pos:line="82" pos:column="78">,</op:operator> <argument><expr><name pos:line="82" pos:column="80">SetLastError</name> <op:operator pos:line="82" pos:column="93">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="83" pos:column="9">internal</specifier> <specifier pos:line="83" pos:column="18">static</specifier> <specifier pos:line="83" pos:column="25">extern</specifier> <name pos:line="83" pos:column="32">IntPtr</name></type> <name pos:line="83" pos:column="39">WindowFromPoint</name><parameter_list pos:line="83" pos:column="54">(<param><decl><type><name pos:line="83" pos:column="55">POINT</name></type> <name pos:line="83" pos:column="61">point</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="85" pos:column="9">[<expr><call><name pos:line="85" pos:column="10">DllImport</name><argument_list pos:line="85" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">internal</specifier> <specifier pos:line="86" pos:column="18">static</specifier> <specifier pos:line="86" pos:column="25">extern</specifier> <name pos:line="86" pos:column="32">IntPtr</name></type> <name pos:line="86" pos:column="39">GetForegroundWindow</name><parameter_list pos:line="86" pos:column="58">()</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="88" pos:column="9">[<expr><call><name pos:line="88" pos:column="10">DllImport</name><argument_list pos:line="88" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="88" pos:column="32">,</op:operator> <argument><expr><name pos:line="88" pos:column="34">CharSet</name> <op:operator pos:line="88" pos:column="42">=</op:operator> <name><name pos:line="88" pos:column="44">CharSet</name><op:operator pos:line="88" pos:column="51">.</op:operator><name pos:line="88" pos:column="52">Ansi</name></name></expr></argument><op:operator pos:line="88" pos:column="56">,</op:operator> <argument><expr><name pos:line="88" pos:column="58">ExactSpelling</name> <op:operator pos:line="88" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="88" pos:column="74">true</lit:literal></expr></argument><op:operator pos:line="88" pos:column="78">,</op:operator> <argument><expr><name pos:line="88" pos:column="80">SetLastError</name> <op:operator pos:line="88" pos:column="93">=</op:operator> <lit:literal type="boolean" pos:line="88" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="89" pos:column="9">internal</specifier> <specifier pos:line="89" pos:column="18">static</specifier> <specifier pos:line="89" pos:column="25">extern</specifier> <name pos:line="89" pos:column="32">IntPtr</name></type> <name pos:line="89" pos:column="39">GetDesktopWindow</name><parameter_list pos:line="89" pos:column="55">()</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="91" pos:column="9">[<expr><call><name pos:line="91" pos:column="10">DllImport</name><argument_list pos:line="91" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="91" pos:column="32">,</op:operator> <argument><expr><name pos:line="91" pos:column="34">CharSet</name> <op:operator pos:line="91" pos:column="42">=</op:operator> <name><name pos:line="91" pos:column="44">CharSet</name><op:operator pos:line="91" pos:column="51">.</op:operator><name pos:line="91" pos:column="52">Ansi</name></name></expr></argument><op:operator pos:line="91" pos:column="56">,</op:operator> <argument><expr><name pos:line="91" pos:column="58">ExactSpelling</name> <op:operator pos:line="91" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="91" pos:column="74">true</lit:literal></expr></argument><op:operator pos:line="91" pos:column="78">,</op:operator> <argument><expr><name pos:line="91" pos:column="80">SetLastError</name> <op:operator pos:line="91" pos:column="93">=</op:operator> <lit:literal type="boolean" pos:line="91" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">internal</specifier> <specifier pos:line="92" pos:column="18">static</specifier> <specifier pos:line="92" pos:column="25">extern</specifier> <name pos:line="92" pos:column="32">IntPtr</name></type> <name pos:line="92" pos:column="39">GetWindowDC</name><parameter_list pos:line="92" pos:column="50">(<param><decl><type><name pos:line="92" pos:column="51">IntPtr</name></type> <name pos:line="92" pos:column="58">hwnd</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="94" pos:column="9">[<expr><call><name pos:line="94" pos:column="10">DllImport</name><argument_list pos:line="94" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="94" pos:column="32">,</op:operator> <argument><expr><name pos:line="94" pos:column="34">CharSet</name> <op:operator pos:line="94" pos:column="42">=</op:operator> <name><name pos:line="94" pos:column="44">CharSet</name><op:operator pos:line="94" pos:column="51">.</op:operator><name pos:line="94" pos:column="52">Ansi</name></name></expr></argument><op:operator pos:line="94" pos:column="56">,</op:operator> <argument><expr><name pos:line="94" pos:column="58">ExactSpelling</name> <op:operator pos:line="94" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="74">true</lit:literal></expr></argument><op:operator pos:line="94" pos:column="78">,</op:operator> <argument><expr><name pos:line="94" pos:column="80">SetLastError</name> <op:operator pos:line="94" pos:column="93">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="95" pos:column="9">internal</specifier> <specifier pos:line="95" pos:column="18">static</specifier> <specifier pos:line="95" pos:column="25">extern</specifier> <name pos:line="95" pos:column="32">IntPtr</name></type> <name pos:line="95" pos:column="39">GetDC</name><parameter_list pos:line="95" pos:column="44">(<param><decl><type><name pos:line="95" pos:column="45">IntPtr</name></type> <name pos:line="95" pos:column="52">hwnd</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="97" pos:column="9">[<expr><call><name pos:line="97" pos:column="10">DllImport</name><argument_list pos:line="97" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="97" pos:column="32">,</op:operator> <argument><expr><name pos:line="97" pos:column="34">CharSet</name> <op:operator pos:line="97" pos:column="42">=</op:operator> <name><name pos:line="97" pos:column="44">CharSet</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">Ansi</name></name></expr></argument><op:operator pos:line="97" pos:column="56">,</op:operator> <argument><expr><name pos:line="97" pos:column="58">ExactSpelling</name> <op:operator pos:line="97" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="97" pos:column="74">true</lit:literal></expr></argument><op:operator pos:line="97" pos:column="78">,</op:operator> <argument><expr><name pos:line="97" pos:column="80">SetLastError</name> <op:operator pos:line="97" pos:column="93">=</op:operator> <lit:literal type="boolean" pos:line="97" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">internal</specifier> <specifier pos:line="98" pos:column="18">static</specifier> <specifier pos:line="98" pos:column="25">extern</specifier> <name pos:line="98" pos:column="32">int</name></type> <name pos:line="98" pos:column="36">ReleaseDC</name><parameter_list pos:line="98" pos:column="45">(<param><decl><type><name pos:line="98" pos:column="46">IntPtr</name></type> <name pos:line="98" pos:column="53">hwnd</name></decl></param><op:operator pos:line="98" pos:column="57">,</op:operator> <param><decl><type><name pos:line="98" pos:column="59">IntPtr</name></type> <name pos:line="98" pos:column="66">dc</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="100" pos:column="9">[<expr><call><name pos:line="100" pos:column="10">DllImport</name><argument_list pos:line="100" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="20">"gdi32.dll"</lit:literal></expr></argument><op:operator pos:line="100" pos:column="31">,</op:operator> <argument><expr><name pos:line="100" pos:column="33">CharSet</name> <op:operator pos:line="100" pos:column="41">=</op:operator> <name><name pos:line="100" pos:column="43">CharSet</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">Ansi</name></name></expr></argument><op:operator pos:line="100" pos:column="55">,</op:operator> <argument><expr><name pos:line="100" pos:column="57">ExactSpelling</name> <op:operator pos:line="100" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="100" pos:column="73">true</lit:literal></expr></argument><op:operator pos:line="100" pos:column="77">,</op:operator> <argument><expr><name pos:line="100" pos:column="79">SetLastError</name> <op:operator pos:line="100" pos:column="92">=</op:operator> <lit:literal type="boolean" pos:line="100" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="101" pos:column="9">[<target pos:line="101" pos:column="10">return</target>: <expr><call><name pos:line="101" pos:column="18">MarshalAs</name><argument_list pos:line="101" pos:column="27">(<argument><expr><name><name pos:line="101" pos:column="28">UnmanagedType</name><op:operator pos:line="101" pos:column="41">.</op:operator><name pos:line="101" pos:column="42">Bool</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="102" pos:column="9">internal</specifier> <specifier pos:line="102" pos:column="18">static</specifier> <specifier pos:line="102" pos:column="25">extern</specifier> <name pos:line="102" pos:column="32">bool</name></type> <name pos:line="102" pos:column="37">BitBlt</name><parameter_list pos:line="102" pos:column="43">(<param><decl><type><name pos:line="102" pos:column="44">IntPtr</name></type> <name pos:line="102" pos:column="51">hDestDC</name></decl></param><op:operator pos:line="102" pos:column="58">,</op:operator> <param><decl><type><name pos:line="102" pos:column="60">int</name></type> <name pos:line="102" pos:column="64">x</name></decl></param><op:operator pos:line="102" pos:column="65">,</op:operator> <param><decl><type><name pos:line="102" pos:column="67">int</name></type> <name pos:line="102" pos:column="71">y</name></decl></param><op:operator pos:line="102" pos:column="72">,</op:operator> <param><decl><type><name pos:line="102" pos:column="74">int</name></type> <name pos:line="102" pos:column="78">nWidth</name></decl></param><op:operator pos:line="102" pos:column="84">,</op:operator> <param><decl><type><name pos:line="102" pos:column="86">int</name></type> <name pos:line="102" pos:column="90">nHeight</name></decl></param><op:operator pos:line="102" pos:column="97">,</op:operator> <param><decl><type><name pos:line="102" pos:column="99">IntPtr</name></type> <name pos:line="102" pos:column="106">hSrcDC</name></decl></param><op:operator pos:line="102" pos:column="112">,</op:operator> <param><decl><type><name pos:line="102" pos:column="114">int</name></type> <name pos:line="102" pos:column="118">xSrc</name></decl></param><op:operator pos:line="102" pos:column="122">,</op:operator> <param><decl><type><name pos:line="102" pos:column="124">int</name></type> <name pos:line="102" pos:column="128">ySrc</name></decl></param><op:operator pos:line="102" pos:column="132">,</op:operator> <param><decl><type><name pos:line="102" pos:column="134">Int32</name></type> <name pos:line="102" pos:column="140">dwRop</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="104" pos:column="9">[<expr><call><name pos:line="104" pos:column="10">DllImport</name><argument_list pos:line="104" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="105" pos:column="9">internal</specifier> <specifier pos:line="105" pos:column="18">static</specifier> <specifier pos:line="105" pos:column="25">extern</specifier> <name pos:line="105" pos:column="32">int</name></type> <name pos:line="105" pos:column="36">GetWindowRgn</name><parameter_list pos:line="105" pos:column="48">(<param><decl><type><name pos:line="105" pos:column="49">IntPtr</name></type> <name pos:line="105" pos:column="56">hWnd</name></decl></param><op:operator pos:line="105" pos:column="60">,</op:operator> <param><decl><type><name pos:line="105" pos:column="62">IntPtr</name></type> <name pos:line="105" pos:column="69">hRgn</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="107" pos:column="9">[<expr><call><name pos:line="107" pos:column="10">DllImport</name><argument_list pos:line="107" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="107" pos:column="32">,</op:operator> <argument><expr><name pos:line="107" pos:column="34">SetLastError</name> <op:operator pos:line="107" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="107" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">internal</specifier> <specifier pos:line="108" pos:column="18">static</specifier> <specifier pos:line="108" pos:column="25">extern</specifier> <name pos:line="108" pos:column="32">bool</name></type> <name pos:line="108" pos:column="37">GetWindowRect</name><parameter_list pos:line="108" pos:column="50">(<param><decl><type><name pos:line="108" pos:column="51">IntPtr</name></type> <name pos:line="108" pos:column="58">hWnd</name></decl></param><op:operator pos:line="108" pos:column="62">,</op:operator> <param><decl><type><specifier pos:line="108" pos:column="64">ref</specifier> <name pos:line="108" pos:column="68">RECT</name></type> <name pos:line="108" pos:column="73">lpRect</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="110" pos:column="9">[<expr><call><name pos:line="110" pos:column="10">DllImport</name><argument_list pos:line="110" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="20">"gdi32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="111" pos:column="9">internal</specifier> <specifier pos:line="111" pos:column="18">static</specifier> <specifier pos:line="111" pos:column="25">extern</specifier> <name pos:line="111" pos:column="32">IntPtr</name></type> <name pos:line="111" pos:column="39">CreateRectRgn</name><parameter_list pos:line="111" pos:column="52">(<param><decl><type><name pos:line="111" pos:column="53">int</name></type> <name pos:line="111" pos:column="57">nLeftRect</name></decl></param><op:operator pos:line="111" pos:column="66">,</op:operator> <param><decl><type><name pos:line="111" pos:column="68">int</name></type> <name pos:line="111" pos:column="72">nTopRect</name></decl></param><op:operator pos:line="111" pos:column="80">,</op:operator> <param><decl><type><name pos:line="111" pos:column="82">int</name></type> <name pos:line="111" pos:column="86">nReghtRect</name></decl></param><op:operator pos:line="111" pos:column="96">,</op:operator> <param><decl><type><name pos:line="111" pos:column="98">int</name></type> <name pos:line="111" pos:column="102">nBottomRect</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="113" pos:column="9">[<expr><call><name pos:line="113" pos:column="10">DllImport</name><argument_list pos:line="113" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="20">"gdi32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">internal</specifier> <specifier pos:line="114" pos:column="18">static</specifier> <specifier pos:line="114" pos:column="25">extern</specifier> <name pos:line="114" pos:column="32">IntPtr</name></type> <name pos:line="114" pos:column="39">CreateRoundRectRgn</name><parameter_list pos:line="114" pos:column="57">(<param><decl><type><name pos:line="114" pos:column="58">int</name></type> <name pos:line="114" pos:column="62">nLeftRect</name></decl></param><op:operator pos:line="114" pos:column="71">,</op:operator> <param><decl><type><name pos:line="114" pos:column="73">int</name></type> <name pos:line="114" pos:column="77">nTopRect</name></decl></param><op:operator pos:line="114" pos:column="85">,</op:operator> <param><decl><type><name pos:line="114" pos:column="87">int</name></type> <name pos:line="114" pos:column="91">nReghtRect</name></decl></param><op:operator pos:line="114" pos:column="101">,</op:operator> <param><decl><type><name pos:line="114" pos:column="103">int</name></type> <name pos:line="114" pos:column="107">nBottomRect</name></decl></param><op:operator pos:line="114" pos:column="118">,</op:operator> <param><decl><type><name pos:line="114" pos:column="120">int</name></type> <name pos:line="114" pos:column="124">nWidthEllipse</name></decl></param><op:operator pos:line="114" pos:column="137">,</op:operator> <param><decl><type><name pos:line="114" pos:column="139">int</name></type> <name pos:line="114" pos:column="143">nHeightEllipse</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="116" pos:column="9">[<expr><call><name pos:line="116" pos:column="10">DllImport</name><argument_list pos:line="116" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="117" pos:column="9">internal</specifier> <specifier pos:line="117" pos:column="18">static</specifier> <specifier pos:line="117" pos:column="25">extern</specifier> <name pos:line="117" pos:column="32">ulong</name></type> <name pos:line="117" pos:column="38">GetWindowLongA</name><parameter_list pos:line="117" pos:column="52">(<param><decl><type><name pos:line="117" pos:column="53">IntPtr</name></type> <name pos:line="117" pos:column="60">hWnd</name></decl></param><op:operator pos:line="117" pos:column="64">,</op:operator> <param><decl><type><name pos:line="117" pos:column="66">int</name></type> <name pos:line="117" pos:column="70">nIndex</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="119" pos:column="9">[<expr><call><name pos:line="119" pos:column="10">DllImport</name><argument_list pos:line="119" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="119" pos:column="32">,</op:operator> <argument><expr><name pos:line="119" pos:column="34">SetLastError</name> <op:operator pos:line="119" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="119" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="120" pos:column="9">internal</specifier> <specifier pos:line="120" pos:column="18">static</specifier> <specifier pos:line="120" pos:column="25">extern</specifier> <name pos:line="120" pos:column="32">IntPtr</name></type> <name pos:line="120" pos:column="39">FindWindow</name><parameter_list pos:line="120" pos:column="49">(<param><decl><type><name pos:line="120" pos:column="50">string</name></type> <name pos:line="120" pos:column="57">lpClassName</name></decl></param><op:operator pos:line="120" pos:column="68">,</op:operator> <param><decl><type><name pos:line="120" pos:column="70">string</name></type> <name pos:line="120" pos:column="77">lpWindowName</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="122" pos:column="9">[<expr><call><name pos:line="122" pos:column="10">DllImport</name><argument_list pos:line="122" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="123" pos:column="9">static</specifier> <specifier pos:line="123" pos:column="16">extern</specifier> <name pos:line="123" pos:column="23">int</name></type> <name pos:line="123" pos:column="27">GetSystemMetrics</name><parameter_list pos:line="123" pos:column="43">(<param><decl><type><name pos:line="123" pos:column="44">int</name></type> <name pos:line="123" pos:column="48">smIndex</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="125" pos:column="9">[<expr><call><name pos:line="125" pos:column="10">DllImport</name><argument_list pos:line="125" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="125" pos:column="32">,</op:operator> <argument><expr><name pos:line="125" pos:column="34">EntryPoint</name> <op:operator pos:line="125" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="125" pos:column="47">"SendMessageA"</lit:literal></expr></argument><op:operator pos:line="125" pos:column="61">,</op:operator> <argument><expr><name pos:line="125" pos:column="63">CharSet</name> <op:operator pos:line="125" pos:column="71">=</op:operator> <name><name pos:line="125" pos:column="73">CharSet</name><op:operator pos:line="125" pos:column="80">.</op:operator><name pos:line="125" pos:column="81">Ansi</name></name></expr></argument><op:operator pos:line="125" pos:column="85">,</op:operator> <argument><expr><name pos:line="125" pos:column="87">SetLastError</name> <op:operator pos:line="125" pos:column="100">=</op:operator> <lit:literal type="boolean" pos:line="125" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">internal</specifier> <specifier pos:line="126" pos:column="18">static</specifier> <specifier pos:line="126" pos:column="25">extern</specifier> <name pos:line="126" pos:column="32">IntPtr</name></type> <name pos:line="126" pos:column="39">SendMessage</name><parameter_list pos:line="126" pos:column="50">(<param><decl><type><name pos:line="126" pos:column="51">IntPtr</name></type> <name pos:line="126" pos:column="58">hWnd</name></decl></param><op:operator pos:line="126" pos:column="62">,</op:operator> <param><decl><type><name pos:line="126" pos:column="64">Int32</name></type> <name pos:line="126" pos:column="70">msg</name></decl></param><op:operator pos:line="126" pos:column="73">,</op:operator> <param><decl><type><name pos:line="126" pos:column="75">IntPtr</name></type> <name pos:line="126" pos:column="82">wParam</name></decl></param><op:operator pos:line="126" pos:column="88">,</op:operator> <param><decl><type><name pos:line="126" pos:column="90">IntPtr</name></type> <name pos:line="126" pos:column="97">lParam</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="128" pos:column="9">[<expr><call><name pos:line="128" pos:column="10">DllImport</name><argument_list pos:line="128" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="129" pos:column="9">internal</specifier> <specifier pos:line="129" pos:column="18">static</specifier> <specifier pos:line="129" pos:column="25">extern</specifier> <name pos:line="129" pos:column="32">uint</name></type> <name pos:line="129" pos:column="37">MapVirtualKey</name><parameter_list pos:line="129" pos:column="50">(<param><decl><type><name pos:line="129" pos:column="51">uint</name></type> <name pos:line="129" pos:column="56">uCode</name></decl></param><op:operator pos:line="129" pos:column="61">,</op:operator> <param><decl><type><name pos:line="129" pos:column="63">uint</name></type> <name pos:line="129" pos:column="68">uMapType</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="131" pos:column="9">[<expr><call><name pos:line="131" pos:column="10">DllImport</name><argument_list pos:line="131" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="131" pos:column="32">,</op:operator> <argument><expr><name pos:line="131" pos:column="34">CharSet</name> <op:operator pos:line="131" pos:column="42">=</op:operator> <name><name pos:line="131" pos:column="44">CharSet</name><op:operator pos:line="131" pos:column="51">.</op:operator><name pos:line="131" pos:column="52">Unicode</name></name></expr></argument><op:operator pos:line="131" pos:column="59">,</op:operator> <argument><expr><name pos:line="131" pos:column="61">EntryPoint</name> <op:operator pos:line="131" pos:column="72">=</op:operator> <lit:literal type="string" pos:line="131" pos:column="74">"MapVirtualKeyExW"</lit:literal></expr></argument><op:operator pos:line="131" pos:column="92">,</op:operator> <argument><expr><name pos:line="131" pos:column="94">ExactSpelling</name> <op:operator pos:line="131" pos:column="108">=</op:operator> <lit:literal type="boolean" pos:line="131" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="132" pos:column="9">internal</specifier> <specifier pos:line="132" pos:column="18">static</specifier> <specifier pos:line="132" pos:column="25">extern</specifier> <name pos:line="132" pos:column="32">uint</name></type> <name pos:line="132" pos:column="37">MapVirtualKeyEx</name><parameter_list pos:line="132" pos:column="52">(<param><decl><type><name pos:line="132" pos:column="53">uint</name></type> <name pos:line="132" pos:column="58">uCode</name></decl></param><op:operator pos:line="132" pos:column="63">,</op:operator> <param><decl><type><name pos:line="132" pos:column="65">uint</name></type> <name pos:line="132" pos:column="70">uMapType</name></decl></param><op:operator pos:line="132" pos:column="78">,</op:operator> <param><decl><type><name pos:line="132" pos:column="80">IntPtr</name></type> <name pos:line="132" pos:column="87">dwhkl</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="134" pos:column="9">[<expr><call><name pos:line="134" pos:column="10">DllImport</name><argument_list pos:line="134" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="20">"user32"</lit:literal></expr></argument><op:operator pos:line="134" pos:column="28">,</op:operator> <argument><expr><name pos:line="134" pos:column="30">SetLastError</name> <op:operator pos:line="134" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="134" pos:column="45">true</lit:literal></expr></argument><op:operator pos:line="134" pos:column="49">,</op:operator> <argument><expr><name pos:line="134" pos:column="51">CharSet</name> <op:operator pos:line="134" pos:column="59">=</op:operator> <name><name pos:line="134" pos:column="61">CharSet</name><op:operator pos:line="134" pos:column="68">.</op:operator><name pos:line="134" pos:column="69">Unicode</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="135" pos:column="9">internal</specifier> <specifier pos:line="135" pos:column="18">static</specifier> <specifier pos:line="135" pos:column="25">extern</specifier> <name pos:line="135" pos:column="32">int</name></type> <name pos:line="135" pos:column="36">GetKeyNameText</name><parameter_list pos:line="135" pos:column="50">(<param><decl><type><name pos:line="135" pos:column="51">uint</name></type> <name pos:line="135" pos:column="56">lParam</name></decl></param><op:operator pos:line="135" pos:column="62">,</op:operator> <param><decl><type><name pos:line="135" pos:column="64">StringBuilder</name></type> <name pos:line="135" pos:column="78">lpString</name></decl></param><op:operator pos:line="135" pos:column="86">,</op:operator> <param><decl><type><name pos:line="135" pos:column="88">int</name></type> <name pos:line="135" pos:column="92">nSize</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="137" pos:column="9">[<expr><call><name pos:line="137" pos:column="10">DllImport</name><argument_list pos:line="137" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="138" pos:column="9">internal</specifier> <specifier pos:line="138" pos:column="18">static</specifier> <specifier pos:line="138" pos:column="25">extern</specifier> <name pos:line="138" pos:column="32">IntPtr</name></type> <name pos:line="138" pos:column="39">GetKeyboardLayout</name><parameter_list pos:line="138" pos:column="56">(<param><decl><type><name pos:line="138" pos:column="57">uint</name></type> <name pos:line="138" pos:column="62">idThread</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute pos:line="140" pos:column="9">[<expr><call><name pos:line="140" pos:column="10">DllImport</name><argument_list pos:line="140" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="140" pos:column="32">,</op:operator> <argument><expr><name pos:line="140" pos:column="34">EntryPoint</name> <op:operator pos:line="140" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="140" pos:column="47">"SendMessageA"</lit:literal></expr></argument><op:operator pos:line="140" pos:column="61">,</op:operator> <argument><expr><name pos:line="140" pos:column="63">CharSet</name> <op:operator pos:line="140" pos:column="71">=</op:operator> <name><name pos:line="140" pos:column="73">CharSet</name><op:operator pos:line="140" pos:column="80">.</op:operator><name pos:line="140" pos:column="81">Ansi</name></name></expr></argument><op:operator pos:line="140" pos:column="85">,</op:operator> <argument><expr><name pos:line="140" pos:column="87">SetLastError</name> <op:operator pos:line="140" pos:column="100">=</op:operator> <lit:literal type="boolean" pos:line="140" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="141" pos:column="9">internal</specifier> <specifier pos:line="141" pos:column="18">static</specifier> <specifier pos:line="141" pos:column="25">extern</specifier> <name pos:line="141" pos:column="32">Int32</name></type> <name pos:line="141" pos:column="38">SendMessage</name><parameter_list pos:line="141" pos:column="49">(<param><decl><type><name pos:line="141" pos:column="50">IntPtr</name></type> <name pos:line="141" pos:column="57">hWnd</name></decl></param><op:operator pos:line="141" pos:column="61">,</op:operator> <param><decl><type><name pos:line="141" pos:column="63">Int32</name></type> <name pos:line="141" pos:column="69">msg</name></decl></param><op:operator pos:line="141" pos:column="72">,</op:operator> <param><decl><type><name pos:line="141" pos:column="74">Int32</name></type> <name pos:line="141" pos:column="80">wParam</name></decl></param><op:operator pos:line="141" pos:column="86">,</op:operator> <param><decl><type><name pos:line="141" pos:column="88">IntPtr</name></type> <name pos:line="141" pos:column="95">lParam</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// The GetCursorInfo function retrieves information about the global cursor.</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="pci"&gt;Pointer to a CURSORINFO structure that receives the information. Note that you must set CURSORINFO.cbSize to sizeof(CURSORINFO) before calling this function.&lt;/param&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// If the function succeeds, the return value is nonzero.</comment>
        <comment type="line" pos:line="149" pos:column="9">/// If the function fails, the return value is zero. To get extended error information, call GetLastError.</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;/returns&gt;</comment>
        <function_decl><type><attribute pos:line="151" pos:column="9">[<expr><call><name pos:line="151" pos:column="10">DllImport</name><argument_list pos:line="151" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="152" pos:column="9">static</specifier> <specifier pos:line="152" pos:column="16">extern</specifier> <name pos:line="152" pos:column="23">bool</name></type> <name pos:line="152" pos:column="28">GetCursorInfo</name><parameter_list pos:line="152" pos:column="41">(<param><decl><type><specifier pos:line="152" pos:column="42">out</specifier> <name pos:line="152" pos:column="46">CURSORINFO</name></type> <name pos:line="152" pos:column="57">pci</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// The GetIconInfo function retrieves information about the specified icon or cursor.</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;param name="hIcon"&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// Handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values.</comment>
        <comment type="line" pos:line="159" pos:column="9">///     IDC_APPSTARTING     Standard arrow and small hourglass cursor.</comment>
        <comment type="line" pos:line="160" pos:column="9">///     IDC_ARROW           Standard arrow cursor.</comment>
        <comment type="line" pos:line="161" pos:column="9">///     IDC_CROSS           Crosshair cursor.</comment>
        <comment type="line" pos:line="162" pos:column="9">///     IDC_HAND            Windows 98/Me, Windows 2000/XP: Hand cursor.</comment>
        <comment type="line" pos:line="163" pos:column="9">///     IDC_HELP            Arrow and question mark cursor.</comment>
        <comment type="line" pos:line="164" pos:column="9">///     IDC_IBEAM           I-beam cursor.</comment>
        <comment type="line" pos:line="165" pos:column="9">///     IDC_NO              Slashed circle cursor.</comment>
        <comment type="line" pos:line="166" pos:column="9">///     IDC_SIZEALL         Four-pointed arrow cursor pointing north, south, east, and west.</comment>
        <comment type="line" pos:line="167" pos:column="9">///     IDC_SIZENESW        Double-pointed arrow cursor pointing northeast and southwest.</comment>
        <comment type="line" pos:line="168" pos:column="9">///     IDC_SIZENS          Double-pointed arrow cursor pointing north and south.</comment>
        <comment type="line" pos:line="169" pos:column="9">///     IDC_SIZENWSE        Double-pointed arrow cursor pointing northwest and southeast.</comment>
        <comment type="line" pos:line="170" pos:column="9">///     IDC_SIZEWE          Double-pointed arrow cursor pointing west and east.</comment>
        <comment type="line" pos:line="171" pos:column="9">///     IDC_UPARROW         Vertical arrow cursor.</comment>
        <comment type="line" pos:line="172" pos:column="9">///     IDC_WAIT            Hourglass cursor.</comment>
        <comment type="line" pos:line="173" pos:column="9">///     IDI_APPLICATION     Application icon.</comment>
        <comment type="line" pos:line="174" pos:column="9">///     IDI_ASTERISK        Asterisk icon.</comment>
        <comment type="line" pos:line="175" pos:column="9">///     IDI_EXCLAMATION     Exclamation point icon.</comment>
        <comment type="line" pos:line="176" pos:column="9">///     IDI_HAND            Stop sign icon.</comment>
        <comment type="line" pos:line="177" pos:column="9">///     IDI_QUESTION        Question-mark icon.</comment>
        <comment type="line" pos:line="178" pos:column="9">///     IDI_WINLOGO         Windows logo icon. Windows XP: Application icon.</comment>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;/param&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;param name="piconinfo"&gt;Pointer to an ICONINFO structure. The function fills in the structure's members.&lt;/param&gt;</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// If the function succeeds, the return value is nonzero and the function fills in the members of the specified ICONINFO structure.</comment>
        <comment type="line" pos:line="183" pos:column="9">/// If the function fails, the return value is zero. To get extended error information, call GetLastError.</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// GetIconInfo creates bitmaps for the hbmMask and hbmColor members of ICONINFO. The calling application must manage these bitmaps and delete them when they are no longer necessary.</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><attribute pos:line="188" pos:column="9">[<expr><call><name pos:line="188" pos:column="10">DllImport</name><argument_list pos:line="188" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="189" pos:column="9">private</specifier> <specifier pos:line="189" pos:column="17">static</specifier> <specifier pos:line="189" pos:column="24">extern</specifier> <name pos:line="189" pos:column="31">bool</name></type> <name pos:line="189" pos:column="36">GetIconInfo</name><parameter_list pos:line="189" pos:column="47">(<param><decl><type><name pos:line="189" pos:column="48">IntPtr</name></type> <name pos:line="189" pos:column="55">hIcon</name></decl></param><op:operator pos:line="189" pos:column="60">,</op:operator> <param><decl><type><specifier pos:line="189" pos:column="62">out</specifier> <name pos:line="189" pos:column="66">ICONINFO</name></type> <name pos:line="189" pos:column="75">piconinfo</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="191" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// The CopyIcon function copies the specified icon from another module to the current module.</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;param name="hIcon"&gt; Handle to the icon to be copied.&lt;/param&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// If the function succeeds, the return value is a handle to the duplicate icon.</comment>
        <comment type="line" pos:line="197" pos:column="9">/// If the function fails, the return value is NULL. To get extended error information, call GetLastError.</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// The CopyIcon function enables an application or DLL to get its own handle to an icon owned by another module. If the other module is freed, the application icon will still be able to use the icon.</comment>
        <comment type="line" pos:line="201" pos:column="9">/// Before closing, an application must call the DestroyIcon function to free any system resources associated with the icon.</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><attribute pos:line="203" pos:column="9">[<expr><call><name pos:line="203" pos:column="10">DllImport</name><argument_list pos:line="203" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="20">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="204" pos:column="9">static</specifier> <specifier pos:line="204" pos:column="16">extern</specifier> <name pos:line="204" pos:column="23">IntPtr</name></type> <name pos:line="204" pos:column="30">CopyIcon</name><parameter_list pos:line="204" pos:column="38">(<param><decl><type><name pos:line="204" pos:column="39">IntPtr</name></type> <name pos:line="204" pos:column="46">hIcon</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="206" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// &lt;param name="hDc"&gt;A handle to a logical pen, brush, font, bitmap, region, or palette.&lt;/param&gt;</comment>
        <comment type="line" pos:line="210" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="211" pos:column="9">/// If the function succeeds, the return value is nonzero.</comment>
        <comment type="line" pos:line="212" pos:column="9">/// If the specified handle is not valid or is currently selected into a DC, the return value is zero.</comment>
        <comment type="line" pos:line="213" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="214" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Do not delete a drawing object (pen or brush) while it is still selected into a DC.</comment>
        <comment type="line" pos:line="216" pos:column="9">/// When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><attribute pos:line="218" pos:column="9">[<expr><call><name pos:line="218" pos:column="10">DllImport</name><argument_list pos:line="218" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="20">"gdi32.dll"</lit:literal></expr></argument><op:operator pos:line="218" pos:column="31">,</op:operator> <argument><expr><name pos:line="218" pos:column="33">EntryPoint</name> <op:operator pos:line="218" pos:column="44">=</op:operator> <lit:literal type="string" pos:line="218" pos:column="46">"DeleteObject"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="219" pos:column="9">private</specifier> <specifier pos:line="219" pos:column="17">static</specifier> <specifier pos:line="219" pos:column="24">extern</specifier> <name pos:line="219" pos:column="31">IntPtr</name></type> <name pos:line="219" pos:column="38">DeleteObject</name><parameter_list pos:line="219" pos:column="50">(<param><decl><type><name pos:line="219" pos:column="51">IntPtr</name></type> <name pos:line="219" pos:column="58">hDc</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="221" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">/// Destroys an icon and frees any memory the icon occupied. </comment>
        <comment type="line" pos:line="223" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="224" pos:column="9">/// &lt;param name="hIcon"&gt;Handle to the icon to be destroyed. The icon must not be in use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// If the function succeeds, the return value is nonzero.</comment>
        <comment type="line" pos:line="227" pos:column="9">/// If the function fails, the return value is zero. To get extended error information, call GetLastError.</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// It is only necessary to call DestroyIcon for icons and cursors created with the following functions: CreateIconFromResourceEx (if called without the LR_SHARED flag), CreateIconIndirect, and CopyIcon. Do not use this function to destroy a shared icon. A shared icon is valid as long as the module from which it was loaded remains in memory. The following functions obtain a shared icon.</comment>
        <comment type="line" pos:line="231" pos:column="9">///     LoadIcon</comment>
        <comment type="line" pos:line="232" pos:column="9">///     LoadImage (if you use the LR_SHARED flag)</comment>
        <comment type="line" pos:line="233" pos:column="9">///     CopyImage (if you use the LR_COPYRETURNORG flag and the hImage parameter is a shared icon)</comment>
        <comment type="line" pos:line="234" pos:column="9">///     CreateIconFromResource</comment>
        <comment type="line" pos:line="235" pos:column="9">///     CreateIconFromResourceEx (if you use the LR_SHARED flag)</comment>
        <comment type="line" pos:line="236" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><attribute pos:line="237" pos:column="9">[<expr><call><name pos:line="237" pos:column="10">DllImport</name><argument_list pos:line="237" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="20">"user32.dll"</lit:literal></expr></argument><op:operator pos:line="237" pos:column="32">,</op:operator> <argument><expr><name pos:line="237" pos:column="34">SetLastError</name> <op:operator pos:line="237" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="237" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="238" pos:column="9">[<target pos:line="238" pos:column="10">return</target>: <expr><call><name pos:line="238" pos:column="18">MarshalAs</name><argument_list pos:line="238" pos:column="27">(<argument><expr><name><name pos:line="238" pos:column="28">UnmanagedType</name><op:operator pos:line="238" pos:column="41">.</op:operator><name pos:line="238" pos:column="42">Bool</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="239" pos:column="9">static</specifier> <specifier pos:line="239" pos:column="16">extern</specifier> <name pos:line="239" pos:column="23">bool</name></type> <name pos:line="239" pos:column="28">DestroyIcon</name><parameter_list pos:line="239" pos:column="39">(<param><decl><type><name pos:line="239" pos:column="40">IntPtr</name></type> <name pos:line="239" pos:column="47">hIcon</name></decl></param>)</parameter_list>;</function_decl>





        <decl_stmt><decl><type><specifier pos:line="245" pos:column="9">private</specifier> <name pos:line="245" pos:column="17">const</name> <name pos:line="245" pos:column="23">int</name></type> <name pos:line="245" pos:column="27">SRCCOPY</name> =<init pos:line="245" pos:column="36"> <expr><lit:literal type="number" pos:line="245" pos:column="37">0x00CC0020</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="246" pos:column="9">private</specifier> <name pos:line="246" pos:column="17">const</name> <name pos:line="246" pos:column="23">int</name></type> <name pos:line="246" pos:column="27">CAPTUREBLT</name> =<init pos:line="246" pos:column="39"> <expr><lit:literal type="number" pos:line="246" pos:column="40">1073741824</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="247" pos:column="9">internal</specifier> <name pos:line="247" pos:column="18">const</name> <name pos:line="247" pos:column="24">int</name></type> <name pos:line="247" pos:column="28">ECM_FIRST</name> =<init pos:line="247" pos:column="39"> <expr><lit:literal type="number" pos:line="247" pos:column="40">0x1500</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="248" pos:column="9">private</specifier> <name pos:line="248" pos:column="17">const</name> <name pos:line="248" pos:column="23">int</name></type> <name pos:line="248" pos:column="27">GWL_STYLE</name> =<init pos:line="248" pos:column="38"> <expr><op:operator pos:line="248" pos:column="39">-</op:operator><lit:literal type="number" pos:line="248" pos:column="40">16</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="249" pos:column="9">private</specifier> <name pos:line="249" pos:column="17">const</name> <name pos:line="249" pos:column="23">ulong</name></type> <name pos:line="249" pos:column="29">WS_VISIBLE</name> =<init pos:line="249" pos:column="41"> <expr><lit:literal type="number" pos:line="249" pos:column="42">0x10000000L</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="250" pos:column="9">private</specifier> <name pos:line="250" pos:column="17">const</name> <name pos:line="250" pos:column="23">ulong</name></type> <name pos:line="250" pos:column="29">WS_BORDER</name> =<init pos:line="250" pos:column="40"> <expr><lit:literal type="number" pos:line="250" pos:column="41">0x00800000L</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="251" pos:column="9">private</specifier> <name pos:line="251" pos:column="17">const</name> <name pos:line="251" pos:column="23">ulong</name></type> <name pos:line="251" pos:column="29">TARGETWINDOW</name> =<init pos:line="251" pos:column="43"> <expr><name pos:line="251" pos:column="44">WS_BORDER</name> <op:operator pos:line="251" pos:column="54">|</op:operator> <name pos:line="251" pos:column="56">WS_VISIBLE</name></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="252" pos:column="9">//private const Int32 CURSOR_SHOWING = 0x00000001;</comment>

        <decl_stmt><decl><type><specifier pos:line="254" pos:column="9">internal</specifier> <name pos:line="254" pos:column="18">const</name> <name pos:line="254" pos:column="24">Int32</name></type> <name pos:line="254" pos:column="30">WM_USER</name> =<init pos:line="254" pos:column="39"> <expr><lit:literal type="number" pos:line="254" pos:column="40">0x0400</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="256" pos:column="9">internal</specifier> <name pos:line="256" pos:column="18">const</name> <name pos:line="256" pos:column="24">Int32</name></type> <name pos:line="256" pos:column="30">HKM_SETHOTKEY</name> =<init pos:line="256" pos:column="45"> <expr><op:operator pos:line="256" pos:column="46">(</op:operator><name pos:line="256" pos:column="47">WM_USER</name> <op:operator pos:line="256" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="256" pos:column="57">1</lit:literal><op:operator pos:line="256" pos:column="58">)</op:operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="257" pos:column="9">internal</specifier> <name pos:line="257" pos:column="18">const</name> <name pos:line="257" pos:column="24">Int32</name></type> <name pos:line="257" pos:column="30">HKM_GETHOTKEY</name> =<init pos:line="257" pos:column="45"> <expr><op:operator pos:line="257" pos:column="46">(</op:operator><name pos:line="257" pos:column="47">WM_USER</name> <op:operator pos:line="257" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="257" pos:column="57">2</lit:literal><op:operator pos:line="257" pos:column="58">)</op:operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="258" pos:column="9">internal</specifier> <name pos:line="258" pos:column="18">const</name> <name pos:line="258" pos:column="24">Int32</name></type> <name pos:line="258" pos:column="30">HKM_SETRULES</name> =<init pos:line="258" pos:column="44"> <expr><op:operator pos:line="258" pos:column="45">(</op:operator><name pos:line="258" pos:column="46">WM_USER</name> <op:operator pos:line="258" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="258" pos:column="56">3</lit:literal><op:operator pos:line="258" pos:column="57">)</op:operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="259" pos:column="9">internal</specifier> <name pos:line="259" pos:column="18">const</name> <name pos:line="259" pos:column="24">Int32</name></type> <name pos:line="259" pos:column="30">HOTKEYF_SHIFT</name> =<init pos:line="259" pos:column="45"> <expr><lit:literal type="number" pos:line="259" pos:column="46">0x01</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="260" pos:column="9">internal</specifier> <name pos:line="260" pos:column="18">const</name> <name pos:line="260" pos:column="24">Int32</name></type> <name pos:line="260" pos:column="30">HOTKEYF_CONTROL</name> =<init pos:line="260" pos:column="47"> <expr><lit:literal type="number" pos:line="260" pos:column="48">0x02</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="261" pos:column="9">internal</specifier> <name pos:line="261" pos:column="18">const</name> <name pos:line="261" pos:column="24">Int32</name></type> <name pos:line="261" pos:column="30">HOTKEYF_ALT</name> =<init pos:line="261" pos:column="43"> <expr><lit:literal type="number" pos:line="261" pos:column="44">0x04</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="262" pos:column="9">internal</specifier> <name pos:line="262" pos:column="18">const</name> <name pos:line="262" pos:column="24">Int32</name></type> <name pos:line="262" pos:column="30">HOTKEYF_EXT</name> =<init pos:line="262" pos:column="43"> <expr><lit:literal type="number" pos:line="262" pos:column="44">0x08</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="263" pos:column="9">internal</specifier> <name pos:line="263" pos:column="18">const</name> <name pos:line="263" pos:column="24">String</name></type> <name pos:line="263" pos:column="31">HOTKEY_CLASS</name> =<init pos:line="263" pos:column="45"> <expr><lit:literal type="string" pos:line="263" pos:column="46">"msctls_hotkey32"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="265" pos:column="9">internal</specifier> <name pos:line="265" pos:column="18">const</name> <name pos:line="265" pos:column="24">Int32</name></type> <name pos:line="265" pos:column="30">MAPVK_VK_TO_VSC</name> =<init pos:line="265" pos:column="47"> <expr><lit:literal type="number" pos:line="265" pos:column="48">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="266" pos:column="9">internal</specifier> <name pos:line="266" pos:column="18">const</name> <name pos:line="266" pos:column="24">Int32</name></type> <name pos:line="266" pos:column="30">MAPVK_VSC_TO_VK</name> =<init pos:line="266" pos:column="47"> <expr><lit:literal type="number" pos:line="266" pos:column="48">1</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="267" pos:column="9">internal</specifier> <name pos:line="267" pos:column="18">const</name> <name pos:line="267" pos:column="24">Int32</name></type> <name pos:line="267" pos:column="30">MAPVK_VK_TO_CHAR</name> =<init pos:line="267" pos:column="48"> <expr><lit:literal type="number" pos:line="267" pos:column="49">2</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="268" pos:column="9">internal</specifier> <name pos:line="268" pos:column="18">const</name> <name pos:line="268" pos:column="24">Int32</name></type> <name pos:line="268" pos:column="30">MAPVK_VSC_TO_VK_EX</name> =<init pos:line="268" pos:column="50"> <expr><lit:literal type="number" pos:line="268" pos:column="51">3</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="269" pos:column="9">internal</specifier> <name pos:line="269" pos:column="18">const</name> <name pos:line="269" pos:column="24">uint</name></type> <name pos:line="269" pos:column="29">KLF_NOTELLSHELL</name> =<init pos:line="269" pos:column="46"> <expr><lit:literal type="number" pos:line="269" pos:column="47">0x00000080</lit:literal></expr></init></decl>;</decl_stmt>


        <enum><specifier pos:line="272" pos:column="9">public</specifier> enum <name pos:line="272" pos:column="21">InvalidHotKeyModifiers</name>
        <block pos:line="273" pos:column="9">{
            <expr><name pos:line="274" pos:column="13">HKCOMB_NONE</name> <op:operator pos:line="274" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="274" pos:column="27">1</lit:literal></expr><op:operator pos:line="274" pos:column="28">,</op:operator>
            <expr><name pos:line="275" pos:column="13">HKCOMB_S</name> <op:operator pos:line="275" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="275" pos:column="24">2</lit:literal></expr><op:operator pos:line="275" pos:column="25">,</op:operator>
            <expr><name pos:line="276" pos:column="13">HKCOMB_C</name> <op:operator pos:line="276" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="276" pos:column="24">4</lit:literal></expr><op:operator pos:line="276" pos:column="25">,</op:operator>
            <expr><name pos:line="277" pos:column="13">HKCOMB_A</name> <op:operator pos:line="277" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="277" pos:column="24">8</lit:literal></expr><op:operator pos:line="277" pos:column="25">,</op:operator>
            <expr><name pos:line="278" pos:column="13">HKCOMB_SC</name> <op:operator pos:line="278" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="278" pos:column="25">16</lit:literal></expr><op:operator pos:line="278" pos:column="27">,</op:operator>
            <expr><name pos:line="279" pos:column="13">HKCOMB_SA</name> <op:operator pos:line="279" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="279" pos:column="25">32</lit:literal></expr><op:operator pos:line="279" pos:column="27">,</op:operator>
            <expr><name pos:line="280" pos:column="13">HKCOMB_CA</name> <op:operator pos:line="280" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="280" pos:column="25">64</lit:literal></expr><op:operator pos:line="280" pos:column="27">,</op:operator>
            <expr><name pos:line="281" pos:column="13">HKCOMB_SCA</name> <op:operator pos:line="281" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="281" pos:column="26">128</lit:literal></expr>
        }</block></enum>


        <struct><attribute pos:line="285" pos:column="9">[<expr><call><name pos:line="285" pos:column="10">StructLayout</name><argument_list pos:line="285" pos:column="22">(<argument><expr><name><name pos:line="285" pos:column="23">LayoutKind</name><op:operator pos:line="285" pos:column="33">.</op:operator><name pos:line="285" pos:column="34">Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="286" pos:column="9">public</specifier> struct <name pos:line="286" pos:column="23">RECT</name>
        <block pos:line="287" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="288" pos:column="13">public</specifier> <name pos:line="288" pos:column="20">int</name></type> <name pos:line="288" pos:column="24">Left</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="289" pos:column="13">public</specifier> <name pos:line="289" pos:column="20">int</name></type> <name pos:line="289" pos:column="24">Top</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="290" pos:column="13">public</specifier> <name pos:line="290" pos:column="20">int</name></type> <name pos:line="290" pos:column="24">Right</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="291" pos:column="13">public</specifier> <name pos:line="291" pos:column="20">int</name></type> <name pos:line="291" pos:column="24">Bottom</name></decl>;</decl_stmt>


            <constructor><specifier pos:line="294" pos:column="13">public</specifier> <name pos:line="294" pos:column="20">RECT</name><parameter_list pos:line="294" pos:column="24">(<param><decl><type><name pos:line="294" pos:column="25">int</name></type> <name pos:line="294" pos:column="29">left</name></decl></param><op:operator pos:line="294" pos:column="33">,</op:operator> <param><decl><type><name pos:line="294" pos:column="35">int</name></type> <name pos:line="294" pos:column="39">top</name></decl></param><op:operator pos:line="294" pos:column="42">,</op:operator> <param><decl><type><name pos:line="294" pos:column="44">int</name></type> <name pos:line="294" pos:column="48">right</name></decl></param><op:operator pos:line="294" pos:column="53">,</op:operator> <param><decl><type><name pos:line="294" pos:column="55">int</name></type> <name pos:line="294" pos:column="59">bottom</name></decl></param>)</parameter_list>
            <block pos:line="295" pos:column="13">{
                <expr_stmt><expr><name pos:line="296" pos:column="17">Left</name> <op:operator pos:line="296" pos:column="22">=</op:operator> <name pos:line="296" pos:column="24">left</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="297" pos:column="17">Top</name> <op:operator pos:line="297" pos:column="21">=</op:operator> <name pos:line="297" pos:column="23">top</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="298" pos:column="17">Right</name> <op:operator pos:line="298" pos:column="23">=</op:operator> <name pos:line="298" pos:column="25">right</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="299" pos:column="17">Bottom</name> <op:operator pos:line="299" pos:column="24">=</op:operator> <name pos:line="299" pos:column="26">bottom</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="302" pos:column="13">public</specifier> <name pos:line="302" pos:column="20">Rectangle</name></type> <name pos:line="302" pos:column="30">ToRectangle</name><parameter_list pos:line="302" pos:column="41">()</parameter_list>
            <block pos:line="303" pos:column="13">{
                <return pos:line="304" pos:column="17">return <expr><op:operator pos:line="304" pos:column="24">new</op:operator> <call><name pos:line="304" pos:column="28">Rectangle</name><argument_list pos:line="304" pos:column="37">(<argument><expr><name pos:line="304" pos:column="38">Left</name></expr></argument><op:operator pos:line="304" pos:column="42">,</op:operator> <argument><expr><name pos:line="304" pos:column="44">Top</name></expr></argument><op:operator pos:line="304" pos:column="47">,</op:operator> <argument><expr><name pos:line="304" pos:column="49">Right</name> <op:operator pos:line="304" pos:column="55">-</op:operator> <name pos:line="304" pos:column="57">Left</name></expr></argument><op:operator pos:line="304" pos:column="61">,</op:operator> <argument><expr><name pos:line="304" pos:column="63">Bottom</name> <op:operator pos:line="304" pos:column="70">-</op:operator> <name pos:line="304" pos:column="72">Top</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></struct>


        <struct><attribute pos:line="309" pos:column="9">[<expr><call><name pos:line="309" pos:column="10">StructLayout</name><argument_list pos:line="309" pos:column="22">(<argument><expr><name><name pos:line="309" pos:column="23">LayoutKind</name><op:operator pos:line="309" pos:column="33">.</op:operator><name pos:line="309" pos:column="34">Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="310" pos:column="9">internal</specifier> struct <name pos:line="310" pos:column="25">POINT</name>
        <block pos:line="311" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="312" pos:column="13">public</specifier> <name pos:line="312" pos:column="20">int</name></type> <name pos:line="312" pos:column="24">X</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="313" pos:column="13">public</specifier> <name pos:line="313" pos:column="20">int</name></type> <name pos:line="313" pos:column="24">Y</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="315" pos:column="13">public</specifier> <name pos:line="315" pos:column="20">POINT</name><parameter_list pos:line="315" pos:column="25">(<param><decl><type><name pos:line="315" pos:column="26">int</name></type> <name pos:line="315" pos:column="30">x</name></decl></param><op:operator pos:line="315" pos:column="31">,</op:operator> <param><decl><type><name pos:line="315" pos:column="33">int</name></type> <name pos:line="315" pos:column="37">y</name></decl></param>)</parameter_list>
            <block pos:line="316" pos:column="13">{
                <expr_stmt><expr><name pos:line="317" pos:column="17">X</name> <op:operator pos:line="317" pos:column="19">=</op:operator> <name pos:line="317" pos:column="21">x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="318" pos:column="17">Y</name> <op:operator pos:line="318" pos:column="19">=</op:operator> <name pos:line="318" pos:column="21">y</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="321" pos:column="13">public</specifier> <specifier pos:line="321" pos:column="20">static</specifier> <specifier pos:line="321" pos:column="27">explicit</specifier></type> <name pos:line="321" pos:column="36">operator POINT</name><parameter_list pos:line="321" pos:column="50">(<param><decl><type><name pos:line="321" pos:column="51">Point</name></type> <name pos:line="321" pos:column="57">pt</name></decl></param>)</parameter_list>
            <block pos:line="322" pos:column="13">{
                <return pos:line="323" pos:column="17">return <expr><op:operator pos:line="323" pos:column="24">new</op:operator> <call><name pos:line="323" pos:column="28">POINT</name><argument_list pos:line="323" pos:column="33">(<argument><expr><name><name pos:line="323" pos:column="34">pt</name><op:operator pos:line="323" pos:column="36">.</op:operator><name pos:line="323" pos:column="37">X</name></name></expr></argument><op:operator pos:line="323" pos:column="38">,</op:operator> <argument><expr><name><name pos:line="323" pos:column="40">pt</name><op:operator pos:line="323" pos:column="42">.</op:operator><name pos:line="323" pos:column="43">Y</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></struct>

        <comment type="line" pos:line="327" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="328" pos:column="9">/// Contains global cursor information.</comment>
        <comment type="line" pos:line="329" pos:column="9">/// &lt;/summary&gt;</comment>
        <struct><attribute pos:line="330" pos:column="9">[<expr><call><name pos:line="330" pos:column="10">StructLayout</name><argument_list pos:line="330" pos:column="22">(<argument><expr><name><name pos:line="330" pos:column="23">LayoutKind</name><op:operator pos:line="330" pos:column="33">.</op:operator><name pos:line="330" pos:column="34">Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        struct <name pos:line="331" pos:column="16">CURSORINFO</name>
        <block pos:line="332" pos:column="9">{
            <comment type="line" pos:line="333" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="334" pos:column="13">/// Specifies the size, in bytes, of the structure. The caller must set this to Marshal.SizeOf(typeof(CURSORINFO)).</comment>
            <comment type="line" pos:line="335" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="336" pos:column="13">public</specifier> <name pos:line="336" pos:column="20">Int32</name></type> <name pos:line="336" pos:column="26">cbSize</name></decl>;</decl_stmt>
            <comment type="line" pos:line="337" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="338" pos:column="13">/// Specifies the cursor state. This parameter can be one of the following values.</comment>
            <comment type="line" pos:line="339" pos:column="13">///     0               The cursor is hidden.</comment>
            <comment type="line" pos:line="340" pos:column="13">///     CURSOR_SHOWING  The cursor is showing.</comment>
            <comment type="line" pos:line="341" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="342" pos:column="13">public</specifier> <name pos:line="342" pos:column="20">Int32</name></type> <name pos:line="342" pos:column="26">flags</name></decl>;</decl_stmt>
            <comment type="line" pos:line="343" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="344" pos:column="13">/// Handle to the cursor.</comment>
            <comment type="line" pos:line="345" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="346" pos:column="13">public</specifier> <name pos:line="346" pos:column="20">IntPtr</name></type> <name pos:line="346" pos:column="27">hCursor</name></decl>;</decl_stmt>
            <comment type="line" pos:line="347" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="348" pos:column="13">/// A POINT structure that receives the screen coordinates of the cursor.</comment>
            <comment type="line" pos:line="349" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="350" pos:column="13">public</specifier> <name pos:line="350" pos:column="20">POINT</name></type> <name pos:line="350" pos:column="26">ptScreenPos</name></decl>;</decl_stmt>
        }</block></struct>

        <comment type="line" pos:line="353" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="354" pos:column="9">/// Contains information about an icon or a cursor.</comment>
        <comment type="line" pos:line="355" pos:column="9">/// &lt;/summary&gt;</comment>
        <struct><attribute pos:line="356" pos:column="9">[<expr><call><name pos:line="356" pos:column="10">StructLayout</name><argument_list pos:line="356" pos:column="22">(<argument><expr><name><name pos:line="356" pos:column="23">LayoutKind</name><op:operator pos:line="356" pos:column="33">.</op:operator><name pos:line="356" pos:column="34">Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        struct <name pos:line="357" pos:column="16">ICONINFO</name>
        <block pos:line="358" pos:column="9">{
            <comment type="line" pos:line="359" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="360" pos:column="13">/// Specifies whether this structure defines an icon or a cursor. A value of TRUE specifies an icon; FALSE specifies a cursor.</comment>
            <comment type="line" pos:line="361" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="362" pos:column="13">public</specifier> <name pos:line="362" pos:column="20">bool</name></type> <name pos:line="362" pos:column="25">fIcon</name></decl>;</decl_stmt>
            <comment type="line" pos:line="363" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="364" pos:column="13">/// Specifies the x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</comment>
            <comment type="line" pos:line="365" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="366" pos:column="13">public</specifier> <name pos:line="366" pos:column="20">Int32</name></type> <name pos:line="366" pos:column="26">xHotspot</name></decl>;</decl_stmt>
            <comment type="line" pos:line="367" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="368" pos:column="13">/// Specifies the y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</comment>
            <comment type="line" pos:line="369" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="370" pos:column="13">public</specifier> <name pos:line="370" pos:column="20">Int32</name></type> <name pos:line="370" pos:column="26">yHotspot</name></decl>;</decl_stmt>
            <comment type="line" pos:line="371" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="372" pos:column="13">/// Specifies the icon bitmask bitmap. If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND bitmask and the lower half is the icon XOR bitmask. Under this condition, the height should be an even multiple of two. If this structure defines a color icon, this mask only defines the AND bitmask of the icon.</comment>
            <comment type="line" pos:line="373" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="374" pos:column="13">public</specifier> <name pos:line="374" pos:column="20">IntPtr</name></type> <name pos:line="374" pos:column="27">hbmMask</name></decl>;</decl_stmt>
            <comment type="line" pos:line="375" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="376" pos:column="13">/// Handle to the icon color bitmap. This member can be optional if this structure defines a black and white icon. The AND bitmask of hbmMask is applied with the SRCAND flag to the destination; subsequently, the color bitmap is applied (using XOR) to the destination by using the SRCINVERT flag.</comment>
            <comment type="line" pos:line="377" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="378" pos:column="13">public</specifier> <name pos:line="378" pos:column="20">IntPtr</name></type> <name pos:line="378" pos:column="27">hbmColor</name></decl>;</decl_stmt>
        }</block></struct>


        <comment type="line" pos:line="382" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="383" pos:column="9">/// Gets a segment of the desktop as an image.</comment>
        <comment type="line" pos:line="384" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="385" pos:column="9">/// &lt;returns&gt;A &lt;see cref="System.Drawing.Image"/&gt; containg an image of the full desktop.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="386" pos:column="9">internal</specifier> <specifier pos:line="386" pos:column="18">static</specifier> <name pos:line="386" pos:column="25">Image</name></type> <name pos:line="386" pos:column="31">GetDesktopBitmap</name><parameter_list pos:line="386" pos:column="47">()</parameter_list>
        <block pos:line="387" pos:column="9">{
            <return pos:line="388" pos:column="13">return <expr><call><name pos:line="388" pos:column="20">GetDesktopBitmap</name><argument_list pos:line="388" pos:column="36">(<argument><expr><call><name pos:line="388" pos:column="37">FindWindow</name><argument_list pos:line="388" pos:column="47">(<argument><expr><name pos:line="388" pos:column="48">null</name></expr></argument><op:operator pos:line="388" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="388" pos:column="54">"Program Manager"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="391" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="392" pos:column="9">/// Gets a segment of the desktop as an image.</comment>
        <comment type="line" pos:line="393" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="394" pos:column="9">/// &lt;returns&gt;A &lt;see cref="System.Drawing.Image"/&gt; containg an image of the full desktop.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="395" pos:column="9">internal</specifier> <specifier pos:line="395" pos:column="18">static</specifier> <name pos:line="395" pos:column="25">Image</name></type> <name pos:line="395" pos:column="31">GetDesktopBitmap</name><parameter_list pos:line="395" pos:column="47">(<param><decl><type><name pos:line="395" pos:column="48">IntPtr</name></type> <name pos:line="395" pos:column="55">hWnd</name></decl></param>)</parameter_list>
        <block pos:line="396" pos:column="9">{
            <return pos:line="397" pos:column="13">return <expr><call><name pos:line="397" pos:column="20">GetDesktopBitmap</name><argument_list pos:line="397" pos:column="36">(<argument><expr><name pos:line="397" pos:column="37">hWnd</name></expr></argument><op:operator pos:line="397" pos:column="41">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="397" pos:column="43">false</lit:literal></expr></argument><op:operator pos:line="397" pos:column="48">,</op:operator> <argument><expr><name><name pos:line="397" pos:column="50">Color</name><op:operator pos:line="397" pos:column="55">.</op:operator><name pos:line="397" pos:column="56">Empty</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="400" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="401" pos:column="9">/// Gets a segment of the desktop as an image.</comment>
        <comment type="line" pos:line="402" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="403" pos:column="9">/// &lt;returns&gt;A &lt;see cref="System.Drawing.Image"/&gt; containg an image of the full desktop.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="404" pos:column="9">internal</specifier> <specifier pos:line="404" pos:column="18">static</specifier> <name pos:line="404" pos:column="25">Image</name></type> <name pos:line="404" pos:column="31">GetDesktopBitmap</name><parameter_list pos:line="404" pos:column="47">(<param><decl><type><name pos:line="404" pos:column="48">IntPtr</name></type> <name pos:line="404" pos:column="55">hWnd</name></decl></param><op:operator pos:line="404" pos:column="59">,</op:operator> <param><decl><type><name pos:line="404" pos:column="61">bool</name></type> <name pos:line="404" pos:column="66">colorNonFormArea</name></decl></param><op:operator pos:line="404" pos:column="82">,</op:operator> <param><decl><type><name pos:line="404" pos:column="84">Color</name></type> <name pos:line="404" pos:column="90">backgroundColor</name></decl></param>)</parameter_list>
        <block pos:line="405" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="406" pos:column="13">Image</name></type> <name pos:line="406" pos:column="19">capture</name> =<init pos:line="406" pos:column="28"> <expr><name pos:line="406" pos:column="29">null</name></expr></init></decl>;</decl_stmt>

            <try pos:line="408" pos:column="13">try
            <block pos:line="409" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="410" pos:column="17">RECT</name></type> <name pos:line="410" pos:column="22">rect</name> =<init pos:line="410" pos:column="28"> <expr><op:operator pos:line="410" pos:column="29">new</op:operator> <call><name pos:line="410" pos:column="33">RECT</name><argument_list pos:line="410" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="411" pos:column="17">GetWindowRect</name><argument_list pos:line="411" pos:column="30">(<argument><expr><name pos:line="411" pos:column="31">hWnd</name></expr></argument><op:operator pos:line="411" pos:column="35">,</op:operator> <argument><specifier pos:line="411" pos:column="37">ref</specifier> <expr><name pos:line="411" pos:column="41">rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="412" pos:column="17">capture</name> <op:operator pos:line="412" pos:column="25">=</op:operator> <call><name pos:line="412" pos:column="27">GetDesktopBitmap</name><argument_list pos:line="412" pos:column="43">(<argument><expr><call><name><name pos:line="412" pos:column="44">rect</name><op:operator pos:line="412" pos:column="48">.</op:operator><name pos:line="412" pos:column="49">ToRectangle</name></name><argument_list pos:line="412" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="414" pos:column="17">if <condition pos:line="414" pos:column="20">(<expr><name pos:line="414" pos:column="21">colorNonFormArea</name></expr>)</condition><then pos:line="414" pos:column="38">
                    <return pos:line="415" pos:column="21">return <expr><call><name pos:line="415" pos:column="28">ColorNonRegionFormArea</name><argument_list pos:line="415" pos:column="50">(<argument><expr><name pos:line="415" pos:column="51">hWnd</name></expr></argument><op:operator pos:line="415" pos:column="55">,</op:operator> <argument><expr><name pos:line="415" pos:column="57">capture</name></expr></argument><op:operator pos:line="415" pos:column="64">,</op:operator> <argument><expr><name pos:line="415" pos:column="66">backgroundColor</name></expr></argument>)</argument_list></call></expr>;</return></then>
                <else pos:line="416" pos:column="17">else
                    <return pos:line="417" pos:column="21">return <expr><name pos:line="417" pos:column="28">capture</name></expr>;</return></else></if>
            }</block>
            <finally pos:line="419" pos:column="13">finally
            <block pos:line="420" pos:column="13">{
                <if pos:line="421" pos:column="17">if <condition pos:line="421" pos:column="20">(<expr><name pos:line="421" pos:column="21">capture</name> <op:operator pos:line="421" pos:column="29">!=</op:operator> <name pos:line="421" pos:column="32">null</name> <op:operator pos:line="421" pos:column="37">&amp;&amp;</op:operator> <name pos:line="421" pos:column="40">colorNonFormArea</name></expr>)</condition><then pos:line="421" pos:column="57">
                    <expr_stmt><expr><call><name><name pos:line="422" pos:column="21">capture</name><op:operator pos:line="422" pos:column="28">.</op:operator><name pos:line="422" pos:column="29">Dispose</name></name><argument_list pos:line="422" pos:column="36">()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></finally></try>
        }</block></function>

        <comment type="line" pos:line="426" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="427" pos:column="9">/// Gets a segment of the desktop as an image.</comment>
        <comment type="line" pos:line="428" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="429" pos:column="9">/// &lt;param name="rectangle"&gt;The rectangular area to capture.&lt;/param&gt;</comment>
        <comment type="line" pos:line="430" pos:column="9">/// &lt;returns&gt;A &lt;see cref="System.Drawing.Image"/&gt; containg an image of the desktop </comment>
        <comment type="line" pos:line="431" pos:column="9">/// at the specified coordinates&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="432" pos:column="9">internal</specifier> <specifier pos:line="432" pos:column="18">static</specifier> <name pos:line="432" pos:column="25">Image</name></type> <name pos:line="432" pos:column="31">GetDesktopBitmap</name><parameter_list pos:line="432" pos:column="47">(<param><decl><type><name pos:line="432" pos:column="48">Rectangle</name></type> <name pos:line="432" pos:column="58">rectangle</name></decl></param>)</parameter_list>
        <block pos:line="433" pos:column="9">{
            <return pos:line="434" pos:column="13">return <expr><call><name pos:line="434" pos:column="20">GetDesktopBitmap</name><argument_list pos:line="434" pos:column="36">(<argument><expr><name><name pos:line="434" pos:column="37">rectangle</name><op:operator pos:line="434" pos:column="46">.</op:operator><name pos:line="434" pos:column="47">X</name></name></expr></argument><op:operator pos:line="434" pos:column="48">,</op:operator> <argument><expr><name><name pos:line="434" pos:column="50">rectangle</name><op:operator pos:line="434" pos:column="59">.</op:operator><name pos:line="434" pos:column="60">Y</name></name></expr></argument><op:operator pos:line="434" pos:column="61">,</op:operator> <argument><expr><name><name pos:line="434" pos:column="63">rectangle</name><op:operator pos:line="434" pos:column="72">.</op:operator><name pos:line="434" pos:column="73">Width</name></name></expr></argument><op:operator pos:line="434" pos:column="78">,</op:operator> <argument><expr><name><name pos:line="434" pos:column="80">rectangle</name><op:operator pos:line="434" pos:column="89">.</op:operator><name pos:line="434" pos:column="90">Height</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="437" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="438" pos:column="9">/// Retrieves an image of the specified part of your screen.</comment>
        <comment type="line" pos:line="439" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="440" pos:column="9">/// &lt;param name="x"&gt;The X coordinate of the requested area&lt;/param&gt; </comment>
        <comment type="line" pos:line="441" pos:column="9">/// &lt;param name="y"&gt;The Y coordinate of the requested area&lt;/param&gt; </comment>
        <comment type="line" pos:line="442" pos:column="9">/// &lt;param name="width"&gt;The width of the requested area&lt;/param&gt; </comment>
        <comment type="line" pos:line="443" pos:column="9">/// &lt;param name="height"&gt;The height of the requested area&lt;/param&gt; </comment>
        <comment type="line" pos:line="444" pos:column="9">/// &lt;returns&gt;A &lt;see cref="System.Drawing.Image"/&gt; of the desktop at </comment>
        <comment type="line" pos:line="445" pos:column="9">/// the specified coordinates.&lt;/returns&gt; </comment>
        <function><type><specifier pos:line="446" pos:column="9">internal</specifier> <specifier pos:line="446" pos:column="18">static</specifier> <name pos:line="446" pos:column="25">Image</name></type> <name pos:line="446" pos:column="31">GetDesktopBitmap</name><parameter_list pos:line="446" pos:column="47">(<param><decl><type><name pos:line="446" pos:column="48">int</name></type> <name pos:line="446" pos:column="52">x</name></decl></param><op:operator pos:line="446" pos:column="53">,</op:operator> <param><decl><type><name pos:line="446" pos:column="55">int</name></type> <name pos:line="446" pos:column="59">y</name></decl></param><op:operator pos:line="446" pos:column="60">,</op:operator> <param><decl><type><name pos:line="446" pos:column="62">int</name></type> <name pos:line="446" pos:column="66">width</name></decl></param><op:operator pos:line="446" pos:column="71">,</op:operator> <param><decl><type><name pos:line="446" pos:column="73">int</name></type> <name pos:line="446" pos:column="77">height</name></decl></param>)</parameter_list>
        <block pos:line="447" pos:column="9">{
            <comment type="line" pos:line="448" pos:column="13">//Create the image and graphics to capture the portion of the desktop.</comment>
            <decl_stmt><decl><type><name pos:line="449" pos:column="13">Image</name></type> <name pos:line="449" pos:column="19">destinationImage</name> =<init pos:line="449" pos:column="37"> <expr><op:operator pos:line="449" pos:column="38">new</op:operator> <call><name pos:line="449" pos:column="42">Bitmap</name><argument_list pos:line="449" pos:column="48">(<argument><expr><name pos:line="449" pos:column="49">width</name></expr></argument><op:operator pos:line="449" pos:column="54">,</op:operator> <argument><expr><name pos:line="449" pos:column="56">height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="450" pos:column="13">Graphics</name></type> <name pos:line="450" pos:column="22">destinationGraphics</name> =<init pos:line="450" pos:column="43"> <expr><call><name><name pos:line="450" pos:column="44">Graphics</name><op:operator pos:line="450" pos:column="52">.</op:operator><name pos:line="450" pos:column="53">FromImage</name></name><argument_list pos:line="450" pos:column="62">(<argument><expr><name pos:line="450" pos:column="63">destinationImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="452" pos:column="13">IntPtr</name></type> <name pos:line="452" pos:column="20">destinationGraphicsHandle</name> =<init pos:line="452" pos:column="47"> <expr><name><name pos:line="452" pos:column="48">IntPtr</name><op:operator pos:line="452" pos:column="54">.</op:operator><name pos:line="452" pos:column="55">Zero</name></name></expr></init></decl>;</decl_stmt>

            <try pos:line="454" pos:column="13">try
            <block pos:line="455" pos:column="13">{
                <comment type="line" pos:line="456" pos:column="17">//Pointers for window handles</comment>
                <expr_stmt><expr><name pos:line="457" pos:column="17">destinationGraphicsHandle</name> <op:operator pos:line="457" pos:column="43">=</op:operator> <call><name><name pos:line="457" pos:column="45">destinationGraphics</name><op:operator pos:line="457" pos:column="64">.</op:operator><name pos:line="457" pos:column="65">GetHdc</name></name><argument_list pos:line="457" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="458" pos:column="17">IntPtr</name></type> <name pos:line="458" pos:column="24">windowDC</name> =<init pos:line="458" pos:column="34"> <expr><call><name pos:line="458" pos:column="35">GetDC</name><argument_list pos:line="458" pos:column="40">(<argument><expr><name><name pos:line="458" pos:column="41">IntPtr</name><op:operator pos:line="458" pos:column="47">.</op:operator><name pos:line="458" pos:column="48">Zero</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="460" pos:column="17">//Get the screencapture</comment>
                <decl_stmt><decl><type><name pos:line="461" pos:column="17">int</name></type> <name pos:line="461" pos:column="21">dwRop</name> =<init pos:line="461" pos:column="28"> <expr><name pos:line="461" pos:column="29">SRCCOPY</name></expr></init></decl>;</decl_stmt>
                <if pos:line="462" pos:column="17">if <condition pos:line="462" pos:column="20">(<expr><name><name pos:line="462" pos:column="21">Configuration</name><op:operator pos:line="462" pos:column="34">.</op:operator><name pos:line="462" pos:column="35">Current</name><op:operator pos:line="462" pos:column="42">.</op:operator><name pos:line="462" pos:column="43">HideFormDuringCapture</name></name></expr>)</condition><then pos:line="462" pos:column="65">
                    <expr_stmt><expr><name pos:line="463" pos:column="21">dwRop</name> <op:operator pos:line="463" pos:column="27">|=</op:operator> <name pos:line="463" pos:column="30">CAPTUREBLT</name></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><call><name pos:line="465" pos:column="17">BitBlt</name><argument_list pos:line="465" pos:column="23">(<argument><expr><name pos:line="465" pos:column="24">destinationGraphicsHandle</name></expr></argument><op:operator pos:line="465" pos:column="49">,</op:operator> <argument><expr><lit:literal type="number" pos:line="465" pos:column="51">0</lit:literal></expr></argument><op:operator pos:line="465" pos:column="52">,</op:operator> <argument><expr><lit:literal type="number" pos:line="465" pos:column="54">0</lit:literal></expr></argument><op:operator pos:line="465" pos:column="55">,</op:operator> <argument><expr><name pos:line="465" pos:column="57">width</name></expr></argument><op:operator pos:line="465" pos:column="62">,</op:operator> <argument><expr><name pos:line="465" pos:column="64">height</name></expr></argument><op:operator pos:line="465" pos:column="70">,</op:operator> <argument><expr><name pos:line="465" pos:column="72">windowDC</name></expr></argument><op:operator pos:line="465" pos:column="80">,</op:operator> <argument><expr><name pos:line="465" pos:column="82">x</name></expr></argument><op:operator pos:line="465" pos:column="83">,</op:operator> <argument><expr><name pos:line="465" pos:column="85">y</name></expr></argument><op:operator pos:line="465" pos:column="86">,</op:operator> <argument><expr><name pos:line="465" pos:column="88">dwRop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="467" pos:column="13">finally
            <block pos:line="468" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="469" pos:column="17">destinationGraphics</name><op:operator pos:line="469" pos:column="36">.</op:operator><name pos:line="469" pos:column="37">ReleaseHdc</name></name><argument_list pos:line="469" pos:column="47">(<argument><expr><name pos:line="469" pos:column="48">destinationGraphicsHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

            <if pos:line="472" pos:column="13">if <condition pos:line="472" pos:column="16">(<expr><name><name pos:line="472" pos:column="17">Configuration</name><op:operator pos:line="472" pos:column="30">.</op:operator><name pos:line="472" pos:column="31">Current</name><op:operator pos:line="472" pos:column="38">.</op:operator><name pos:line="472" pos:column="39">IncludeMouseCursorInCapture</name></name></expr>)</condition><then pos:line="472" pos:column="67">
            <block pos:line="473" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="474" pos:column="17">CURSORINFO</name></type> <name pos:line="474" pos:column="28">cursorInfo</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="475" pos:column="17">cursorInfo</name><op:operator pos:line="475" pos:column="27">.</op:operator><name pos:line="475" pos:column="28">cbSize</name></name> <op:operator pos:line="475" pos:column="35">=</op:operator> <call><name><name pos:line="475" pos:column="37">Marshal</name><op:operator pos:line="475" pos:column="44">.</op:operator><name pos:line="475" pos:column="45">SizeOf</name></name><argument_list pos:line="475" pos:column="51">(<argument><expr><call><name pos:line="475" pos:column="52">typeof</name><argument_list pos:line="475" pos:column="58">(<argument><expr><name pos:line="475" pos:column="59">CURSORINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="476" pos:column="17">GetCursorInfo</name><argument_list pos:line="476" pos:column="30">(<argument><specifier pos:line="476" pos:column="31">out</specifier> <expr><name pos:line="476" pos:column="35">cursorInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="478" pos:column="17">ICONINFO</name></type> <name pos:line="478" pos:column="26">iconInfo</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="479" pos:column="17">GetIconInfo</name><argument_list pos:line="479" pos:column="28">(<argument><expr><name><name pos:line="479" pos:column="29">cursorInfo</name><op:operator pos:line="479" pos:column="39">.</op:operator><name pos:line="479" pos:column="40">hCursor</name></name></expr></argument><op:operator pos:line="479" pos:column="47">,</op:operator> <argument><specifier pos:line="479" pos:column="49">out</specifier> <expr><name pos:line="479" pos:column="53">iconInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="481" pos:column="17">Icon</name></type> <name pos:line="481" pos:column="22">mouseCursor</name> =<init pos:line="481" pos:column="35"> <expr><call><name><name pos:line="481" pos:column="36">Icon</name><op:operator pos:line="481" pos:column="40">.</op:operator><name pos:line="481" pos:column="41">FromHandle</name></name><argument_list pos:line="481" pos:column="51">(<argument><expr><call><name pos:line="481" pos:column="52">CopyIcon</name><argument_list pos:line="481" pos:column="60">(<argument><expr><name><name pos:line="481" pos:column="61">cursorInfo</name><op:operator pos:line="481" pos:column="71">.</op:operator><name pos:line="481" pos:column="72">hCursor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="482" pos:column="17">destinationGraphics</name><op:operator pos:line="482" pos:column="36">.</op:operator><name pos:line="482" pos:column="37">DrawIcon</name></name><argument_list pos:line="482" pos:column="45">(<argument><expr><name pos:line="482" pos:column="46">mouseCursor</name></expr></argument><op:operator pos:line="482" pos:column="57">,</op:operator> <argument><expr><name><name pos:line="482" pos:column="59">cursorInfo</name><op:operator pos:line="482" pos:column="69">.</op:operator><name pos:line="482" pos:column="70">ptScreenPos</name><op:operator pos:line="482" pos:column="81">.</op:operator><name pos:line="482" pos:column="82">X</name></name> <op:operator pos:line="482" pos:column="84">-</op:operator> <name pos:line="482" pos:column="86">x</name> <op:operator pos:line="482" pos:column="88">-</op:operator> <name><name pos:line="482" pos:column="90">iconInfo</name><op:operator pos:line="482" pos:column="98">.</op:operator><name pos:line="482" pos:column="99">xHotspot</name></name></expr></argument><op:operator pos:line="482" pos:column="107">,</op:operator> <argument><expr><name><name pos:line="482" pos:column="109">cursorInfo</name><op:operator pos:line="482" pos:column="119">.</op:operator><name pos:line="482" pos:column="120">ptScreenPos</name><op:operator pos:line="482" pos:column="131">.</op:operator><name pos:line="482" pos:column="132">Y</name></name> <op:operator pos:line="482" pos:column="134">-</op:operator> <name pos:line="482" pos:column="136">y</name> <op:operator pos:line="482" pos:column="138">-</op:operator> <name><name pos:line="482" pos:column="140">iconInfo</name><op:operator pos:line="482" pos:column="148">.</op:operator><name pos:line="482" pos:column="149">yHotspot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name pos:line="484" pos:column="17">DeleteObject</name><argument_list pos:line="484" pos:column="29">(<argument><expr><name><name pos:line="484" pos:column="30">iconInfo</name><op:operator pos:line="484" pos:column="38">.</op:operator><name pos:line="484" pos:column="39">hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="485" pos:column="17">DeleteObject</name><argument_list pos:line="485" pos:column="29">(<argument><expr><name><name pos:line="485" pos:column="30">iconInfo</name><op:operator pos:line="485" pos:column="38">.</op:operator><name pos:line="485" pos:column="39">hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="486" pos:column="17">DestroyIcon</name><argument_list pos:line="486" pos:column="28">(<argument><expr><name><name pos:line="486" pos:column="29">cursorInfo</name><op:operator pos:line="486" pos:column="39">.</op:operator><name pos:line="486" pos:column="40">hCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="489" pos:column="13">// Don't forget to dispose this image</comment>
            <return pos:line="490" pos:column="13">return <expr><name pos:line="490" pos:column="20">destinationImage</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="493" pos:column="9">private</specifier> <specifier pos:line="493" pos:column="17">static</specifier> <name pos:line="493" pos:column="24">Region</name></type> <name pos:line="493" pos:column="31">GetRegionByHWnd</name><parameter_list pos:line="493" pos:column="46">(<param><decl><type><name pos:line="493" pos:column="47">IntPtr</name></type> <name pos:line="493" pos:column="54">hWnd</name></decl></param>)</parameter_list>
        <block pos:line="494" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="495" pos:column="13">IntPtr</name></type> <name pos:line="495" pos:column="20">windowRegion</name> =<init pos:line="495" pos:column="34"> <expr><call><name pos:line="495" pos:column="35">CreateRectRgn</name><argument_list pos:line="495" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="495" pos:column="49">0</lit:literal></expr></argument><op:operator pos:line="495" pos:column="50">,</op:operator> <argument><expr><lit:literal type="number" pos:line="495" pos:column="52">0</lit:literal></expr></argument><op:operator pos:line="495" pos:column="53">,</op:operator> <argument><expr><lit:literal type="number" pos:line="495" pos:column="55">0</lit:literal></expr></argument><op:operator pos:line="495" pos:column="56">,</op:operator> <argument><expr><lit:literal type="number" pos:line="495" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="496" pos:column="13">GetWindowRgn</name><argument_list pos:line="496" pos:column="25">(<argument><expr><name pos:line="496" pos:column="26">hWnd</name></expr></argument><op:operator pos:line="496" pos:column="30">,</op:operator> <argument><expr><name pos:line="496" pos:column="32">windowRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="497" pos:column="13">return <expr><call><name><name pos:line="497" pos:column="20">Region</name><op:operator pos:line="497" pos:column="26">.</op:operator><name pos:line="497" pos:column="27">FromHrgn</name></name><argument_list pos:line="497" pos:column="35">(<argument><expr><name pos:line="497" pos:column="36">windowRegion</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="500" pos:column="9">private</specifier> <specifier pos:line="500" pos:column="17">static</specifier> <name pos:line="500" pos:column="24">Bitmap</name></type> <name pos:line="500" pos:column="31">ColorNonRegionFormArea</name><parameter_list pos:line="500" pos:column="53">(<param><decl><type><name pos:line="500" pos:column="54">IntPtr</name></type> <name pos:line="500" pos:column="61">hWnd</name></decl></param><op:operator pos:line="500" pos:column="65">,</op:operator> <param><decl><type><name pos:line="500" pos:column="67">Image</name></type> <name pos:line="500" pos:column="73">capture</name></decl></param><op:operator pos:line="500" pos:column="80">,</op:operator> <param><decl><type><name pos:line="500" pos:column="82">Color</name></type> <name pos:line="500" pos:column="88">color</name></decl></param>)</parameter_list>
        <block pos:line="501" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="502" pos:column="13">Bitmap</name></type> <name pos:line="502" pos:column="20">finalCapture</name></decl>;</decl_stmt>

            <using pos:line="504" pos:column="13">using (Region region = <name pos:line="504" pos:column="36">GetRegionByHWnd</name><parameter_list pos:line="504" pos:column="51">(<param><decl><type><name pos:line="504" pos:column="52">hWnd</name></type></decl></param>)</parameter_list></using>)</block>
            using <parameter_list pos:line="505" pos:column="19">(<param><decl><type><name pos:line="505" pos:column="20">Graphics</name></type> <name pos:line="505" pos:column="29">drawGraphics</name> =<init pos:line="505" pos:column="43"> <expr><call><name><name pos:line="505" pos:column="44">Graphics</name><op:operator pos:line="505" pos:column="52">.</op:operator><name pos:line="505" pos:column="53">FromImage</name></name><argument_list pos:line="505" pos:column="62">(<param><decl><type><name pos:line="505" pos:column="63">capture</name></type></decl></param>)</argument_list></call></expr></init></decl></param></parameter_list></function>)</block>
            <using pos:line="506" pos:column="13">using (SolidBrush brush = <type><specifier pos:line="506" pos:column="39">new</specifier></type> <name pos:line="506" pos:column="43">SolidBrush</name><parameter_list pos:line="506" pos:column="53">(<param><decl><type><name pos:line="506" pos:column="54">color</name></type></decl></param>)</parameter_list></using></class>)</block>
            <block pos:line="507" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="508" pos:column="17">RectangleF</name></type> <name pos:line="508" pos:column="28">bounds</name> =<init pos:line="508" pos:column="36"> <expr><call><name><name pos:line="508" pos:column="37">region</name><op:operator pos:line="508" pos:column="43">.</op:operator><name pos:line="508" pos:column="44">GetBounds</name></name><argument_list pos:line="508" pos:column="53">(<argument><expr><name pos:line="508" pos:column="54">drawGraphics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="509" pos:column="17">if <condition pos:line="509" pos:column="20">(<expr><name pos:line="509" pos:column="21">bounds</name> <op:operator pos:line="509" pos:column="28">==</op:operator> <name><name pos:line="509" pos:column="31">RectangleF</name><op:operator pos:line="509" pos:column="41">.</op:operator><name pos:line="509" pos:column="42">Empty</name></name></expr>)</condition><then pos:line="509" pos:column="48">
                <block pos:line="510" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="511" pos:column="21">GraphicsUnit</name></type> <name pos:line="511" pos:column="34">unit</name> =<init pos:line="511" pos:column="40"> <expr><name><name pos:line="511" pos:column="41">GraphicsUnit</name><op:operator pos:line="511" pos:column="53">.</op:operator><name pos:line="511" pos:column="54">Pixel</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="512" pos:column="21">bounds</name> <op:operator pos:line="512" pos:column="28">=</op:operator> <call><name><name pos:line="512" pos:column="30">capture</name><op:operator pos:line="512" pos:column="37">.</op:operator><name pos:line="512" pos:column="38">GetBounds</name></name><argument_list pos:line="512" pos:column="47">(<argument><specifier pos:line="512" pos:column="48">ref</specifier> <expr><name pos:line="512" pos:column="52">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="514" pos:column="21">if <condition pos:line="514" pos:column="24">(<expr><op:operator pos:line="514" pos:column="25">(</op:operator><call><name pos:line="514" pos:column="26">GetWindowLongA</name><argument_list pos:line="514" pos:column="40">(<argument><expr><name pos:line="514" pos:column="41">hWnd</name></expr></argument><op:operator pos:line="514" pos:column="45">,</op:operator> <argument><expr><name pos:line="514" pos:column="47">GWL_STYLE</name></expr></argument>)</argument_list></call> <op:operator pos:line="514" pos:column="58">&amp;</op:operator> <name pos:line="514" pos:column="60">TARGETWINDOW</name><op:operator pos:line="514" pos:column="72">)</op:operator> <op:operator pos:line="514" pos:column="74">==</op:operator> <name pos:line="514" pos:column="77">TARGETWINDOW</name></expr>)</condition><then pos:line="514" pos:column="90">
                    <block pos:line="515" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="516" pos:column="25">IntPtr</name></type> <name pos:line="516" pos:column="32">windowRegion</name> =<init pos:line="516" pos:column="46"> <expr><call><name pos:line="516" pos:column="47">CreateRoundRectRgn</name><argument_list pos:line="516" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="516" pos:column="66">0</lit:literal></expr></argument><op:operator pos:line="516" pos:column="67">,</op:operator> <argument><expr><lit:literal type="number" pos:line="516" pos:column="69">0</lit:literal></expr></argument><op:operator pos:line="516" pos:column="70">,</op:operator> <argument><expr><op:operator pos:line="516" pos:column="72">(</op:operator><name pos:line="516" pos:column="73">int</name><op:operator pos:line="516" pos:column="76">)</op:operator><name><name pos:line="516" pos:column="77">bounds</name><op:operator pos:line="516" pos:column="83">.</op:operator><name pos:line="516" pos:column="84">Width</name></name> <op:operator pos:line="516" pos:column="90">+</op:operator> <lit:literal type="number" pos:line="516" pos:column="92">1</lit:literal></expr></argument><op:operator pos:line="516" pos:column="93">,</op:operator> <argument><expr><op:operator pos:line="516" pos:column="95">(</op:operator><name pos:line="516" pos:column="96">int</name><op:operator pos:line="516" pos:column="99">)</op:operator><name><name pos:line="516" pos:column="100">bounds</name><op:operator pos:line="516" pos:column="106">.</op:operator><name pos:line="516" pos:column="107">Height</name></name> <op:operator pos:line="516" pos:column="114">+</op:operator> <lit:literal type="number" pos:line="516" pos:column="116">1</lit:literal></expr></argument><op:operator pos:line="516" pos:column="117">,</op:operator> <argument><expr><lit:literal type="number" pos:line="516" pos:column="119">9</lit:literal></expr></argument><op:operator pos:line="516" pos:column="120">,</op:operator> <argument><expr><lit:literal type="number" pos:line="516" pos:column="122">9</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="517" pos:column="25">Region</name></type> <name pos:line="517" pos:column="32">r</name> =<init pos:line="517" pos:column="35"> <expr><call><name><name pos:line="517" pos:column="36">Region</name><op:operator pos:line="517" pos:column="42">.</op:operator><name pos:line="517" pos:column="43">FromHrgn</name></name><argument_list pos:line="517" pos:column="51">(<argument><expr><name pos:line="517" pos:column="52">windowRegion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name pos:line="519" pos:column="25">r</name><op:operator pos:line="519" pos:column="26">.</op:operator><name pos:line="519" pos:column="27">Complement</name></name><argument_list pos:line="519" pos:column="37">(<argument><expr><name pos:line="519" pos:column="38">bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="520" pos:column="25">drawGraphics</name><op:operator pos:line="520" pos:column="37">.</op:operator><name pos:line="520" pos:column="38">FillRegion</name></name><argument_list pos:line="520" pos:column="48">(<argument><expr><name pos:line="520" pos:column="49">brush</name></expr></argument><op:operator pos:line="520" pos:column="54">,</op:operator> <argument><expr><name pos:line="520" pos:column="56">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else pos:line="523" pos:column="17">else
                <block pos:line="524" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="525" pos:column="21">region</name><op:operator pos:line="525" pos:column="27">.</op:operator><name pos:line="525" pos:column="28">Complement</name></name><argument_list pos:line="525" pos:column="38">(<argument><expr><name pos:line="525" pos:column="39">bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="526" pos:column="21">drawGraphics</name><op:operator pos:line="526" pos:column="33">.</op:operator><name pos:line="526" pos:column="34">FillRegion</name></name><argument_list pos:line="526" pos:column="44">(<argument><expr><name pos:line="526" pos:column="45">brush</name></expr></argument><op:operator pos:line="526" pos:column="50">,</op:operator> <argument><expr><name pos:line="526" pos:column="52">region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><name pos:line="529" pos:column="17">finalCapture</name> <op:operator pos:line="529" pos:column="30">=</op:operator> <op:operator pos:line="529" pos:column="32">new</op:operator> <call><name pos:line="529" pos:column="36">Bitmap</name><argument_list pos:line="529" pos:column="42">(<argument><expr><op:operator pos:line="529" pos:column="43">(</op:operator><name pos:line="529" pos:column="44">int</name><op:operator pos:line="529" pos:column="47">)</op:operator><name><name pos:line="529" pos:column="48">bounds</name><op:operator pos:line="529" pos:column="54">.</op:operator><name pos:line="529" pos:column="55">Width</name></name></expr></argument><op:operator pos:line="529" pos:column="60">,</op:operator> <argument><expr><op:operator pos:line="529" pos:column="62">(</op:operator><name pos:line="529" pos:column="63">int</name><op:operator pos:line="529" pos:column="66">)</op:operator><name><name pos:line="529" pos:column="67">bounds</name><op:operator pos:line="529" pos:column="73">.</op:operator><name pos:line="529" pos:column="74">Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <using pos:line="530" pos:column="17">using (Graphics finalGraphics = <name><name pos:line="530" pos:column="49">Graphics</name><op:operator pos:line="530" pos:column="57">.</op:operator><name pos:line="530" pos:column="58">FromImage</name></name><parameter_list pos:line="530" pos:column="67">(<param><decl><type><name pos:line="530" pos:column="68">finalCapture</name></type></decl></param>)</parameter_list></using>)</block>
                <block pos:line="531" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="532" pos:column="21">finalGraphics</name><op:operator pos:line="532" pos:column="34">.</op:operator><name pos:line="532" pos:column="35">SmoothingMode</name></name> <op:operator pos:line="532" pos:column="49">=</op:operator> <name><name pos:line="532" pos:column="51">SmoothingMode</name><op:operator pos:line="532" pos:column="64">.</op:operator><name pos:line="532" pos:column="65">AntiAlias</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="533" pos:column="21">finalGraphics</name><op:operator pos:line="533" pos:column="34">.</op:operator><name pos:line="533" pos:column="35">DrawImage</name></name><argument_list pos:line="533" pos:column="44">(<argument><expr><name pos:line="533" pos:column="45">capture</name></expr></argument><op:operator pos:line="533" pos:column="52">,</op:operator> <argument><expr><op:operator pos:line="533" pos:column="54">new</op:operator> <call><name pos:line="533" pos:column="58">RectangleF</name><argument_list pos:line="533" pos:column="68">(<argument><expr><op:operator pos:line="533" pos:column="69">new</op:operator> <call><name pos:line="533" pos:column="73">PointF</name><argument_list pos:line="533" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="533" pos:column="80">0</lit:literal></expr></argument><op:operator pos:line="533" pos:column="81">,</op:operator> <argument><expr><lit:literal type="number" pos:line="533" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="533" pos:column="85">,</op:operator> <argument><expr><name><name pos:line="533" pos:column="87">finalCapture</name><op:operator pos:line="533" pos:column="99">.</op:operator><name pos:line="533" pos:column="100">Size</name></name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="533" pos:column="105">,</op:operator> <argument><expr><name pos:line="533" pos:column="107">bounds</name></expr></argument><op:operator pos:line="533" pos:column="113">,</op:operator> <argument><expr><name><name pos:line="533" pos:column="115">GraphicsUnit</name><op:operator pos:line="533" pos:column="127">.</op:operator><name pos:line="533" pos:column="128">Pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></namespace>
            }
            <return pos:line="536" pos:column="13">return <expr><name pos:line="536" pos:column="20">finalCapture</name></expr>;</return>
        }

    }
}</unit>
