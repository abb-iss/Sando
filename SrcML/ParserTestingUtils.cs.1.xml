<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\ParserTestingUtils.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Parser</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">UnitTests</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ParserTestingUtils</name>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <specifier pos:line="12" pos:column="16">static</specifier> <name><name pos:line="12" pos:column="23">List</name><argument_list pos:line="12" pos:column="27">&lt;<argument><name pos:line="12" pos:column="28">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="44">ParseCsharpFile</name><parameter_list pos:line="12" pos:column="59">(<param><decl><type><name pos:line="12" pos:column="60">string</name></type> <name pos:line="12" pos:column="67">filePath</name></decl></param>)</parameter_list> <block pos:line="12" pos:column="77">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">SrcMLCSharpParser</name></type> <name pos:line="13" pos:column="31">parser</name> =<init pos:line="13" pos:column="39"> <expr><op:operator pos:line="13" pos:column="40">new</op:operator> <call><name pos:line="13" pos:column="44">SrcMLCSharpParser</name><argument_list pos:line="13" pos:column="61">(<argument><expr><op:operator pos:line="13" pos:column="62">new</op:operator> <call><name><name pos:line="13" pos:column="66">ABB</name><op:operator pos:line="13" pos:column="69">.</op:operator><name pos:line="13" pos:column="70">SrcML</name><op:operator pos:line="13" pos:column="75">.</op:operator><name pos:line="13" pos:column="76">SrcMLGenerator</name></name><argument_list pos:line="13" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="91">@"LIBS\SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">elements</name> =<init pos:line="14" pos:column="27"> <expr><call><name><name pos:line="14" pos:column="28">parser</name><op:operator pos:line="14" pos:column="34">.</op:operator><name pos:line="14" pos:column="35">Parse</name></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="15" pos:column="13">return <expr><name pos:line="15" pos:column="20">elements</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="18" pos:column="9">public</specifier> <specifier pos:line="18" pos:column="16">static</specifier> <name pos:line="18" pos:column="23">MethodElement</name></type> <name pos:line="18" pos:column="37">GetMethod</name><parameter_list pos:line="18" pos:column="46">(<param><decl><type><name pos:line="18" pos:column="47">string</name></type> <name pos:line="18" pos:column="54">name</name></decl></param><op:operator pos:line="18" pos:column="58">,</op:operator> <param><decl><type><name><name pos:line="18" pos:column="60">List</name><argument_list pos:line="18" pos:column="64">&lt;<argument><name pos:line="18" pos:column="65">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="81">elements</name></decl></param> )</parameter_list>
        <block pos:line="19" pos:column="9">{
            <foreach pos:line="20" pos:column="13">foreach (<init><decl><type><name pos:line="20" pos:column="22">var</name></type> <name pos:line="20" pos:column="26">programElement</name> <init pos:line="20" pos:column="41">in <expr><name pos:line="20" pos:column="44">elements</name></expr></init></decl></init>)
            <block pos:line="21" pos:column="13">{
                <if pos:line="22" pos:column="17">if<condition pos:line="22" pos:column="19">(<expr><name pos:line="22" pos:column="20">programElement</name> <op:operator pos:line="22" pos:column="35">as</op:operator> <name pos:line="22" pos:column="38">MethodElement</name> <op:operator pos:line="22" pos:column="52">!=</op:operator><name pos:line="22" pos:column="54">null</name></expr>)</condition><then pos:line="22" pos:column="59">
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><op:operator pos:line="23" pos:column="21">(</op:operator><name pos:line="23" pos:column="22">programElement</name> <op:operator pos:line="23" pos:column="37">as</op:operator> <name pos:line="23" pos:column="40">MethodElement</name><op:operator pos:line="23" pos:column="53">)</op:operator><op:operator pos:line="23" pos:column="54">.</op:operator><call><name><name pos:line="23" pos:column="55">Name</name><op:operator pos:line="23" pos:column="59">.</op:operator><name pos:line="23" pos:column="60">Equals</name></name><argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="23" pos:column="73">
                    <return pos:line="24" pos:column="21">return <expr><name pos:line="24" pos:column="28">programElement</name> <op:operator pos:line="24" pos:column="43">as</op:operator> <name pos:line="24" pos:column="46">MethodElement</name></expr>;</return></then></if></then></if>
            }</block></foreach>
            <return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">MethodElement</name></type> <name pos:line="29" pos:column="37">GetMethod</name><parameter_list pos:line="29" pos:column="46">(<param><decl><type><name pos:line="29" pos:column="47">string</name></type> <name pos:line="29" pos:column="54">filepath</name></decl></param><op:operator pos:line="29" pos:column="62">,</op:operator> <param><decl><type><name pos:line="29" pos:column="64">string</name></type> <name pos:line="29" pos:column="71">name</name></decl></param>)</parameter_list>
        <block pos:line="30" pos:column="9">{
            <return pos:line="31" pos:column="13">return <expr><call><name pos:line="31" pos:column="20">GetMethod</name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">name</name></expr></argument><op:operator pos:line="31" pos:column="34">,</op:operator><argument><expr><call><name pos:line="31" pos:column="35">ParseCsharpFile</name><argument_list pos:line="31" pos:column="50">(<argument><expr><name pos:line="31" pos:column="51">filepath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
