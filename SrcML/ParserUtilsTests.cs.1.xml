<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\ParserUtilsTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Parser</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">UnitTests</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ParserUtilsTests</name>
    <block pos:line="12" pos:column="5">{

        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">ParseStringLiterals</name><parameter_list pos:line="15" pos:column="40">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">MethodElement</name></type> <name pos:line="17" pos:column="27">method</name> =<init pos:line="17" pos:column="35"> <expr><call><name><name pos:line="17" pos:column="36">ParserTestingUtils</name><op:operator pos:line="17" pos:column="54">.</op:operator><name pos:line="17" pos:column="55">GetMethod</name></name><argument_list pos:line="17" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="65">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument><op:operator pos:line="17" pos:column="131">,</op:operator>
                                         <argument><expr><lit:literal type="string" pos:line="18" pos:column="42">"LaunchSrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">IsTrue</name></name><argument_list pos:line="19" pos:column="26">(<argument><expr><call><name><name pos:line="19" pos:column="27">method</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">Body</name><op:operator pos:line="19" pos:column="38">.</op:operator><name pos:line="19" pos:column="39">Contains</name></name><argument_list pos:line="19" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="48">"Testingphraseola"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">ParseVariableDeclarations</name><parameter_list pos:line="23" pos:column="46">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">MethodElement</name></type> <name pos:line="25" pos:column="27">method</name> =<init pos:line="25" pos:column="35"> <expr><call><name><name pos:line="25" pos:column="36">ParserTestingUtils</name><op:operator pos:line="25" pos:column="54">.</op:operator><name pos:line="25" pos:column="55">GetMethod</name></name><argument_list pos:line="25" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="65">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument><op:operator pos:line="25" pos:column="131">,</op:operator>
                                         <argument><expr><lit:literal type="string" pos:line="26" pos:column="42">"LaunchSrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">IsTrue</name></name><argument_list pos:line="27" pos:column="26">(<argument><expr><call><name><name pos:line="27" pos:column="27">method</name><op:operator pos:line="27" pos:column="33">.</op:operator><name pos:line="27" pos:column="34">Body</name><op:operator pos:line="27" pos:column="38">.</op:operator><name pos:line="27" pos:column="39">Contains</name></name><argument_list pos:line="27" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="48">"waddow"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ParseParameters</name><parameter_list pos:line="31" pos:column="36">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">MethodElement</name></type> <name pos:line="33" pos:column="27">method</name> =<init pos:line="33" pos:column="35"> <expr><call><name><name pos:line="33" pos:column="36">ParserTestingUtils</name><op:operator pos:line="33" pos:column="54">.</op:operator><name pos:line="33" pos:column="55">GetMethod</name></name><argument_list pos:line="33" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="65">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\ShortCSharpFile.txt"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="131">,</op:operator>
                                         <argument><expr><lit:literal type="string" pos:line="34" pos:column="42">"GenerateSrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">IsTrue</name></name><argument_list pos:line="35" pos:column="26">(<argument><expr><call><name><name pos:line="35" pos:column="27">method</name><op:operator pos:line="35" pos:column="33">.</op:operator><name pos:line="35" pos:column="34">Arguments</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">Contains</name></name><argument_list pos:line="35" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="53">"parameterFilename"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">IsTrue</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><call><name><name pos:line="36" pos:column="27">method</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">Arguments</name><op:operator pos:line="36" pos:column="43">.</op:operator><name pos:line="36" pos:column="44">Contains</name></name><argument_list pos:line="36" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="53">"String"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
