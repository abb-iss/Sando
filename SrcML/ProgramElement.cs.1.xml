<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\SandoExtensionContracts\ProgramElementContracts\ProgramElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">ExtensionContracts</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">ProgramElementContracts</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">ProgramElement</name>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">const</name> <name pos:line="11" pos:column="22">string</name></type> <name pos:line="11" pos:column="29">CustomTypeTag</name> =<init pos:line="11" pos:column="44"> <expr><lit:literal type="string" pos:line="11" pos:column="45">"CustomType"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">String</name></type> <name pos:line="13" pos:column="23">CustomType1534213765</name>
        <block pos:line="14" pos:column="9">{
            <function><name pos:line="15" pos:column="13">get</name> <block pos:line="15" pos:column="17">{ <return pos:line="15" pos:column="19">return <expr><call><name pos:line="15" pos:column="26">GetType</name><argument_list pos:line="15" pos:column="33">()</argument_list></call><op:operator pos:line="15" pos:column="35">.</op:operator><name pos:line="15" pos:column="36">AssemblyQualifiedName</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">ProgramElement</name><parameter_list pos:line="18" pos:column="30">(<param><decl><type><name><name pos:line="18" pos:column="31">object</name><index pos:line="18" pos:column="37">[]</index></name></type> <name pos:line="18" pos:column="40">parameters</name></decl></param>)</parameter_list>
            <member_list pos:line="19" pos:column="13">: <call><name pos:line="19" pos:column="15">this</name><argument_list pos:line="19" pos:column="19">(<argument><expr><name><name pos:line="19" pos:column="20">parameters</name><index pos:line="19" pos:column="30">[<expr><lit:literal type="number" pos:line="19" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="19" pos:column="34">as</op:operator> <name pos:line="19" pos:column="37">string</name></expr></argument><op:operator pos:line="19" pos:column="43">,</op:operator> <argument><expr><op:operator pos:line="19" pos:column="45">(</op:operator><name pos:line="19" pos:column="46">int</name><op:operator pos:line="19" pos:column="49">)</op:operator><name><name pos:line="19" pos:column="50">parameters</name><index pos:line="19" pos:column="60">[<expr><lit:literal type="number" pos:line="19" pos:column="61">0</lit:literal></expr>]</index></name></expr></argument><op:operator pos:line="19" pos:column="63">,</op:operator> <argument><expr><name><name pos:line="19" pos:column="65">parameters</name><index pos:line="19" pos:column="75">[<expr><lit:literal type="number" pos:line="19" pos:column="76">0</lit:literal></expr>]</index></name> <op:operator pos:line="19" pos:column="79">as</op:operator> <name pos:line="19" pos:column="82">string</name></expr></argument><op:operator pos:line="19" pos:column="88">,</op:operator> <argument><expr><name><name pos:line="19" pos:column="90">parameters</name><index pos:line="19" pos:column="100">[<expr><lit:literal type="number" pos:line="19" pos:column="101">0</lit:literal></expr>]</index></name> <op:operator pos:line="19" pos:column="104">as</op:operator> <name pos:line="19" pos:column="107">string</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="20" pos:column="9">{

        }</block></constructor>

        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">ProgramElement</name><parameter_list pos:line="24" pos:column="30">(<param><decl><type><name pos:line="24" pos:column="31">string</name></type> <name pos:line="24" pos:column="38">name</name></decl></param><op:operator pos:line="24" pos:column="42">,</op:operator> <param><decl><type><name pos:line="24" pos:column="44">int</name></type> <name pos:line="24" pos:column="48">definitionLineNumber</name></decl></param><op:operator pos:line="24" pos:column="68">,</op:operator> <param><decl><type><name pos:line="24" pos:column="70">string</name></type> <name pos:line="24" pos:column="77">fullFilePath</name></decl></param><op:operator pos:line="24" pos:column="89">,</op:operator> <param><decl><type><name pos:line="24" pos:column="91">string</name></type> <name pos:line="24" pos:column="98">snippet</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Contract</name><op:operator pos:line="26" pos:column="21">.</op:operator><name pos:line="26" pos:column="22">Requires</name></name><argument_list pos:line="26" pos:column="30">(<argument><expr><op:operator pos:line="26" pos:column="31">!</op:operator><call><name><name pos:line="26" pos:column="32">String</name><op:operator pos:line="26" pos:column="38">.</op:operator><name pos:line="26" pos:column="39">IsNullOrWhiteSpace</name></name><argument_list pos:line="26" pos:column="57">(<argument><expr><name pos:line="26" pos:column="58">name</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="26" pos:column="63">,</op:operator>
                              <argument><expr><lit:literal type="string" pos:line="27" pos:column="31">"ProgramElement:Constructor - name cannot be null or an empty string!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Contract</name><op:operator pos:line="28" pos:column="21">.</op:operator><name pos:line="28" pos:column="22">Requires</name></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">definitionLineNumber</name> <op:operator pos:line="28" pos:column="52">&gt;=</op:operator> <lit:literal type="number" pos:line="28" pos:column="55">0</lit:literal></expr></argument><op:operator pos:line="28" pos:column="56">,</op:operator>
                              <argument><expr><lit:literal type="string" pos:line="29" pos:column="31">"ProgramElement:Constructor - definition line number must be greater or equal 0!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Contract</name><op:operator pos:line="30" pos:column="21">.</op:operator><name pos:line="30" pos:column="22">Requires</name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><op:operator pos:line="30" pos:column="31">!</op:operator><call><name><name pos:line="30" pos:column="32">String</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">IsNullOrWhiteSpace</name></name><argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">fullFilePath</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="30" pos:column="71">,</op:operator>
                              <argument><expr><lit:literal type="string" pos:line="31" pos:column="31">"ProgramElement:Constructor - full file path cannot be null or an empty string!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="32" pos:column="13">//this should probably stay commented as we will have to check it every time we read the file</comment>
            <comment type="line" pos:line="33" pos:column="13">//Contract.Requires(File.Exists(fullFilePath), "ProgramElement:Constructor - file must exist for the specified path! (path = \"" + fullFilePath + "\")");</comment>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Contract</name><op:operator pos:line="34" pos:column="21">.</op:operator><name pos:line="34" pos:column="22">Requires</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><op:operator pos:line="34" pos:column="31">!</op:operator><call><name><name pos:line="34" pos:column="32">String</name><op:operator pos:line="34" pos:column="38">.</op:operator><name pos:line="34" pos:column="39">IsNullOrWhiteSpace</name></name><argument_list pos:line="34" pos:column="57">(<argument><expr><name pos:line="34" pos:column="58">snippet</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="34" pos:column="66">,</op:operator>
                              <argument><expr><lit:literal type="string" pos:line="35" pos:column="31">"ProgramElement:Constructor - snippet cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="37" pos:column="13">Id</name> <op:operator pos:line="37" pos:column="16">=</op:operator> <call><name><name pos:line="37" pos:column="18">Guid</name><op:operator pos:line="37" pos:column="22">.</op:operator><name pos:line="37" pos:column="23">NewGuid</name></name><argument_list pos:line="37" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">DefinitionLineNumber</name> <op:operator pos:line="38" pos:column="34">=</op:operator> <name pos:line="38" pos:column="36">definitionLineNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">FullFilePath</name> <op:operator pos:line="39" pos:column="26">=</op:operator> <name pos:line="39" pos:column="28">fullFilePath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">RawSource</name> <op:operator pos:line="40" pos:column="23">=</op:operator> <name pos:line="40" pos:column="25">snippet</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">Name</name> <op:operator pos:line="41" pos:column="18">=</op:operator> <name pos:line="41" pos:column="20">name</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">public</specifier> <specifier pos:line="44" pos:column="16">static</specifier> <specifier pos:line="44" pos:column="23">readonly</specifier> <name pos:line="44" pos:column="32">String</name></type> <name pos:line="44" pos:column="39">UndefinedName</name> =<init pos:line="44" pos:column="54"> <expr><lit:literal type="string" pos:line="44" pos:column="55">"__undefined__"</lit:literal></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">private</specifier> <name pos:line="47" pos:column="17">string</name></type> <name pos:line="47" pos:column="24">_name</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <specifier pos:line="49" pos:column="16">virtual</specifier> <name pos:line="49" pos:column="24">string</name></type> <name pos:line="49" pos:column="31">Name</name>
        <block pos:line="50" pos:column="9">{
            <function><name pos:line="51" pos:column="13">get</name>
            <block pos:line="52" pos:column="13">{
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">_name</name> <op:operator pos:line="53" pos:column="27">==</op:operator> <name pos:line="53" pos:column="30">UndefinedName</name></expr>)</condition><then pos:line="53" pos:column="44"> <return pos:line="53" pos:column="45">return <expr><lit:literal type="string" pos:line="53" pos:column="52">""</lit:literal></expr>;</return></then></if>
                <return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">_name</name></expr>;</return>
            }</block></function>
            private <function><name pos:line="56" pos:column="21">set</name> <block pos:line="56" pos:column="25">{ <expr_stmt><expr><name pos:line="56" pos:column="27">_name</name> <op:operator pos:line="56" pos:column="33">=</op:operator> <name pos:line="56" pos:column="35">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">public</specifier> <specifier pos:line="59" pos:column="16">virtual</specifier> <name pos:line="59" pos:column="24">Guid</name></type> <name pos:line="59" pos:column="29">Id</name> <block pos:line="59" pos:column="32">{ <function><name pos:line="59" pos:column="34">get</name>;</function> private <function><name pos:line="59" pos:column="47">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <specifier pos:line="60" pos:column="16">virtual</specifier> <name pos:line="60" pos:column="24">int</name></type> <name pos:line="60" pos:column="28">DefinitionLineNumber</name> <block pos:line="60" pos:column="49">{ <function><name pos:line="60" pos:column="51">get</name>;</function> private <function><name pos:line="60" pos:column="64">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">virtual</specifier> <name pos:line="61" pos:column="24">string</name></type> <name pos:line="61" pos:column="31">FullFilePath</name> <block pos:line="61" pos:column="44">{ <function><name pos:line="61" pos:column="46">get</name>;</function> private <function><name pos:line="61" pos:column="59">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">virtual</specifier> <name pos:line="62" pos:column="24">string</name></type> <name pos:line="62" pos:column="31">RawSource</name> <block pos:line="62" pos:column="41">{ <function><name pos:line="62" pos:column="43">get</name>;</function> private <function><name pos:line="62" pos:column="56">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">public</specifier> <specifier pos:line="63" pos:column="16">virtual</specifier> <name pos:line="63" pos:column="24">ProgramElementType</name></type> <name pos:line="63" pos:column="43">ProgramElementType</name>
        <block pos:line="64" pos:column="9">{
            <function><name pos:line="65" pos:column="13">get</name>
            <block pos:line="66" pos:column="13">{
                <return pos:line="67" pos:column="17">return <expr><name><name pos:line="67" pos:column="24">ProgramElementType</name><op:operator pos:line="67" pos:column="42">.</op:operator><name pos:line="67" pos:column="43">Custom</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">string</name></type> <name pos:line="71" pos:column="23">FileExtension</name>
        <block pos:line="72" pos:column="9">{
            <function><name pos:line="73" pos:column="13">get</name> <block pos:line="73" pos:column="17">{ <return pos:line="73" pos:column="19">return <expr><call><name><name pos:line="73" pos:column="26">Path</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">GetExtension</name></name><argument_list pos:line="73" pos:column="43">(<argument><expr><name pos:line="73" pos:column="44">FullFilePath</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>


        <function><type><specifier pos:line="77" pos:column="9">public</specifier> <name><name pos:line="77" pos:column="16">List</name><argument_list pos:line="77" pos:column="20">&lt;<argument><name pos:line="77" pos:column="21">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="35">GetCustomProperties</name><parameter_list pos:line="77" pos:column="54">()</parameter_list>
        <block pos:line="78" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">propertyInfos</name> =<init pos:line="79" pos:column="32"> <expr><op:operator pos:line="79" pos:column="33">new</op:operator> <call><name><name pos:line="79" pos:column="37">List</name><argument_list pos:line="79" pos:column="41">&lt;<argument><name pos:line="79" pos:column="42">PropertyInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="79" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="81" pos:column="13">foreach (<init><decl><type><name pos:line="81" pos:column="22">var</name></type> <name pos:line="81" pos:column="26">property</name> <init pos:line="81" pos:column="35">in <expr><call><name><name pos:line="81" pos:column="38">this</name><op:operator pos:line="81" pos:column="42">.</op:operator><name pos:line="81" pos:column="43">GetType</name></name><argument_list pos:line="81" pos:column="50">()</argument_list></call><op:operator pos:line="81" pos:column="52">.</op:operator><call><name pos:line="81" pos:column="53">GetProperties</name><argument_list pos:line="81" pos:column="66">()</argument_list></call></expr></init></decl></init>)
            <block pos:line="82" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="83" pos:column="17">var</name></type> <name pos:line="83" pos:column="21">attribs</name> =<init pos:line="83" pos:column="30"> <expr><call><name><name pos:line="83" pos:column="31">property</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">GetCustomAttributes</name></name><argument_list pos:line="83" pos:column="59">(<argument><expr><call><name pos:line="83" pos:column="60">typeof</name><argument_list pos:line="83" pos:column="66">(<argument><expr><name pos:line="83" pos:column="67">CustomIndexFieldAttribute</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="83" pos:column="93">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="83" pos:column="95">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="84" pos:column="17">foreach (<init><decl><type><name pos:line="84" pos:column="26">var</name></type> <name pos:line="84" pos:column="30">attrib</name> <init pos:line="84" pos:column="37">in <expr><name pos:line="84" pos:column="40">attribs</name></expr></init></decl></init>)
                <block pos:line="85" pos:column="17">{
                    <if pos:line="86" pos:column="21">if <condition pos:line="86" pos:column="24">(<expr><call><name><name pos:line="86" pos:column="25">attrib</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">GetType</name></name><argument_list pos:line="86" pos:column="39">()</argument_list></call><op:operator pos:line="86" pos:column="41">.</op:operator><call><name pos:line="86" pos:column="42">Equals</name><argument_list pos:line="86" pos:column="48">(<argument><expr><call><name pos:line="86" pos:column="49">typeof</name><argument_list pos:line="86" pos:column="55">(<argument><expr><name pos:line="86" pos:column="56">CustomIndexFieldAttribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="84">
                    <block pos:line="87" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="88" pos:column="25">propertyInfos</name><op:operator pos:line="88" pos:column="38">.</op:operator><name pos:line="88" pos:column="39">Add</name></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
                <if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><call><name><name pos:line="91" pos:column="21">property</name><op:operator pos:line="91" pos:column="29">.</op:operator><name pos:line="91" pos:column="30">Name</name><op:operator pos:line="91" pos:column="34">.</op:operator><name pos:line="91" pos:column="35">Equals</name></name><argument_list pos:line="91" pos:column="41">(<argument><expr><name pos:line="91" pos:column="42">CustomTypeTag</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="57">
                <block pos:line="92" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="93" pos:column="21">propertyInfos</name><op:operator pos:line="93" pos:column="34">.</op:operator><name pos:line="93" pos:column="35">Add</name></name><argument_list pos:line="93" pos:column="38">(<argument><expr><name pos:line="93" pos:column="39">property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="96" pos:column="13">return <expr><name pos:line="96" pos:column="20">propertyInfos</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="99" pos:column="9">public</specifier> <specifier pos:line="99" pos:column="16">virtual</specifier> <name pos:line="99" pos:column="24">string</name></type> <name pos:line="99" pos:column="31">GetName</name><parameter_list pos:line="99" pos:column="38">()</parameter_list>
        <block pos:line="100" pos:column="9">{
            <return pos:line="101" pos:column="13">return <expr><call><name><name pos:line="101" pos:column="20">ProgramElementType</name><op:operator pos:line="101" pos:column="38">.</op:operator><name pos:line="101" pos:column="39">ToString</name></name><argument_list pos:line="101" pos:column="47">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
