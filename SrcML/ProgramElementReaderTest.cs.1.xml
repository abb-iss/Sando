<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\TestFiles\Searching\ProgramElementReaderTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Lucene</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Net</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">Documents</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">ExtensionContracts</name><op:operator pos:line="3" pos:column="31">.</op:operator><name pos:line="3" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Indexer</name><op:operator pos:line="4" pos:column="20">.</op:operator><name pos:line="4" pos:column="21">Documents</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Indexer</name><op:operator pos:line="5" pos:column="20">.</op:operator><name pos:line="5" pos:column="21">Documents</name><op:operator pos:line="5" pos:column="30">.</op:operator><name pos:line="5" pos:column="31">Converters</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Indexer</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Searching</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">UnitTestHelpers</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">UnitTestHelpers</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Indexer</name><op:operator pos:line="10" pos:column="24">.</op:operator><name pos:line="10" pos:column="25">UnitTests</name><op:operator pos:line="10" pos:column="34">.</op:operator><name pos:line="10" pos:column="35">Searching</name></name>
<block pos:line="11" pos:column="1">{
	<class><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="13" pos:column="9">public</specifier> class <name pos:line="13" pos:column="22">ProgramElementReaderTest</name>
	<block pos:line="14" pos:column="9">{
		<function><type><attribute pos:line="15" pos:column="17">[<expr><name pos:line="15" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="16" pos:column="17">public</specifier> <name pos:line="16" pos:column="24">void</name></type> <name pos:line="16" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidClassElementForValidDocument</name><parameter_list pos:line="16" pos:column="119">()</parameter_list>
		<block pos:line="17" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">ClassElement</name></type> <name pos:line="18" pos:column="38">element</name> =<init pos:line="18" pos:column="47"> <expr><call><name><name pos:line="18" pos:column="48">SampleProgramElementFactory</name><op:operator pos:line="18" pos:column="75">.</op:operator><name pos:line="18" pos:column="76">GetSampleClassElement</name></name><argument_list pos:line="18" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">Document</name></type> <name pos:line="19" pos:column="34">document</name> =<init pos:line="19" pos:column="44"> <expr><call><name><name pos:line="19" pos:column="45">DocumentFactory</name><op:operator pos:line="19" pos:column="60">.</op:operator><name pos:line="19" pos:column="61">Create</name></name><argument_list pos:line="19" pos:column="67">(<argument><expr><name pos:line="19" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="19" pos:column="76">.</op:operator><call><name pos:line="19" pos:column="77">GetDocument</name><argument_list pos:line="19" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="21" pos:column="13">ClassElement</name></type> <name pos:line="21" pos:column="26">returnedElement</name> =<init pos:line="21" pos:column="43"> <expr><call><name><name pos:line="21" pos:column="44">ConverterFromHitToProgramElement</name><op:operator pos:line="21" pos:column="76">.</op:operator><name pos:line="21" pos:column="77">Create</name></name><argument_list pos:line="21" pos:column="83">(<argument><expr><name pos:line="21" pos:column="84">document</name></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="93">.</op:operator><call><name pos:line="21" pos:column="94">Convert</name><argument_list pos:line="21" pos:column="101">()</argument_list></call> <op:operator pos:line="21" pos:column="104">as</op:operator> <name pos:line="21" pos:column="107">ClassElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="23" pos:column="25">Assert</name><op:operator pos:line="23" pos:column="31">.</op:operator><name pos:line="23" pos:column="32">IsNotNull</name></name><argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="23" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="23" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="24" pos:column="25">Assert</name><op:operator pos:line="24" pos:column="31">.</op:operator><name pos:line="24" pos:column="32">True</name></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name><name pos:line="24" pos:column="37">element</name><op:operator pos:line="24" pos:column="44">.</op:operator><name pos:line="24" pos:column="45">AccessLevel</name></name> <op:operator pos:line="24" pos:column="57">==</op:operator> <name><name pos:line="24" pos:column="60">returnedElement</name><op:operator pos:line="24" pos:column="75">.</op:operator><name pos:line="24" pos:column="76">AccessLevel</name></name></expr></argument><op:operator pos:line="24" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="24" pos:column="89">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">Assert</name><op:operator pos:line="25" pos:column="31">.</op:operator><name pos:line="25" pos:column="32">True</name></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name><name pos:line="25" pos:column="37">element</name><op:operator pos:line="25" pos:column="44">.</op:operator><name pos:line="25" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="25" pos:column="66">==</op:operator> <name><name pos:line="25" pos:column="69">returnedElement</name><op:operator pos:line="25" pos:column="84">.</op:operator><name pos:line="25" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="25" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="25" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">Assert</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">True</name></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name><name pos:line="26" pos:column="37">element</name><op:operator pos:line="26" pos:column="44">.</op:operator><name pos:line="26" pos:column="45">ExtendedClasses</name></name> <op:operator pos:line="26" pos:column="61">==</op:operator> <name><name pos:line="26" pos:column="64">returnedElement</name><op:operator pos:line="26" pos:column="79">.</op:operator><name pos:line="26" pos:column="80">ExtendedClasses</name></name></expr></argument><op:operator pos:line="26" pos:column="95">,</op:operator> <argument><expr><lit:literal type="string" pos:line="26" pos:column="97">"ExtendedClasses is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="27" pos:column="25">Assert</name><op:operator pos:line="27" pos:column="31">.</op:operator><name pos:line="27" pos:column="32">True</name></name><argument_list pos:line="27" pos:column="36">(<argument><expr><call><name pos:line="27" pos:column="37">StandardizeFilePath</name><argument_list pos:line="27" pos:column="56">(<argument><expr><name><name pos:line="27" pos:column="57">element</name><op:operator pos:line="27" pos:column="64">.</op:operator><name pos:line="27" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="27" pos:column="79">==</op:operator> <name><name pos:line="27" pos:column="82">returnedElement</name><op:operator pos:line="27" pos:column="97">.</op:operator><name pos:line="27" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="27" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="27" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="28" pos:column="25">Assert</name><op:operator pos:line="28" pos:column="31">.</op:operator><name pos:line="28" pos:column="32">True</name></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name><name pos:line="28" pos:column="37">element</name><op:operator pos:line="28" pos:column="44">.</op:operator><name pos:line="28" pos:column="45">ImplementedInterfaces</name></name> <op:operator pos:line="28" pos:column="67">==</op:operator> <name><name pos:line="28" pos:column="70">returnedElement</name><op:operator pos:line="28" pos:column="85">.</op:operator><name pos:line="28" pos:column="86">ImplementedInterfaces</name></name></expr></argument><op:operator pos:line="28" pos:column="107">,</op:operator> <argument><expr><lit:literal type="string" pos:line="28" pos:column="109">"ImplementedInterfaces is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">Assert</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">True</name></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">element</name><op:operator pos:line="29" pos:column="44">.</op:operator><name pos:line="29" pos:column="45">Name</name></name> <op:operator pos:line="29" pos:column="50">==</op:operator> <name><name pos:line="29" pos:column="53">returnedElement</name><op:operator pos:line="29" pos:column="68">.</op:operator><name pos:line="29" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="29" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="29" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="30" pos:column="25">Assert</name><op:operator pos:line="30" pos:column="31">.</op:operator><name pos:line="30" pos:column="32">True</name></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name><name pos:line="30" pos:column="37">element</name><op:operator pos:line="30" pos:column="44">.</op:operator><name pos:line="30" pos:column="45">Namespace</name></name> <op:operator pos:line="30" pos:column="55">==</op:operator> <name><name pos:line="30" pos:column="58">returnedElement</name><op:operator pos:line="30" pos:column="73">.</op:operator><name pos:line="30" pos:column="74">Namespace</name></name></expr></argument><op:operator pos:line="30" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="30" pos:column="85">"Namespace is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">Assert</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">True</name></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name><name pos:line="31" pos:column="37">element</name><op:operator pos:line="31" pos:column="44">.</op:operator><name pos:line="31" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="31" pos:column="64">==</op:operator> <name><name pos:line="31" pos:column="67">returnedElement</name><op:operator pos:line="31" pos:column="82">.</op:operator><name pos:line="31" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="31" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="31" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="32" pos:column="25">Assert</name><op:operator pos:line="32" pos:column="31">.</op:operator><name pos:line="32" pos:column="32">True</name></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name><name pos:line="32" pos:column="37">element</name><op:operator pos:line="32" pos:column="44">.</op:operator><name pos:line="32" pos:column="45">RawSource</name></name> <op:operator pos:line="32" pos:column="55">==</op:operator> <name><name pos:line="32" pos:column="58">returnedElement</name><op:operator pos:line="32" pos:column="73">.</op:operator><name pos:line="32" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="32" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="32" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="35" pos:column="17">[<expr><name pos:line="35" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="36" pos:column="17">public</specifier> <name pos:line="36" pos:column="24">void</name></type> <name pos:line="36" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidCommentElementForValidDocument</name><parameter_list pos:line="36" pos:column="121">()</parameter_list>
		<block pos:line="37" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">CommentElement</name></type> <name pos:line="38" pos:column="40">element</name> =<init pos:line="38" pos:column="49"> <expr><call><name><name pos:line="38" pos:column="50">SampleProgramElementFactory</name><op:operator pos:line="38" pos:column="77">.</op:operator><name pos:line="38" pos:column="78">GetSampleCommentElement</name></name><argument_list pos:line="38" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">Document</name></type> <name pos:line="39" pos:column="34">document</name> =<init pos:line="39" pos:column="44"> <expr><call><name><name pos:line="39" pos:column="45">DocumentFactory</name><op:operator pos:line="39" pos:column="60">.</op:operator><name pos:line="39" pos:column="61">Create</name></name><argument_list pos:line="39" pos:column="67">(<argument><expr><name pos:line="39" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="76">.</op:operator><call><name pos:line="39" pos:column="77">GetDocument</name><argument_list pos:line="39" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">CommentElement</name></type> <name pos:line="41" pos:column="28">returnedElement</name> =<init pos:line="41" pos:column="45"> <expr><call><name><name pos:line="41" pos:column="46">ConverterFromHitToProgramElement</name><op:operator pos:line="41" pos:column="78">.</op:operator><name pos:line="41" pos:column="79">Create</name></name><argument_list pos:line="41" pos:column="85">(<argument><expr><name pos:line="41" pos:column="86">document</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="95">.</op:operator><call><name pos:line="41" pos:column="96">Convert</name><argument_list pos:line="41" pos:column="103">()</argument_list></call> <op:operator pos:line="41" pos:column="106">as</op:operator> <name pos:line="41" pos:column="109">CommentElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">Assert</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">IsNotNull</name></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name pos:line="43" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="43" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="43" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">True</name></name><argument_list pos:line="44" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="25">"not stored in index"</lit:literal> <op:operator pos:line="44" pos:column="47">==</op:operator> <name><name pos:line="44" pos:column="50">returnedElement</name><op:operator pos:line="44" pos:column="65">.</op:operator><name pos:line="44" pos:column="66">Body</name></name></expr></argument><op:operator pos:line="44" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="44" pos:column="72">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">Assert</name><op:operator pos:line="45" pos:column="31">.</op:operator><name pos:line="45" pos:column="32">True</name></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name><name pos:line="45" pos:column="37">element</name><op:operator pos:line="45" pos:column="44">.</op:operator><name pos:line="45" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="45" pos:column="66">==</op:operator> <name><name pos:line="45" pos:column="69">returnedElement</name><op:operator pos:line="45" pos:column="84">.</op:operator><name pos:line="45" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="45" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="45" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">Assert</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">True</name></name><argument_list pos:line="46" pos:column="36">(<argument><expr><call><name pos:line="46" pos:column="37">StandardizeFilePath</name><argument_list pos:line="46" pos:column="56">(<argument><expr><name><name pos:line="46" pos:column="57">element</name><op:operator pos:line="46" pos:column="64">.</op:operator><name pos:line="46" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="79">==</op:operator> <name><name pos:line="46" pos:column="82">returnedElement</name><op:operator pos:line="46" pos:column="97">.</op:operator><name pos:line="46" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="46" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="46" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">Assert</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">True</name></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name><name pos:line="47" pos:column="37">element</name><op:operator pos:line="47" pos:column="44">.</op:operator><name pos:line="47" pos:column="45">Name</name></name> <op:operator pos:line="47" pos:column="50">==</op:operator> <name><name pos:line="47" pos:column="53">returnedElement</name><op:operator pos:line="47" pos:column="68">.</op:operator><name pos:line="47" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="47" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="47" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">Assert</name><op:operator pos:line="48" pos:column="31">.</op:operator><name pos:line="48" pos:column="32">True</name></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name><name pos:line="48" pos:column="37">element</name><op:operator pos:line="48" pos:column="44">.</op:operator><name pos:line="48" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="48" pos:column="64">==</op:operator> <name><name pos:line="48" pos:column="67">returnedElement</name><op:operator pos:line="48" pos:column="82">.</op:operator><name pos:line="48" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="48" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="48" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">Assert</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">True</name></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name><name pos:line="49" pos:column="37">element</name><op:operator pos:line="49" pos:column="44">.</op:operator><name pos:line="49" pos:column="45">RawSource</name></name> <op:operator pos:line="49" pos:column="55">==</op:operator> <name><name pos:line="49" pos:column="58">returnedElement</name><op:operator pos:line="49" pos:column="73">.</op:operator><name pos:line="49" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="49" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="49" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="52" pos:column="17">[<expr><name pos:line="52" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="53" pos:column="17">public</specifier> <name pos:line="53" pos:column="24">void</name></type> <name pos:line="53" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidEnumElementForValidDocument</name><parameter_list pos:line="53" pos:column="118">()</parameter_list>
		<block pos:line="54" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">EnumElement</name></type> <name pos:line="55" pos:column="37">element</name> =<init pos:line="55" pos:column="46"> <expr><call><name><name pos:line="55" pos:column="47">SampleProgramElementFactory</name><op:operator pos:line="55" pos:column="74">.</op:operator><name pos:line="55" pos:column="75">GetSampleEnumElement</name></name><argument_list pos:line="55" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">Document</name></type> <name pos:line="56" pos:column="34">document</name> =<init pos:line="56" pos:column="44"> <expr><call><name><name pos:line="56" pos:column="45">DocumentFactory</name><op:operator pos:line="56" pos:column="60">.</op:operator><name pos:line="56" pos:column="61">Create</name></name><argument_list pos:line="56" pos:column="67">(<argument><expr><name pos:line="56" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="76">.</op:operator><call><name pos:line="56" pos:column="77">GetDocument</name><argument_list pos:line="56" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="58" pos:column="13">EnumElement</name></type> <name pos:line="58" pos:column="25">returnedElement</name> =<init pos:line="58" pos:column="42"> <expr><call><name><name pos:line="58" pos:column="43">ConverterFromHitToProgramElement</name><op:operator pos:line="58" pos:column="75">.</op:operator><name pos:line="58" pos:column="76">Create</name></name><argument_list pos:line="58" pos:column="82">(<argument><expr><name pos:line="58" pos:column="83">document</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="92">.</op:operator><call><name pos:line="58" pos:column="93">Convert</name><argument_list pos:line="58" pos:column="100">()</argument_list></call> <op:operator pos:line="58" pos:column="103">as</op:operator> <name pos:line="58" pos:column="106">EnumElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Assert</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">IsNotNull</name></name><argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="60" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="60" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">Assert</name><op:operator pos:line="61" pos:column="31">.</op:operator><name pos:line="61" pos:column="32">True</name></name><argument_list pos:line="61" pos:column="36">(<argument><expr><name><name pos:line="61" pos:column="37">element</name><op:operator pos:line="61" pos:column="44">.</op:operator><name pos:line="61" pos:column="45">AccessLevel</name></name> <op:operator pos:line="61" pos:column="57">==</op:operator> <name><name pos:line="61" pos:column="60">returnedElement</name><op:operator pos:line="61" pos:column="75">.</op:operator><name pos:line="61" pos:column="76">AccessLevel</name></name></expr></argument><op:operator pos:line="61" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="61" pos:column="89">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="62" pos:column="25">Assert</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">True</name></name><argument_list pos:line="62" pos:column="36">(<argument><expr><name><name pos:line="62" pos:column="37">element</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="62" pos:column="66">==</op:operator> <name><name pos:line="62" pos:column="69">returnedElement</name><op:operator pos:line="62" pos:column="84">.</op:operator><name pos:line="62" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="62" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="62" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">Assert</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">True</name></name><argument_list pos:line="63" pos:column="36">(<argument><expr><call><name pos:line="63" pos:column="37">StandardizeFilePath</name><argument_list pos:line="63" pos:column="56">(<argument><expr><name><name pos:line="63" pos:column="57">element</name><op:operator pos:line="63" pos:column="64">.</op:operator><name pos:line="63" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="63" pos:column="79">==</op:operator> <name><name pos:line="63" pos:column="82">returnedElement</name><op:operator pos:line="63" pos:column="97">.</op:operator><name pos:line="63" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="63" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="63" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="64" pos:column="25">Assert</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">True</name></name><argument_list pos:line="64" pos:column="36">(<argument><expr><name><name pos:line="64" pos:column="37">element</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">Name</name></name> <op:operator pos:line="64" pos:column="50">==</op:operator> <name><name pos:line="64" pos:column="53">returnedElement</name><op:operator pos:line="64" pos:column="68">.</op:operator><name pos:line="64" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="64" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="64" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="65" pos:column="25">Assert</name><op:operator pos:line="65" pos:column="31">.</op:operator><name pos:line="65" pos:column="32">True</name></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name><name pos:line="65" pos:column="37">element</name><op:operator pos:line="65" pos:column="44">.</op:operator><name pos:line="65" pos:column="45">Namespace</name></name> <op:operator pos:line="65" pos:column="55">==</op:operator> <name><name pos:line="65" pos:column="58">returnedElement</name><op:operator pos:line="65" pos:column="73">.</op:operator><name pos:line="65" pos:column="74">Namespace</name></name></expr></argument><op:operator pos:line="65" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="65" pos:column="85">"Namespace is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">Assert</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">True</name></name><argument_list pos:line="66" pos:column="36">(<argument><expr><name><name pos:line="66" pos:column="37">element</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="66" pos:column="64">==</op:operator> <name><name pos:line="66" pos:column="67">returnedElement</name><op:operator pos:line="66" pos:column="82">.</op:operator><name pos:line="66" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="66" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="66" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="67" pos:column="25">Assert</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">True</name></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name><name pos:line="67" pos:column="37">element</name><op:operator pos:line="67" pos:column="44">.</op:operator><name pos:line="67" pos:column="45">RawSource</name></name> <op:operator pos:line="67" pos:column="55">==</op:operator> <name><name pos:line="67" pos:column="58">returnedElement</name><op:operator pos:line="67" pos:column="73">.</op:operator><name pos:line="67" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="67" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="67" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Assert</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">True</name></name><argument_list pos:line="68" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="25">"not stored in index"</lit:literal> <op:operator pos:line="68" pos:column="47">==</op:operator> <name><name pos:line="68" pos:column="50">returnedElement</name><op:operator pos:line="68" pos:column="65">.</op:operator><name pos:line="68" pos:column="66">Body</name></name></expr></argument><op:operator pos:line="68" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="68" pos:column="72">"Body is different"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="71" pos:column="17">[<expr><name pos:line="71" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="72" pos:column="17">public</specifier> <name pos:line="72" pos:column="24">void</name></type> <name pos:line="72" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidFieldElementForValidDocument</name><parameter_list pos:line="72" pos:column="119">()</parameter_list>
		<block pos:line="73" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">FieldElement</name></type> <name pos:line="74" pos:column="38">element</name> =<init pos:line="74" pos:column="47"> <expr><call><name><name pos:line="74" pos:column="48">SampleProgramElementFactory</name><op:operator pos:line="74" pos:column="75">.</op:operator><name pos:line="74" pos:column="76">GetSampleFieldElement</name></name><argument_list pos:line="74" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">Document</name></type> <name pos:line="75" pos:column="34">document</name> =<init pos:line="75" pos:column="44"> <expr><call><name><name pos:line="75" pos:column="45">DocumentFactory</name><op:operator pos:line="75" pos:column="60">.</op:operator><name pos:line="75" pos:column="61">Create</name></name><argument_list pos:line="75" pos:column="67">(<argument><expr><name pos:line="75" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="76">.</op:operator><call><name pos:line="75" pos:column="77">GetDocument</name><argument_list pos:line="75" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="77" pos:column="13">FieldElement</name></type> <name pos:line="77" pos:column="26">returnedElement</name> =<init pos:line="77" pos:column="43"> <expr><call><name><name pos:line="77" pos:column="44">ConverterFromHitToProgramElement</name><op:operator pos:line="77" pos:column="76">.</op:operator><name pos:line="77" pos:column="77">Create</name></name><argument_list pos:line="77" pos:column="83">(<argument><expr><name pos:line="77" pos:column="84">document</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="93">.</op:operator><call><name pos:line="77" pos:column="94">Convert</name><argument_list pos:line="77" pos:column="101">()</argument_list></call> <op:operator pos:line="77" pos:column="104">as</op:operator> <name pos:line="77" pos:column="107">FieldElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="79" pos:column="25">Assert</name><op:operator pos:line="79" pos:column="31">.</op:operator><name pos:line="79" pos:column="32">IsNotNull</name></name><argument_list pos:line="79" pos:column="41">(<argument><expr><name pos:line="79" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="79" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="79" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">Assert</name><op:operator pos:line="80" pos:column="31">.</op:operator><name pos:line="80" pos:column="32">True</name></name><argument_list pos:line="80" pos:column="36">(<argument><expr><name><name pos:line="80" pos:column="37">element</name><op:operator pos:line="80" pos:column="44">.</op:operator><name pos:line="80" pos:column="45">AccessLevel</name></name> <op:operator pos:line="80" pos:column="57">==</op:operator> <name><name pos:line="80" pos:column="60">returnedElement</name><op:operator pos:line="80" pos:column="75">.</op:operator><name pos:line="80" pos:column="76">AccessLevel</name></name></expr></argument><op:operator pos:line="80" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="80" pos:column="89">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">Assert</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">True</name></name><argument_list pos:line="81" pos:column="36">(<argument><expr><name><name pos:line="81" pos:column="37">element</name><op:operator pos:line="81" pos:column="44">.</op:operator><name pos:line="81" pos:column="45">ClassId</name></name> <op:operator pos:line="81" pos:column="53">==</op:operator> <name><name pos:line="81" pos:column="56">returnedElement</name><op:operator pos:line="81" pos:column="71">.</op:operator><name pos:line="81" pos:column="72">ClassId</name></name></expr></argument><op:operator pos:line="81" pos:column="79">,</op:operator> <argument><expr><lit:literal type="string" pos:line="81" pos:column="81">"ClassId is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="82" pos:column="25">Assert</name><op:operator pos:line="82" pos:column="31">.</op:operator><name pos:line="82" pos:column="32">True</name></name><argument_list pos:line="82" pos:column="36">(<argument><expr><name><name pos:line="82" pos:column="37">element</name><op:operator pos:line="82" pos:column="44">.</op:operator><name pos:line="82" pos:column="45">ClassName</name></name> <op:operator pos:line="82" pos:column="55">==</op:operator> <name><name pos:line="82" pos:column="58">returnedElement</name><op:operator pos:line="82" pos:column="73">.</op:operator><name pos:line="82" pos:column="74">ClassName</name></name></expr></argument><op:operator pos:line="82" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="82" pos:column="85">"ClassName is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">Assert</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">True</name></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name><name pos:line="83" pos:column="37">element</name><op:operator pos:line="83" pos:column="44">.</op:operator><name pos:line="83" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="83" pos:column="66">==</op:operator> <name><name pos:line="83" pos:column="69">returnedElement</name><op:operator pos:line="83" pos:column="84">.</op:operator><name pos:line="83" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="83" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="83" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">Assert</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">True</name></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name><name pos:line="84" pos:column="37">element</name><op:operator pos:line="84" pos:column="44">.</op:operator><name pos:line="84" pos:column="45">FieldType</name></name> <op:operator pos:line="84" pos:column="55">==</op:operator> <name><name pos:line="84" pos:column="58">returnedElement</name><op:operator pos:line="84" pos:column="73">.</op:operator><name pos:line="84" pos:column="74">FieldType</name></name></expr></argument><op:operator pos:line="84" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="84" pos:column="85">"FieldType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">Assert</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">True</name></name><argument_list pos:line="85" pos:column="36">(<argument><expr><call><name pos:line="85" pos:column="37">StandardizeFilePath</name><argument_list pos:line="85" pos:column="56">(<argument><expr><name><name pos:line="85" pos:column="57">element</name><op:operator pos:line="85" pos:column="64">.</op:operator><name pos:line="85" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="85" pos:column="79">==</op:operator> <name><name pos:line="85" pos:column="82">returnedElement</name><op:operator pos:line="85" pos:column="97">.</op:operator><name pos:line="85" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="85" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="85" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="86" pos:column="25">Assert</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">True</name></name><argument_list pos:line="86" pos:column="36">(<argument><expr><name><name pos:line="86" pos:column="37">element</name><op:operator pos:line="86" pos:column="44">.</op:operator><name pos:line="86" pos:column="45">Name</name></name> <op:operator pos:line="86" pos:column="50">==</op:operator> <name><name pos:line="86" pos:column="53">returnedElement</name><op:operator pos:line="86" pos:column="68">.</op:operator><name pos:line="86" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="86" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="86" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="87" pos:column="25">Assert</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">True</name></name><argument_list pos:line="87" pos:column="36">(<argument><expr><name><name pos:line="87" pos:column="37">element</name><op:operator pos:line="87" pos:column="44">.</op:operator><name pos:line="87" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="87" pos:column="64">==</op:operator> <name><name pos:line="87" pos:column="67">returnedElement</name><op:operator pos:line="87" pos:column="82">.</op:operator><name pos:line="87" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="87" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="87" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="88" pos:column="25">Assert</name><op:operator pos:line="88" pos:column="31">.</op:operator><name pos:line="88" pos:column="32">True</name></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name><name pos:line="88" pos:column="37">element</name><op:operator pos:line="88" pos:column="44">.</op:operator><name pos:line="88" pos:column="45">RawSource</name></name> <op:operator pos:line="88" pos:column="55">==</op:operator> <name><name pos:line="88" pos:column="58">returnedElement</name><op:operator pos:line="88" pos:column="73">.</op:operator><name pos:line="88" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="88" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="88" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="91" pos:column="17">[<expr><name pos:line="91" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="92" pos:column="17">public</specifier> <name pos:line="92" pos:column="24">void</name></type> <name pos:line="92" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidMethodElementForValidDocument</name><parameter_list pos:line="92" pos:column="120">()</parameter_list>
		<block pos:line="93" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="94" pos:column="25">MethodElement</name></type> <name pos:line="94" pos:column="39">element</name> =<init pos:line="94" pos:column="48"> <expr><call><name><name pos:line="94" pos:column="49">SampleProgramElementFactory</name><op:operator pos:line="94" pos:column="76">.</op:operator><name pos:line="94" pos:column="77">GetSampleMethodElement</name></name><argument_list pos:line="94" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="95" pos:column="25">Document</name></type> <name pos:line="95" pos:column="34">document</name> =<init pos:line="95" pos:column="44"> <expr><call><name><name pos:line="95" pos:column="45">DocumentFactory</name><op:operator pos:line="95" pos:column="60">.</op:operator><name pos:line="95" pos:column="61">Create</name></name><argument_list pos:line="95" pos:column="67">(<argument><expr><name pos:line="95" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="76">.</op:operator><call><name pos:line="95" pos:column="77">GetDocument</name><argument_list pos:line="95" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="97" pos:column="13">MethodElement</name></type> <name pos:line="97" pos:column="27">returnedElement</name> =<init pos:line="97" pos:column="44"> <expr><call><name><name pos:line="97" pos:column="45">ConverterFromHitToProgramElement</name><op:operator pos:line="97" pos:column="77">.</op:operator><name pos:line="97" pos:column="78">Create</name></name><argument_list pos:line="97" pos:column="84">(<argument><expr><name pos:line="97" pos:column="85">document</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="94">.</op:operator><call><name pos:line="97" pos:column="95">Convert</name><argument_list pos:line="97" pos:column="102">()</argument_list></call> <op:operator pos:line="97" pos:column="105">as</op:operator> <name pos:line="97" pos:column="108">MethodElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">Assert</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">IsNotNull</name></name><argument_list pos:line="99" pos:column="41">(<argument><expr><name pos:line="99" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="99" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="99" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">Assert</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">True</name></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name><name pos:line="100" pos:column="37">element</name><op:operator pos:line="100" pos:column="44">.</op:operator><name pos:line="100" pos:column="45">AccessLevel</name></name> <op:operator pos:line="100" pos:column="57">==</op:operator> <name><name pos:line="100" pos:column="60">returnedElement</name><op:operator pos:line="100" pos:column="75">.</op:operator><name pos:line="100" pos:column="76">AccessLevel</name></name></expr></argument><op:operator pos:line="100" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="100" pos:column="89">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="101" pos:column="25">Assert</name><op:operator pos:line="101" pos:column="31">.</op:operator><name pos:line="101" pos:column="32">True</name></name><argument_list pos:line="101" pos:column="36">(<argument><expr><name><name pos:line="101" pos:column="37">element</name><op:operator pos:line="101" pos:column="44">.</op:operator><name pos:line="101" pos:column="45">Arguments</name></name> <op:operator pos:line="101" pos:column="55">==</op:operator> <name><name pos:line="101" pos:column="58">returnedElement</name><op:operator pos:line="101" pos:column="73">.</op:operator><name pos:line="101" pos:column="74">Arguments</name></name></expr></argument><op:operator pos:line="101" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="101" pos:column="85">"Arguments is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">True</name></name><argument_list pos:line="102" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="25">"not stored in index"</lit:literal> <op:operator pos:line="102" pos:column="47">==</op:operator> <name><name pos:line="102" pos:column="50">returnedElement</name><op:operator pos:line="102" pos:column="65">.</op:operator><name pos:line="102" pos:column="66">Body</name></name></expr></argument><op:operator pos:line="102" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="102" pos:column="72">"Body is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">Assert</name><op:operator pos:line="103" pos:column="31">.</op:operator><name pos:line="103" pos:column="32">True</name></name><argument_list pos:line="103" pos:column="36">(<argument><expr><name><name pos:line="103" pos:column="37">element</name><op:operator pos:line="103" pos:column="44">.</op:operator><name pos:line="103" pos:column="45">ClassId</name></name> <op:operator pos:line="103" pos:column="53">==</op:operator> <name><name pos:line="103" pos:column="56">returnedElement</name><op:operator pos:line="103" pos:column="71">.</op:operator><name pos:line="103" pos:column="72">ClassId</name></name></expr></argument><op:operator pos:line="103" pos:column="79">,</op:operator> <argument><expr><lit:literal type="string" pos:line="103" pos:column="81">"ClassId is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">Assert</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">True</name></name><argument_list pos:line="104" pos:column="36">(<argument><expr><name><name pos:line="104" pos:column="37">element</name><op:operator pos:line="104" pos:column="44">.</op:operator><name pos:line="104" pos:column="45">ClassName</name></name> <op:operator pos:line="104" pos:column="55">==</op:operator> <call><name><name pos:line="104" pos:column="58">returnedElement</name><op:operator pos:line="104" pos:column="73">.</op:operator><name pos:line="104" pos:column="74">ClassName</name><op:operator pos:line="104" pos:column="83">.</op:operator><name pos:line="104" pos:column="84">ToSandoDisplayable</name></name><argument_list pos:line="104" pos:column="102">()</argument_list></call></expr></argument><op:operator pos:line="104" pos:column="104">,</op:operator> <argument><expr><lit:literal type="string" pos:line="104" pos:column="106">"ClassName is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="105" pos:column="25">Assert</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">True</name></name><argument_list pos:line="105" pos:column="36">(<argument><expr><name><name pos:line="105" pos:column="37">element</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="105" pos:column="66">==</op:operator> <name><name pos:line="105" pos:column="69">returnedElement</name><op:operator pos:line="105" pos:column="84">.</op:operator><name pos:line="105" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="105" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="105" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="106" pos:column="25">Assert</name><op:operator pos:line="106" pos:column="31">.</op:operator><name pos:line="106" pos:column="32">True</name></name><argument_list pos:line="106" pos:column="36">(<argument><expr><call><name pos:line="106" pos:column="37">StandardizeFilePath</name><argument_list pos:line="106" pos:column="56">(<argument><expr><name><name pos:line="106" pos:column="57">element</name><op:operator pos:line="106" pos:column="64">.</op:operator><name pos:line="106" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="79">==</op:operator> <name><name pos:line="106" pos:column="82">returnedElement</name><op:operator pos:line="106" pos:column="97">.</op:operator><name pos:line="106" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="106" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="106" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">Assert</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">True</name></name><argument_list pos:line="107" pos:column="36">(<argument><expr><name><name pos:line="107" pos:column="37">element</name><op:operator pos:line="107" pos:column="44">.</op:operator><name pos:line="107" pos:column="45">Name</name></name> <op:operator pos:line="107" pos:column="50">==</op:operator> <name><name pos:line="107" pos:column="53">returnedElement</name><op:operator pos:line="107" pos:column="68">.</op:operator><name pos:line="107" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="107" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="107" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="108" pos:column="25">Assert</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">True</name></name><argument_list pos:line="108" pos:column="36">(<argument><expr><name><name pos:line="108" pos:column="37">element</name><op:operator pos:line="108" pos:column="44">.</op:operator><name pos:line="108" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="108" pos:column="64">==</op:operator> <name><name pos:line="108" pos:column="67">returnedElement</name><op:operator pos:line="108" pos:column="82">.</op:operator><name pos:line="108" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="108" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="108" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="109" pos:column="25">Assert</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">True</name></name><argument_list pos:line="109" pos:column="36">(<argument><expr><name><name pos:line="109" pos:column="37">element</name><op:operator pos:line="109" pos:column="44">.</op:operator><name pos:line="109" pos:column="45">ReturnType</name></name> <op:operator pos:line="109" pos:column="56">==</op:operator> <name><name pos:line="109" pos:column="59">returnedElement</name><op:operator pos:line="109" pos:column="74">.</op:operator><name pos:line="109" pos:column="75">ReturnType</name></name></expr></argument><op:operator pos:line="109" pos:column="85">,</op:operator> <argument><expr><lit:literal type="string" pos:line="109" pos:column="87">"ReturnType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="110" pos:column="25">Assert</name><op:operator pos:line="110" pos:column="31">.</op:operator><name pos:line="110" pos:column="32">True</name></name><argument_list pos:line="110" pos:column="36">(<argument><expr><name><name pos:line="110" pos:column="37">element</name><op:operator pos:line="110" pos:column="44">.</op:operator><name pos:line="110" pos:column="45">RawSource</name></name> <op:operator pos:line="110" pos:column="55">==</op:operator> <name><name pos:line="110" pos:column="58">returnedElement</name><op:operator pos:line="110" pos:column="73">.</op:operator><name pos:line="110" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="110" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="110" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="113" pos:column="17">[<expr><name pos:line="113" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="114" pos:column="17">public</specifier> <name pos:line="114" pos:column="24">void</name></type> <name pos:line="114" pos:column="29">ProgramElementReader_ReadProgramElementFromDocumentReturnValidPropertyElementForValidDocument</name><parameter_list pos:line="114" pos:column="122">()</parameter_list>
		<block pos:line="115" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="116" pos:column="25">PropertyElement</name></type> <name pos:line="116" pos:column="41">element</name> =<init pos:line="116" pos:column="50"> <expr><call><name><name pos:line="116" pos:column="51">SampleProgramElementFactory</name><op:operator pos:line="116" pos:column="78">.</op:operator><name pos:line="116" pos:column="79">GetSamplePropertyElement</name></name><argument_list pos:line="116" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="117" pos:column="25">Document</name></type> <name pos:line="117" pos:column="34">document</name> =<init pos:line="117" pos:column="44"> <expr><call><name><name pos:line="117" pos:column="45">DocumentFactory</name><op:operator pos:line="117" pos:column="60">.</op:operator><name pos:line="117" pos:column="61">Create</name></name><argument_list pos:line="117" pos:column="67">(<argument><expr><name pos:line="117" pos:column="68">element</name></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="76">.</op:operator><call><name pos:line="117" pos:column="77">GetDocument</name><argument_list pos:line="117" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="119" pos:column="13">PropertyElement</name></type> <name pos:line="119" pos:column="29">returnedElement</name> =<init pos:line="119" pos:column="46"> <expr><call><name><name pos:line="119" pos:column="47">ConverterFromHitToProgramElement</name><op:operator pos:line="119" pos:column="79">.</op:operator><name pos:line="119" pos:column="80">Create</name></name><argument_list pos:line="119" pos:column="86">(<argument><expr><name pos:line="119" pos:column="87">document</name></expr></argument>)</argument_list></call><op:operator pos:line="119" pos:column="96">.</op:operator><call><name pos:line="119" pos:column="97">Convert</name><argument_list pos:line="119" pos:column="104">()</argument_list></call> <op:operator pos:line="119" pos:column="107">as</op:operator> <name pos:line="119" pos:column="110">PropertyElement</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">Assert</name><op:operator pos:line="121" pos:column="31">.</op:operator><name pos:line="121" pos:column="32">IsNotNull</name></name><argument_list pos:line="121" pos:column="41">(<argument><expr><name pos:line="121" pos:column="42">returnedElement</name></expr></argument><op:operator pos:line="121" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="121" pos:column="59">"returned class element is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="122" pos:column="25">Assert</name><op:operator pos:line="122" pos:column="31">.</op:operator><name pos:line="122" pos:column="32">True</name></name><argument_list pos:line="122" pos:column="36">(<argument><expr><name><name pos:line="122" pos:column="37">element</name><op:operator pos:line="122" pos:column="44">.</op:operator><name pos:line="122" pos:column="45">AccessLevel</name></name> <op:operator pos:line="122" pos:column="57">==</op:operator> <name><name pos:line="122" pos:column="60">returnedElement</name><op:operator pos:line="122" pos:column="75">.</op:operator><name pos:line="122" pos:column="76">AccessLevel</name></name></expr></argument><op:operator pos:line="122" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="122" pos:column="89">"AccessLevel is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Assert</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">True</name></name><argument_list pos:line="123" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="25">"not stored in index"</lit:literal> <op:operator pos:line="123" pos:column="47">==</op:operator> <name><name pos:line="123" pos:column="50">returnedElement</name><op:operator pos:line="123" pos:column="65">.</op:operator><name pos:line="123" pos:column="66">Body</name></name></expr></argument><op:operator pos:line="123" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="123" pos:column="72">"Body is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="124" pos:column="25">Assert</name><op:operator pos:line="124" pos:column="31">.</op:operator><name pos:line="124" pos:column="32">True</name></name><argument_list pos:line="124" pos:column="36">(<argument><expr><name><name pos:line="124" pos:column="37">element</name><op:operator pos:line="124" pos:column="44">.</op:operator><name pos:line="124" pos:column="45">ClassId</name></name> <op:operator pos:line="124" pos:column="53">==</op:operator> <name><name pos:line="124" pos:column="56">returnedElement</name><op:operator pos:line="124" pos:column="71">.</op:operator><name pos:line="124" pos:column="72">ClassId</name></name></expr></argument><op:operator pos:line="124" pos:column="79">,</op:operator> <argument><expr><lit:literal type="string" pos:line="124" pos:column="81">"ClassId is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="125" pos:column="25">Assert</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">True</name></name><argument_list pos:line="125" pos:column="36">(<argument><expr><name><name pos:line="125" pos:column="37">element</name><op:operator pos:line="125" pos:column="44">.</op:operator><name pos:line="125" pos:column="45">ClassName</name></name> <op:operator pos:line="125" pos:column="55">==</op:operator> <name><name pos:line="125" pos:column="58">returnedElement</name><op:operator pos:line="125" pos:column="73">.</op:operator><name pos:line="125" pos:column="74">ClassName</name></name></expr></argument><op:operator pos:line="125" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="125" pos:column="85">"ClassName is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="126" pos:column="25">Assert</name><op:operator pos:line="126" pos:column="31">.</op:operator><name pos:line="126" pos:column="32">True</name></name><argument_list pos:line="126" pos:column="36">(<argument><expr><name><name pos:line="126" pos:column="37">element</name><op:operator pos:line="126" pos:column="44">.</op:operator><name pos:line="126" pos:column="45">DefinitionLineNumber</name></name> <op:operator pos:line="126" pos:column="66">==</op:operator> <name><name pos:line="126" pos:column="69">returnedElement</name><op:operator pos:line="126" pos:column="84">.</op:operator><name pos:line="126" pos:column="85">DefinitionLineNumber</name></name></expr></argument><op:operator pos:line="126" pos:column="105">,</op:operator> <argument><expr><lit:literal type="string" pos:line="126" pos:column="107">"DefinitionLineNumber is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="127" pos:column="25">Assert</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">True</name></name><argument_list pos:line="127" pos:column="36">(<argument><expr><call><name pos:line="127" pos:column="37">StandardizeFilePath</name><argument_list pos:line="127" pos:column="56">(<argument><expr><name><name pos:line="127" pos:column="57">element</name><op:operator pos:line="127" pos:column="64">.</op:operator><name pos:line="127" pos:column="65">FullFilePath</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="79">==</op:operator> <name><name pos:line="127" pos:column="82">returnedElement</name><op:operator pos:line="127" pos:column="97">.</op:operator><name pos:line="127" pos:column="98">FullFilePath</name></name></expr></argument><op:operator pos:line="127" pos:column="110">,</op:operator> <argument><expr><lit:literal type="string" pos:line="127" pos:column="112">"FullFilePath is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="128" pos:column="25">Assert</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">True</name></name><argument_list pos:line="128" pos:column="36">(<argument><expr><name><name pos:line="128" pos:column="37">element</name><op:operator pos:line="128" pos:column="44">.</op:operator><name pos:line="128" pos:column="45">Name</name></name> <op:operator pos:line="128" pos:column="50">==</op:operator> <name><name pos:line="128" pos:column="53">returnedElement</name><op:operator pos:line="128" pos:column="68">.</op:operator><name pos:line="128" pos:column="69">Name</name></name></expr></argument><op:operator pos:line="128" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="128" pos:column="75">"Name is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">Assert</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">True</name></name><argument_list pos:line="129" pos:column="36">(<argument><expr><name><name pos:line="129" pos:column="37">element</name><op:operator pos:line="129" pos:column="44">.</op:operator><name pos:line="129" pos:column="45">ProgramElementType</name></name> <op:operator pos:line="129" pos:column="64">==</op:operator> <name><name pos:line="129" pos:column="67">returnedElement</name><op:operator pos:line="129" pos:column="82">.</op:operator><name pos:line="129" pos:column="83">ProgramElementType</name></name></expr></argument><op:operator pos:line="129" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="129" pos:column="103">"ProgramElementType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="130" pos:column="25">Assert</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">True</name></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name><name pos:line="130" pos:column="37">element</name><op:operator pos:line="130" pos:column="44">.</op:operator><name pos:line="130" pos:column="45">PropertyType</name></name> <op:operator pos:line="130" pos:column="58">==</op:operator> <name><name pos:line="130" pos:column="61">returnedElement</name><op:operator pos:line="130" pos:column="76">.</op:operator><name pos:line="130" pos:column="77">PropertyType</name></name></expr></argument><op:operator pos:line="130" pos:column="89">,</op:operator> <argument><expr><lit:literal type="string" pos:line="130" pos:column="91">"PropertyType is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="131" pos:column="25">Assert</name><op:operator pos:line="131" pos:column="31">.</op:operator><name pos:line="131" pos:column="32">True</name></name><argument_list pos:line="131" pos:column="36">(<argument><expr><name><name pos:line="131" pos:column="37">element</name><op:operator pos:line="131" pos:column="44">.</op:operator><name pos:line="131" pos:column="45">RawSource</name></name> <op:operator pos:line="131" pos:column="55">==</op:operator> <name><name pos:line="131" pos:column="58">returnedElement</name><op:operator pos:line="131" pos:column="73">.</op:operator><name pos:line="131" pos:column="74">RawSource</name></name></expr></argument><op:operator pos:line="131" pos:column="83">,</op:operator> <argument><expr><lit:literal type="string" pos:line="131" pos:column="85">"Snippet is different!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="134" pos:column="17">[<expr><name pos:line="134" pos:column="18">TestFixtureSetUp</name></expr>]</attribute>
		<specifier pos:line="135" pos:column="17">public</specifier> <name pos:line="135" pos:column="24">void</name></type> <name pos:line="135" pos:column="29">SetUp</name><parameter_list pos:line="135" pos:column="34">()</parameter_list>
		<block pos:line="136" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="137" pos:column="25">TestUtils</name><op:operator pos:line="137" pos:column="34">.</op:operator><name pos:line="137" pos:column="35">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="137" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="140" pos:column="17">private</specifier> <specifier pos:line="140" pos:column="25">static</specifier> <name pos:line="140" pos:column="32">string</name></type> <name pos:line="140" pos:column="39">StandardizeFilePath</name><parameter_list pos:line="140" pos:column="58">(<param><decl><type><name pos:line="140" pos:column="59">string</name></type> <name pos:line="140" pos:column="66">fullFilePath</name></decl></param>)</parameter_list>
		<block pos:line="141" pos:column="17">{
			<if pos:line="142" pos:column="25">if<condition pos:line="142" pos:column="27">(<expr><call><name><name pos:line="142" pos:column="28">fullFilePath</name><op:operator pos:line="142" pos:column="40">.</op:operator><name pos:line="142" pos:column="41">Contains</name></name><argument_list pos:line="142" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="50">"/"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="55">
			<block pos:line="143" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="144" pos:column="33">string</name></type> <name pos:line="144" pos:column="40">old</name> =<init pos:line="144" pos:column="45"> <expr><lit:literal type="string" pos:line="144" pos:column="46">"/"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="145" pos:column="33">string</name></type> <name pos:line="145" pos:column="40">rep</name> =<init pos:line="145" pos:column="45"> <expr><lit:literal type="string" pos:line="145" pos:column="46">"\\"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="146" pos:column="33">var</name></type> <name pos:line="146" pos:column="37">path</name> =<init pos:line="146" pos:column="43"> <expr><call><name><name pos:line="146" pos:column="44">fullFilePath</name><op:operator pos:line="146" pos:column="56">.</op:operator><name pos:line="146" pos:column="57">Replace</name></name><argument_list pos:line="146" pos:column="64">(<argument><expr><name pos:line="146" pos:column="65">old</name></expr></argument><op:operator pos:line="146" pos:column="68">,</op:operator> <argument><expr><name pos:line="146" pos:column="70">rep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="147" pos:column="33">return <expr><name pos:line="147" pos:column="40">path</name></expr>;</return>
			}</block></then></if>
			<return pos:line="149" pos:column="25">return <expr><name pos:line="149" pos:column="32">fullFilePath</name></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
