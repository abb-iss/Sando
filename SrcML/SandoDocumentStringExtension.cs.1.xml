<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer\Documents\SandoDocumentStringExtension.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Core</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Extensions</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Core</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Tools</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Indexer</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">Documents</name></name>
<block pos:line="7" pos:column="1">{
	<class><specifier pos:line="8" pos:column="9">public</specifier> <specifier pos:line="8" pos:column="16">static</specifier> class <name pos:line="8" pos:column="29">SandoDocumentStringExtension</name>
	<block pos:line="9" pos:column="9">{
		<function><type><specifier pos:line="10" pos:column="17">public</specifier> <specifier pos:line="10" pos:column="24">static</specifier> <name pos:line="10" pos:column="31">string</name></type> <name pos:line="10" pos:column="38">ToSandoSearchable</name><parameter_list pos:line="10" pos:column="55">(<param><decl><type><name pos:line="10" pos:column="56">this</name> <name pos:line="10" pos:column="61">String</name></type> <name pos:line="10" pos:column="68">fieldValue</name></decl></param>)</parameter_list>
		<block pos:line="11" pos:column="17">{
			<if pos:line="12" pos:column="25">if<condition pos:line="12" pos:column="27">(<expr><call><name><name pos:line="12" pos:column="28">String</name><op:operator pos:line="12" pos:column="34">.</op:operator><name pos:line="12" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="12" pos:column="53">(<argument><expr><name pos:line="12" pos:column="54">fieldValue</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="12" pos:column="66">
				<return pos:line="13" pos:column="33">return <expr><name pos:line="13" pos:column="40">fieldValue</name></expr>;</return></then></if>
		    <decl_stmt><decl><type><name pos:line="14" pos:column="21">IWordSplitter</name></type> <name pos:line="14" pos:column="35">wordSplitterImplementation</name> =<init pos:line="14" pos:column="63"> <expr><call><name><name pos:line="14" pos:column="64">ExtensionPointsRepository</name><op:operator pos:line="14" pos:column="89">.</op:operator><name pos:line="14" pos:column="90">Instance</name><op:operator pos:line="14" pos:column="98">.</op:operator><name pos:line="14" pos:column="99">GetWordSplitterImplementation</name></name><argument_list pos:line="14" pos:column="128">()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name pos:line="15" pos:column="21">string</name></type> <name pos:line="15" pos:column="28">splitWords</name></decl>;</decl_stmt>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">wordSplitterImplementation</name> <op:operator pos:line="16" pos:column="44">!=</op:operator> <name pos:line="16" pos:column="47">null</name></expr>)</condition><then pos:line="16" pos:column="52">
            <block pos:line="17" pos:column="13">{
                <expr_stmt><expr><name pos:line="18" pos:column="17">splitWords</name> <op:operator pos:line="18" pos:column="28">=</op:operator> <call><name><name pos:line="18" pos:column="30">String</name><op:operator pos:line="18" pos:column="36">.</op:operator><name pos:line="18" pos:column="37">Join</name></name><argument_list pos:line="18" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="42">" "</lit:literal></expr></argument><op:operator pos:line="18" pos:column="45">,</op:operator> <argument><expr><call><name><name pos:line="18" pos:column="47">wordSplitterImplementation</name><op:operator pos:line="18" pos:column="73">.</op:operator><name pos:line="18" pos:column="74">ExtractWords</name></name><argument_list pos:line="18" pos:column="86">(<argument><expr><name pos:line="18" pos:column="87">fieldValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="20" pos:column="13">else
            <block pos:line="21" pos:column="13">{
                <comment type="line" pos:line="22" pos:column="17">//For testing, should never happend during execution</comment>
                <expr_stmt><expr><name pos:line="23" pos:column="17">splitWords</name> <op:operator pos:line="23" pos:column="28">=</op:operator> <call><name><name pos:line="23" pos:column="30">String</name><op:operator pos:line="23" pos:column="36">.</op:operator><name pos:line="23" pos:column="37">Join</name></name><argument_list pos:line="23" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="42">" "</lit:literal></expr></argument><op:operator pos:line="23" pos:column="45">,</op:operator><argument><expr><op:operator pos:line="23" pos:column="46">(</op:operator><op:operator pos:line="23" pos:column="47">new</op:operator> <call><name pos:line="23" pos:column="51">WordSplitter</name><argument_list pos:line="23" pos:column="63">()</argument_list></call><op:operator pos:line="23" pos:column="65">)</op:operator><op:operator pos:line="23" pos:column="66">.</op:operator><call><name pos:line="23" pos:column="67">ExtractWords</name><argument_list pos:line="23" pos:column="79">(<argument><expr><name pos:line="23" pos:column="80">fieldValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
			<if pos:line="25" pos:column="25">if<condition pos:line="25" pos:column="27">(<expr><name pos:line="25" pos:column="28">splitWords</name> <op:operator pos:line="25" pos:column="39">==</op:operator> <name pos:line="25" pos:column="42">fieldValue</name></expr>)</condition><then pos:line="25" pos:column="53">
				<return pos:line="26" pos:column="33">return <expr><name pos:line="26" pos:column="40">fieldValue</name></expr>;</return></then></if>
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">string</name></type> <name pos:line="27" pos:column="32">result</name> =<init pos:line="27" pos:column="40"> <expr><name pos:line="27" pos:column="41">fieldValue</name> <op:operator pos:line="27" pos:column="52">+</op:operator> <name pos:line="27" pos:column="54">Delimiter</name> <op:operator pos:line="27" pos:column="64">+</op:operator> <name pos:line="27" pos:column="66">splitWords</name></expr></init></decl>;</decl_stmt>
			<return pos:line="28" pos:column="25">return <expr><name pos:line="28" pos:column="32">result</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">string</name></type> <name pos:line="31" pos:column="38">ToSandoDisplayable</name><parameter_list pos:line="31" pos:column="56">(<param><decl><type><name pos:line="31" pos:column="57">this</name> <name pos:line="31" pos:column="62">String</name></type> <name pos:line="31" pos:column="69">fieldValue</name></decl></param>)</parameter_list>
		<block pos:line="32" pos:column="17">{
			<if pos:line="33" pos:column="25">if<condition pos:line="33" pos:column="27">(<expr><call><name><name pos:line="33" pos:column="28">String</name><op:operator pos:line="33" pos:column="34">.</op:operator><name pos:line="33" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="33" pos:column="53">(<argument><expr><name pos:line="33" pos:column="54">fieldValue</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="33" pos:column="66">
				<return pos:line="34" pos:column="33">return <expr><name pos:line="34" pos:column="40">fieldValue</name></expr>;</return></then></if>
			<if pos:line="35" pos:column="25">if<condition pos:line="35" pos:column="27">(<expr><call><name><name pos:line="35" pos:column="28">fieldValue</name><op:operator pos:line="35" pos:column="38">.</op:operator><name pos:line="35" pos:column="39">IndexOf</name></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name pos:line="35" pos:column="47">Delimiter</name></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="58">&lt;</op:operator> <lit:literal type="number" pos:line="35" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="35" pos:column="62">
				<return pos:line="36" pos:column="33">return <expr><name pos:line="36" pos:column="40">fieldValue</name></expr>;</return></then></if>
			<decl_stmt><decl><type><name pos:line="37" pos:column="25">string</name></type> <name pos:line="37" pos:column="32">result</name> =<init pos:line="37" pos:column="40"> <expr><call><name><name pos:line="37" pos:column="41">fieldValue</name><op:operator pos:line="37" pos:column="51">.</op:operator><name pos:line="37" pos:column="52">Substring</name></name><argument_list pos:line="37" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="62">0</lit:literal></expr></argument><op:operator pos:line="37" pos:column="63">,</op:operator> <argument><expr><call><name><name pos:line="37" pos:column="65">fieldValue</name><op:operator pos:line="37" pos:column="75">.</op:operator><name pos:line="37" pos:column="76">IndexOf</name></name><argument_list pos:line="37" pos:column="83">(<argument><expr><name pos:line="37" pos:column="84">Delimiter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="38" pos:column="25">return <expr><name pos:line="38" pos:column="32">result</name></expr>;</return>
		}</block></function>

	    <decl_stmt><decl><type><specifier pos:line="41" pos:column="13">public</specifier> <name pos:line="41" pos:column="20">const</name> <name pos:line="41" pos:column="26">string</name></type> <name pos:line="41" pos:column="33">Delimiter</name> =<init pos:line="41" pos:column="44"> <expr><lit:literal type="string" pos:line="41" pos:column="45">"✉∞"</lit:literal></expr></init></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
