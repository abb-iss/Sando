<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\Documents\SandoDocumentStringExtensionTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Indexer</name><op:operator pos:line="3" pos:column="20">.</op:operator><name pos:line="3" pos:column="21">Documents</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">UnitTestHelpers</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Indexer</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">UnitTests</name><op:operator pos:line="6" pos:column="34">.</op:operator><name pos:line="6" pos:column="35">Documents</name></name>
<block pos:line="7" pos:column="1">{
	<class><attribute pos:line="8" pos:column="9">[<expr><name pos:line="8" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="9" pos:column="9">public</specifier> class <name pos:line="9" pos:column="22">SandoDocumentStringExtensionTest</name>
	<block pos:line="10" pos:column="9">{
		<function><type><attribute pos:line="11" pos:column="17">[<expr><name pos:line="11" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="12" pos:column="17">public</specifier> <name pos:line="12" pos:column="24">void</name></type> <name pos:line="12" pos:column="29">SandoDocumentStringExtension_ToSandoSearchableReturnsValidString</name><parameter_list pos:line="12" pos:column="93">()</parameter_list>
		<block pos:line="13" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">string</name></type> <name pos:line="14" pos:column="32">testString</name> =<init pos:line="14" pos:column="44"> <expr><lit:literal type="string" pos:line="14" pos:column="45">"SetFileExtension"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="15" pos:column="25">Assert</name><op:operator pos:line="15" pos:column="31">.</op:operator><name pos:line="15" pos:column="32">AreEqual</name></name><argument_list pos:line="15" pos:column="40">(<argument><expr><call><name><name pos:line="15" pos:column="41">testString</name><op:operator pos:line="15" pos:column="51">.</op:operator><name pos:line="15" pos:column="52">ToSandoSearchable</name></name><argument_list pos:line="15" pos:column="69">()</argument_list></call></expr></argument><op:operator pos:line="15" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="15" pos:column="73">"SetFileExtension"</lit:literal><op:operator pos:line="15" pos:column="91">+</op:operator><name><name pos:line="15" pos:column="92">SandoDocumentStringExtension</name><op:operator pos:line="15" pos:column="120">.</op:operator><name pos:line="15" pos:column="121">Delimiter</name></name><op:operator pos:line="15" pos:column="130">+</op:operator><lit:literal type="string" pos:line="15" pos:column="131">"Set File Extension"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="17" pos:column="25">testString</name> <op:operator pos:line="17" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="17" pos:column="38">"donothing"</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="18" pos:column="25">Assert</name><op:operator pos:line="18" pos:column="31">.</op:operator><name pos:line="18" pos:column="32">AreEqual</name></name><argument_list pos:line="18" pos:column="40">(<argument><expr><call><name><name pos:line="18" pos:column="41">testString</name><op:operator pos:line="18" pos:column="51">.</op:operator><name pos:line="18" pos:column="52">ToSandoSearchable</name></name><argument_list pos:line="18" pos:column="69">()</argument_list></call></expr></argument><op:operator pos:line="18" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="18" pos:column="73">"donothing"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="20" pos:column="25">testString</name> <op:operator pos:line="20" pos:column="36">=</op:operator> <name><name pos:line="20" pos:column="38">String</name><op:operator pos:line="20" pos:column="44">.</op:operator><name pos:line="20" pos:column="45">Empty</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="21" pos:column="25">Assert</name><op:operator pos:line="21" pos:column="31">.</op:operator><name pos:line="21" pos:column="32">AreEqual</name></name><argument_list pos:line="21" pos:column="40">(<argument><expr><call><name><name pos:line="21" pos:column="41">testString</name><op:operator pos:line="21" pos:column="51">.</op:operator><name pos:line="21" pos:column="52">ToSandoSearchable</name></name><argument_list pos:line="21" pos:column="69">()</argument_list></call></expr></argument><op:operator pos:line="21" pos:column="71">,</op:operator> <argument><expr><name><name pos:line="21" pos:column="73">String</name><op:operator pos:line="21" pos:column="79">.</op:operator><name pos:line="21" pos:column="80">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">void</name></type> <name pos:line="25" pos:column="29">SandoDocumentStringExtension_ToSandoDisplayableReturnsValidString</name><parameter_list pos:line="25" pos:column="94">()</parameter_list>
		<block pos:line="26" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">string</name></type> <name pos:line="27" pos:column="20">testString</name> =<init pos:line="27" pos:column="32"> <expr><lit:literal type="string" pos:line="27" pos:column="33">"SetFileExtension"</lit:literal> <op:operator pos:line="27" pos:column="52">+</op:operator> <name><name pos:line="27" pos:column="54">SandoDocumentStringExtension</name><op:operator pos:line="27" pos:column="82">.</op:operator><name pos:line="27" pos:column="83">Delimiter</name></name> <op:operator pos:line="27" pos:column="93">+</op:operator> <lit:literal type="string" pos:line="27" pos:column="95">"Set File Extension"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="28" pos:column="25">Assert</name><op:operator pos:line="28" pos:column="31">.</op:operator><name pos:line="28" pos:column="32">AreEqual</name></name><argument_list pos:line="28" pos:column="40">(<argument><expr><call><name><name pos:line="28" pos:column="41">testString</name><op:operator pos:line="28" pos:column="51">.</op:operator><name pos:line="28" pos:column="52">ToSandoDisplayable</name></name><argument_list pos:line="28" pos:column="70">()</argument_list></call></expr></argument><op:operator pos:line="28" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="28" pos:column="74">"SetFileExtension"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="30" pos:column="25">testString</name> <op:operator pos:line="30" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="30" pos:column="38">"donothing"</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">Assert</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">AreEqual</name></name><argument_list pos:line="31" pos:column="40">(<argument><expr><call><name><name pos:line="31" pos:column="41">testString</name><op:operator pos:line="31" pos:column="51">.</op:operator><name pos:line="31" pos:column="52">ToSandoDisplayable</name></name><argument_list pos:line="31" pos:column="70">()</argument_list></call></expr></argument><op:operator pos:line="31" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="31" pos:column="74">"donothing"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="33" pos:column="25">testString</name> <op:operator pos:line="33" pos:column="36">=</op:operator> <name><name pos:line="33" pos:column="38">String</name><op:operator pos:line="33" pos:column="44">.</op:operator><name pos:line="33" pos:column="45">Empty</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="34" pos:column="25">Assert</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">AreEqual</name></name><argument_list pos:line="34" pos:column="40">(<argument><expr><call><name><name pos:line="34" pos:column="41">testString</name><op:operator pos:line="34" pos:column="51">.</op:operator><name pos:line="34" pos:column="52">ToSandoDisplayable</name></name><argument_list pos:line="34" pos:column="70">()</argument_list></call></expr></argument><op:operator pos:line="34" pos:column="72">,</op:operator> <argument><expr><name><name pos:line="34" pos:column="74">String</name><op:operator pos:line="34" pos:column="80">.</op:operator><name pos:line="34" pos:column="81">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="37" pos:column="17">[<expr><name pos:line="37" pos:column="18">TestFixtureSetUp</name></expr>]</attribute>
		<specifier pos:line="38" pos:column="17">public</specifier> <name pos:line="38" pos:column="24">void</name></type> <name pos:line="38" pos:column="29">SetUp</name><parameter_list pos:line="38" pos:column="34">()</parameter_list>
		<block pos:line="39" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">TestUtils</name><op:operator pos:line="40" pos:column="34">.</op:operator><name pos:line="40" pos:column="35">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="40" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
