<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\TestFiles\Searching\Criteria\SearchCriteriaTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Contracts</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">NUnit</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">ExtensionContracts</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Indexer</name><op:operator pos:line="5" pos:column="20">.</op:operator><name pos:line="5" pos:column="21">Searching</name><op:operator pos:line="5" pos:column="30">.</op:operator><name pos:line="5" pos:column="31">Criteria</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Indexer</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">UnitTests</name><op:operator pos:line="7" pos:column="34">.</op:operator><name pos:line="7" pos:column="35">Searching</name><op:operator pos:line="7" pos:column="44">.</op:operator><name pos:line="7" pos:column="45">Criteria</name></name>
<block pos:line="8" pos:column="1">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
	<specifier pos:line="10" pos:column="9">public</specifier> class <name pos:line="10" pos:column="22">SearchCriteriaTest</name>
	<block pos:line="11" pos:column="9">{
		<comment type="line" pos:line="12" pos:column="17">//TODO update tests when the ToQueryStringMethod is ready</comment>

    	<function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="15" pos:column="17">public</specifier> <name pos:line="15" pos:column="24">void</name></type> <name pos:line="15" pos:column="29">SearchCriteria_EqualsReturnTrueWhenObjectIsComparedToItsOwn</name><parameter_list pos:line="15" pos:column="88">()</parameter_list>
		<block pos:line="16" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">SearchCriteria</name></type> <name pos:line="17" pos:column="40">simpleSearchCriteria</name> =<init pos:line="17" pos:column="62"> <expr><op:operator pos:line="17" pos:column="63">new</op:operator> <call><name pos:line="17" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="17" pos:column="87">()</argument_list></call>
													<block pos:line="18" pos:column="105">{
														<expr><name pos:line="19" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="19" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="142">true</lit:literal></expr><op:operator pos:line="19" pos:column="146">,</op:operator>
														<expr><name pos:line="20" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="20" pos:column="133">=</op:operator> <op:operator pos:line="20" pos:column="135">new</op:operator> <call><name><name pos:line="20" pos:column="139">SortedSet</name><argument_list pos:line="20" pos:column="148">&lt;<argument><name pos:line="20" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="168">()</argument_list></call> 
																				<block pos:line="21" pos:column="161">{
																					<expr><name><name pos:line="22" pos:column="169">ProgramElementType</name><op:operator pos:line="22" pos:column="187">.</op:operator><name pos:line="22" pos:column="188">Class</name></name></expr><op:operator pos:line="22" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="23" pos:column="169">ProgramElementType</name><op:operator pos:line="23" pos:column="187">.</op:operator><name pos:line="23" pos:column="188">Method</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">Assert</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">True</name></name><argument_list pos:line="26" pos:column="36">(<argument><expr><call><name><name pos:line="26" pos:column="37">simpleSearchCriteria</name><op:operator pos:line="26" pos:column="57">.</op:operator><name pos:line="26" pos:column="58">Equals</name></name><argument_list pos:line="26" pos:column="64">(<argument><expr><name pos:line="26" pos:column="65">simpleSearchCriteria</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="26" pos:column="86">,</op:operator> <argument><expr><lit:literal type="string" pos:line="26" pos:column="88">"Equals should return true when search criteria object is compared to its own!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="29" pos:column="17">[<expr><name pos:line="29" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="30" pos:column="17">public</specifier> <name pos:line="30" pos:column="24">void</name></type> <name pos:line="30" pos:column="29">SearchCriteria_EqualsReturnTrueWhenObjectsHaveTheSameData</name><parameter_list pos:line="30" pos:column="86">()</parameter_list>
		<block pos:line="31" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">SearchCriteria</name></type> <name pos:line="32" pos:column="40">simpleSearchCriteria1</name> =<init pos:line="32" pos:column="63"> <expr><op:operator pos:line="32" pos:column="64">new</op:operator> <call><name pos:line="32" pos:column="68">SimpleSearchCriteria</name><argument_list pos:line="32" pos:column="88">()</argument_list></call>
													<block pos:line="33" pos:column="105">{
														<expr><name pos:line="34" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="34" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="34" pos:column="142">true</lit:literal></expr><op:operator pos:line="34" pos:column="146">,</op:operator>
														<expr><name pos:line="35" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="35" pos:column="133">=</op:operator> <op:operator pos:line="35" pos:column="135">new</op:operator> <call><name><name pos:line="35" pos:column="139">SortedSet</name><argument_list pos:line="35" pos:column="148">&lt;<argument><name pos:line="35" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="168">()</argument_list></call> 
																				<block pos:line="36" pos:column="161">{
																					<expr><name><name pos:line="37" pos:column="169">ProgramElementType</name><op:operator pos:line="37" pos:column="187">.</op:operator><name pos:line="37" pos:column="188">Class</name></name></expr><op:operator pos:line="37" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="38" pos:column="169">ProgramElementType</name><op:operator pos:line="38" pos:column="187">.</op:operator><name pos:line="38" pos:column="188">Method</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">SearchCriteria</name></type> <name pos:line="41" pos:column="40">simpleSearchCriteria2</name> =<init pos:line="41" pos:column="63"> <expr><op:operator pos:line="41" pos:column="64">new</op:operator> <call><name pos:line="41" pos:column="68">SimpleSearchCriteria</name><argument_list pos:line="41" pos:column="88">()</argument_list></call>
													<block pos:line="42" pos:column="105">{
														<expr><name pos:line="43" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="43" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="43" pos:column="142">true</lit:literal></expr><op:operator pos:line="43" pos:column="146">,</op:operator>
														<expr><name pos:line="44" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="44" pos:column="133">=</op:operator> <op:operator pos:line="44" pos:column="135">new</op:operator> <call><name><name pos:line="44" pos:column="139">SortedSet</name><argument_list pos:line="44" pos:column="148">&lt;<argument><name pos:line="44" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="168">()</argument_list></call> 
																				<block pos:line="45" pos:column="161">{
																					<expr><name><name pos:line="46" pos:column="169">ProgramElementType</name><op:operator pos:line="46" pos:column="187">.</op:operator><name pos:line="46" pos:column="188">Method</name></name></expr><op:operator pos:line="46" pos:column="194">,</op:operator>
																					<expr><name><name pos:line="47" pos:column="169">ProgramElementType</name><op:operator pos:line="47" pos:column="187">.</op:operator><name pos:line="47" pos:column="188">Class</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">Assert</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">True</name></name><argument_list pos:line="50" pos:column="36">(<argument><expr><call><name><name pos:line="50" pos:column="37">simpleSearchCriteria1</name><op:operator pos:line="50" pos:column="58">.</op:operator><name pos:line="50" pos:column="59">Equals</name></name><argument_list pos:line="50" pos:column="65">(<argument><expr><name pos:line="50" pos:column="66">simpleSearchCriteria2</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="50" pos:column="88">,</op:operator> <argument><expr><lit:literal type="string" pos:line="50" pos:column="90">"Equals should return true when search criteria objects have the same data!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="53" pos:column="17">[<expr><name pos:line="53" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="54" pos:column="17">public</specifier> <name pos:line="54" pos:column="24">void</name></type> <name pos:line="54" pos:column="29">SearchCriteria_EqualsReturnFalseWhenObjectsHaveDifferentData</name><parameter_list pos:line="54" pos:column="89">()</parameter_list>
		<block pos:line="55" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">SearchCriteria</name></type> <name pos:line="56" pos:column="40">simpleSearchCriteria1</name> =<init pos:line="56" pos:column="63"> <expr><op:operator pos:line="56" pos:column="64">new</op:operator> <call><name pos:line="56" pos:column="68">SimpleSearchCriteria</name><argument_list pos:line="56" pos:column="88">()</argument_list></call>
													<block pos:line="57" pos:column="105">{
														<expr><name pos:line="58" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="58" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="58" pos:column="142">true</lit:literal></expr><op:operator pos:line="58" pos:column="146">,</op:operator>
														<expr><name pos:line="59" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="59" pos:column="133">=</op:operator> <op:operator pos:line="59" pos:column="135">new</op:operator> <call><name><name pos:line="59" pos:column="139">SortedSet</name><argument_list pos:line="59" pos:column="148">&lt;<argument><name pos:line="59" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="168">()</argument_list></call> 
																				<block pos:line="60" pos:column="161">{
																					<expr><name><name pos:line="61" pos:column="169">ProgramElementType</name><op:operator pos:line="61" pos:column="187">.</op:operator><name pos:line="61" pos:column="188">Class</name></name></expr><op:operator pos:line="61" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="62" pos:column="169">ProgramElementType</name><op:operator pos:line="62" pos:column="187">.</op:operator><name pos:line="62" pos:column="188">Property</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">SearchCriteria</name></type> <name pos:line="65" pos:column="40">simpleSearchCriteria2</name> =<init pos:line="65" pos:column="63"> <expr><op:operator pos:line="65" pos:column="64">new</op:operator> <call><name pos:line="65" pos:column="68">SimpleSearchCriteria</name><argument_list pos:line="65" pos:column="88">()</argument_list></call>
													<block pos:line="66" pos:column="105">{
														<expr><name pos:line="67" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="67" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="142">true</lit:literal></expr><op:operator pos:line="67" pos:column="146">,</op:operator>
														<expr><name pos:line="68" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="68" pos:column="133">=</op:operator> <op:operator pos:line="68" pos:column="135">new</op:operator> <call><name><name pos:line="68" pos:column="139">SortedSet</name><argument_list pos:line="68" pos:column="148">&lt;<argument><name pos:line="68" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="168">()</argument_list></call> 
																				<block pos:line="69" pos:column="161">{
																					<expr><name><name pos:line="70" pos:column="169">ProgramElementType</name><op:operator pos:line="70" pos:column="187">.</op:operator><name pos:line="70" pos:column="188">Class</name></name></expr><op:operator pos:line="70" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="71" pos:column="169">ProgramElementType</name><op:operator pos:line="71" pos:column="187">.</op:operator><name pos:line="71" pos:column="188">Method</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="74" pos:column="25">Assert</name><op:operator pos:line="74" pos:column="31">.</op:operator><name pos:line="74" pos:column="32">False</name></name><argument_list pos:line="74" pos:column="37">(<argument><expr><call><name><name pos:line="74" pos:column="38">simpleSearchCriteria1</name><op:operator pos:line="74" pos:column="59">.</op:operator><name pos:line="74" pos:column="60">Equals</name></name><argument_list pos:line="74" pos:column="66">(<argument><expr><name pos:line="74" pos:column="67">simpleSearchCriteria2</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="74" pos:column="89">,</op:operator> <argument><expr><lit:literal type="string" pos:line="74" pos:column="91">"Equals should return false when search criteria objects have different data!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="77" pos:column="17">[<expr><name pos:line="77" pos:column="18">SetUp</name></expr>]</attribute>
		<specifier pos:line="78" pos:column="17">public</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">resetContract</name><parameter_list pos:line="78" pos:column="42">()</parameter_list>
		<block pos:line="79" pos:column="17">{
			<expr_stmt><expr><name pos:line="80" pos:column="25">contractFailed</name> <op:operator pos:line="80" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="80" pos:column="42">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="81" pos:column="25">Contract</name><op:operator pos:line="81" pos:column="33">.</op:operator><name pos:line="81" pos:column="34">ContractFailed</name></name> <op:operator pos:line="81" pos:column="49">+=</op:operator> <op:operator pos:line="81" pos:column="52">(</op:operator><name pos:line="81" pos:column="53">sender</name><op:operator pos:line="81" pos:column="59">,</op:operator> <name pos:line="81" pos:column="61">e</name><op:operator pos:line="81" pos:column="62">)</op:operator> =&gt;
			<block pos:line="82" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="83" pos:column="33">e</name><op:operator pos:line="83" pos:column="34">.</op:operator><name pos:line="83" pos:column="35">SetHandled</name></name><argument_list pos:line="83" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">e</name><op:operator pos:line="84" pos:column="34">.</op:operator><name pos:line="84" pos:column="35">SetUnwind</name></name><argument_list pos:line="84" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="85" pos:column="33">contractFailed</name> <op:operator pos:line="85" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="85" pos:column="50">true</lit:literal></expr>;</expr_stmt>
			}</block></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="89" pos:column="17">private</specifier> <name pos:line="89" pos:column="25">bool</name></type> <name pos:line="89" pos:column="30">contractFailed</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
