<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\IntegrationTests\Search\SelfSearchTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Searching</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Criteria</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">UI</name><op:operator pos:line="15" pos:column="15">.</op:operator><name pos:line="15" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="16" pos:column="1">using <name pos:line="16" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Recommender</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">Sando</name><op:operator pos:line="19" pos:column="16">.</op:operator><name pos:line="19" pos:column="17">IntegrationTests</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">Search</name></name>
<block pos:line="20" pos:column="1">{
	<class><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="22" pos:column="9">public</specifier> class <name pos:line="22" pos:column="22">SelfSearchTest</name> <super pos:line="22" pos:column="37">: <name pos:line="22" pos:column="39">AutomaticallyIndexingTestClass</name></super>
	<block pos:line="23" pos:column="9">{
		<function><type><attribute pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">void</name></type> <name pos:line="25" pos:column="29">ElementNameSearchesInTop3</name><parameter_list pos:line="25" pos:column="54">()</parameter_list>
		<block pos:line="26" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">string</name></type> <name pos:line="27" pos:column="20">keywords</name> =<init pos:line="27" pos:column="30"> <expr><lit:literal type="string" pos:line="27" pos:column="31">"header element resolver"</lit:literal></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name pos:line="28" pos:column="21">var</name></type> <name pos:line="28" pos:column="25">expectedLowestRank</name> =<init pos:line="28" pos:column="45"> <expr><lit:literal type="number" pos:line="28" pos:column="46">3</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="29" pos:column="25">Predicate</name><argument_list pos:line="29" pos:column="34">&lt;<argument><name pos:line="29" pos:column="35">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="53">predicate</name> =<init pos:line="29" pos:column="64"> <expr><name pos:line="29" pos:column="65">el</name> <op:operator pos:line="29" pos:column="68">=&gt;</op:operator> <name><name pos:line="29" pos:column="71">el</name><op:operator pos:line="29" pos:column="73">.</op:operator><name pos:line="29" pos:column="74">ProgramElement</name><op:operator pos:line="29" pos:column="88">.</op:operator><name pos:line="29" pos:column="89">ProgramElementType</name></name> <op:operator pos:line="29" pos:column="108">==</op:operator> <name><name pos:line="29" pos:column="111">ProgramElementType</name><op:operator pos:line="29" pos:column="129">.</op:operator><name pos:line="29" pos:column="130">Class</name></name> <op:operator pos:line="29" pos:column="136">&amp;&amp;</op:operator> <op:operator pos:line="29" pos:column="139">(</op:operator><name><name pos:line="29" pos:column="140">el</name><op:operator pos:line="29" pos:column="142">.</op:operator><name pos:line="29" pos:column="143">ProgramElement</name><op:operator pos:line="29" pos:column="157">.</op:operator><name pos:line="29" pos:column="158">Name</name></name> <op:operator pos:line="29" pos:column="163">==</op:operator> <lit:literal type="string" pos:line="29" pos:column="166">"CppHeaderElementResolver"</lit:literal><op:operator pos:line="29" pos:column="192">)</op:operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">EnsureRankingPrettyGood</name><argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">keywords</name></expr></argument><op:operator pos:line="30" pos:column="57">,</op:operator> <argument><expr><name pos:line="30" pos:column="59">predicate</name></expr></argument><op:operator pos:line="30" pos:column="68">,</op:operator> <argument><expr><name pos:line="30" pos:column="70">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>



	    <function><type><attribute pos:line="35" pos:column="13">[<expr><name pos:line="35" pos:column="14">Test</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">TestSandoSearch</name><parameter_list pos:line="36" pos:column="36">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">string</name></type> <name pos:line="38" pos:column="20">keywords</name> =<init pos:line="38" pos:column="30"> <expr><lit:literal type="string" pos:line="38" pos:column="31">"test sando search"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">expectedLowestRank</name> =<init pos:line="39" pos:column="37"> <expr><lit:literal type="number" pos:line="39" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="40" pos:column="13">Predicate</name><argument_list pos:line="40" pos:column="22">&lt;<argument><name pos:line="40" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="41">predicate</name> =<init pos:line="40" pos:column="52"> <expr><name pos:line="40" pos:column="53">el</name> <op:operator pos:line="40" pos:column="56">=&gt;</op:operator> <name><name pos:line="40" pos:column="59">el</name><op:operator pos:line="40" pos:column="61">.</op:operator><name pos:line="40" pos:column="62">ProgramElement</name><op:operator pos:line="40" pos:column="76">.</op:operator><name pos:line="40" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="40" pos:column="96">==</op:operator> <name><name pos:line="40" pos:column="99">ProgramElementType</name><op:operator pos:line="40" pos:column="117">.</op:operator><name pos:line="40" pos:column="118">Class</name></name> <op:operator pos:line="40" pos:column="124">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="127">(</op:operator><name><name pos:line="40" pos:column="128">el</name><op:operator pos:line="40" pos:column="130">.</op:operator><name pos:line="40" pos:column="131">ProgramElement</name><op:operator pos:line="40" pos:column="145">.</op:operator><name pos:line="40" pos:column="146">Name</name></name> <op:operator pos:line="40" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="40" pos:column="154">"SelfSearchTest"</lit:literal><op:operator pos:line="40" pos:column="170">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">keywords</name></expr></argument><op:operator pos:line="41" pos:column="45">,</op:operator> <argument><expr><name pos:line="41" pos:column="47">predicate</name></expr></argument><op:operator pos:line="41" pos:column="56">,</op:operator> <argument><expr><name pos:line="41" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><name pos:line="44" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">TestNoteSandoSearch</name><parameter_list pos:line="45" pos:column="40">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">string</name></type> <name pos:line="47" pos:column="20">keywords</name> =<init pos:line="47" pos:column="30"> <expr><lit:literal type="string" pos:line="47" pos:column="31">"-test sando search"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">expectedLowestRank</name> =<init pos:line="48" pos:column="37"> <expr><lit:literal type="number" pos:line="48" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="49" pos:column="13">Predicate</name><argument_list pos:line="49" pos:column="22">&lt;<argument><name pos:line="49" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="41">predicate</name> =<init pos:line="49" pos:column="52"> <expr><name pos:line="49" pos:column="53">el</name> <op:operator pos:line="49" pos:column="56">=&gt;</op:operator> <name><name pos:line="49" pos:column="59">el</name><op:operator pos:line="49" pos:column="61">.</op:operator><name pos:line="49" pos:column="62">ProgramElement</name><op:operator pos:line="49" pos:column="76">.</op:operator><name pos:line="49" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="49" pos:column="96">==</op:operator> <name><name pos:line="49" pos:column="99">ProgramElementType</name><op:operator pos:line="49" pos:column="117">.</op:operator><name pos:line="49" pos:column="118">Class</name></name> <op:operator pos:line="49" pos:column="124">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="127">(</op:operator><name><name pos:line="49" pos:column="128">el</name><op:operator pos:line="49" pos:column="130">.</op:operator><name pos:line="49" pos:column="131">ProgramElement</name><op:operator pos:line="49" pos:column="145">.</op:operator><name pos:line="49" pos:column="146">Name</name></name> <op:operator pos:line="49" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="49" pos:column="154">"SelfSearchTest"</lit:literal><op:operator pos:line="49" pos:column="170">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">codeSearcher</name> =<init pos:line="50" pos:column="31"> <expr><op:operator pos:line="50" pos:column="32">new</op:operator> <call><name pos:line="50" pos:column="36">CodeSearcher</name><argument_list pos:line="50" pos:column="48">(<argument><expr><op:operator pos:line="50" pos:column="49">new</op:operator> <call><name pos:line="50" pos:column="53">IndexerSearcher</name><argument_list pos:line="50" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="51" pos:column="13">List</name><argument_list pos:line="51" pos:column="17">&lt;<argument><name pos:line="51" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="51" pos:column="36">codeSearchResults</name> =<init pos:line="51" pos:column="55"> <expr><call><name><name pos:line="51" pos:column="56">codeSearcher</name><op:operator pos:line="51" pos:column="68">.</op:operator><name pos:line="51" pos:column="69">Search</name></name><argument_list pos:line="51" pos:column="75">(<argument><expr><name pos:line="51" pos:column="76">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">methodSearchResult</name> =<init pos:line="52" pos:column="37"> <expr><call><name><name pos:line="52" pos:column="38">codeSearchResults</name><op:operator pos:line="52" pos:column="55">.</op:operator><name pos:line="52" pos:column="56">Find</name></name><argument_list pos:line="52" pos:column="60">(<argument><expr><name pos:line="52" pos:column="61">predicate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><name pos:line="53" pos:column="17">methodSearchResult</name> <op:operator pos:line="53" pos:column="36">!=</op:operator> <name pos:line="53" pos:column="39">null</name></expr>)</condition><then pos:line="53" pos:column="44">
            <block pos:line="54" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="55" pos:column="17">Assert</name><op:operator pos:line="55" pos:column="23">.</op:operator><name pos:line="55" pos:column="24">Fail</name></name><argument_list pos:line="55" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="29">"Should not find anything that matches for this test: "</lit:literal> <op:operator pos:line="55" pos:column="85">+</op:operator> <name pos:line="55" pos:column="87">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>


        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">TestSolutionOpened</name><parameter_list pos:line="61" pos:column="39">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">string</name></type> <name pos:line="63" pos:column="20">keywords</name> =<init pos:line="63" pos:column="30"> <expr><lit:literal type="string" pos:line="63" pos:column="31">"RespondToSolutionOpened"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">expectedLowestRank</name> =<init pos:line="64" pos:column="37"> <expr><lit:literal type="number" pos:line="64" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="65" pos:column="13">Predicate</name><argument_list pos:line="65" pos:column="22">&lt;<argument><name pos:line="65" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="41">predicate</name> =<init pos:line="65" pos:column="52"> <expr><name pos:line="65" pos:column="53">el</name> <op:operator pos:line="65" pos:column="56">=&gt;</op:operator> <name><name pos:line="65" pos:column="59">el</name><op:operator pos:line="65" pos:column="61">.</op:operator><name pos:line="65" pos:column="62">ProgramElement</name><op:operator pos:line="65" pos:column="76">.</op:operator><name pos:line="65" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="65" pos:column="96">==</op:operator> <name><name pos:line="65" pos:column="99">ProgramElementType</name><op:operator pos:line="65" pos:column="117">.</op:operator><name pos:line="65" pos:column="118">Method</name></name> <op:operator pos:line="65" pos:column="125">&amp;&amp;</op:operator> <op:operator pos:line="65" pos:column="128">(</op:operator><name><name pos:line="65" pos:column="129">el</name><op:operator pos:line="65" pos:column="131">.</op:operator><name pos:line="65" pos:column="132">ProgramElement</name><op:operator pos:line="65" pos:column="146">.</op:operator><name pos:line="65" pos:column="147">Name</name></name> <op:operator pos:line="65" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="65" pos:column="155">"RespondToSolutionOpened"</lit:literal><op:operator pos:line="65" pos:column="180">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">keywords</name></expr></argument><op:operator pos:line="66" pos:column="45">,</op:operator> <argument><expr><name pos:line="66" pos:column="47">predicate</name></expr></argument><op:operator pos:line="66" pos:column="56">,</op:operator> <argument><expr><name pos:line="66" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">TestSeveralSearchesOnSandoCodeBase</name><parameter_list pos:line="70" pos:column="55">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">string</name></type> <name pos:line="72" pos:column="20">keywords</name> =<init pos:line="72" pos:column="30"> <expr><lit:literal type="string" pos:line="72" pos:column="31">"parse method"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">expectedLowestRank</name> =<init pos:line="73" pos:column="37"> <expr><lit:literal type="number" pos:line="73" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="74" pos:column="13">Predicate</name><argument_list pos:line="74" pos:column="22">&lt;<argument><name pos:line="74" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="41">predicate</name> =<init pos:line="74" pos:column="52"> <expr><name pos:line="74" pos:column="53">el</name> <op:operator pos:line="74" pos:column="56">=&gt;</op:operator> <name><name pos:line="74" pos:column="59">el</name><op:operator pos:line="74" pos:column="61">.</op:operator><name pos:line="74" pos:column="62">ProgramElement</name><op:operator pos:line="74" pos:column="76">.</op:operator><name pos:line="74" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="74" pos:column="96">==</op:operator> <name><name pos:line="74" pos:column="99">ProgramElementType</name><op:operator pos:line="74" pos:column="117">.</op:operator><name pos:line="74" pos:column="118">Method</name></name> <op:operator pos:line="74" pos:column="125">&amp;&amp;</op:operator> <op:operator pos:line="74" pos:column="128">(</op:operator><name><name pos:line="74" pos:column="129">el</name><op:operator pos:line="74" pos:column="131">.</op:operator><name pos:line="74" pos:column="132">ProgramElement</name><op:operator pos:line="74" pos:column="146">.</op:operator><name pos:line="74" pos:column="147">Name</name></name> <op:operator pos:line="74" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="74" pos:column="155">"ParseMethod"</lit:literal><op:operator pos:line="74" pos:column="168">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="75" pos:column="36">(<argument><expr><name pos:line="75" pos:column="37">keywords</name></expr></argument><op:operator pos:line="75" pos:column="45">,</op:operator> <argument><expr><name pos:line="75" pos:column="47">predicate</name></expr></argument><op:operator pos:line="75" pos:column="56">,</op:operator> <argument><expr><name pos:line="75" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">keywords</name> <op:operator pos:line="76" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="76" pos:column="24">"parse class"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="77" pos:column="13">expectedLowestRank</name> <op:operator pos:line="77" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="77" pos:column="34">2</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="78" pos:column="13">predicate</name> <op:operator pos:line="78" pos:column="23">=</op:operator> <name pos:line="78" pos:column="25">el</name> <op:operator pos:line="78" pos:column="28">=&gt;</op:operator> <name><name pos:line="78" pos:column="31">el</name><op:operator pos:line="78" pos:column="33">.</op:operator><name pos:line="78" pos:column="34">ProgramElement</name><op:operator pos:line="78" pos:column="48">.</op:operator><name pos:line="78" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="78" pos:column="68">==</op:operator> <name><name pos:line="78" pos:column="71">ProgramElementType</name><op:operator pos:line="78" pos:column="89">.</op:operator><name pos:line="78" pos:column="90">Method</name></name> <op:operator pos:line="78" pos:column="97">&amp;&amp;</op:operator> <op:operator pos:line="78" pos:column="100">(</op:operator><name><name pos:line="78" pos:column="101">el</name><op:operator pos:line="78" pos:column="103">.</op:operator><name pos:line="78" pos:column="104">ProgramElement</name><op:operator pos:line="78" pos:column="118">.</op:operator><name pos:line="78" pos:column="119">Name</name></name> <op:operator pos:line="78" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="78" pos:column="127">"ParseClass"</lit:literal><op:operator pos:line="78" pos:column="139">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="79" pos:column="36">(<argument><expr><name pos:line="79" pos:column="37">keywords</name></expr></argument><op:operator pos:line="79" pos:column="45">,</op:operator> <argument><expr><name pos:line="79" pos:column="47">predicate</name></expr></argument><op:operator pos:line="79" pos:column="56">,</op:operator> <argument><expr><name pos:line="79" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="80" pos:column="13">keywords</name> <op:operator pos:line="80" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="80" pos:column="24">"parse util"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="81" pos:column="13">expectedLowestRank</name> <op:operator pos:line="81" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="81" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">predicate</name> <op:operator pos:line="82" pos:column="23">=</op:operator> <name pos:line="82" pos:column="25">el</name> <op:operator pos:line="82" pos:column="28">=&gt;</op:operator> <name><name pos:line="82" pos:column="31">el</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">ProgramElement</name><op:operator pos:line="82" pos:column="48">.</op:operator><name pos:line="82" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="82" pos:column="68">==</op:operator> <name><name pos:line="82" pos:column="71">ProgramElementType</name><op:operator pos:line="82" pos:column="89">.</op:operator><name pos:line="82" pos:column="90">Class</name></name> <op:operator pos:line="82" pos:column="96">&amp;&amp;</op:operator> <op:operator pos:line="82" pos:column="99">(</op:operator><name><name pos:line="82" pos:column="100">el</name><op:operator pos:line="82" pos:column="102">.</op:operator><name pos:line="82" pos:column="103">ProgramElement</name><op:operator pos:line="82" pos:column="117">.</op:operator><name pos:line="82" pos:column="118">Name</name></name> <op:operator pos:line="82" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="82" pos:column="126">"SrcMLParsingUtils"</lit:literal><op:operator pos:line="82" pos:column="145">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">keywords</name></expr></argument><op:operator pos:line="83" pos:column="45">,</op:operator> <argument><expr><name pos:line="83" pos:column="47">predicate</name></expr></argument><op:operator pos:line="83" pos:column="56">,</op:operator> <argument><expr><name pos:line="83" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="84" pos:column="13">keywords</name> <op:operator pos:line="84" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="84" pos:column="24">"custom properties"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="85" pos:column="13">expectedLowestRank</name> <op:operator pos:line="85" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="85" pos:column="34">2</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="86" pos:column="13">predicate</name> <op:operator pos:line="86" pos:column="23">=</op:operator> <name pos:line="86" pos:column="25">el</name> <op:operator pos:line="86" pos:column="28">=&gt;</op:operator> <name><name pos:line="86" pos:column="31">el</name><op:operator pos:line="86" pos:column="33">.</op:operator><name pos:line="86" pos:column="34">ProgramElement</name><op:operator pos:line="86" pos:column="48">.</op:operator><name pos:line="86" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="86" pos:column="68">==</op:operator> <name><name pos:line="86" pos:column="71">ProgramElementType</name><op:operator pos:line="86" pos:column="89">.</op:operator><name pos:line="86" pos:column="90">Method</name></name> <op:operator pos:line="86" pos:column="97">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="100">(</op:operator><name><name pos:line="86" pos:column="101">el</name><op:operator pos:line="86" pos:column="103">.</op:operator><name pos:line="86" pos:column="104">ProgramElement</name><op:operator pos:line="86" pos:column="118">.</op:operator><name pos:line="86" pos:column="119">Name</name></name> <op:operator pos:line="86" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="86" pos:column="127">"GetCustomProperties"</lit:literal><op:operator pos:line="86" pos:column="148">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="87" pos:column="36">(<argument><expr><name pos:line="87" pos:column="37">keywords</name></expr></argument><op:operator pos:line="87" pos:column="45">,</op:operator> <argument><expr><name pos:line="87" pos:column="47">predicate</name></expr></argument><op:operator pos:line="87" pos:column="56">,</op:operator> <argument><expr><name pos:line="87" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="88" pos:column="13">//keywords = "access level";</comment>
            <comment type="line" pos:line="89" pos:column="13">//expectedLowestRank = 7;</comment>
            <comment type="line" pos:line="90" pos:column="13">//predicate = el =&gt; el.Element.ProgramElementType == ProgramElementType.Enum &amp;&amp; (el.Element.Name == "AccessLevel");</comment>
            <comment type="line" pos:line="91" pos:column="13">//EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);</comment>
            <expr_stmt><expr><name pos:line="92" pos:column="13">keywords</name> <op:operator pos:line="92" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="92" pos:column="24">"ParserException"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="93" pos:column="13">expectedLowestRank</name> <op:operator pos:line="93" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="34">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">predicate</name> <op:operator pos:line="94" pos:column="23">=</op:operator> <name pos:line="94" pos:column="25">el</name> <op:operator pos:line="94" pos:column="28">=&gt;</op:operator> <name><name pos:line="94" pos:column="31">el</name><op:operator pos:line="94" pos:column="33">.</op:operator><name pos:line="94" pos:column="34">ProgramElement</name><op:operator pos:line="94" pos:column="48">.</op:operator><name pos:line="94" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="94" pos:column="68">==</op:operator> <name><name pos:line="94" pos:column="71">ProgramElementType</name><op:operator pos:line="94" pos:column="89">.</op:operator><name pos:line="94" pos:column="90">Class</name></name> <op:operator pos:line="94" pos:column="96">&amp;&amp;</op:operator> <op:operator pos:line="94" pos:column="99">(</op:operator><name><name pos:line="94" pos:column="100">el</name><op:operator pos:line="94" pos:column="102">.</op:operator><name pos:line="94" pos:column="103">ProgramElement</name><op:operator pos:line="94" pos:column="117">.</op:operator><name pos:line="94" pos:column="118">Name</name></name> <op:operator pos:line="94" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="94" pos:column="126">"ParserException"</lit:literal><op:operator pos:line="94" pos:column="143">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="95" pos:column="36">(<argument><expr><name pos:line="95" pos:column="37">keywords</name></expr></argument><op:operator pos:line="95" pos:column="45">,</op:operator> <argument><expr><name pos:line="95" pos:column="47">predicate</name></expr></argument><op:operator pos:line="95" pos:column="56">,</op:operator> <argument><expr><name pos:line="95" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="96" pos:column="13">keywords</name> <op:operator pos:line="96" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="96" pos:column="24">"word extract"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">expectedLowestRank</name> <op:operator pos:line="97" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="34">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="98" pos:column="13">predicate</name> <op:operator pos:line="98" pos:column="23">=</op:operator> <name pos:line="98" pos:column="25">el</name> <op:operator pos:line="98" pos:column="28">=&gt;</op:operator> <name><name pos:line="98" pos:column="31">el</name><op:operator pos:line="98" pos:column="33">.</op:operator><name pos:line="98" pos:column="34">ProgramElement</name><op:operator pos:line="98" pos:column="48">.</op:operator><name pos:line="98" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="98" pos:column="68">==</op:operator> <name><name pos:line="98" pos:column="71">ProgramElementType</name><op:operator pos:line="98" pos:column="89">.</op:operator><name pos:line="98" pos:column="90">Method</name></name> <op:operator pos:line="98" pos:column="97">&amp;&amp;</op:operator> <op:operator pos:line="98" pos:column="100">(</op:operator><name><name pos:line="98" pos:column="101">el</name><op:operator pos:line="98" pos:column="103">.</op:operator><name pos:line="98" pos:column="104">ProgramElement</name><op:operator pos:line="98" pos:column="118">.</op:operator><name pos:line="98" pos:column="119">Name</name></name> <op:operator pos:line="98" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="98" pos:column="127">"ExtractWords"</lit:literal><op:operator pos:line="98" pos:column="141">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="99" pos:column="36">(<argument><expr><name pos:line="99" pos:column="37">keywords</name></expr></argument><op:operator pos:line="99" pos:column="45">,</op:operator> <argument><expr><name pos:line="99" pos:column="47">predicate</name></expr></argument><op:operator pos:line="99" pos:column="56">,</op:operator> <argument><expr><name pos:line="99" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="100" pos:column="13">keywords</name> <op:operator pos:line="100" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="100" pos:column="24">"translation get"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="101" pos:column="13">expectedLowestRank</name> <op:operator pos:line="101" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="101" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="102" pos:column="13">predicate</name> <op:operator pos:line="102" pos:column="23">=</op:operator> <name pos:line="102" pos:column="25">el</name> <op:operator pos:line="102" pos:column="28">=&gt;</op:operator> <name><name pos:line="102" pos:column="31">el</name><op:operator pos:line="102" pos:column="33">.</op:operator><name pos:line="102" pos:column="34">ProgramElement</name><op:operator pos:line="102" pos:column="48">.</op:operator><name pos:line="102" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="102" pos:column="68">==</op:operator> <name><name pos:line="102" pos:column="71">ProgramElementType</name><op:operator pos:line="102" pos:column="89">.</op:operator><name pos:line="102" pos:column="90">Method</name></name> <op:operator pos:line="102" pos:column="97">&amp;&amp;</op:operator> <op:operator pos:line="102" pos:column="100">(</op:operator><name><name pos:line="102" pos:column="101">el</name><op:operator pos:line="102" pos:column="103">.</op:operator><name pos:line="102" pos:column="104">ProgramElement</name><op:operator pos:line="102" pos:column="118">.</op:operator><name pos:line="102" pos:column="119">Name</name></name> <op:operator pos:line="102" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="102" pos:column="127">"GetTranslation"</lit:literal><op:operator pos:line="102" pos:column="143">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="103" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="103" pos:column="36">(<argument><expr><name pos:line="103" pos:column="37">keywords</name></expr></argument><op:operator pos:line="103" pos:column="45">,</op:operator> <argument><expr><name pos:line="103" pos:column="47">predicate</name></expr></argument><op:operator pos:line="103" pos:column="56">,</op:operator> <argument><expr><name pos:line="103" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="104" pos:column="13">keywords</name> <op:operator pos:line="104" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="104" pos:column="24">"register extension points"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="105" pos:column="13">expectedLowestRank</name> <op:operator pos:line="105" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="105" pos:column="34">12</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="106" pos:column="13">predicate</name> <op:operator pos:line="106" pos:column="23">=</op:operator> <name pos:line="106" pos:column="25">el</name> <op:operator pos:line="106" pos:column="28">=&gt;</op:operator> <name><name pos:line="106" pos:column="31">el</name><op:operator pos:line="106" pos:column="33">.</op:operator><name pos:line="106" pos:column="34">ProgramElement</name><op:operator pos:line="106" pos:column="48">.</op:operator><name pos:line="106" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="106" pos:column="68">==</op:operator> <name><name pos:line="106" pos:column="71">ProgramElementType</name><op:operator pos:line="106" pos:column="89">.</op:operator><name pos:line="106" pos:column="90">Method</name></name> <op:operator pos:line="106" pos:column="97">&amp;&amp;</op:operator> <op:operator pos:line="106" pos:column="100">(</op:operator><name><name pos:line="106" pos:column="101">el</name><op:operator pos:line="106" pos:column="103">.</op:operator><name pos:line="106" pos:column="104">ProgramElement</name><op:operator pos:line="106" pos:column="118">.</op:operator><name pos:line="106" pos:column="119">Name</name></name> <op:operator pos:line="106" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="106" pos:column="127">"RegisterExtensionPoints"</lit:literal><op:operator pos:line="106" pos:column="152">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="107" pos:column="36">(<argument><expr><name pos:line="107" pos:column="37">keywords</name></expr></argument><op:operator pos:line="107" pos:column="45">,</op:operator> <argument><expr><name pos:line="107" pos:column="47">predicate</name></expr></argument><op:operator pos:line="107" pos:column="56">,</op:operator> <argument><expr><name pos:line="107" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>


        <function><type><specifier pos:line="111" pos:column="9">public</specifier> <specifier pos:line="111" pos:column="16">override</specifier> <name pos:line="111" pos:column="25">string</name></type> <name pos:line="111" pos:column="32">GetIndexDirName</name><parameter_list pos:line="111" pos:column="47">()</parameter_list>
        <block pos:line="112" pos:column="9">{
            <return pos:line="113" pos:column="13">return <expr><lit:literal type="string" pos:line="113" pos:column="20">"SelfSearchTest"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="116" pos:column="9">public</specifier> <specifier pos:line="116" pos:column="16">override</specifier> <name pos:line="116" pos:column="25">string</name></type> <name pos:line="116" pos:column="32">GetFilesDirectory</name><parameter_list pos:line="116" pos:column="49">()</parameter_list>
        <block pos:line="117" pos:column="9">{
            <return pos:line="118" pos:column="13">return <expr><lit:literal type="string" pos:line="118" pos:column="20">"..\\.."</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="121" pos:column="9">public</specifier> <specifier pos:line="121" pos:column="16">override</specifier> <name pos:line="121" pos:column="25">TimeSpan</name><type:modifier pos:line="121" pos:column="33">?</type:modifier></type> <name pos:line="121" pos:column="35">GetTimeToCommit</name><parameter_list pos:line="121" pos:column="50">()</parameter_list>
        <block pos:line="122" pos:column="9">{
            <return pos:line="123" pos:column="13">return <expr><call><name><name pos:line="123" pos:column="20">TimeSpan</name><op:operator pos:line="123" pos:column="28">.</op:operator><name pos:line="123" pos:column="29">FromSeconds</name></name><argument_list pos:line="123" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="123" pos:column="41">10</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        

	}</block></class>
}</block></namespace>
</unit>
