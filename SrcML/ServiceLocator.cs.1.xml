<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\DependencyInjection\DependencyInjection\ServiceLocator.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Microsoft</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">Practices</name><op:operator pos:line="4" pos:column="26">.</op:operator><name pos:line="4" pos:column="27">Unity</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">DependencyInjection</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> <specifier pos:line="8" pos:column="12">static</specifier> class <name pos:line="8" pos:column="25">ServiceLocator</name>
    <block pos:line="9" pos:column="5">{
        <constructor><specifier pos:line="10" pos:column="9">static</specifier> <name pos:line="10" pos:column="16">ServiceLocator</name><parameter_list pos:line="10" pos:column="30">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <expr_stmt><expr><name pos:line="12" pos:column="13">UnityContainers</name> <op:operator pos:line="12" pos:column="29">=</op:operator> <op:operator pos:line="12" pos:column="31">new</op:operator> <call><name><name pos:line="12" pos:column="35">Dictionary</name><argument_list pos:line="12" pos:column="45">&lt;<argument><name pos:line="12" pos:column="46">int</name></argument>, <argument><name pos:line="12" pos:column="51">IUnityContainer</name></argument>&gt;</argument_list></name><argument_list pos:line="12" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">void</name></type> <name><name pos:line="15" pos:column="28">RegisterType</name><argument_list pos:line="15" pos:column="40">&lt;<argument><name pos:line="15" pos:column="41">TFrom</name></argument>, <argument><name pos:line="15" pos:column="48">TTo</name></argument>&gt;</argument_list></name><parameter_list pos:line="15" pos:column="52">()</parameter_list> <where pos:line="15" pos:column="55">where <name pos:line="15" pos:column="61">TTo</name> : <name pos:line="15" pos:column="67">TFrom</name></where>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">CurrentUnityContainer</name><op:operator pos:line="17" pos:column="34">.</op:operator><name pos:line="17" pos:column="35">RegisterType</name></name><argument_list pos:line="17" pos:column="47">(<argument><expr><call><name pos:line="17" pos:column="48">typeof</name><argument_list pos:line="17" pos:column="54">(<argument><expr><name pos:line="17" pos:column="55">TFrom</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="17" pos:column="61">,</op:operator> <argument><expr><call><name pos:line="17" pos:column="63">typeof</name><argument_list pos:line="17" pos:column="69">(<argument><expr><name pos:line="17" pos:column="70">TTo</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="17" pos:column="74">,</op:operator> <argument><expr><name pos:line="17" pos:column="76">null</name></expr></argument><op:operator pos:line="17" pos:column="80">,</op:operator> <argument><expr><op:operator pos:line="17" pos:column="82">new</op:operator> <call><name pos:line="17" pos:column="86">HierarchicalLifetimeManager</name><argument_list pos:line="17" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">static</specifier> <name pos:line="20" pos:column="23">void</name></type> <name><name pos:line="20" pos:column="28">RegisterType</name><argument_list pos:line="20" pos:column="40">&lt;<argument><name pos:line="20" pos:column="41">TFrom</name></argument>, <argument><name pos:line="20" pos:column="48">TTo</name></argument>&gt;</argument_list></name><parameter_list pos:line="20" pos:column="52">(<param><decl><type><name pos:line="20" pos:column="53">string</name></type> <name pos:line="20" pos:column="60">name</name></decl></param>)</parameter_list> <where pos:line="20" pos:column="66">where <name pos:line="20" pos:column="72">TTo</name> : <name pos:line="20" pos:column="78">TFrom</name></where>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">CurrentUnityContainer</name><op:operator pos:line="22" pos:column="34">.</op:operator><name pos:line="22" pos:column="35">RegisterType</name></name><argument_list pos:line="22" pos:column="47">(<argument><expr><call><name pos:line="22" pos:column="48">typeof</name><argument_list pos:line="22" pos:column="54">(<argument><expr><name pos:line="22" pos:column="55">TFrom</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="22" pos:column="61">,</op:operator> <argument><expr><call><name pos:line="22" pos:column="63">typeof</name><argument_list pos:line="22" pos:column="69">(<argument><expr><name pos:line="22" pos:column="70">TTo</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="22" pos:column="74">,</op:operator> <argument><expr><name pos:line="22" pos:column="76">name</name></expr></argument><op:operator pos:line="22" pos:column="80">,</op:operator> <argument><expr><op:operator pos:line="22" pos:column="82">new</op:operator> <call><name pos:line="22" pos:column="86">HierarchicalLifetimeManager</name><argument_list pos:line="22" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="25" pos:column="9">public</specifier> <specifier pos:line="25" pos:column="16">static</specifier> <name pos:line="25" pos:column="23">void</name></type> <name><name pos:line="25" pos:column="28">RegisterInstance</name><argument_list pos:line="25" pos:column="44">&lt;<argument><name pos:line="25" pos:column="45">TInterface</name></argument>&gt;</argument_list></name><parameter_list pos:line="25" pos:column="56">(<param><decl><type><name pos:line="25" pos:column="57">TInterface</name></type> <name pos:line="25" pos:column="68">instance</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">CurrentUnityContainer</name><op:operator pos:line="27" pos:column="34">.</op:operator><name pos:line="27" pos:column="35">RegisterInstance</name></name><argument_list pos:line="27" pos:column="51">(<argument><expr><call><name pos:line="27" pos:column="52">typeof</name><argument_list pos:line="27" pos:column="58">(<argument><expr><name pos:line="27" pos:column="59">TInterface</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="27" pos:column="70">,</op:operator> <argument><expr><name pos:line="27" pos:column="72">null</name></expr></argument><op:operator pos:line="27" pos:column="76">,</op:operator> <argument><expr><name pos:line="27" pos:column="78">instance</name></expr></argument><op:operator pos:line="27" pos:column="86">,</op:operator> <argument><expr><op:operator pos:line="27" pos:column="88">new</op:operator> <call><name pos:line="27" pos:column="92">HierarchicalLifetimeManager</name><argument_list pos:line="27" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">static</specifier> <name pos:line="30" pos:column="23">void</name></type> <name><name pos:line="30" pos:column="28">RegisterInstance</name><argument_list pos:line="30" pos:column="44">&lt;<argument><name pos:line="30" pos:column="45">TInterface</name></argument>&gt;</argument_list></name><parameter_list pos:line="30" pos:column="56">(<param><decl><type><name pos:line="30" pos:column="57">string</name></type> <name pos:line="30" pos:column="64">name</name></decl></param><op:operator pos:line="30" pos:column="68">,</op:operator> <param><decl><type><name pos:line="30" pos:column="70">TInterface</name></type> <name pos:line="30" pos:column="81">instance</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">CurrentUnityContainer</name><op:operator pos:line="32" pos:column="34">.</op:operator><name pos:line="32" pos:column="35">RegisterInstance</name></name><argument_list pos:line="32" pos:column="51">(<argument><expr><call><name pos:line="32" pos:column="52">typeof</name><argument_list pos:line="32" pos:column="58">(<argument><expr><name pos:line="32" pos:column="59">TInterface</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="32" pos:column="70">,</op:operator> <argument><expr><name pos:line="32" pos:column="72">name</name></expr></argument><op:operator pos:line="32" pos:column="76">,</op:operator> <argument><expr><name pos:line="32" pos:column="78">instance</name></expr></argument><op:operator pos:line="32" pos:column="86">,</op:operator> <argument><expr><op:operator pos:line="32" pos:column="88">new</op:operator> <call><name pos:line="32" pos:column="92">HierarchicalLifetimeManager</name><argument_list pos:line="32" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name pos:line="35" pos:column="23">T</name></type> <name><name pos:line="35" pos:column="25">Resolve</name><argument_list pos:line="35" pos:column="32">&lt;<argument><name pos:line="35" pos:column="33">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="35" pos:column="35">()</parameter_list> <where pos:line="35" pos:column="38">where <name pos:line="35" pos:column="44">T</name> : class</where>
        <block pos:line="36" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Contract</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">Ensures</name></name><argument_list pos:line="37" pos:column="29">(<argument><expr><call><name><name pos:line="37" pos:column="30">Contract</name><op:operator pos:line="37" pos:column="38">.</op:operator><name><name pos:line="37" pos:column="39">Result</name><argument_list pos:line="37" pos:column="45">&lt;<argument><name pos:line="37" pos:column="46">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="48">()</argument_list></call> <op:operator pos:line="37" pos:column="51">!=</op:operator> <name pos:line="37" pos:column="54">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">T</name></type> <name pos:line="39" pos:column="15">service</name> =<init pos:line="39" pos:column="24"> <expr><call><name><name pos:line="39" pos:column="25">CurrentUnityContainer</name><op:operator pos:line="39" pos:column="46">.</op:operator><name><name pos:line="39" pos:column="47">Resolve</name><argument_list pos:line="39" pos:column="54">&lt;<argument><name pos:line="39" pos:column="55">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="39" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Contract</name><op:operator pos:line="41" pos:column="21">.</op:operator><name pos:line="41" pos:column="22">Assert</name></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">service</name> <op:operator pos:line="41" pos:column="37">!=</op:operator> <name pos:line="41" pos:column="40">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">service</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="46" pos:column="9">public</specifier> <specifier pos:line="46" pos:column="16">static</specifier> <name pos:line="46" pos:column="23">T</name></type> <name><name pos:line="46" pos:column="25">Resolve</name><argument_list pos:line="46" pos:column="32">&lt;<argument><name pos:line="46" pos:column="33">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="46" pos:column="35">(<param><decl><type><name pos:line="46" pos:column="36">string</name></type> <name pos:line="46" pos:column="43">name</name></decl></param>)</parameter_list> <where pos:line="46" pos:column="49">where <name pos:line="46" pos:column="55">T</name> : class</where>
        <block pos:line="47" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Contract</name><op:operator pos:line="48" pos:column="21">.</op:operator><name pos:line="48" pos:column="22">Ensures</name></name><argument_list pos:line="48" pos:column="29">(<argument><expr><call><name><name pos:line="48" pos:column="30">Contract</name><op:operator pos:line="48" pos:column="38">.</op:operator><name><name pos:line="48" pos:column="39">Result</name><argument_list pos:line="48" pos:column="45">&lt;<argument><name pos:line="48" pos:column="46">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="48" pos:column="48">()</argument_list></call> <op:operator pos:line="48" pos:column="51">!=</op:operator> <name pos:line="48" pos:column="54">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">T</name></type> <name pos:line="50" pos:column="15">service</name> =<init pos:line="50" pos:column="24"> <expr><call><name><name pos:line="50" pos:column="25">CurrentUnityContainer</name><op:operator pos:line="50" pos:column="46">.</op:operator><name><name pos:line="50" pos:column="47">Resolve</name><argument_list pos:line="50" pos:column="54">&lt;<argument><name pos:line="50" pos:column="55">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="57">(<argument><expr><name pos:line="50" pos:column="58">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Contract</name><op:operator pos:line="52" pos:column="21">.</op:operator><name pos:line="52" pos:column="22">Assert</name></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">service</name> <op:operator pos:line="52" pos:column="37">!=</op:operator> <name pos:line="52" pos:column="40">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">service</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">static</specifier> <name pos:line="57" pos:column="23">T</name></type> <name><name pos:line="57" pos:column="25">ResolveOptional</name><argument_list pos:line="57" pos:column="40">&lt;<argument><name pos:line="57" pos:column="41">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="57" pos:column="43">()</parameter_list> <where pos:line="57" pos:column="46">where <name pos:line="57" pos:column="52">T</name> : class</where>
        <block pos:line="58" pos:column="9">{
            <return pos:line="59" pos:column="13">return <expr><call><name><name pos:line="59" pos:column="20">CurrentUnityContainer</name><op:operator pos:line="59" pos:column="41">.</op:operator><name><name pos:line="59" pos:column="42">IsRegistered</name><argument_list pos:line="59" pos:column="54">&lt;<argument><name pos:line="59" pos:column="55">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="57">()</argument_list></call> <op:operator pos:line="59" pos:column="60">?</op:operator> <call><name><name pos:line="59" pos:column="62">CurrentUnityContainer</name><op:operator pos:line="59" pos:column="83">.</op:operator><name><name pos:line="59" pos:column="84">Resolve</name><argument_list pos:line="59" pos:column="91">&lt;<argument><name pos:line="59" pos:column="92">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="94">()</argument_list></call> <op:operator pos:line="59" pos:column="97">:</op:operator> <name pos:line="59" pos:column="99">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">static</specifier> <name pos:line="62" pos:column="23">T</name></type> <name><name pos:line="62" pos:column="25">ResolveOptional</name><argument_list pos:line="62" pos:column="40">&lt;<argument><name pos:line="62" pos:column="41">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="62" pos:column="43">(<param><decl><type><name pos:line="62" pos:column="44">string</name></type> <name pos:line="62" pos:column="51">name</name></decl></param>)</parameter_list> <where pos:line="62" pos:column="57">where <name pos:line="62" pos:column="63">T</name> : class</where>
        <block pos:line="63" pos:column="9">{
            <return pos:line="64" pos:column="13">return <expr><call><name><name pos:line="64" pos:column="20">CurrentUnityContainer</name><op:operator pos:line="64" pos:column="41">.</op:operator><name><name pos:line="64" pos:column="42">IsRegistered</name><argument_list pos:line="64" pos:column="54">&lt;<argument><name pos:line="64" pos:column="55">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="57">(<argument><expr><name pos:line="64" pos:column="58">name</name></expr></argument>)</argument_list></call> <op:operator pos:line="64" pos:column="64">?</op:operator> <call><name><name pos:line="64" pos:column="66">CurrentUnityContainer</name><op:operator pos:line="64" pos:column="87">.</op:operator><name><name pos:line="64" pos:column="88">Resolve</name><argument_list pos:line="64" pos:column="95">&lt;<argument><name pos:line="64" pos:column="96">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="98">(<argument><expr><name pos:line="64" pos:column="99">name</name></expr></argument>)</argument_list></call> <op:operator pos:line="64" pos:column="105">:</op:operator> <name pos:line="64" pos:column="107">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">public</specifier> <specifier pos:line="67" pos:column="16">static</specifier> <name pos:line="67" pos:column="23">void</name></type> <name pos:line="67" pos:column="28">ClearAllRegistrations</name><parameter_list pos:line="67" pos:column="49">()</parameter_list>
        <block pos:line="68" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">currentProcessId</name> =<init pos:line="69" pos:column="35"> <expr><call><name><name pos:line="69" pos:column="36">Process</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">GetCurrentProcess</name></name><argument_list pos:line="69" pos:column="61">()</argument_list></call><op:operator pos:line="69" pos:column="63">.</op:operator><name pos:line="69" pos:column="64">Id</name></expr></init></decl>;</decl_stmt>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><call><name><name pos:line="70" pos:column="17">UnityContainers</name><op:operator pos:line="70" pos:column="32">.</op:operator><name pos:line="70" pos:column="33">ContainsKey</name></name><argument_list pos:line="70" pos:column="44">(<argument><expr><name pos:line="70" pos:column="45">currentProcessId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="70" pos:column="63">
                <expr_stmt><expr><name><name pos:line="71" pos:column="17">UnityContainers</name><index pos:line="71" pos:column="32">[<expr><name pos:line="71" pos:column="33">currentProcessId</name></expr>]</index></name> <op:operator pos:line="71" pos:column="51">=</op:operator> <op:operator pos:line="71" pos:column="53">new</op:operator> <call><name pos:line="71" pos:column="57">UnityContainer</name><argument_list pos:line="71" pos:column="71">()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">private</specifier> <specifier pos:line="74" pos:column="17">static</specifier> <name pos:line="74" pos:column="24">IUnityContainer</name></type> <name pos:line="74" pos:column="40">CurrentUnityContainer</name>
        <block pos:line="75" pos:column="9">{
            <function><name pos:line="76" pos:column="13">get</name>
            <block pos:line="77" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">var</name></type> <name pos:line="78" pos:column="21">currentProcessId</name> =<init pos:line="78" pos:column="39"> <expr><call><name><name pos:line="78" pos:column="40">Process</name><op:operator pos:line="78" pos:column="47">.</op:operator><name pos:line="78" pos:column="48">GetCurrentProcess</name></name><argument_list pos:line="78" pos:column="65">()</argument_list></call><op:operator pos:line="78" pos:column="67">.</op:operator><name pos:line="78" pos:column="68">Id</name></expr></init></decl>;</decl_stmt>
                <if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><op:operator pos:line="79" pos:column="21">!</op:operator><call><name><name pos:line="79" pos:column="22">UnityContainers</name><op:operator pos:line="79" pos:column="37">.</op:operator><name pos:line="79" pos:column="38">ContainsKey</name></name><argument_list pos:line="79" pos:column="49">(<argument><expr><name pos:line="79" pos:column="50">currentProcessId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="79" pos:column="68">
                    <expr_stmt><expr><call><name><name pos:line="80" pos:column="21">UnityContainers</name><op:operator pos:line="80" pos:column="36">.</op:operator><name pos:line="80" pos:column="37">Add</name></name><argument_list pos:line="80" pos:column="40">(<argument><expr><name pos:line="80" pos:column="41">currentProcessId</name></expr></argument><op:operator pos:line="80" pos:column="57">,</op:operator> <argument><expr><op:operator pos:line="80" pos:column="59">new</op:operator> <call><name pos:line="80" pos:column="63">UnityContainer</name><argument_list pos:line="80" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <return pos:line="82" pos:column="17">return <expr><name><name pos:line="82" pos:column="24">UnityContainers</name><index pos:line="82" pos:column="39">[<expr><name pos:line="82" pos:column="40">currentProcessId</name></expr>]</index></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="86" pos:column="9">private</specifier> <specifier pos:line="86" pos:column="17">static</specifier> <specifier pos:line="86" pos:column="24">readonly</specifier> <name><name pos:line="86" pos:column="33">Dictionary</name><argument_list pos:line="86" pos:column="43">&lt;<argument><name pos:line="86" pos:column="44">int</name></argument>, <argument><name pos:line="86" pos:column="49">IUnityContainer</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="66">UnityContainers</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace></unit>
