<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\DependencyInjection\DependencyInjectionUnitTests\ServiceLocatorTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Threading</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Microsoft</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Practices</name><op:operator pos:line="3" pos:column="26">.</op:operator><name pos:line="3" pos:column="27">Unity</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">NUnit</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">DependencyInjectionUnitTests</name></name>
<block pos:line="7" pos:column="1">{
    <class><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">ServiceLocatorTest</name>
    <block pos:line="10" pos:column="5">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">GIVEN_RegisteredType_WHEN_ResolveMethodIsCalledTwiceWithinTheSameThread_THEN_TheSameObjectIsReturnedForEachCall</name><parameter_list pos:line="12" pos:column="132">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">ServiceLocator</name><op:operator pos:line="14" pos:column="27">.</op:operator><name><name pos:line="14" pos:column="28">RegisterType</name><argument_list pos:line="14" pos:column="40">&lt;<argument><name pos:line="14" pos:column="41">IInterf</name></argument>, <argument><name pos:line="14" pos:column="50">InterfImpl2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="14" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="15" pos:column="13">_instance1</name> <op:operator pos:line="15" pos:column="24">=</op:operator> <call><name><name pos:line="15" pos:column="26">ServiceLocator</name><op:operator pos:line="15" pos:column="40">.</op:operator><name><name pos:line="15" pos:column="41">Resolve</name><argument_list pos:line="15" pos:column="48">&lt;<argument><name pos:line="15" pos:column="49">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="15" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">_instance2</name> <op:operator pos:line="16" pos:column="24">=</op:operator> <call><name><name pos:line="16" pos:column="26">ServiceLocator</name><op:operator pos:line="16" pos:column="40">.</op:operator><name><name pos:line="16" pos:column="41">Resolve</name><argument_list pos:line="16" pos:column="48">&lt;<argument><name pos:line="16" pos:column="49">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="16" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">IsTrue</name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name pos:line="17" pos:column="27">ReferenceEquals</name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">_instance1</name></expr></argument><op:operator pos:line="17" pos:column="53">,</op:operator> <argument><expr><name pos:line="17" pos:column="55">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">GIVEN_RegisteredType_WHEN_ResolveMethodIsCalledTwiceOnceInDifferentThread_THEN_TheSameObjectIsReturnedForEachCall</name><parameter_list pos:line="21" pos:column="134">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">ServiceLocator</name><op:operator pos:line="23" pos:column="27">.</op:operator><name><name pos:line="23" pos:column="28">RegisterType</name><argument_list pos:line="23" pos:column="40">&lt;<argument><name pos:line="23" pos:column="41">IInterf</name></argument>, <argument><name pos:line="23" pos:column="50">InterfImpl1</name></argument>&gt;</argument_list></name></name><argument_list pos:line="23" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">_instance1</name> <op:operator pos:line="24" pos:column="24">=</op:operator> <call><name><name pos:line="24" pos:column="26">ServiceLocator</name><op:operator pos:line="24" pos:column="40">.</op:operator><name><name pos:line="24" pos:column="41">Resolve</name><argument_list pos:line="24" pos:column="48">&lt;<argument><name pos:line="24" pos:column="49">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="24" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">thread</name> =<init pos:line="26" pos:column="25"> <expr><op:operator pos:line="26" pos:column="26">new</op:operator> <call><name pos:line="26" pos:column="30">Thread</name><argument_list pos:line="26" pos:column="36">(<argument><expr><op:operator pos:line="26" pos:column="37">(</op:operator><op:operator pos:line="26" pos:column="38">)</op:operator> <op:operator pos:line="26" pos:column="40">=&gt;</op:operator> <call><name pos:line="26" pos:column="43">Resolve</name><argument_list pos:line="26" pos:column="50">(<argument><specifier pos:line="26" pos:column="51">out</specifier> <expr><name pos:line="26" pos:column="55">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">thread</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">Start</name></name><argument_list pos:line="27" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">thread</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">Join</name></name><argument_list pos:line="28" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">IsTrue</name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><call><name pos:line="29" pos:column="27">ReferenceEquals</name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">_instance1</name></expr></argument><op:operator pos:line="29" pos:column="53">,</op:operator> <argument><expr><name pos:line="29" pos:column="55">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">GIVEN_RegisteredType_WHEN_ResolveMethodIsCalledTwiceFromDifferentThreads_THEN_TheSameObjectIsReturnedForEachCall</name><parameter_list pos:line="33" pos:column="133">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">ServiceLocator</name><op:operator pos:line="35" pos:column="27">.</op:operator><name><name pos:line="35" pos:column="28">RegisterType</name><argument_list pos:line="35" pos:column="40">&lt;<argument><name pos:line="35" pos:column="41">IInterf</name></argument>, <argument><name pos:line="35" pos:column="50">InterfImpl1</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="62">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">thread1</name> =<init pos:line="37" pos:column="26"> <expr><op:operator pos:line="37" pos:column="27">new</op:operator> <call><name pos:line="37" pos:column="31">Thread</name><argument_list pos:line="37" pos:column="37">(<argument><expr><op:operator pos:line="37" pos:column="38">(</op:operator><op:operator pos:line="37" pos:column="39">)</op:operator> <op:operator pos:line="37" pos:column="41">=&gt;</op:operator> <call><name pos:line="37" pos:column="44">Resolve</name><argument_list pos:line="37" pos:column="51">(<argument><specifier pos:line="37" pos:column="52">out</specifier> <expr><name pos:line="37" pos:column="56">_instance1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">thread1</name><op:operator pos:line="38" pos:column="20">.</op:operator><name pos:line="38" pos:column="21">Start</name></name><argument_list pos:line="38" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">thread2</name> =<init pos:line="39" pos:column="26"> <expr><op:operator pos:line="39" pos:column="27">new</op:operator> <call><name pos:line="39" pos:column="31">Thread</name><argument_list pos:line="39" pos:column="37">(<argument><expr><op:operator pos:line="39" pos:column="38">(</op:operator><op:operator pos:line="39" pos:column="39">)</op:operator> <op:operator pos:line="39" pos:column="41">=&gt;</op:operator> <call><name pos:line="39" pos:column="44">Resolve</name><argument_list pos:line="39" pos:column="51">(<argument><specifier pos:line="39" pos:column="52">out</specifier> <expr><name pos:line="39" pos:column="56">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">thread2</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">Start</name></name><argument_list pos:line="40" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">thread1</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Join</name></name><argument_list pos:line="42" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">thread2</name><op:operator pos:line="43" pos:column="20">.</op:operator><name pos:line="43" pos:column="21">Join</name></name><argument_list pos:line="43" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">IsTrue</name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><call><name pos:line="45" pos:column="27">ReferenceEquals</name><argument_list pos:line="45" pos:column="42">(<argument><expr><name pos:line="45" pos:column="43">_instance1</name></expr></argument><op:operator pos:line="45" pos:column="53">,</op:operator> <argument><expr><name pos:line="45" pos:column="55">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="48" pos:column="9">[<expr><name pos:line="48" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">GIVEN_RegisteredInstanceWasCalledWithDifferentNames_WHEN_ResolveMethodIsCalledWithDifferentNames_THEN_DifferentObjectIsReturnedForEachCall</name><parameter_list pos:line="49" pos:column="159">()</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">ServiceLocator</name><op:operator pos:line="51" pos:column="27">.</op:operator><name><name pos:line="51" pos:column="28">RegisterInstance</name><argument_list pos:line="51" pos:column="44">&lt;<argument><name pos:line="51" pos:column="45">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="54">"name1"</lit:literal></expr></argument><op:operator pos:line="51" pos:column="61">,</op:operator> <argument><expr><op:operator pos:line="51" pos:column="63">new</op:operator> <call><name pos:line="51" pos:column="67">InterfImpl1</name><argument_list pos:line="51" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">ServiceLocator</name><op:operator pos:line="52" pos:column="27">.</op:operator><name><name pos:line="52" pos:column="28">RegisterInstance</name><argument_list pos:line="52" pos:column="44">&lt;<argument><name pos:line="52" pos:column="45">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="54">"name2"</lit:literal></expr></argument><op:operator pos:line="52" pos:column="61">,</op:operator> <argument><expr><op:operator pos:line="52" pos:column="63">new</op:operator> <call><name pos:line="52" pos:column="67">InterfImpl2</name><argument_list pos:line="52" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">_instance1</name> <op:operator pos:line="53" pos:column="24">=</op:operator> <call><name><name pos:line="53" pos:column="26">ServiceLocator</name><op:operator pos:line="53" pos:column="40">.</op:operator><name><name pos:line="53" pos:column="41">Resolve</name><argument_list pos:line="53" pos:column="48">&lt;<argument><name pos:line="53" pos:column="49">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="53" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="58">"name1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">_instance2</name> <op:operator pos:line="54" pos:column="24">=</op:operator> <call><name><name pos:line="54" pos:column="26">ServiceLocator</name><op:operator pos:line="54" pos:column="40">.</op:operator><name><name pos:line="54" pos:column="41">Resolve</name><argument_list pos:line="54" pos:column="48">&lt;<argument><name pos:line="54" pos:column="49">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="54" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="58">"name2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">IsTrue</name></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">_instance1</name> <op:operator pos:line="55" pos:column="38">is</op:operator> <name pos:line="55" pos:column="41">InterfImpl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">IsTrue</name></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">_instance2</name> <op:operator pos:line="56" pos:column="38">is</op:operator> <name pos:line="56" pos:column="41">InterfImpl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsFalse</name></name><argument_list pos:line="57" pos:column="27">(<argument><expr><call><name pos:line="57" pos:column="28">ReferenceEquals</name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">_instance1</name></expr></argument><op:operator pos:line="57" pos:column="54">,</op:operator> <argument><expr><name pos:line="57" pos:column="56">_instance2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">GIVEN_NoInstanceRegisterForGivenType_WHEN_ResolveOptionalMethodIsCalled_THEN_NullIsReturned</name><parameter_list pos:line="61" pos:column="112">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><name pos:line="63" pos:column="13">_instance1</name> <op:operator pos:line="63" pos:column="24">=</op:operator> <call><name><name pos:line="63" pos:column="26">ServiceLocator</name><op:operator pos:line="63" pos:column="40">.</op:operator><name><name pos:line="63" pos:column="41">ResolveOptional</name><argument_list pos:line="63" pos:column="56">&lt;<argument><name pos:line="63" pos:column="57">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="63" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">IsNull</name></name><argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">_instance1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="67" pos:column="9">[<expr><name pos:line="67" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">void</name></type> <name pos:line="68" pos:column="21">GIVEN_RegisteredInstanceForGivenType_WHEN_ResolveOptionalMethodIsCalled_THEN_ObjectIsReturned</name><parameter_list pos:line="68" pos:column="114">()</parameter_list>
        <block pos:line="69" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">ServiceLocator</name><op:operator pos:line="70" pos:column="27">.</op:operator><name><name pos:line="70" pos:column="28">RegisterType</name><argument_list pos:line="70" pos:column="40">&lt;<argument><name pos:line="70" pos:column="41">IInterf</name></argument>, <argument><name pos:line="70" pos:column="50">InterfImpl1</name></argument>&gt;</argument_list></name></name><argument_list pos:line="70" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="71" pos:column="13">_instance1</name> <op:operator pos:line="71" pos:column="24">=</op:operator> <call><name><name pos:line="71" pos:column="26">ServiceLocator</name><op:operator pos:line="71" pos:column="40">.</op:operator><name><name pos:line="71" pos:column="41">ResolveOptional</name><argument_list pos:line="71" pos:column="56">&lt;<argument><name pos:line="71" pos:column="57">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="71" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">IsNotNull</name></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">_instance1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">TearDown</name><parameter_list pos:line="76" pos:column="29">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">ServiceLocator</name><op:operator pos:line="78" pos:column="27">.</op:operator><name pos:line="78" pos:column="28">ClearAllRegistrations</name></name><argument_list pos:line="78" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="81" pos:column="9">private</specifier> <name pos:line="81" pos:column="17">void</name></type> <name pos:line="81" pos:column="22">Resolve</name><parameter_list pos:line="81" pos:column="29">(<param><decl><type><specifier pos:line="81" pos:column="30">out</specifier> <name pos:line="81" pos:column="34">object</name></type> <name pos:line="81" pos:column="41">instance</name></decl></param>)</parameter_list>
        <block pos:line="82" pos:column="9">{
            <expr_stmt><expr><name pos:line="83" pos:column="13">instance</name> <op:operator pos:line="83" pos:column="22">=</op:operator> <call><name><name pos:line="83" pos:column="24">ServiceLocator</name><op:operator pos:line="83" pos:column="38">.</op:operator><name><name pos:line="83" pos:column="39">Resolve</name><argument_list pos:line="83" pos:column="46">&lt;<argument><name pos:line="83" pos:column="47">IInterf</name></argument>&gt;</argument_list></name></name><argument_list pos:line="83" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="86" pos:column="9">private</specifier> <name pos:line="86" pos:column="17">object</name></type> <name pos:line="86" pos:column="24">_instance1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="87" pos:column="9">private</specifier> <name pos:line="87" pos:column="17">object</name></type> <name pos:line="87" pos:column="24">_instance2</name></decl>;</decl_stmt>
    }</block></class>

    <class type="interface"><specifier pos:line="90" pos:column="5">internal</specifier> interface <name pos:line="90" pos:column="24">IInterf</name>
    <block pos:line="91" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="94" pos:column="5">internal</specifier> class <name pos:line="94" pos:column="20">InterfImpl1</name> <super pos:line="94" pos:column="32">: <name pos:line="94" pos:column="34">IInterf</name></super>
    <block pos:line="95" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="98" pos:column="5">internal</specifier> class <name pos:line="98" pos:column="20">InterfImpl2</name> <super pos:line="98" pos:column="32">: <name pos:line="98" pos:column="34">IInterf</name></super>
    <block pos:line="99" pos:column="5">{
    }</block></class>
}</block></namespace>
</unit>
