<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Indexer\Indexer.UnitTests\TestFiles\Searching\Criteria\SimpleSearchCriteriaTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">QueryParsers</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Lucene</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Net</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Search</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">NUnit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Framework</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Tools</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name><op:operator pos:line="11" pos:column="20">.</op:operator><name pos:line="11" pos:column="21">Documents</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Searching</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Criteria</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name><name pos:line="15" pos:column="11">Sando</name><op:operator pos:line="15" pos:column="16">.</op:operator><name pos:line="15" pos:column="17">Indexer</name><op:operator pos:line="15" pos:column="24">.</op:operator><name pos:line="15" pos:column="25">UnitTests</name><op:operator pos:line="15" pos:column="34">.</op:operator><name pos:line="15" pos:column="35">Searching</name><op:operator pos:line="15" pos:column="44">.</op:operator><name pos:line="15" pos:column="45">Criteria</name></name>
<block pos:line="16" pos:column="1">{
    <class><attribute pos:line="17" pos:column="5">[<expr><name pos:line="17" pos:column="6">TestFixture</name></expr>]</attribute>
	<specifier pos:line="18" pos:column="9">public</specifier> class <name pos:line="18" pos:column="22">SimpleSearchCriteriaTest</name>
	<block pos:line="19" pos:column="9">{
		<function><type><attribute pos:line="20" pos:column="17">[<expr><name pos:line="20" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="21" pos:column="17">public</specifier> <name pos:line="21" pos:column="24">void</name></type> <name pos:line="21" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryStringForEmptySearchCriteria</name><parameter_list pos:line="21" pos:column="108">()</parameter_list>
		<block pos:line="22" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">SearchCriteria</name></type> <name pos:line="23" pos:column="40">simpleSearchCriteria</name> =<init pos:line="23" pos:column="62"> <expr><op:operator pos:line="23" pos:column="63">new</op:operator> <call><name pos:line="23" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="23" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">string</name></type> <name pos:line="24" pos:column="32">queryString</name> =<init pos:line="24" pos:column="45"> <expr><call><name><name pos:line="24" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="24" pos:column="66">.</op:operator><name pos:line="24" pos:column="67">ToQueryString</name></name><argument_list pos:line="24" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">Assert</name><op:operator pos:line="25" pos:column="31">.</op:operator><name pos:line="25" pos:column="32">AreEqual</name></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">queryString</name></expr></argument><op:operator pos:line="25" pos:column="52">,</op:operator> <argument><expr><name><name pos:line="25" pos:column="54">String</name><op:operator pos:line="25" pos:column="60">.</op:operator><name pos:line="25" pos:column="61">Empty</name></name></expr></argument><op:operator pos:line="25" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="25" pos:column="68">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="28" pos:column="17">[<expr><name pos:line="28" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="29" pos:column="17">public</specifier> <name pos:line="29" pos:column="24">void</name></type> <name pos:line="29" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByAccessLevelWithNoAccessLevelCriteria</name><parameter_list pos:line="29" pos:column="120">()</parameter_list>
		<block pos:line="30" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">SearchCriteria</name></type> <name pos:line="31" pos:column="40">simpleSearchCriteria</name> =<init pos:line="31" pos:column="62"> <expr><op:operator pos:line="31" pos:column="63">new</op:operator> <call><name pos:line="31" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="31" pos:column="87">()</argument_list></call>
			<block pos:line="32" pos:column="25">{
				<expr><name pos:line="33" pos:column="33">SearchByAccessLevel</name> <op:operator pos:line="33" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="33" pos:column="55">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="35" pos:column="25">try
			<block pos:line="36" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">string</name></type> <name pos:line="37" pos:column="40">queryString</name> =<init pos:line="37" pos:column="53"> <expr><call><name><name pos:line="37" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="37" pos:column="74">.</op:operator><name pos:line="37" pos:column="75">ToQueryString</name></name><argument_list pos:line="37" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="39" pos:column="25">catch
			<block pos:line="40" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">Assert</name><op:operator pos:line="42" pos:column="31">.</op:operator><name pos:line="42" pos:column="32">True</name></name><argument_list pos:line="42" pos:column="36">(<argument><expr><name pos:line="42" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="42" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="42" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="45" pos:column="17">[<expr><name pos:line="45" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="46" pos:column="17">public</specifier> <name pos:line="46" pos:column="24">void</name></type> <name pos:line="46" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByLocationWithNoLocationCriteria</name><parameter_list pos:line="46" pos:column="114">()</parameter_list>
		<block pos:line="47" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">SearchCriteria</name></type> <name pos:line="48" pos:column="40">simpleSearchCriteria</name> =<init pos:line="48" pos:column="62"> <expr><op:operator pos:line="48" pos:column="63">new</op:operator> <call><name pos:line="48" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="48" pos:column="87">()</argument_list></call>
			<block pos:line="49" pos:column="25">{
				<expr><name pos:line="50" pos:column="33">SearchByLocation</name> <op:operator pos:line="50" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="50" pos:column="52">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="52" pos:column="25">try
			<block pos:line="53" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="54" pos:column="33">string</name></type> <name pos:line="54" pos:column="40">queryString</name> =<init pos:line="54" pos:column="53"> <expr><call><name><name pos:line="54" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="54" pos:column="74">.</op:operator><name pos:line="54" pos:column="75">ToQueryString</name></name><argument_list pos:line="54" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="56" pos:column="25">catch
			<block pos:line="57" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">Assert</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">True</name></name><argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="59" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="59" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="62" pos:column="17">[<expr><name pos:line="62" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="63" pos:column="17">public</specifier> <name pos:line="63" pos:column="24">void</name></type> <name pos:line="63" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByProgramElementTypeWithNoProgramElementTypeCriteria</name><parameter_list pos:line="63" pos:column="134">()</parameter_list>
		<block pos:line="64" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">SearchCriteria</name></type> <name pos:line="65" pos:column="40">simpleSearchCriteria</name> =<init pos:line="65" pos:column="62"> <expr><op:operator pos:line="65" pos:column="63">new</op:operator> <call><name pos:line="65" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="65" pos:column="87">()</argument_list></call>
			<block pos:line="66" pos:column="25">{
				<expr><name pos:line="67" pos:column="33">SearchByProgramElementType</name> <op:operator pos:line="67" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="62">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="69" pos:column="25">try
			<block pos:line="70" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="71" pos:column="33">string</name></type> <name pos:line="71" pos:column="40">queryString</name> =<init pos:line="71" pos:column="53"> <expr><call><name><name pos:line="71" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="71" pos:column="74">.</op:operator><name pos:line="71" pos:column="75">ToQueryString</name></name><argument_list pos:line="71" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="73" pos:column="25">catch
			<block pos:line="74" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">Assert</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">True</name></name><argument_list pos:line="76" pos:column="36">(<argument><expr><name pos:line="76" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="76" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="76" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="79" pos:column="17">[<expr><name pos:line="79" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="80" pos:column="17">public</specifier> <name pos:line="80" pos:column="24">void</name></type> <name pos:line="80" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByUsageTypeWithNoUsageTypeCriteria</name><parameter_list pos:line="80" pos:column="116">()</parameter_list>
		<block pos:line="81" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="82" pos:column="25">SearchCriteria</name></type> <name pos:line="82" pos:column="40">simpleSearchCriteria</name> =<init pos:line="82" pos:column="62"> <expr><op:operator pos:line="82" pos:column="63">new</op:operator> <call><name pos:line="82" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="82" pos:column="87">()</argument_list></call>
			<block pos:line="83" pos:column="25">{
				<expr><name pos:line="84" pos:column="33">SearchByUsageType</name> <op:operator pos:line="84" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="84" pos:column="53">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="86" pos:column="25">try
			<block pos:line="87" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="88" pos:column="33">string</name></type> <name pos:line="88" pos:column="40">queryString</name> =<init pos:line="88" pos:column="53"> <expr><call><name><name pos:line="88" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="88" pos:column="74">.</op:operator><name pos:line="88" pos:column="75">ToQueryString</name></name><argument_list pos:line="88" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="90" pos:column="25">catch
			<block pos:line="91" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="93" pos:column="25">Assert</name><op:operator pos:line="93" pos:column="31">.</op:operator><name pos:line="93" pos:column="32">True</name></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">contractFailed</name></expr></argument><op:operator pos:line="93" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="93" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="96" pos:column="17">[<expr><name pos:line="96" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="97" pos:column="17">public</specifier> <name pos:line="97" pos:column="24">void</name></type> <name pos:line="97" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidAccessLevelsQueryString_SingleCondition</name><parameter_list pos:line="97" pos:column="114">()</parameter_list>
		<block pos:line="98" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="99" pos:column="25">SearchCriteria</name></type> <name pos:line="99" pos:column="40">simpleSearchCriteria</name> =<init pos:line="99" pos:column="62"> <expr><op:operator pos:line="99" pos:column="63">new</op:operator> <call><name pos:line="99" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="99" pos:column="87">()</argument_list></call>
													<block pos:line="100" pos:column="105">{
														<expr><name pos:line="101" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="101" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="101" pos:column="135">true</lit:literal></expr><op:operator pos:line="101" pos:column="139">,</op:operator>
														<expr><name pos:line="102" pos:column="113">AccessLevels</name> <op:operator pos:line="102" pos:column="126">=</op:operator> <op:operator pos:line="102" pos:column="128">new</op:operator> <call><name><name pos:line="102" pos:column="132">SortedSet</name><argument_list pos:line="102" pos:column="141">&lt;<argument><name pos:line="102" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="154">()</argument_list></call>
																		<block pos:line="103" pos:column="145">{
																			<expr><name><name pos:line="104" pos:column="153">AccessLevel</name><op:operator pos:line="104" pos:column="164">.</op:operator><name pos:line="104" pos:column="165">Private</name></name></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="107" pos:column="25">string</name></type> <name pos:line="107" pos:column="32">queryString</name> =<init pos:line="107" pos:column="45"> <expr><call><name><name pos:line="107" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="107" pos:column="66">.</op:operator><name pos:line="107" pos:column="67">ToQueryString</name></name><argument_list pos:line="107" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="108" pos:column="25">Assert</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">AreEqual</name></name><argument_list pos:line="108" pos:column="40">(<argument><expr><name pos:line="108" pos:column="41">queryString</name></expr></argument><op:operator pos:line="108" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="108" pos:column="54">"("</lit:literal> <op:operator pos:line="108" pos:column="58">+</op:operator> <call><name><name pos:line="108" pos:column="60">SandoField</name><op:operator pos:line="108" pos:column="70">.</op:operator><name pos:line="108" pos:column="71">AccessLevel</name><op:operator pos:line="108" pos:column="82">.</op:operator><name pos:line="108" pos:column="83">ToString</name></name><argument_list pos:line="108" pos:column="91">()</argument_list></call> <op:operator pos:line="108" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="96">":Private)"</lit:literal></expr></argument><op:operator pos:line="108" pos:column="107">,</op:operator> <argument><expr><lit:literal type="string" pos:line="108" pos:column="109">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="109" pos:column="25">try
			<block pos:line="110" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="111" pos:column="33">Query</name></type> <name pos:line="111" pos:column="39">query</name> =<init pos:line="111" pos:column="46"> <expr><op:operator pos:line="111" pos:column="47">new</op:operator> <call><name pos:line="111" pos:column="51">QueryParser</name><argument_list pos:line="111" pos:column="62">(<argument><expr><name><name pos:line="111" pos:column="63">Lucene</name><op:operator pos:line="111" pos:column="69">.</op:operator><name pos:line="111" pos:column="70">Net</name><op:operator pos:line="111" pos:column="73">.</op:operator><name pos:line="111" pos:column="74">Util</name><op:operator pos:line="111" pos:column="78">.</op:operator><name pos:line="111" pos:column="79">Version</name><op:operator pos:line="111" pos:column="86">.</op:operator><name pos:line="111" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="111" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="111" pos:column="98">SandoField</name><op:operator pos:line="111" pos:column="108">.</op:operator><name pos:line="111" pos:column="109">AccessLevel</name><op:operator pos:line="111" pos:column="120">.</op:operator><name pos:line="111" pos:column="121">ToString</name></name><argument_list pos:line="111" pos:column="129">()</argument_list></call></expr></argument><op:operator pos:line="111" pos:column="131">,</op:operator> <argument><expr><op:operator pos:line="111" pos:column="133">new</op:operator> <call><name pos:line="111" pos:column="137">SimpleAnalyzer</name><argument_list pos:line="111" pos:column="151">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="111" pos:column="154">.</op:operator><call><name pos:line="111" pos:column="155">Parse</name><argument_list pos:line="111" pos:column="160">(<argument><expr><name pos:line="111" pos:column="161">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="112" pos:column="33">Assert</name><op:operator pos:line="112" pos:column="39">.</op:operator><name pos:line="112" pos:column="40">NotNull</name></name><argument_list pos:line="112" pos:column="47">(<argument><expr><name pos:line="112" pos:column="48">query</name></expr></argument><op:operator pos:line="112" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="112" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="114" pos:column="25">catch(<param><decl><type><name pos:line="114" pos:column="31">Exception</name></type> <name pos:line="114" pos:column="41">ex</name></decl></param>)
			<block pos:line="115" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">Assert</name><op:operator pos:line="116" pos:column="39">.</op:operator><name pos:line="116" pos:column="40">Fail</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name><name pos:line="116" pos:column="45">ex</name><op:operator pos:line="116" pos:column="47">.</op:operator><name pos:line="116" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="120" pos:column="17">[<expr><name pos:line="120" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="121" pos:column="17">public</specifier> <name pos:line="121" pos:column="24">void</name></type> <name pos:line="121" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidAccessLevelsQueryString_MultipleConditions</name><parameter_list pos:line="121" pos:column="117">()</parameter_list>
		<block pos:line="122" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="123" pos:column="25">SearchCriteria</name></type> <name pos:line="123" pos:column="40">simpleSearchCriteria</name> =<init pos:line="123" pos:column="62"> <expr><op:operator pos:line="123" pos:column="63">new</op:operator> <call><name pos:line="123" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="123" pos:column="87">()</argument_list></call>
													<block pos:line="124" pos:column="105">{
														<expr><name pos:line="125" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="125" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="125" pos:column="135">true</lit:literal></expr><op:operator pos:line="125" pos:column="139">,</op:operator>
														<expr><name pos:line="126" pos:column="113">AccessLevels</name> <op:operator pos:line="126" pos:column="126">=</op:operator> <op:operator pos:line="126" pos:column="128">new</op:operator> <call><name><name pos:line="126" pos:column="132">SortedSet</name><argument_list pos:line="126" pos:column="141">&lt;<argument><name pos:line="126" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="154">()</argument_list></call>
																		<block pos:line="127" pos:column="145">{
																			<expr><name><name pos:line="128" pos:column="153">AccessLevel</name><op:operator pos:line="128" pos:column="164">.</op:operator><name pos:line="128" pos:column="165">Public</name></name></expr><op:operator pos:line="128" pos:column="171">,</op:operator>
																			<expr><name><name pos:line="129" pos:column="153">AccessLevel</name><op:operator pos:line="129" pos:column="164">.</op:operator><name pos:line="129" pos:column="165">Protected</name></name></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="132" pos:column="25">string</name></type> <name pos:line="132" pos:column="32">queryString</name> =<init pos:line="132" pos:column="45"> <expr><call><name><name pos:line="132" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="132" pos:column="66">.</op:operator><name pos:line="132" pos:column="67">ToQueryString</name></name><argument_list pos:line="132" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="133" pos:column="25">Assert</name><op:operator pos:line="133" pos:column="31">.</op:operator><name pos:line="133" pos:column="32">AreEqual</name></name><argument_list pos:line="133" pos:column="40">(<argument><expr><name pos:line="133" pos:column="41">queryString</name></expr></argument><op:operator pos:line="133" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="133" pos:column="54">"("</lit:literal> <op:operator pos:line="133" pos:column="58">+</op:operator> <call><name><name pos:line="133" pos:column="60">SandoField</name><op:operator pos:line="133" pos:column="70">.</op:operator><name pos:line="133" pos:column="71">AccessLevel</name><op:operator pos:line="133" pos:column="82">.</op:operator><name pos:line="133" pos:column="83">ToString</name></name><argument_list pos:line="133" pos:column="91">()</argument_list></call> <op:operator pos:line="133" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="133" pos:column="96">":Protected OR "</lit:literal> <op:operator pos:line="133" pos:column="113">+</op:operator> <call><name><name pos:line="133" pos:column="115">SandoField</name><op:operator pos:line="133" pos:column="125">.</op:operator><name pos:line="133" pos:column="126">AccessLevel</name><op:operator pos:line="133" pos:column="137">.</op:operator><name pos:line="133" pos:column="138">ToString</name></name><argument_list pos:line="133" pos:column="146">()</argument_list></call> <op:operator pos:line="133" pos:column="149">+</op:operator> <lit:literal type="string" pos:line="133" pos:column="151">":Public)"</lit:literal></expr></argument><op:operator pos:line="133" pos:column="161">,</op:operator> <argument><expr><lit:literal type="string" pos:line="133" pos:column="163">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="134" pos:column="25">try
			<block pos:line="135" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="136" pos:column="33">Query</name></type> <name pos:line="136" pos:column="39">query</name> =<init pos:line="136" pos:column="46"> <expr><op:operator pos:line="136" pos:column="47">new</op:operator> <call><name pos:line="136" pos:column="51">QueryParser</name><argument_list pos:line="136" pos:column="62">(<argument><expr><name><name pos:line="136" pos:column="63">Lucene</name><op:operator pos:line="136" pos:column="69">.</op:operator><name pos:line="136" pos:column="70">Net</name><op:operator pos:line="136" pos:column="73">.</op:operator><name pos:line="136" pos:column="74">Util</name><op:operator pos:line="136" pos:column="78">.</op:operator><name pos:line="136" pos:column="79">Version</name><op:operator pos:line="136" pos:column="86">.</op:operator><name pos:line="136" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="136" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="136" pos:column="98">SandoField</name><op:operator pos:line="136" pos:column="108">.</op:operator><name pos:line="136" pos:column="109">AccessLevel</name><op:operator pos:line="136" pos:column="120">.</op:operator><name pos:line="136" pos:column="121">ToString</name></name><argument_list pos:line="136" pos:column="129">()</argument_list></call></expr></argument><op:operator pos:line="136" pos:column="131">,</op:operator> <argument><expr><op:operator pos:line="136" pos:column="133">new</op:operator> <call><name pos:line="136" pos:column="137">SimpleAnalyzer</name><argument_list pos:line="136" pos:column="151">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="136" pos:column="154">.</op:operator><call><name pos:line="136" pos:column="155">Parse</name><argument_list pos:line="136" pos:column="160">(<argument><expr><name pos:line="136" pos:column="161">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">Assert</name><op:operator pos:line="137" pos:column="39">.</op:operator><name pos:line="137" pos:column="40">NotNull</name></name><argument_list pos:line="137" pos:column="47">(<argument><expr><name pos:line="137" pos:column="48">query</name></expr></argument><op:operator pos:line="137" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="137" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="139" pos:column="25">catch(<param><decl><type><name pos:line="139" pos:column="31">Exception</name></type> <name pos:line="139" pos:column="41">ex</name></decl></param>)
			<block pos:line="140" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">Assert</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">Fail</name></name><argument_list pos:line="141" pos:column="44">(<argument><expr><name><name pos:line="141" pos:column="45">ex</name><op:operator pos:line="141" pos:column="47">.</op:operator><name pos:line="141" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="145" pos:column="9">[<expr><name pos:line="145" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">SimpleSearchCriteria_ToQueryStringCreatesValidFileExtensionsQueryString_SingleCondition</name><parameter_list pos:line="146" pos:column="108">()</parameter_list>
        <block pos:line="147" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">SearchCriteria</name></type> <name pos:line="148" pos:column="28">simpleSearchCriteria</name> =<init pos:line="148" pos:column="50"> <expr><op:operator pos:line="148" pos:column="51">new</op:operator> <call><name pos:line="148" pos:column="55">SimpleSearchCriteria</name><argument_list pos:line="148" pos:column="75">()</argument_list></call>
                <block pos:line="149" pos:column="17">{
                    <expr><name pos:line="150" pos:column="21">SearchByFileExtension</name> <op:operator pos:line="150" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="150" pos:column="45">true</lit:literal></expr><op:operator pos:line="150" pos:column="49">,</op:operator>
                    <expr><name pos:line="151" pos:column="21">FileExtensions</name> <op:operator pos:line="151" pos:column="36">=</op:operator> <op:operator pos:line="151" pos:column="38">new</op:operator> <name><name pos:line="151" pos:column="42">SortedSet</name><argument_list pos:line="151" pos:column="51">&lt;<argument><name pos:line="151" pos:column="52">string</name></argument>&gt;</argument_list></name>
                        <block pos:line="152" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="153" pos:column="29">".cs"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="156" pos:column="13">var</name></type> <name pos:line="156" pos:column="17">queryString</name> =<init pos:line="156" pos:column="30"> <expr><call><name><name pos:line="156" pos:column="31">simpleSearchCriteria</name><op:operator pos:line="156" pos:column="51">.</op:operator><name pos:line="156" pos:column="52">ToQueryString</name></name><argument_list pos:line="156" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><name pos:line="157" pos:column="29">queryString</name></expr></argument><op:operator pos:line="157" pos:column="40">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="42">"("</lit:literal> <op:operator pos:line="157" pos:column="46">+</op:operator> <call><name><name pos:line="157" pos:column="48">SandoField</name><op:operator pos:line="157" pos:column="58">.</op:operator><name pos:line="157" pos:column="59">FileExtension</name><op:operator pos:line="157" pos:column="72">.</op:operator><name pos:line="157" pos:column="73">ToString</name></name><argument_list pos:line="157" pos:column="81">()</argument_list></call> <op:operator pos:line="157" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="157" pos:column="86">":\".cs\")"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="97">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="99">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="158" pos:column="13">try
            <block pos:line="159" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="160" pos:column="17">var</name></type> <name pos:line="160" pos:column="21">query</name> =<init pos:line="160" pos:column="28"> <expr><op:operator pos:line="160" pos:column="29">new</op:operator> <call><name pos:line="160" pos:column="33">QueryParser</name><argument_list pos:line="160" pos:column="44">(<argument><expr><name><name pos:line="160" pos:column="45">Lucene</name><op:operator pos:line="160" pos:column="51">.</op:operator><name pos:line="160" pos:column="52">Net</name><op:operator pos:line="160" pos:column="55">.</op:operator><name pos:line="160" pos:column="56">Util</name><op:operator pos:line="160" pos:column="60">.</op:operator><name pos:line="160" pos:column="61">Version</name><op:operator pos:line="160" pos:column="68">.</op:operator><name pos:line="160" pos:column="69">LUCENE_29</name></name></expr></argument><op:operator pos:line="160" pos:column="78">,</op:operator> <argument><expr><call><name><name pos:line="160" pos:column="80">SandoField</name><op:operator pos:line="160" pos:column="90">.</op:operator><name pos:line="160" pos:column="91">FileExtension</name><op:operator pos:line="160" pos:column="104">.</op:operator><name pos:line="160" pos:column="105">ToString</name></name><argument_list pos:line="160" pos:column="113">()</argument_list></call></expr></argument><op:operator pos:line="160" pos:column="115">,</op:operator> <argument><expr><op:operator pos:line="160" pos:column="117">new</op:operator> <call><name pos:line="160" pos:column="121">SimpleAnalyzer</name><argument_list pos:line="160" pos:column="135">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="160" pos:column="138">.</op:operator><call><name pos:line="160" pos:column="139">Parse</name><argument_list pos:line="160" pos:column="144">(<argument><expr><name pos:line="160" pos:column="145">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="161" pos:column="17">Assert</name><op:operator pos:line="161" pos:column="23">.</op:operator><name pos:line="161" pos:column="24">NotNull</name></name><argument_list pos:line="161" pos:column="31">(<argument><expr><name pos:line="161" pos:column="32">query</name></expr></argument><op:operator pos:line="161" pos:column="37">,</op:operator> <argument><expr><lit:literal type="string" pos:line="161" pos:column="39">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="163" pos:column="13">catch (<param><decl><type><name pos:line="163" pos:column="20">Exception</name></type> <name pos:line="163" pos:column="30">ex</name></decl></param>)
            <block pos:line="164" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">Assert</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">Fail</name></name><argument_list pos:line="165" pos:column="28">(<argument><expr><name><name pos:line="165" pos:column="29">ex</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="169" pos:column="9">[<expr><name pos:line="169" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">SimpleSearchCriteria_ToQueryStringCreatesFileExtensionsQueryString_MultipleConditions</name><parameter_list pos:line="170" pos:column="106">()</parameter_list>
        <block pos:line="171" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="172" pos:column="13">SearchCriteria</name></type> <name pos:line="172" pos:column="28">simpleSearchCriteria</name> =<init pos:line="172" pos:column="50"> <expr><op:operator pos:line="172" pos:column="51">new</op:operator> <call><name pos:line="172" pos:column="55">SimpleSearchCriteria</name><argument_list pos:line="172" pos:column="75">()</argument_list></call>
                <block pos:line="173" pos:column="17">{
                    <expr><name pos:line="174" pos:column="21">SearchByFileExtension</name> <op:operator pos:line="174" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="174" pos:column="45">true</lit:literal></expr><op:operator pos:line="174" pos:column="49">,</op:operator>
                    <expr><name pos:line="175" pos:column="21">FileExtensions</name> <op:operator pos:line="175" pos:column="36">=</op:operator> <op:operator pos:line="175" pos:column="38">new</op:operator> <call><name><name pos:line="175" pos:column="42">SortedSet</name><argument_list pos:line="175" pos:column="51">&lt;<argument><name pos:line="175" pos:column="52">string</name></argument>&gt;</argument_list></name><argument_list pos:line="175" pos:column="59">()</argument_list></call>
                        <block pos:line="176" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="177" pos:column="29">".cs"</lit:literal></expr><op:operator pos:line="177" pos:column="34">,</op:operator>
                            <expr><lit:literal type="string" pos:line="178" pos:column="29">".h"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">queryString</name> =<init pos:line="181" pos:column="30"> <expr><call><name><name pos:line="181" pos:column="31">simpleSearchCriteria</name><op:operator pos:line="181" pos:column="51">.</op:operator><name pos:line="181" pos:column="52">ToQueryString</name></name><argument_list pos:line="181" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">AreEqual</name></name><argument_list pos:line="182" pos:column="28">(<argument><expr><name pos:line="182" pos:column="29">queryString</name></expr></argument><op:operator pos:line="182" pos:column="40">,</op:operator> <argument><expr><lit:literal type="string" pos:line="182" pos:column="42">"("</lit:literal> <op:operator pos:line="182" pos:column="46">+</op:operator> <call><name><name pos:line="182" pos:column="48">SandoField</name><op:operator pos:line="182" pos:column="58">.</op:operator><name pos:line="182" pos:column="59">FileExtension</name><op:operator pos:line="182" pos:column="72">.</op:operator><name pos:line="182" pos:column="73">ToString</name></name><argument_list pos:line="182" pos:column="81">()</argument_list></call> <op:operator pos:line="182" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="182" pos:column="86">":\".cs\" OR "</lit:literal> <op:operator pos:line="182" pos:column="101">+</op:operator> <call><name><name pos:line="182" pos:column="103">SandoField</name><op:operator pos:line="182" pos:column="113">.</op:operator><name pos:line="182" pos:column="114">FileExtension</name><op:operator pos:line="182" pos:column="127">.</op:operator><name pos:line="182" pos:column="128">ToString</name></name><argument_list pos:line="182" pos:column="136">()</argument_list></call> <op:operator pos:line="182" pos:column="139">+</op:operator> <lit:literal type="string" pos:line="182" pos:column="141">":\".h\")"</lit:literal></expr></argument><op:operator pos:line="182" pos:column="151">,</op:operator> <argument><expr><lit:literal type="string" pos:line="182" pos:column="153">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="183" pos:column="13">try
            <block pos:line="184" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="185" pos:column="17">var</name></type> <name pos:line="185" pos:column="21">query</name> =<init pos:line="185" pos:column="28"> <expr><op:operator pos:line="185" pos:column="29">new</op:operator> <call><name pos:line="185" pos:column="33">QueryParser</name><argument_list pos:line="185" pos:column="44">(<argument><expr><name><name pos:line="185" pos:column="45">Lucene</name><op:operator pos:line="185" pos:column="51">.</op:operator><name pos:line="185" pos:column="52">Net</name><op:operator pos:line="185" pos:column="55">.</op:operator><name pos:line="185" pos:column="56">Util</name><op:operator pos:line="185" pos:column="60">.</op:operator><name pos:line="185" pos:column="61">Version</name><op:operator pos:line="185" pos:column="68">.</op:operator><name pos:line="185" pos:column="69">LUCENE_29</name></name></expr></argument><op:operator pos:line="185" pos:column="78">,</op:operator> <argument><expr><call><name><name pos:line="185" pos:column="80">SandoField</name><op:operator pos:line="185" pos:column="90">.</op:operator><name pos:line="185" pos:column="91">FullFilePath</name><op:operator pos:line="185" pos:column="103">.</op:operator><name pos:line="185" pos:column="104">ToString</name></name><argument_list pos:line="185" pos:column="112">()</argument_list></call></expr></argument><op:operator pos:line="185" pos:column="114">,</op:operator> <argument><expr><op:operator pos:line="185" pos:column="116">new</op:operator> <call><name pos:line="185" pos:column="120">SimpleAnalyzer</name><argument_list pos:line="185" pos:column="134">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="185" pos:column="137">.</op:operator><call><name pos:line="185" pos:column="138">Parse</name><argument_list pos:line="185" pos:column="143">(<argument><expr><name pos:line="185" pos:column="144">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="186" pos:column="17">Assert</name><op:operator pos:line="186" pos:column="23">.</op:operator><name pos:line="186" pos:column="24">NotNull</name></name><argument_list pos:line="186" pos:column="31">(<argument><expr><name pos:line="186" pos:column="32">query</name></expr></argument><op:operator pos:line="186" pos:column="37">,</op:operator> <argument><expr><lit:literal type="string" pos:line="186" pos:column="39">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="188" pos:column="13">catch (<param><decl><type><name pos:line="188" pos:column="20">Exception</name></type> <name pos:line="188" pos:column="30">ex</name></decl></param>)
            <block pos:line="189" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">Assert</name><op:operator pos:line="190" pos:column="23">.</op:operator><name pos:line="190" pos:column="24">Fail</name></name><argument_list pos:line="190" pos:column="28">(<argument><expr><name><name pos:line="190" pos:column="29">ex</name><op:operator pos:line="190" pos:column="31">.</op:operator><name pos:line="190" pos:column="32">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

		<function><type><attribute pos:line="194" pos:column="17">[<expr><name pos:line="194" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="195" pos:column="17">public</specifier> <name pos:line="195" pos:column="24">void</name></type> <name pos:line="195" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidLocationsQueryString_SingleCondition</name><parameter_list pos:line="195" pos:column="111">()</parameter_list>
		<block pos:line="196" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="197" pos:column="25">SearchCriteria</name></type> <name pos:line="197" pos:column="40">simpleSearchCriteria</name> =<init pos:line="197" pos:column="62"> <expr><op:operator pos:line="197" pos:column="63">new</op:operator> <call><name pos:line="197" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="197" pos:column="87">()</argument_list></call>
													<block pos:line="198" pos:column="105">{
														<expr><name pos:line="199" pos:column="113">SearchByLocation</name> <op:operator pos:line="199" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="199" pos:column="132">true</lit:literal></expr><op:operator pos:line="199" pos:column="136">,</op:operator>
														<expr><name pos:line="200" pos:column="113">Locations</name> <op:operator pos:line="200" pos:column="123">=</op:operator> <op:operator pos:line="200" pos:column="125">new</op:operator> <call><name><name pos:line="200" pos:column="129">SortedSet</name><argument_list pos:line="200" pos:column="138">&lt;<argument><name pos:line="200" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="200" pos:column="146">()</argument_list></call>
																	<block pos:line="201" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="202" pos:column="145">"C:/Project/*.cs"</lit:literal></expr>
																	}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="205" pos:column="25">string</name></type> <name pos:line="205" pos:column="32">queryString</name> =<init pos:line="205" pos:column="45"> <expr><call><name><name pos:line="205" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="205" pos:column="66">.</op:operator><name pos:line="205" pos:column="67">ToQueryString</name></name><argument_list pos:line="205" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="206" pos:column="25">Assert</name><op:operator pos:line="206" pos:column="31">.</op:operator><name pos:line="206" pos:column="32">AreEqual</name></name><argument_list pos:line="206" pos:column="40">(<argument><expr><name pos:line="206" pos:column="41">queryString</name></expr></argument><op:operator pos:line="206" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="206" pos:column="54">"("</lit:literal> <op:operator pos:line="206" pos:column="58">+</op:operator> <call><name><name pos:line="206" pos:column="60">SandoField</name><op:operator pos:line="206" pos:column="70">.</op:operator><name pos:line="206" pos:column="71">FullFilePath</name><op:operator pos:line="206" pos:column="83">.</op:operator><name pos:line="206" pos:column="84">ToString</name></name><argument_list pos:line="206" pos:column="92">()</argument_list></call> <op:operator pos:line="206" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="206" pos:column="97">":\"C:/Project/*.cs\")"</lit:literal></expr></argument><op:operator pos:line="206" pos:column="120">,</op:operator> <argument><expr><lit:literal type="string" pos:line="206" pos:column="122">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="207" pos:column="25">try
			<block pos:line="208" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="209" pos:column="33">Query</name></type> <name pos:line="209" pos:column="39">query</name> =<init pos:line="209" pos:column="46"> <expr><op:operator pos:line="209" pos:column="47">new</op:operator> <call><name pos:line="209" pos:column="51">QueryParser</name><argument_list pos:line="209" pos:column="62">(<argument><expr><name><name pos:line="209" pos:column="63">Lucene</name><op:operator pos:line="209" pos:column="69">.</op:operator><name pos:line="209" pos:column="70">Net</name><op:operator pos:line="209" pos:column="73">.</op:operator><name pos:line="209" pos:column="74">Util</name><op:operator pos:line="209" pos:column="78">.</op:operator><name pos:line="209" pos:column="79">Version</name><op:operator pos:line="209" pos:column="86">.</op:operator><name pos:line="209" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="209" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="209" pos:column="98">SandoField</name><op:operator pos:line="209" pos:column="108">.</op:operator><name pos:line="209" pos:column="109">FullFilePath</name><op:operator pos:line="209" pos:column="121">.</op:operator><name pos:line="209" pos:column="122">ToString</name></name><argument_list pos:line="209" pos:column="130">()</argument_list></call></expr></argument><op:operator pos:line="209" pos:column="132">,</op:operator> <argument><expr><op:operator pos:line="209" pos:column="134">new</op:operator> <call><name pos:line="209" pos:column="138">SimpleAnalyzer</name><argument_list pos:line="209" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="155">.</op:operator><call><name pos:line="209" pos:column="156">Parse</name><argument_list pos:line="209" pos:column="161">(<argument><expr><name pos:line="209" pos:column="162">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="210" pos:column="33">Assert</name><op:operator pos:line="210" pos:column="39">.</op:operator><name pos:line="210" pos:column="40">NotNull</name></name><argument_list pos:line="210" pos:column="47">(<argument><expr><name pos:line="210" pos:column="48">query</name></expr></argument><op:operator pos:line="210" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="210" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="212" pos:column="25">catch(<param><decl><type><name pos:line="212" pos:column="31">Exception</name></type> <name pos:line="212" pos:column="41">ex</name></decl></param>)
			<block pos:line="213" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="214" pos:column="33">Assert</name><op:operator pos:line="214" pos:column="39">.</op:operator><name pos:line="214" pos:column="40">Fail</name></name><argument_list pos:line="214" pos:column="44">(<argument><expr><name><name pos:line="214" pos:column="45">ex</name><op:operator pos:line="214" pos:column="47">.</op:operator><name pos:line="214" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="218" pos:column="17">[<expr><name pos:line="218" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="219" pos:column="17">public</specifier> <name pos:line="219" pos:column="24">void</name></type> <name pos:line="219" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidLocationsQueryString_MultipleConditions</name><parameter_list pos:line="219" pos:column="114">()</parameter_list>
		<block pos:line="220" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="221" pos:column="25">SearchCriteria</name></type> <name pos:line="221" pos:column="40">simpleSearchCriteria</name> =<init pos:line="221" pos:column="62"> <expr><op:operator pos:line="221" pos:column="63">new</op:operator> <call><name pos:line="221" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="221" pos:column="87">()</argument_list></call>
													<block pos:line="222" pos:column="105">{
														<expr><name pos:line="223" pos:column="113">SearchByLocation</name> <op:operator pos:line="223" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="223" pos:column="132">true</lit:literal></expr><op:operator pos:line="223" pos:column="136">,</op:operator>
														<expr><name pos:line="224" pos:column="113">Locations</name> <op:operator pos:line="224" pos:column="123">=</op:operator> <op:operator pos:line="224" pos:column="125">new</op:operator> <call><name><name pos:line="224" pos:column="129">SortedSet</name><argument_list pos:line="224" pos:column="138">&lt;<argument><name pos:line="224" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="224" pos:column="146">()</argument_list></call>
																	<block pos:line="225" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="226" pos:column="145">"C:/Project/*.cs"</lit:literal></expr><op:operator pos:line="226" pos:column="162">,</op:operator>
																		<expr><lit:literal type="string" pos:line="227" pos:column="145">"C:/Project2/*.cs"</lit:literal></expr>
																	}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="230" pos:column="25">string</name></type> <name pos:line="230" pos:column="32">queryString</name> =<init pos:line="230" pos:column="45"> <expr><call><name><name pos:line="230" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="230" pos:column="66">.</op:operator><name pos:line="230" pos:column="67">ToQueryString</name></name><argument_list pos:line="230" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="231" pos:column="25">Assert</name><op:operator pos:line="231" pos:column="31">.</op:operator><name pos:line="231" pos:column="32">AreEqual</name></name><argument_list pos:line="231" pos:column="40">(<argument><expr><name pos:line="231" pos:column="41">queryString</name></expr></argument><op:operator pos:line="231" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="231" pos:column="54">"("</lit:literal> <op:operator pos:line="231" pos:column="58">+</op:operator> <call><name><name pos:line="231" pos:column="60">SandoField</name><op:operator pos:line="231" pos:column="70">.</op:operator><name pos:line="231" pos:column="71">FullFilePath</name><op:operator pos:line="231" pos:column="83">.</op:operator><name pos:line="231" pos:column="84">ToString</name></name><argument_list pos:line="231" pos:column="92">()</argument_list></call> <op:operator pos:line="231" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="231" pos:column="97">":\"C:/Project/*.cs\" OR "</lit:literal> <op:operator pos:line="231" pos:column="124">+</op:operator> <call><name><name pos:line="231" pos:column="126">SandoField</name><op:operator pos:line="231" pos:column="136">.</op:operator><name pos:line="231" pos:column="137">FullFilePath</name><op:operator pos:line="231" pos:column="149">.</op:operator><name pos:line="231" pos:column="150">ToString</name></name><argument_list pos:line="231" pos:column="158">()</argument_list></call> <op:operator pos:line="231" pos:column="161">+</op:operator> <lit:literal type="string" pos:line="231" pos:column="163">":\"C:/Project2/*.cs\")"</lit:literal></expr></argument><op:operator pos:line="231" pos:column="187">,</op:operator> <argument><expr><lit:literal type="string" pos:line="231" pos:column="189">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="232" pos:column="25">try
			<block pos:line="233" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="234" pos:column="33">Query</name></type> <name pos:line="234" pos:column="39">query</name> =<init pos:line="234" pos:column="46"> <expr><op:operator pos:line="234" pos:column="47">new</op:operator> <call><name pos:line="234" pos:column="51">QueryParser</name><argument_list pos:line="234" pos:column="62">(<argument><expr><name><name pos:line="234" pos:column="63">Lucene</name><op:operator pos:line="234" pos:column="69">.</op:operator><name pos:line="234" pos:column="70">Net</name><op:operator pos:line="234" pos:column="73">.</op:operator><name pos:line="234" pos:column="74">Util</name><op:operator pos:line="234" pos:column="78">.</op:operator><name pos:line="234" pos:column="79">Version</name><op:operator pos:line="234" pos:column="86">.</op:operator><name pos:line="234" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="234" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="234" pos:column="98">SandoField</name><op:operator pos:line="234" pos:column="108">.</op:operator><name pos:line="234" pos:column="109">FullFilePath</name><op:operator pos:line="234" pos:column="121">.</op:operator><name pos:line="234" pos:column="122">ToString</name></name><argument_list pos:line="234" pos:column="130">()</argument_list></call></expr></argument><op:operator pos:line="234" pos:column="132">,</op:operator> <argument><expr><op:operator pos:line="234" pos:column="134">new</op:operator> <call><name pos:line="234" pos:column="138">SimpleAnalyzer</name><argument_list pos:line="234" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="234" pos:column="155">.</op:operator><call><name pos:line="234" pos:column="156">Parse</name><argument_list pos:line="234" pos:column="161">(<argument><expr><name pos:line="234" pos:column="162">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="235" pos:column="33">Assert</name><op:operator pos:line="235" pos:column="39">.</op:operator><name pos:line="235" pos:column="40">NotNull</name></name><argument_list pos:line="235" pos:column="47">(<argument><expr><name pos:line="235" pos:column="48">query</name></expr></argument><op:operator pos:line="235" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="235" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="237" pos:column="25">catch(<param><decl><type><name pos:line="237" pos:column="31">Exception</name></type> <name pos:line="237" pos:column="41">ex</name></decl></param>)
			<block pos:line="238" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="239" pos:column="33">Assert</name><op:operator pos:line="239" pos:column="39">.</op:operator><name pos:line="239" pos:column="40">Fail</name></name><argument_list pos:line="239" pos:column="44">(<argument><expr><name><name pos:line="239" pos:column="45">ex</name><op:operator pos:line="239" pos:column="47">.</op:operator><name pos:line="239" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="243" pos:column="17">[<expr><name pos:line="243" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="244" pos:column="17">public</specifier> <name pos:line="244" pos:column="24">void</name></type> <name pos:line="244" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidProgramElementTypesQueryString_SingleCondition</name><parameter_list pos:line="244" pos:column="121">()</parameter_list>
		<block pos:line="245" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="246" pos:column="25">SearchCriteria</name></type> <name pos:line="246" pos:column="40">simpleSearchCriteria</name> =<init pos:line="246" pos:column="62"> <expr><op:operator pos:line="246" pos:column="63">new</op:operator> <call><name pos:line="246" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="246" pos:column="87">()</argument_list></call>
													<block pos:line="247" pos:column="105">{
														<expr><name pos:line="248" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="248" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="248" pos:column="142">true</lit:literal></expr><op:operator pos:line="248" pos:column="146">,</op:operator>
														<expr><name pos:line="249" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="249" pos:column="133">=</op:operator> <op:operator pos:line="249" pos:column="135">new</op:operator> <call><name><name pos:line="249" pos:column="139">SortedSet</name><argument_list pos:line="249" pos:column="148">&lt;<argument><name pos:line="249" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="249" pos:column="168">()</argument_list></call>
																				<block pos:line="250" pos:column="161">{
																					<expr><name><name pos:line="251" pos:column="169">ProgramElementType</name><op:operator pos:line="251" pos:column="187">.</op:operator><name pos:line="251" pos:column="188">Class</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="254" pos:column="25">string</name></type> <name pos:line="254" pos:column="32">queryString</name> =<init pos:line="254" pos:column="45"> <expr><call><name><name pos:line="254" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="254" pos:column="66">.</op:operator><name pos:line="254" pos:column="67">ToQueryString</name></name><argument_list pos:line="254" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="255" pos:column="25">Assert</name><op:operator pos:line="255" pos:column="31">.</op:operator><name pos:line="255" pos:column="32">AreEqual</name></name><argument_list pos:line="255" pos:column="40">(<argument><expr><name pos:line="255" pos:column="41">queryString</name></expr></argument><op:operator pos:line="255" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="255" pos:column="54">"("</lit:literal> <op:operator pos:line="255" pos:column="58">+</op:operator> <call><name><name pos:line="255" pos:column="60">SandoField</name><op:operator pos:line="255" pos:column="70">.</op:operator><name pos:line="255" pos:column="71">ProgramElementType</name><op:operator pos:line="255" pos:column="89">.</op:operator><name pos:line="255" pos:column="90">ToString</name></name><argument_list pos:line="255" pos:column="98">()</argument_list></call> <op:operator pos:line="255" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="255" pos:column="103">":Class*)"</lit:literal></expr></argument><op:operator pos:line="255" pos:column="113">,</op:operator> <argument><expr><lit:literal type="string" pos:line="255" pos:column="115">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="256" pos:column="25">try
			<block pos:line="257" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="258" pos:column="33">Query</name></type> <name pos:line="258" pos:column="39">query</name> =<init pos:line="258" pos:column="46"> <expr><op:operator pos:line="258" pos:column="47">new</op:operator> <call><name pos:line="258" pos:column="51">QueryParser</name><argument_list pos:line="258" pos:column="62">(<argument><expr><name><name pos:line="258" pos:column="63">Lucene</name><op:operator pos:line="258" pos:column="69">.</op:operator><name pos:line="258" pos:column="70">Net</name><op:operator pos:line="258" pos:column="73">.</op:operator><name pos:line="258" pos:column="74">Util</name><op:operator pos:line="258" pos:column="78">.</op:operator><name pos:line="258" pos:column="79">Version</name><op:operator pos:line="258" pos:column="86">.</op:operator><name pos:line="258" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="258" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="258" pos:column="98">SandoField</name><op:operator pos:line="258" pos:column="108">.</op:operator><name pos:line="258" pos:column="109">ProgramElementType</name><op:operator pos:line="258" pos:column="127">.</op:operator><name pos:line="258" pos:column="128">ToString</name></name><argument_list pos:line="258" pos:column="136">()</argument_list></call></expr></argument><op:operator pos:line="258" pos:column="138">,</op:operator> <argument><expr><op:operator pos:line="258" pos:column="140">new</op:operator> <call><name pos:line="258" pos:column="144">SimpleAnalyzer</name><argument_list pos:line="258" pos:column="158">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="258" pos:column="161">.</op:operator><call><name pos:line="258" pos:column="162">Parse</name><argument_list pos:line="258" pos:column="167">(<argument><expr><name pos:line="258" pos:column="168">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="259" pos:column="33">Assert</name><op:operator pos:line="259" pos:column="39">.</op:operator><name pos:line="259" pos:column="40">NotNull</name></name><argument_list pos:line="259" pos:column="47">(<argument><expr><name pos:line="259" pos:column="48">query</name></expr></argument><op:operator pos:line="259" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="259" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="261" pos:column="25">catch(<param><decl><type><name pos:line="261" pos:column="31">Exception</name></type> <name pos:line="261" pos:column="41">ex</name></decl></param>)
			<block pos:line="262" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">Assert</name><op:operator pos:line="263" pos:column="39">.</op:operator><name pos:line="263" pos:column="40">Fail</name></name><argument_list pos:line="263" pos:column="44">(<argument><expr><name><name pos:line="263" pos:column="45">ex</name><op:operator pos:line="263" pos:column="47">.</op:operator><name pos:line="263" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="267" pos:column="17">[<expr><name pos:line="267" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="268" pos:column="17">public</specifier> <name pos:line="268" pos:column="24">void</name></type> <name pos:line="268" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidProgramElementTypesQueryString_MultipleConditions</name><parameter_list pos:line="268" pos:column="124">()</parameter_list>
		<block pos:line="269" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="270" pos:column="25">SearchCriteria</name></type> <name pos:line="270" pos:column="40">simpleSearchCriteria</name> =<init pos:line="270" pos:column="62"> <expr><op:operator pos:line="270" pos:column="63">new</op:operator> <call><name pos:line="270" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="270" pos:column="87">()</argument_list></call>
													<block pos:line="271" pos:column="105">{
														<expr><name pos:line="272" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="272" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="272" pos:column="142">true</lit:literal></expr><op:operator pos:line="272" pos:column="146">,</op:operator>
														<expr><name pos:line="273" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="273" pos:column="133">=</op:operator> <op:operator pos:line="273" pos:column="135">new</op:operator> <call><name><name pos:line="273" pos:column="139">SortedSet</name><argument_list pos:line="273" pos:column="148">&lt;<argument><name pos:line="273" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="273" pos:column="168">()</argument_list></call>
																				<block pos:line="274" pos:column="161">{
																					<expr><name><name pos:line="275" pos:column="169">ProgramElementType</name><op:operator pos:line="275" pos:column="187">.</op:operator><name pos:line="275" pos:column="188">Property</name></name></expr><op:operator pos:line="275" pos:column="196">,</op:operator>
																					<expr><name><name pos:line="276" pos:column="169">ProgramElementType</name><op:operator pos:line="276" pos:column="187">.</op:operator><name pos:line="276" pos:column="188">Class</name></name></expr><op:operator pos:line="276" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="277" pos:column="169">ProgramElementType</name><op:operator pos:line="277" pos:column="187">.</op:operator><name pos:line="277" pos:column="188">Enum</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="280" pos:column="25">string</name></type> <name pos:line="280" pos:column="32">queryString</name> =<init pos:line="280" pos:column="45"> <expr><call><name><name pos:line="280" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="280" pos:column="66">.</op:operator><name pos:line="280" pos:column="67">ToQueryString</name></name><argument_list pos:line="280" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="281" pos:column="25">Assert</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">AreEqual</name></name><argument_list pos:line="281" pos:column="40">(<argument><expr><name pos:line="281" pos:column="41">queryString</name></expr></argument><op:operator pos:line="281" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="281" pos:column="54">"("</lit:literal> <op:operator pos:line="281" pos:column="58">+</op:operator> <call><name><name pos:line="281" pos:column="60">SandoField</name><op:operator pos:line="281" pos:column="70">.</op:operator><name pos:line="281" pos:column="71">ProgramElementType</name><op:operator pos:line="281" pos:column="89">.</op:operator><name pos:line="281" pos:column="90">ToString</name></name><argument_list pos:line="281" pos:column="98">()</argument_list></call> <op:operator pos:line="281" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="281" pos:column="103">":Class* OR "</lit:literal> <op:operator pos:line="281" pos:column="117">+</op:operator> <call><name><name pos:line="281" pos:column="119">SandoField</name><op:operator pos:line="281" pos:column="129">.</op:operator><name pos:line="281" pos:column="130">ProgramElementType</name><op:operator pos:line="281" pos:column="148">.</op:operator><name pos:line="281" pos:column="149">ToString</name></name><argument_list pos:line="281" pos:column="157">()</argument_list></call> <op:operator pos:line="281" pos:column="160">+</op:operator> <lit:literal type="string" pos:line="281" pos:column="162">":Enum* OR "</lit:literal> <op:operator pos:line="281" pos:column="175">+</op:operator> <call><name><name pos:line="281" pos:column="177">SandoField</name><op:operator pos:line="281" pos:column="187">.</op:operator><name pos:line="281" pos:column="188">ProgramElementType</name><op:operator pos:line="281" pos:column="206">.</op:operator><name pos:line="281" pos:column="207">ToString</name></name><argument_list pos:line="281" pos:column="215">()</argument_list></call> <op:operator pos:line="281" pos:column="218">+</op:operator> <lit:literal type="string" pos:line="281" pos:column="220">":Property*)"</lit:literal></expr></argument><op:operator pos:line="281" pos:column="233">,</op:operator> <argument><expr><lit:literal type="string" pos:line="281" pos:column="235">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="282" pos:column="25">try
			<block pos:line="283" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="284" pos:column="33">Query</name></type> <name pos:line="284" pos:column="39">query</name> =<init pos:line="284" pos:column="46"> <expr><op:operator pos:line="284" pos:column="47">new</op:operator> <call><name pos:line="284" pos:column="51">QueryParser</name><argument_list pos:line="284" pos:column="62">(<argument><expr><name><name pos:line="284" pos:column="63">Lucene</name><op:operator pos:line="284" pos:column="69">.</op:operator><name pos:line="284" pos:column="70">Net</name><op:operator pos:line="284" pos:column="73">.</op:operator><name pos:line="284" pos:column="74">Util</name><op:operator pos:line="284" pos:column="78">.</op:operator><name pos:line="284" pos:column="79">Version</name><op:operator pos:line="284" pos:column="86">.</op:operator><name pos:line="284" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="284" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="284" pos:column="98">SandoField</name><op:operator pos:line="284" pos:column="108">.</op:operator><name pos:line="284" pos:column="109">ProgramElementType</name><op:operator pos:line="284" pos:column="127">.</op:operator><name pos:line="284" pos:column="128">ToString</name></name><argument_list pos:line="284" pos:column="136">()</argument_list></call></expr></argument><op:operator pos:line="284" pos:column="138">,</op:operator> <argument><expr><op:operator pos:line="284" pos:column="140">new</op:operator> <call><name pos:line="284" pos:column="144">SimpleAnalyzer</name><argument_list pos:line="284" pos:column="158">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="284" pos:column="161">.</op:operator><call><name pos:line="284" pos:column="162">Parse</name><argument_list pos:line="284" pos:column="167">(<argument><expr><name pos:line="284" pos:column="168">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="285" pos:column="33">Assert</name><op:operator pos:line="285" pos:column="39">.</op:operator><name pos:line="285" pos:column="40">NotNull</name></name><argument_list pos:line="285" pos:column="47">(<argument><expr><name pos:line="285" pos:column="48">query</name></expr></argument><op:operator pos:line="285" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="285" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="287" pos:column="25">catch(<param><decl><type><name pos:line="287" pos:column="31">Exception</name></type> <name pos:line="287" pos:column="41">ex</name></decl></param>)
			<block pos:line="288" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="289" pos:column="33">Assert</name><op:operator pos:line="289" pos:column="39">.</op:operator><name pos:line="289" pos:column="40">Fail</name></name><argument_list pos:line="289" pos:column="44">(<argument><expr><name><name pos:line="289" pos:column="45">ex</name><op:operator pos:line="289" pos:column="47">.</op:operator><name pos:line="289" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="293" pos:column="17">[<expr><name pos:line="293" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="294" pos:column="17">public</specifier> <name pos:line="294" pos:column="24">void</name></type> <name pos:line="294" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_NoCondition</name><parameter_list pos:line="294" pos:column="108">()</parameter_list>
		<block pos:line="295" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="296" pos:column="25">SearchCriteria</name></type> <name pos:line="296" pos:column="40">simpleSearchCriteria</name> =<init pos:line="296" pos:column="62"> <expr><op:operator pos:line="296" pos:column="63">new</op:operator> <call><name pos:line="296" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="296" pos:column="87">()</argument_list></call>
													<block pos:line="297" pos:column="105">{
														<expr><name pos:line="298" pos:column="113">SearchByUsageType</name> <op:operator pos:line="298" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="298" pos:column="133">false</lit:literal></expr><op:operator pos:line="298" pos:column="138">,</op:operator>
														<expr><name pos:line="299" pos:column="113">SearchTerms</name> <op:operator pos:line="299" pos:column="125">=</op:operator> <op:operator pos:line="299" pos:column="127">new</op:operator> <call><name><name pos:line="299" pos:column="131">SortedSet</name><argument_list pos:line="299" pos:column="140">&lt;<argument><name pos:line="299" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="299" pos:column="148">()</argument_list></call>
																		<block pos:line="300" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="301" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="304" pos:column="25">string</name></type> <name pos:line="304" pos:column="32">queryString</name> =<init pos:line="304" pos:column="45"> <expr><call><name><name pos:line="304" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="304" pos:column="66">.</op:operator><name pos:line="304" pos:column="67">ToQueryString</name></name><argument_list pos:line="304" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="305" pos:column="25">string</name></type> <name pos:line="305" pos:column="32">actual</name> =<init pos:line="305" pos:column="40"> <expr><lit:literal type="string" pos:line="305" pos:column="41">"("</lit:literal> <op:operator pos:line="305" pos:column="45">+</op:operator> <call><name><name pos:line="305" pos:column="47">SandoField</name><op:operator pos:line="305" pos:column="57">.</op:operator><name pos:line="305" pos:column="58">Body</name><op:operator pos:line="305" pos:column="62">.</op:operator><name pos:line="305" pos:column="63">ToString</name></name><argument_list pos:line="305" pos:column="71">()</argument_list></call> <op:operator pos:line="305" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="76">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="95">+</op:operator> <call><name><name pos:line="305" pos:column="97">SandoField</name><op:operator pos:line="305" pos:column="107">.</op:operator><name pos:line="305" pos:column="108">Name</name><op:operator pos:line="305" pos:column="112">.</op:operator><name pos:line="305" pos:column="113">ToString</name></name><argument_list pos:line="305" pos:column="121">()</argument_list></call> <op:operator pos:line="305" pos:column="124">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="126">":SimpleClass^4 OR "</lit:literal> <op:operator pos:line="305" pos:column="147">+</op:operator> <call><name><name pos:line="305" pos:column="149">SandoField</name><op:operator pos:line="305" pos:column="159">.</op:operator><name pos:line="305" pos:column="160">ExtendedClasses</name><op:operator pos:line="305" pos:column="175">.</op:operator><name pos:line="305" pos:column="176">ToString</name></name><argument_list pos:line="305" pos:column="184">()</argument_list></call> <op:operator pos:line="305" pos:column="187">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="189">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="208">+</op:operator> <call><name><name pos:line="305" pos:column="210">SandoField</name><op:operator pos:line="305" pos:column="220">.</op:operator><name pos:line="305" pos:column="221">ImplementedInterfaces</name><op:operator pos:line="305" pos:column="242">.</op:operator><name pos:line="305" pos:column="243">ToString</name></name><argument_list pos:line="305" pos:column="251">()</argument_list></call> <op:operator pos:line="305" pos:column="254">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="256">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="275">+</op:operator> <call><name><name pos:line="305" pos:column="277">SandoField</name><op:operator pos:line="305" pos:column="287">.</op:operator><name pos:line="305" pos:column="288">Arguments</name><op:operator pos:line="305" pos:column="297">.</op:operator><name pos:line="305" pos:column="298">ToString</name></name><argument_list pos:line="305" pos:column="306">()</argument_list></call> <op:operator pos:line="305" pos:column="309">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="311">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="330">+</op:operator> <call><name><name pos:line="305" pos:column="332">SandoField</name><op:operator pos:line="305" pos:column="342">.</op:operator><name pos:line="305" pos:column="343">ReturnType</name><op:operator pos:line="305" pos:column="353">.</op:operator><name pos:line="305" pos:column="354">ToString</name></name><argument_list pos:line="305" pos:column="362">()</argument_list></call> <op:operator pos:line="305" pos:column="365">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="367">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="386">+</op:operator> <call><name><name pos:line="305" pos:column="388">SandoField</name><op:operator pos:line="305" pos:column="398">.</op:operator><name pos:line="305" pos:column="399">Namespace</name><op:operator pos:line="305" pos:column="408">.</op:operator><name pos:line="305" pos:column="409">ToString</name></name><argument_list pos:line="305" pos:column="417">()</argument_list></call> <op:operator pos:line="305" pos:column="420">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="422">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="441">+</op:operator> <call><name><name pos:line="305" pos:column="443">SandoField</name><op:operator pos:line="305" pos:column="453">.</op:operator><name pos:line="305" pos:column="454">DataType</name><op:operator pos:line="305" pos:column="462">.</op:operator><name pos:line="305" pos:column="463">ToString</name></name><argument_list pos:line="305" pos:column="471">()</argument_list></call> <op:operator pos:line="305" pos:column="474">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="476">":SimpleClass OR "</lit:literal> <op:operator pos:line="305" pos:column="495">+</op:operator> <call><name><name pos:line="305" pos:column="497">SandoField</name><op:operator pos:line="305" pos:column="507">.</op:operator><name pos:line="305" pos:column="508">Source</name><op:operator pos:line="305" pos:column="514">.</op:operator><name pos:line="305" pos:column="515">ToString</name></name><argument_list pos:line="305" pos:column="523">()</argument_list></call> <op:operator pos:line="305" pos:column="526">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="528">":SimpleClass)"</lit:literal></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><call><name><name pos:line="306" pos:column="21">Assert</name><op:operator pos:line="306" pos:column="27">.</op:operator><name pos:line="306" pos:column="28">AreEqual</name></name><argument_list pos:line="306" pos:column="36">(<argument><expr><name pos:line="306" pos:column="37">queryString</name></expr></argument><op:operator pos:line="306" pos:column="48">,</op:operator> <argument><expr><name pos:line="306" pos:column="50">actual</name></expr></argument><op:operator pos:line="306" pos:column="56">,</op:operator> <argument><expr><lit:literal type="string" pos:line="306" pos:column="58">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="307" pos:column="25">try
			<block pos:line="308" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="309" pos:column="33">Query</name></type> <name pos:line="309" pos:column="39">query</name> =<init pos:line="309" pos:column="46"> <expr><op:operator pos:line="309" pos:column="47">new</op:operator> <call><name pos:line="309" pos:column="51">QueryParser</name><argument_list pos:line="309" pos:column="62">(<argument><expr><name><name pos:line="309" pos:column="63">Lucene</name><op:operator pos:line="309" pos:column="69">.</op:operator><name pos:line="309" pos:column="70">Net</name><op:operator pos:line="309" pos:column="73">.</op:operator><name pos:line="309" pos:column="74">Util</name><op:operator pos:line="309" pos:column="78">.</op:operator><name pos:line="309" pos:column="79">Version</name><op:operator pos:line="309" pos:column="86">.</op:operator><name pos:line="309" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="309" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="309" pos:column="98">SandoField</name><op:operator pos:line="309" pos:column="108">.</op:operator><name pos:line="309" pos:column="109">Name</name><op:operator pos:line="309" pos:column="113">.</op:operator><name pos:line="309" pos:column="114">ToString</name></name><argument_list pos:line="309" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="309" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="309" pos:column="126">new</op:operator> <call><name pos:line="309" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="309" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="309" pos:column="147">.</op:operator><call><name pos:line="309" pos:column="148">Parse</name><argument_list pos:line="309" pos:column="153">(<argument><expr><name pos:line="309" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="310" pos:column="33">Assert</name><op:operator pos:line="310" pos:column="39">.</op:operator><name pos:line="310" pos:column="40">NotNull</name></name><argument_list pos:line="310" pos:column="47">(<argument><expr><name pos:line="310" pos:column="48">query</name></expr></argument><op:operator pos:line="310" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="310" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="312" pos:column="25">catch(<param><decl><type><name pos:line="312" pos:column="31">Exception</name></type> <name pos:line="312" pos:column="41">ex</name></decl></param>)
			<block pos:line="313" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="314" pos:column="33">Assert</name><op:operator pos:line="314" pos:column="39">.</op:operator><name pos:line="314" pos:column="40">Fail</name></name><argument_list pos:line="314" pos:column="44">(<argument><expr><name><name pos:line="314" pos:column="45">ex</name><op:operator pos:line="314" pos:column="47">.</op:operator><name pos:line="314" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="318" pos:column="17">[<expr><name pos:line="318" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="319" pos:column="17">public</specifier> <name pos:line="319" pos:column="24">void</name></type> <name pos:line="319" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_SingleCondition</name><parameter_list pos:line="319" pos:column="112">()</parameter_list>
		<block pos:line="320" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="321" pos:column="25">SearchCriteria</name></type> <name pos:line="321" pos:column="40">simpleSearchCriteria</name> =<init pos:line="321" pos:column="62"> <expr><op:operator pos:line="321" pos:column="63">new</op:operator> <call><name pos:line="321" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="321" pos:column="87">()</argument_list></call>
													<block pos:line="322" pos:column="105">{
														<expr><name pos:line="323" pos:column="113">SearchByUsageType</name> <op:operator pos:line="323" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="133">true</lit:literal></expr><op:operator pos:line="323" pos:column="137">,</op:operator>
														<expr><name pos:line="324" pos:column="113">UsageTypes</name> <op:operator pos:line="324" pos:column="124">=</op:operator> <op:operator pos:line="324" pos:column="126">new</op:operator> <call><name><name pos:line="324" pos:column="130">SortedSet</name><argument_list pos:line="324" pos:column="139">&lt;<argument><name pos:line="324" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="324" pos:column="150">()</argument_list></call>
																		<block pos:line="325" pos:column="145">{
																			<expr><name><name pos:line="326" pos:column="153">UsageType</name><op:operator pos:line="326" pos:column="162">.</op:operator><name pos:line="326" pos:column="163">ExtendedClasses</name></name></expr>
																		}</block></expr><op:operator pos:line="327" pos:column="146">,</op:operator>
														<expr><name pos:line="328" pos:column="113">SearchTerms</name> <op:operator pos:line="328" pos:column="125">=</op:operator> <op:operator pos:line="328" pos:column="127">new</op:operator> <call><name><name pos:line="328" pos:column="131">SortedSet</name><argument_list pos:line="328" pos:column="140">&lt;<argument><name pos:line="328" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="328" pos:column="148">()</argument_list></call>
																		<block pos:line="329" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="330" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="333" pos:column="25">string</name></type> <name pos:line="333" pos:column="32">queryString</name> =<init pos:line="333" pos:column="45"> <expr><call><name><name pos:line="333" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="333" pos:column="66">.</op:operator><name pos:line="333" pos:column="67">ToQueryString</name></name><argument_list pos:line="333" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="334" pos:column="25">Assert</name><op:operator pos:line="334" pos:column="31">.</op:operator><name pos:line="334" pos:column="32">AreEqual</name></name><argument_list pos:line="334" pos:column="40">(<argument><expr><name pos:line="334" pos:column="41">queryString</name></expr></argument><op:operator pos:line="334" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="334" pos:column="54">"("</lit:literal> <op:operator pos:line="334" pos:column="58">+</op:operator> <call><name><name pos:line="334" pos:column="60">SandoField</name><op:operator pos:line="334" pos:column="70">.</op:operator><name pos:line="334" pos:column="71">ExtendedClasses</name><op:operator pos:line="334" pos:column="86">.</op:operator><name pos:line="334" pos:column="87">ToString</name></name><argument_list pos:line="334" pos:column="95">()</argument_list></call> <op:operator pos:line="334" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="334" pos:column="100">":SimpleClass)"</lit:literal></expr></argument><op:operator pos:line="334" pos:column="115">,</op:operator> <argument><expr><lit:literal type="string" pos:line="334" pos:column="117">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="335" pos:column="25">try
			<block pos:line="336" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="337" pos:column="33">Query</name></type> <name pos:line="337" pos:column="39">query</name> =<init pos:line="337" pos:column="46"> <expr><op:operator pos:line="337" pos:column="47">new</op:operator> <call><name pos:line="337" pos:column="51">QueryParser</name><argument_list pos:line="337" pos:column="62">(<argument><expr><name><name pos:line="337" pos:column="63">Lucene</name><op:operator pos:line="337" pos:column="69">.</op:operator><name pos:line="337" pos:column="70">Net</name><op:operator pos:line="337" pos:column="73">.</op:operator><name pos:line="337" pos:column="74">Util</name><op:operator pos:line="337" pos:column="78">.</op:operator><name pos:line="337" pos:column="79">Version</name><op:operator pos:line="337" pos:column="86">.</op:operator><name pos:line="337" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="337" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="337" pos:column="98">SandoField</name><op:operator pos:line="337" pos:column="108">.</op:operator><name pos:line="337" pos:column="109">ExtendedClasses</name><op:operator pos:line="337" pos:column="124">.</op:operator><name pos:line="337" pos:column="125">ToString</name></name><argument_list pos:line="337" pos:column="133">()</argument_list></call></expr></argument><op:operator pos:line="337" pos:column="135">,</op:operator> <argument><expr><op:operator pos:line="337" pos:column="137">new</op:operator> <call><name pos:line="337" pos:column="141">SimpleAnalyzer</name><argument_list pos:line="337" pos:column="155">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="337" pos:column="158">.</op:operator><call><name pos:line="337" pos:column="159">Parse</name><argument_list pos:line="337" pos:column="164">(<argument><expr><name pos:line="337" pos:column="165">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="338" pos:column="33">Assert</name><op:operator pos:line="338" pos:column="39">.</op:operator><name pos:line="338" pos:column="40">NotNull</name></name><argument_list pos:line="338" pos:column="47">(<argument><expr><name pos:line="338" pos:column="48">query</name></expr></argument><op:operator pos:line="338" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="338" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="340" pos:column="25">catch(<param><decl><type><name pos:line="340" pos:column="31">Exception</name></type> <name pos:line="340" pos:column="41">ex</name></decl></param>)
			<block pos:line="341" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">Assert</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">Fail</name></name><argument_list pos:line="342" pos:column="44">(<argument><expr><name><name pos:line="342" pos:column="45">ex</name><op:operator pos:line="342" pos:column="47">.</op:operator><name pos:line="342" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="346" pos:column="17">[<expr><name pos:line="346" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="347" pos:column="17">public</specifier> <name pos:line="347" pos:column="24">void</name></type> <name pos:line="347" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_MultipleConditions</name><parameter_list pos:line="347" pos:column="115">()</parameter_list>
		<block pos:line="348" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="349" pos:column="25">SearchCriteria</name></type> <name pos:line="349" pos:column="40">simpleSearchCriteria</name> =<init pos:line="349" pos:column="62"> <expr><op:operator pos:line="349" pos:column="63">new</op:operator> <call><name pos:line="349" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="349" pos:column="87">()</argument_list></call>
													<block pos:line="350" pos:column="105">{
														<expr><name pos:line="351" pos:column="113">SearchByUsageType</name> <op:operator pos:line="351" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="133">true</lit:literal></expr><op:operator pos:line="351" pos:column="137">,</op:operator>
														<expr><name pos:line="352" pos:column="113">UsageTypes</name> <op:operator pos:line="352" pos:column="124">=</op:operator> <op:operator pos:line="352" pos:column="126">new</op:operator> <call><name><name pos:line="352" pos:column="130">SortedSet</name><argument_list pos:line="352" pos:column="139">&lt;<argument><name pos:line="352" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="352" pos:column="150">()</argument_list></call>
																		<block pos:line="353" pos:column="145">{
																			<expr><name><name pos:line="354" pos:column="153">UsageType</name><op:operator pos:line="354" pos:column="162">.</op:operator><name pos:line="354" pos:column="163">ExtendedClasses</name></name></expr><op:operator pos:line="354" pos:column="178">,</op:operator>
																			<expr><name><name pos:line="355" pos:column="153">UsageType</name><op:operator pos:line="355" pos:column="162">.</op:operator><name pos:line="355" pos:column="163">Definitions</name></name></expr><op:operator pos:line="355" pos:column="174">,</op:operator>
																			<expr><name><name pos:line="356" pos:column="153">UsageType</name><op:operator pos:line="356" pos:column="162">.</op:operator><name pos:line="356" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr><op:operator pos:line="357" pos:column="146">,</op:operator>
														<expr><name pos:line="358" pos:column="113">SearchTerms</name> <op:operator pos:line="358" pos:column="125">=</op:operator> <op:operator pos:line="358" pos:column="127">new</op:operator> <call><name><name pos:line="358" pos:column="131">SortedSet</name><argument_list pos:line="358" pos:column="140">&lt;<argument><name pos:line="358" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="358" pos:column="148">()</argument_list></call>
																		<block pos:line="359" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="360" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="363" pos:column="25">string</name></type> <name pos:line="363" pos:column="32">queryString</name> =<init pos:line="363" pos:column="45"> <expr><call><name><name pos:line="363" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="363" pos:column="66">.</op:operator><name pos:line="363" pos:column="67">ToQueryString</name></name><argument_list pos:line="363" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="364" pos:column="25">Assert</name><op:operator pos:line="364" pos:column="31">.</op:operator><name pos:line="364" pos:column="32">AreEqual</name></name><argument_list pos:line="364" pos:column="40">(<argument><expr><name pos:line="364" pos:column="41">queryString</name></expr></argument><op:operator pos:line="364" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="364" pos:column="54">"("</lit:literal> <op:operator pos:line="364" pos:column="58">+</op:operator> <call><name><name pos:line="364" pos:column="60">SandoField</name><op:operator pos:line="364" pos:column="70">.</op:operator><name pos:line="364" pos:column="71">Name</name><op:operator pos:line="364" pos:column="75">.</op:operator><name pos:line="364" pos:column="76">ToString</name></name><argument_list pos:line="364" pos:column="84">()</argument_list></call> <op:operator pos:line="364" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="89">":SimpleClass^4 OR "</lit:literal> <op:operator pos:line="364" pos:column="110">+</op:operator> <call><name><name pos:line="364" pos:column="112">SandoField</name><op:operator pos:line="364" pos:column="122">.</op:operator><name pos:line="364" pos:column="123">ExtendedClasses</name><op:operator pos:line="364" pos:column="138">.</op:operator><name pos:line="364" pos:column="139">ToString</name></name><argument_list pos:line="364" pos:column="147">()</argument_list></call> <op:operator pos:line="364" pos:column="150">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="152">":SimpleClass OR "</lit:literal> <op:operator pos:line="364" pos:column="171">+</op:operator> <call><name><name pos:line="364" pos:column="173">SandoField</name><op:operator pos:line="364" pos:column="183">.</op:operator><name pos:line="364" pos:column="184">Namespace</name><op:operator pos:line="364" pos:column="193">.</op:operator><name pos:line="364" pos:column="194">ToString</name></name><argument_list pos:line="364" pos:column="202">()</argument_list></call> <op:operator pos:line="364" pos:column="205">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="207">":SimpleClass)"</lit:literal></expr></argument><op:operator pos:line="364" pos:column="222">,</op:operator> <argument><expr><lit:literal type="string" pos:line="364" pos:column="224">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="365" pos:column="25">try
			<block pos:line="366" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="367" pos:column="33">Query</name></type> <name pos:line="367" pos:column="39">query</name> =<init pos:line="367" pos:column="46"> <expr><op:operator pos:line="367" pos:column="47">new</op:operator> <call><name pos:line="367" pos:column="51">QueryParser</name><argument_list pos:line="367" pos:column="62">(<argument><expr><name><name pos:line="367" pos:column="63">Lucene</name><op:operator pos:line="367" pos:column="69">.</op:operator><name pos:line="367" pos:column="70">Net</name><op:operator pos:line="367" pos:column="73">.</op:operator><name pos:line="367" pos:column="74">Util</name><op:operator pos:line="367" pos:column="78">.</op:operator><name pos:line="367" pos:column="79">Version</name><op:operator pos:line="367" pos:column="86">.</op:operator><name pos:line="367" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="367" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="367" pos:column="98">SandoField</name><op:operator pos:line="367" pos:column="108">.</op:operator><name pos:line="367" pos:column="109">Name</name><op:operator pos:line="367" pos:column="113">.</op:operator><name pos:line="367" pos:column="114">ToString</name></name><argument_list pos:line="367" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="367" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="367" pos:column="126">new</op:operator> <call><name pos:line="367" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="367" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="367" pos:column="147">.</op:operator><call><name pos:line="367" pos:column="148">Parse</name><argument_list pos:line="367" pos:column="153">(<argument><expr><name pos:line="367" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="368" pos:column="33">Assert</name><op:operator pos:line="368" pos:column="39">.</op:operator><name pos:line="368" pos:column="40">NotNull</name></name><argument_list pos:line="368" pos:column="47">(<argument><expr><name pos:line="368" pos:column="48">query</name></expr></argument><op:operator pos:line="368" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="368" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="370" pos:column="25">catch(<param><decl><type><name pos:line="370" pos:column="31">Exception</name></type> <name pos:line="370" pos:column="41">ex</name></decl></param>)
			<block pos:line="371" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="372" pos:column="33">Assert</name><op:operator pos:line="372" pos:column="39">.</op:operator><name pos:line="372" pos:column="40">Fail</name></name><argument_list pos:line="372" pos:column="44">(<argument><expr><name><name pos:line="372" pos:column="45">ex</name><op:operator pos:line="372" pos:column="47">.</op:operator><name pos:line="372" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="376" pos:column="17">[<expr><name pos:line="376" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="377" pos:column="17">public</specifier> <name pos:line="377" pos:column="24">void</name></type> <name pos:line="377" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_MultipleSearchTerms</name><parameter_list pos:line="377" pos:column="116">()</parameter_list>
		<block pos:line="378" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="379" pos:column="25">SearchCriteria</name></type> <name pos:line="379" pos:column="40">simpleSearchCriteria</name> =<init pos:line="379" pos:column="62"> <expr><op:operator pos:line="379" pos:column="63">new</op:operator> <call><name pos:line="379" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="379" pos:column="87">()</argument_list></call>
			<block pos:line="380" pos:column="25">{
				<expr><name pos:line="381" pos:column="33">SearchByUsageType</name> <op:operator pos:line="381" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="381" pos:column="53">true</lit:literal></expr><op:operator pos:line="381" pos:column="57">,</op:operator>
				<expr><name pos:line="382" pos:column="33">UsageTypes</name> <op:operator pos:line="382" pos:column="44">=</op:operator> <op:operator pos:line="382" pos:column="46">new</op:operator> <call><name><name pos:line="382" pos:column="50">SortedSet</name><argument_list pos:line="382" pos:column="59">&lt;<argument><name pos:line="382" pos:column="60">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="382" pos:column="70">()</argument_list></call>
																		<block pos:line="383" pos:column="145">{
																			<expr><name><name pos:line="384" pos:column="153">UsageType</name><op:operator pos:line="384" pos:column="162">.</op:operator><name pos:line="384" pos:column="163">ExtendedClasses</name></name></expr><op:operator pos:line="384" pos:column="178">,</op:operator>
																			<expr><name><name pos:line="385" pos:column="153">UsageType</name><op:operator pos:line="385" pos:column="162">.</op:operator><name pos:line="385" pos:column="163">Definitions</name></name></expr><op:operator pos:line="385" pos:column="174">,</op:operator>
																			<expr><name><name pos:line="386" pos:column="153">UsageType</name><op:operator pos:line="386" pos:column="162">.</op:operator><name pos:line="386" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr><op:operator pos:line="387" pos:column="146">,</op:operator>
				<expr><name pos:line="388" pos:column="33">SearchTerms</name> <op:operator pos:line="388" pos:column="45">=</op:operator> <op:operator pos:line="388" pos:column="47">new</op:operator> <call><name><name pos:line="388" pos:column="51">SortedSet</name><argument_list pos:line="388" pos:column="60">&lt;<argument><name pos:line="388" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="388" pos:column="68">()</argument_list></call>
																		<block pos:line="389" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="390" pos:column="153">"Class"</lit:literal></expr><op:operator pos:line="390" pos:column="160">,</op:operator>
																			<expr><lit:literal type="string" pos:line="391" pos:column="153">"Simple"</lit:literal></expr>
																		}</block></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="394" pos:column="25">string</name></type> <name pos:line="394" pos:column="32">queryString</name> =<init pos:line="394" pos:column="45"> <expr><call><name><name pos:line="394" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="394" pos:column="66">.</op:operator><name pos:line="394" pos:column="67">ToQueryString</name></name><argument_list pos:line="394" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name pos:line="395" pos:column="21">string</name></type> <name pos:line="395" pos:column="28">actual</name> =<init pos:line="395" pos:column="36"> <expr><lit:literal type="string" pos:line="395" pos:column="37">"("</lit:literal> <op:operator pos:line="395" pos:column="41">+</op:operator> <call><name><name pos:line="395" pos:column="43">SandoField</name><op:operator pos:line="395" pos:column="53">.</op:operator><name pos:line="395" pos:column="54">Name</name><op:operator pos:line="395" pos:column="58">.</op:operator><name pos:line="395" pos:column="59">ToString</name></name><argument_list pos:line="395" pos:column="67">()</argument_list></call> <op:operator pos:line="395" pos:column="70">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="72">":Class^4 OR "</lit:literal> <op:operator pos:line="395" pos:column="87">+</op:operator> <call><name><name pos:line="395" pos:column="89">SandoField</name><op:operator pos:line="395" pos:column="99">.</op:operator><name pos:line="395" pos:column="100">ExtendedClasses</name><op:operator pos:line="395" pos:column="115">.</op:operator><name pos:line="395" pos:column="116">ToString</name></name><argument_list pos:line="395" pos:column="124">()</argument_list></call> <op:operator pos:line="395" pos:column="127">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="129">":Class OR "</lit:literal> <op:operator pos:line="395" pos:column="142">+</op:operator> <call><name><name pos:line="395" pos:column="144">SandoField</name><op:operator pos:line="395" pos:column="154">.</op:operator><name pos:line="395" pos:column="155">Namespace</name><op:operator pos:line="395" pos:column="164">.</op:operator><name pos:line="395" pos:column="165">ToString</name></name><argument_list pos:line="395" pos:column="173">()</argument_list></call> <op:operator pos:line="395" pos:column="176">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="178">":Class OR "</lit:literal> <op:operator pos:line="395" pos:column="191">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="193">""</lit:literal> <op:operator pos:line="395" pos:column="196">+</op:operator> <call><name><name pos:line="395" pos:column="198">SandoField</name><op:operator pos:line="395" pos:column="208">.</op:operator><name pos:line="395" pos:column="209">Name</name><op:operator pos:line="395" pos:column="213">.</op:operator><name pos:line="395" pos:column="214">ToString</name></name><argument_list pos:line="395" pos:column="222">()</argument_list></call> <op:operator pos:line="395" pos:column="225">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="227">":Simple^4 OR "</lit:literal> <op:operator pos:line="395" pos:column="243">+</op:operator> <call><name><name pos:line="395" pos:column="245">SandoField</name><op:operator pos:line="395" pos:column="255">.</op:operator><name pos:line="395" pos:column="256">ExtendedClasses</name><op:operator pos:line="395" pos:column="271">.</op:operator><name pos:line="395" pos:column="272">ToString</name></name><argument_list pos:line="395" pos:column="280">()</argument_list></call> <op:operator pos:line="395" pos:column="283">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="285">":Simple OR "</lit:literal> <op:operator pos:line="395" pos:column="299">+</op:operator> <call><name><name pos:line="395" pos:column="301">SandoField</name><op:operator pos:line="395" pos:column="311">.</op:operator><name pos:line="395" pos:column="312">Namespace</name><op:operator pos:line="395" pos:column="321">.</op:operator><name pos:line="395" pos:column="322">ToString</name></name><argument_list pos:line="395" pos:column="330">()</argument_list></call> <op:operator pos:line="395" pos:column="333">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="335">":Simple)"</lit:literal></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><call><name><name pos:line="396" pos:column="21">Assert</name><op:operator pos:line="396" pos:column="27">.</op:operator><name pos:line="396" pos:column="28">AreEqual</name></name><argument_list pos:line="396" pos:column="36">(<argument><expr><name pos:line="396" pos:column="37">queryString</name></expr></argument><op:operator pos:line="396" pos:column="48">,</op:operator> <argument><expr><name pos:line="396" pos:column="50">actual</name></expr></argument><op:operator pos:line="396" pos:column="56">,</op:operator> <argument><expr><lit:literal type="string" pos:line="396" pos:column="58">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="397" pos:column="25">try
			<block pos:line="398" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="399" pos:column="33">Query</name></type> <name pos:line="399" pos:column="39">query</name> =<init pos:line="399" pos:column="46"> <expr><op:operator pos:line="399" pos:column="47">new</op:operator> <call><name pos:line="399" pos:column="51">QueryParser</name><argument_list pos:line="399" pos:column="62">(<argument><expr><name><name pos:line="399" pos:column="63">Lucene</name><op:operator pos:line="399" pos:column="69">.</op:operator><name pos:line="399" pos:column="70">Net</name><op:operator pos:line="399" pos:column="73">.</op:operator><name pos:line="399" pos:column="74">Util</name><op:operator pos:line="399" pos:column="78">.</op:operator><name pos:line="399" pos:column="79">Version</name><op:operator pos:line="399" pos:column="86">.</op:operator><name pos:line="399" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="399" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="399" pos:column="98">SandoField</name><op:operator pos:line="399" pos:column="108">.</op:operator><name pos:line="399" pos:column="109">Name</name><op:operator pos:line="399" pos:column="113">.</op:operator><name pos:line="399" pos:column="114">ToString</name></name><argument_list pos:line="399" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="399" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="399" pos:column="126">new</op:operator> <call><name pos:line="399" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="399" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="399" pos:column="147">.</op:operator><call><name pos:line="399" pos:column="148">Parse</name><argument_list pos:line="399" pos:column="153">(<argument><expr><name pos:line="399" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="400" pos:column="33">Assert</name><op:operator pos:line="400" pos:column="39">.</op:operator><name pos:line="400" pos:column="40">NotNull</name></name><argument_list pos:line="400" pos:column="47">(<argument><expr><name pos:line="400" pos:column="48">query</name></expr></argument><op:operator pos:line="400" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="400" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="402" pos:column="25">catch(<param><decl><type><name pos:line="402" pos:column="31">Exception</name></type> <name pos:line="402" pos:column="41">ex</name></decl></param>)
			<block pos:line="403" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="404" pos:column="33">Assert</name><op:operator pos:line="404" pos:column="39">.</op:operator><name pos:line="404" pos:column="40">Fail</name></name><argument_list pos:line="404" pos:column="44">(<argument><expr><name><name pos:line="404" pos:column="45">ex</name><op:operator pos:line="404" pos:column="47">.</op:operator><name pos:line="404" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="408" pos:column="17">[<expr><name pos:line="408" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="409" pos:column="17">public</specifier> <name pos:line="409" pos:column="24">void</name></type> <name pos:line="409" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_QuotedSearchTerm</name><parameter_list pos:line="409" pos:column="103">()</parameter_list>
		<block pos:line="410" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="411" pos:column="25">SearchCriteria</name></type> <name pos:line="411" pos:column="40">simpleSearchCriteria</name> =<init pos:line="411" pos:column="62"> <expr><op:operator pos:line="411" pos:column="63">new</op:operator> <call><name pos:line="411" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="411" pos:column="87">()</argument_list></call>
			<block pos:line="412" pos:column="25">{
				<expr><name pos:line="413" pos:column="33">SearchByUsageType</name> <op:operator pos:line="413" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="413" pos:column="53">true</lit:literal></expr><op:operator pos:line="413" pos:column="57">,</op:operator>
				<expr><name pos:line="414" pos:column="33">UsageTypes</name> <op:operator pos:line="414" pos:column="44">=</op:operator> <op:operator pos:line="414" pos:column="46">new</op:operator> <call><name><name pos:line="414" pos:column="50">SortedSet</name><argument_list pos:line="414" pos:column="59">&lt;<argument><name pos:line="414" pos:column="60">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="414" pos:column="70">()</argument_list></call>
																		<block pos:line="415" pos:column="145">{
																			<expr><name><name pos:line="416" pos:column="153">UsageType</name><op:operator pos:line="416" pos:column="162">.</op:operator><name pos:line="416" pos:column="163">Definitions</name></name></expr>
																		}</block></expr><op:operator pos:line="417" pos:column="146">,</op:operator>
				<expr><name pos:line="418" pos:column="33">SearchTerms</name> <op:operator pos:line="418" pos:column="45">=</op:operator> <op:operator pos:line="418" pos:column="47">new</op:operator> <call><name><name pos:line="418" pos:column="51">SortedSet</name><argument_list pos:line="418" pos:column="60">&lt;<argument><name pos:line="418" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="418" pos:column="68">(<argument><expr><call><name><name pos:line="418" pos:column="69">WordSplitter</name><op:operator pos:line="418" pos:column="81">.</op:operator><name pos:line="418" pos:column="82">ExtractSearchTerms</name></name><argument_list pos:line="418" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="418" pos:column="101">"\"Class Simple\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="420" pos:column="25">string</name></type> <name pos:line="420" pos:column="32">queryString</name> =<init pos:line="420" pos:column="45"> <expr><call><name><name pos:line="420" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="420" pos:column="66">.</op:operator><name pos:line="420" pos:column="67">ToQueryString</name></name><argument_list pos:line="420" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="421" pos:column="25">Assert</name><op:operator pos:line="421" pos:column="31">.</op:operator><name pos:line="421" pos:column="32">AreEqual</name></name><argument_list pos:line="421" pos:column="40">(<argument><expr><name pos:line="421" pos:column="41">queryString</name></expr></argument><op:operator pos:line="421" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="421" pos:column="54">"("</lit:literal> <op:operator pos:line="421" pos:column="58">+</op:operator> <call><name><name pos:line="421" pos:column="60">SandoField</name><op:operator pos:line="421" pos:column="70">.</op:operator><name pos:line="421" pos:column="71">Name</name><op:operator pos:line="421" pos:column="75">.</op:operator><name pos:line="421" pos:column="76">ToString</name></name><argument_list pos:line="421" pos:column="84">()</argument_list></call> <op:operator pos:line="421" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="421" pos:column="89">":\"class simple\"^4)"</lit:literal></expr></argument><op:operator pos:line="421" pos:column="111">,</op:operator> <argument><expr><lit:literal type="string" pos:line="421" pos:column="113">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="422" pos:column="25">try
			<block pos:line="423" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="424" pos:column="33">Query</name></type> <name pos:line="424" pos:column="39">query</name> =<init pos:line="424" pos:column="46"> <expr><op:operator pos:line="424" pos:column="47">new</op:operator> <call><name pos:line="424" pos:column="51">QueryParser</name><argument_list pos:line="424" pos:column="62">(<argument><expr><name><name pos:line="424" pos:column="63">Lucene</name><op:operator pos:line="424" pos:column="69">.</op:operator><name pos:line="424" pos:column="70">Net</name><op:operator pos:line="424" pos:column="73">.</op:operator><name pos:line="424" pos:column="74">Util</name><op:operator pos:line="424" pos:column="78">.</op:operator><name pos:line="424" pos:column="79">Version</name><op:operator pos:line="424" pos:column="86">.</op:operator><name pos:line="424" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="424" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="424" pos:column="98">SandoField</name><op:operator pos:line="424" pos:column="108">.</op:operator><name pos:line="424" pos:column="109">Name</name><op:operator pos:line="424" pos:column="113">.</op:operator><name pos:line="424" pos:column="114">ToString</name></name><argument_list pos:line="424" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="424" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="424" pos:column="126">new</op:operator> <call><name pos:line="424" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="424" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="424" pos:column="147">.</op:operator><call><name pos:line="424" pos:column="148">Parse</name><argument_list pos:line="424" pos:column="153">(<argument><expr><name pos:line="424" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="425" pos:column="33">Assert</name><op:operator pos:line="425" pos:column="39">.</op:operator><name pos:line="425" pos:column="40">NotNull</name></name><argument_list pos:line="425" pos:column="47">(<argument><expr><name pos:line="425" pos:column="48">query</name></expr></argument><op:operator pos:line="425" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="425" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="427" pos:column="25">catch(<param><decl><type><name pos:line="427" pos:column="31">Exception</name></type> <name pos:line="427" pos:column="41">ex</name></decl></param>)
			<block pos:line="428" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="429" pos:column="33">Assert</name><op:operator pos:line="429" pos:column="39">.</op:operator><name pos:line="429" pos:column="40">Fail</name></name><argument_list pos:line="429" pos:column="44">(<argument><expr><name><name pos:line="429" pos:column="45">ex</name><op:operator pos:line="429" pos:column="47">.</op:operator><name pos:line="429" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="433" pos:column="17">[<expr><name pos:line="433" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="434" pos:column="17">public</specifier> <name pos:line="434" pos:column="24">void</name></type> <name pos:line="434" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_AllConditions</name><parameter_list pos:line="434" pos:column="100">()</parameter_list>
		<block pos:line="435" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="436" pos:column="25">SearchCriteria</name></type> <name pos:line="436" pos:column="40">simpleSearchCriteria</name> =<init pos:line="436" pos:column="62"> <expr><op:operator pos:line="436" pos:column="63">new</op:operator> <call><name pos:line="436" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="436" pos:column="87">()</argument_list></call>
													<block pos:line="437" pos:column="105">{
														<expr><name pos:line="438" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="438" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="438" pos:column="135">true</lit:literal></expr><op:operator pos:line="438" pos:column="139">,</op:operator>
														<expr><name pos:line="439" pos:column="113">AccessLevels</name> <op:operator pos:line="439" pos:column="126">=</op:operator> <op:operator pos:line="439" pos:column="128">new</op:operator> <call><name><name pos:line="439" pos:column="132">SortedSet</name><argument_list pos:line="439" pos:column="141">&lt;<argument><name pos:line="439" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="439" pos:column="154">()</argument_list></call>
																		<block pos:line="440" pos:column="145">{
																			<expr><name><name pos:line="441" pos:column="153">AccessLevel</name><op:operator pos:line="441" pos:column="164">.</op:operator><name pos:line="441" pos:column="165">Public</name></name></expr><op:operator pos:line="441" pos:column="171">,</op:operator>
																			<expr><name><name pos:line="442" pos:column="153">AccessLevel</name><op:operator pos:line="442" pos:column="164">.</op:operator><name pos:line="442" pos:column="165">Protected</name></name></expr>
																		}</block></expr><op:operator pos:line="443" pos:column="146">,</op:operator>
                                                        <expr><name pos:line="444" pos:column="57">SearchByFileExtension</name> <op:operator pos:line="444" pos:column="79">=</op:operator> <lit:literal type="boolean" pos:line="444" pos:column="81">true</lit:literal></expr><op:operator pos:line="444" pos:column="85">,</op:operator>
                                                        <expr><name pos:line="445" pos:column="57">FileExtensions</name> <op:operator pos:line="445" pos:column="72">=</op:operator> <op:operator pos:line="445" pos:column="74">new</op:operator> <call><name><name pos:line="445" pos:column="78">SortedSet</name><argument_list pos:line="445" pos:column="87">&lt;<argument><name pos:line="445" pos:column="88">string</name></argument>&gt;</argument_list></name><argument_list pos:line="445" pos:column="95">()</argument_list></call>
																	<block pos:line="446" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="447" pos:column="145">".cs"</lit:literal></expr><op:operator pos:line="447" pos:column="150">,</op:operator>
																		<expr><lit:literal type="string" pos:line="448" pos:column="145">".h"</lit:literal></expr>
																	}</block></expr><op:operator pos:line="449" pos:column="138">,</op:operator>
														<expr><name pos:line="450" pos:column="113">SearchByLocation</name> <op:operator pos:line="450" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="450" pos:column="132">true</lit:literal></expr><op:operator pos:line="450" pos:column="136">,</op:operator>
														<expr><name pos:line="451" pos:column="113">Locations</name> <op:operator pos:line="451" pos:column="123">=</op:operator> <op:operator pos:line="451" pos:column="125">new</op:operator> <call><name><name pos:line="451" pos:column="129">SortedSet</name><argument_list pos:line="451" pos:column="138">&lt;<argument><name pos:line="451" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="451" pos:column="146">()</argument_list></call>
																	<block pos:line="452" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="453" pos:column="145">"C:/Project/*.cs"</lit:literal></expr><op:operator pos:line="453" pos:column="162">,</op:operator>
																		<expr><lit:literal type="string" pos:line="454" pos:column="145">"C:/Project2/*.cs"</lit:literal></expr>
																	}</block></expr><op:operator pos:line="455" pos:column="138">,</op:operator>
														<expr><name pos:line="456" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="456" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="456" pos:column="142">true</lit:literal></expr><op:operator pos:line="456" pos:column="146">,</op:operator>
														<expr><name pos:line="457" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="457" pos:column="133">=</op:operator> <op:operator pos:line="457" pos:column="135">new</op:operator> <call><name><name pos:line="457" pos:column="139">SortedSet</name><argument_list pos:line="457" pos:column="148">&lt;<argument><name pos:line="457" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="457" pos:column="168">()</argument_list></call>
																				<block pos:line="458" pos:column="161">{
																					<expr><name><name pos:line="459" pos:column="169">ProgramElementType</name><op:operator pos:line="459" pos:column="187">.</op:operator><name pos:line="459" pos:column="188">Property</name></name></expr><op:operator pos:line="459" pos:column="196">,</op:operator>
																					<expr><name><name pos:line="460" pos:column="169">ProgramElementType</name><op:operator pos:line="460" pos:column="187">.</op:operator><name pos:line="460" pos:column="188">Class</name></name></expr><op:operator pos:line="460" pos:column="193">,</op:operator>
																					<expr><name><name pos:line="461" pos:column="169">ProgramElementType</name><op:operator pos:line="461" pos:column="187">.</op:operator><name pos:line="461" pos:column="188">Enum</name></name></expr>
																				}</block></expr><op:operator pos:line="462" pos:column="162">,</op:operator>
														<expr><name pos:line="463" pos:column="113">SearchByUsageType</name> <op:operator pos:line="463" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="463" pos:column="133">true</lit:literal></expr><op:operator pos:line="463" pos:column="137">,</op:operator>
														<expr><name pos:line="464" pos:column="113">UsageTypes</name> <op:operator pos:line="464" pos:column="124">=</op:operator> <op:operator pos:line="464" pos:column="126">new</op:operator> <call><name><name pos:line="464" pos:column="130">SortedSet</name><argument_list pos:line="464" pos:column="139">&lt;<argument><name pos:line="464" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="464" pos:column="150">()</argument_list></call>
																		<block pos:line="465" pos:column="145">{
																			<expr><name><name pos:line="466" pos:column="153">UsageType</name><op:operator pos:line="466" pos:column="162">.</op:operator><name pos:line="466" pos:column="163">ExtendedClasses</name></name></expr><op:operator pos:line="466" pos:column="178">,</op:operator>
																			<expr><name><name pos:line="467" pos:column="153">UsageType</name><op:operator pos:line="467" pos:column="162">.</op:operator><name pos:line="467" pos:column="163">Definitions</name></name></expr><op:operator pos:line="467" pos:column="174">,</op:operator>
																			<expr><name><name pos:line="468" pos:column="153">UsageType</name><op:operator pos:line="468" pos:column="162">.</op:operator><name pos:line="468" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr><op:operator pos:line="469" pos:column="146">,</op:operator>
														<expr><name pos:line="470" pos:column="113">SearchTerms</name> <op:operator pos:line="470" pos:column="125">=</op:operator> <op:operator pos:line="470" pos:column="127">new</op:operator> <call><name><name pos:line="470" pos:column="131">SortedSet</name><argument_list pos:line="470" pos:column="140">&lt;<argument><name pos:line="470" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="470" pos:column="148">()</argument_list></call>
																		<block pos:line="471" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="472" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="475" pos:column="25">string</name></type> <name pos:line="475" pos:column="32">queryString</name> =<init pos:line="475" pos:column="45"> <expr><call><name><name pos:line="475" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="475" pos:column="66">.</op:operator><name pos:line="475" pos:column="67">ToQueryString</name></name><argument_list pos:line="475" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="476" pos:column="25">Assert</name><op:operator pos:line="476" pos:column="31">.</op:operator><name pos:line="476" pos:column="32">AreEqual</name></name><argument_list pos:line="476" pos:column="40">(<argument><expr><name pos:line="476" pos:column="41">queryString</name></expr></argument><op:operator pos:line="476" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="476" pos:column="54">"("</lit:literal> <op:operator pos:line="476" pos:column="58">+</op:operator> <call><name><name pos:line="476" pos:column="60">SandoField</name><op:operator pos:line="476" pos:column="70">.</op:operator><name pos:line="476" pos:column="71">AccessLevel</name><op:operator pos:line="476" pos:column="82">.</op:operator><name pos:line="476" pos:column="83">ToString</name></name><argument_list pos:line="476" pos:column="91">()</argument_list></call> <op:operator pos:line="476" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="476" pos:column="96">":Protected OR "</lit:literal> <op:operator pos:line="476" pos:column="113">+</op:operator> <call><name><name pos:line="476" pos:column="115">SandoField</name><op:operator pos:line="476" pos:column="125">.</op:operator><name pos:line="476" pos:column="126">AccessLevel</name><op:operator pos:line="476" pos:column="137">.</op:operator><name pos:line="476" pos:column="138">ToString</name></name><argument_list pos:line="476" pos:column="146">()</argument_list></call> <op:operator pos:line="476" pos:column="149">+</op:operator> <lit:literal type="string" pos:line="476" pos:column="151">":Public) AND "</lit:literal> <op:operator pos:line="476" pos:column="167">+</op:operator>
										<lit:literal type="string" pos:line="477" pos:column="81">"("</lit:literal> <op:operator pos:line="477" pos:column="85">+</op:operator> <call><name><name pos:line="477" pos:column="87">SandoField</name><op:operator pos:line="477" pos:column="97">.</op:operator><name pos:line="477" pos:column="98">ProgramElementType</name><op:operator pos:line="477" pos:column="116">.</op:operator><name pos:line="477" pos:column="117">ToString</name></name><argument_list pos:line="477" pos:column="125">()</argument_list></call> <op:operator pos:line="477" pos:column="128">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="130">":Class* OR "</lit:literal> <op:operator pos:line="477" pos:column="144">+</op:operator> <call><name><name pos:line="477" pos:column="146">SandoField</name><op:operator pos:line="477" pos:column="156">.</op:operator><name pos:line="477" pos:column="157">ProgramElementType</name><op:operator pos:line="477" pos:column="175">.</op:operator><name pos:line="477" pos:column="176">ToString</name></name><argument_list pos:line="477" pos:column="184">()</argument_list></call> <op:operator pos:line="477" pos:column="187">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="189">":Enum* OR "</lit:literal> <op:operator pos:line="477" pos:column="202">+</op:operator> <call><name><name pos:line="477" pos:column="204">SandoField</name><op:operator pos:line="477" pos:column="214">.</op:operator><name pos:line="477" pos:column="215">ProgramElementType</name><op:operator pos:line="477" pos:column="233">.</op:operator><name pos:line="477" pos:column="234">ToString</name></name><argument_list pos:line="477" pos:column="242">()</argument_list></call> <op:operator pos:line="477" pos:column="245">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="247">":Property*) AND "</lit:literal> <op:operator pos:line="477" pos:column="266">+</op:operator>
                                        <lit:literal type="string" pos:line="478" pos:column="41">"("</lit:literal> <op:operator pos:line="478" pos:column="45">+</op:operator> <call><name><name pos:line="478" pos:column="47">SandoField</name><op:operator pos:line="478" pos:column="57">.</op:operator><name pos:line="478" pos:column="58">FileExtension</name><op:operator pos:line="478" pos:column="71">.</op:operator><name pos:line="478" pos:column="72">ToString</name></name><argument_list pos:line="478" pos:column="80">()</argument_list></call> <op:operator pos:line="478" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="478" pos:column="85">":\".cs\" OR "</lit:literal> <op:operator pos:line="478" pos:column="100">+</op:operator> <call><name><name pos:line="478" pos:column="102">SandoField</name><op:operator pos:line="478" pos:column="112">.</op:operator><name pos:line="478" pos:column="113">FileExtension</name><op:operator pos:line="478" pos:column="126">.</op:operator><name pos:line="478" pos:column="127">ToString</name></name><argument_list pos:line="478" pos:column="135">()</argument_list></call> <op:operator pos:line="478" pos:column="138">+</op:operator> <lit:literal type="string" pos:line="478" pos:column="140">":\".h\") AND "</lit:literal> <op:operator pos:line="478" pos:column="156">+</op:operator>
                                        <lit:literal type="string" pos:line="479" pos:column="41">"("</lit:literal> <op:operator pos:line="479" pos:column="45">+</op:operator> <call><name><name pos:line="479" pos:column="47">SandoField</name><op:operator pos:line="479" pos:column="57">.</op:operator><name pos:line="479" pos:column="58">FullFilePath</name><op:operator pos:line="479" pos:column="70">.</op:operator><name pos:line="479" pos:column="71">ToString</name></name><argument_list pos:line="479" pos:column="79">()</argument_list></call> <op:operator pos:line="479" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="479" pos:column="84">":\"C:/Project/*.cs\" OR "</lit:literal> <op:operator pos:line="479" pos:column="111">+</op:operator> <call><name><name pos:line="479" pos:column="113">SandoField</name><op:operator pos:line="479" pos:column="123">.</op:operator><name pos:line="479" pos:column="124">FullFilePath</name><op:operator pos:line="479" pos:column="136">.</op:operator><name pos:line="479" pos:column="137">ToString</name></name><argument_list pos:line="479" pos:column="145">()</argument_list></call> <op:operator pos:line="479" pos:column="148">+</op:operator> <lit:literal type="string" pos:line="479" pos:column="150">":\"C:/Project2/*.cs\") AND "</lit:literal> <op:operator pos:line="479" pos:column="180">+</op:operator>
										<lit:literal type="string" pos:line="480" pos:column="81">"("</lit:literal> <op:operator pos:line="480" pos:column="85">+</op:operator> <call><name><name pos:line="480" pos:column="87">SandoField</name><op:operator pos:line="480" pos:column="97">.</op:operator><name pos:line="480" pos:column="98">Name</name><op:operator pos:line="480" pos:column="102">.</op:operator><name pos:line="480" pos:column="103">ToString</name></name><argument_list pos:line="480" pos:column="111">()</argument_list></call> <op:operator pos:line="480" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="480" pos:column="116">":SimpleClass^4 OR "</lit:literal> <op:operator pos:line="480" pos:column="137">+</op:operator> <call><name><name pos:line="480" pos:column="139">SandoField</name><op:operator pos:line="480" pos:column="149">.</op:operator><name pos:line="480" pos:column="150">ExtendedClasses</name><op:operator pos:line="480" pos:column="165">.</op:operator><name pos:line="480" pos:column="166">ToString</name></name><argument_list pos:line="480" pos:column="174">()</argument_list></call> <op:operator pos:line="480" pos:column="177">+</op:operator> <lit:literal type="string" pos:line="480" pos:column="179">":SimpleClass OR "</lit:literal> <op:operator pos:line="480" pos:column="198">+</op:operator> <call><name><name pos:line="480" pos:column="200">SandoField</name><op:operator pos:line="480" pos:column="210">.</op:operator><name pos:line="480" pos:column="211">Namespace</name><op:operator pos:line="480" pos:column="220">.</op:operator><name pos:line="480" pos:column="221">ToString</name></name><argument_list pos:line="480" pos:column="229">()</argument_list></call> <op:operator pos:line="480" pos:column="232">+</op:operator> <lit:literal type="string" pos:line="480" pos:column="234">":SimpleClass)"</lit:literal></expr></argument><op:operator pos:line="480" pos:column="249">,</op:operator> <argument><expr><lit:literal type="string" pos:line="480" pos:column="251">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="481" pos:column="25">try
			<block pos:line="482" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="483" pos:column="33">Query</name></type> <name pos:line="483" pos:column="39">query</name> =<init pos:line="483" pos:column="46"> <expr><op:operator pos:line="483" pos:column="47">new</op:operator> <call><name pos:line="483" pos:column="51">QueryParser</name><argument_list pos:line="483" pos:column="62">(<argument><expr><name><name pos:line="483" pos:column="63">Lucene</name><op:operator pos:line="483" pos:column="69">.</op:operator><name pos:line="483" pos:column="70">Net</name><op:operator pos:line="483" pos:column="73">.</op:operator><name pos:line="483" pos:column="74">Util</name><op:operator pos:line="483" pos:column="78">.</op:operator><name pos:line="483" pos:column="79">Version</name><op:operator pos:line="483" pos:column="86">.</op:operator><name pos:line="483" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="483" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="483" pos:column="98">SandoField</name><op:operator pos:line="483" pos:column="108">.</op:operator><name pos:line="483" pos:column="109">Name</name><op:operator pos:line="483" pos:column="113">.</op:operator><name pos:line="483" pos:column="114">ToString</name></name><argument_list pos:line="483" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="483" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="483" pos:column="126">new</op:operator> <call><name pos:line="483" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="483" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="483" pos:column="147">.</op:operator><call><name pos:line="483" pos:column="148">Parse</name><argument_list pos:line="483" pos:column="153">(<argument><expr><name pos:line="483" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="484" pos:column="33">Assert</name><op:operator pos:line="484" pos:column="39">.</op:operator><name pos:line="484" pos:column="40">NotNull</name></name><argument_list pos:line="484" pos:column="47">(<argument><expr><name pos:line="484" pos:column="48">query</name></expr></argument><op:operator pos:line="484" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="484" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="486" pos:column="25">catch(<param><decl><type><name pos:line="486" pos:column="31">Exception</name></type> <name pos:line="486" pos:column="41">ex</name></decl></param>)
			<block pos:line="487" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="488" pos:column="33">Assert</name><op:operator pos:line="488" pos:column="39">.</op:operator><name pos:line="488" pos:column="40">Fail</name></name><argument_list pos:line="488" pos:column="44">(<argument><expr><name><name pos:line="488" pos:column="45">ex</name><op:operator pos:line="488" pos:column="47">.</op:operator><name pos:line="488" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

        <function><type><attribute pos:line="492" pos:column="9">[<expr><name pos:line="492" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="493" pos:column="17">public</specifier> <name pos:line="493" pos:column="24">void</name></type> <name pos:line="493" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_SpecialCharacters</name><parameter_list pos:line="493" pos:column="104">()</parameter_list>
		<block pos:line="494" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="495" pos:column="25">SearchCriteria</name></type> <name pos:line="495" pos:column="40">simpleSearchCriteria</name> =<init pos:line="495" pos:column="62"> <expr><op:operator pos:line="495" pos:column="63">new</op:operator> <call><name pos:line="495" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="495" pos:column="87">()</argument_list></call>
													<block pos:line="496" pos:column="105">{
                                                        <expr><name pos:line="497" pos:column="57">SearchByUsageType</name> <op:operator pos:line="497" pos:column="75">=</op:operator> <lit:literal type="boolean" pos:line="497" pos:column="77">true</lit:literal></expr><op:operator pos:line="497" pos:column="81">,</op:operator>
                                                        <expr><name pos:line="498" pos:column="57">UsageTypes</name> <op:operator pos:line="498" pos:column="68">=</op:operator> <op:operator pos:line="498" pos:column="70">new</op:operator> <call><name><name pos:line="498" pos:column="74">SortedSet</name><argument_list pos:line="498" pos:column="83">&lt;<argument><name pos:line="498" pos:column="84">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="498" pos:column="94">()</argument_list></call>
																		<block pos:line="499" pos:column="145">{
																			<expr><name><name pos:line="500" pos:column="153">UsageType</name><op:operator pos:line="500" pos:column="162">.</op:operator><name pos:line="500" pos:column="163">Bodies</name></name></expr>
																		}</block></expr><op:operator pos:line="501" pos:column="146">,</op:operator>
														<expr><name pos:line="502" pos:column="113">SearchTerms</name> <op:operator pos:line="502" pos:column="125">=</op:operator> <op:operator pos:line="502" pos:column="127">new</op:operator> <call><name><name pos:line="502" pos:column="131">SortedSet</name><argument_list pos:line="502" pos:column="140">&lt;<argument><name pos:line="502" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="502" pos:column="148">()</argument_list></call>
																		<block pos:line="503" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="504" pos:column="153">"\"+ - &amp;&amp; || ! ( ) { } [ ] ^ ~ : \""</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="507" pos:column="25">string</name></type> <name pos:line="507" pos:column="32">queryString</name> =<init pos:line="507" pos:column="45"> <expr><call><name><name pos:line="507" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="507" pos:column="66">.</op:operator><name pos:line="507" pos:column="67">ToQueryString</name></name><argument_list pos:line="507" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="508" pos:column="13">Assert</name><op:operator pos:line="508" pos:column="19">.</op:operator><name pos:line="508" pos:column="20">AreEqual</name></name><argument_list pos:line="508" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="508" pos:column="29">"(Body:\"\\+ \\- \\&amp;\\&amp; \\|\\| \\! \\( \\) \\{ \\} \\[ \\] \\^ \\~ \\: \")"</lit:literal></expr></argument><op:operator pos:line="508" pos:column="104">,</op:operator> <argument><expr><name pos:line="508" pos:column="106">queryString</name></expr></argument><op:operator pos:line="508" pos:column="117">,</op:operator> <argument><expr><lit:literal type="string" pos:line="508" pos:column="119">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="509" pos:column="25">try
			<block pos:line="510" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="511" pos:column="33">Query</name></type> <name pos:line="511" pos:column="39">query</name> =<init pos:line="511" pos:column="46"> <expr><op:operator pos:line="511" pos:column="47">new</op:operator> <call><name pos:line="511" pos:column="51">QueryParser</name><argument_list pos:line="511" pos:column="62">(<argument><expr><name><name pos:line="511" pos:column="63">Lucene</name><op:operator pos:line="511" pos:column="69">.</op:operator><name pos:line="511" pos:column="70">Net</name><op:operator pos:line="511" pos:column="73">.</op:operator><name pos:line="511" pos:column="74">Util</name><op:operator pos:line="511" pos:column="78">.</op:operator><name pos:line="511" pos:column="79">Version</name><op:operator pos:line="511" pos:column="86">.</op:operator><name pos:line="511" pos:column="87">LUCENE_29</name></name></expr></argument><op:operator pos:line="511" pos:column="96">,</op:operator> <argument><expr><call><name><name pos:line="511" pos:column="98">SandoField</name><op:operator pos:line="511" pos:column="108">.</op:operator><name pos:line="511" pos:column="109">Name</name><op:operator pos:line="511" pos:column="113">.</op:operator><name pos:line="511" pos:column="114">ToString</name></name><argument_list pos:line="511" pos:column="122">()</argument_list></call></expr></argument><op:operator pos:line="511" pos:column="124">,</op:operator> <argument><expr><op:operator pos:line="511" pos:column="126">new</op:operator> <call><name pos:line="511" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="511" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="511" pos:column="147">.</op:operator><call><name pos:line="511" pos:column="148">Parse</name><argument_list pos:line="511" pos:column="153">(<argument><expr><name pos:line="511" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="512" pos:column="33">Assert</name><op:operator pos:line="512" pos:column="39">.</op:operator><name pos:line="512" pos:column="40">NotNull</name></name><argument_list pos:line="512" pos:column="47">(<argument><expr><name pos:line="512" pos:column="48">query</name></expr></argument><op:operator pos:line="512" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="512" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="514" pos:column="25">catch(<param><decl><type><name pos:line="514" pos:column="31">Exception</name></type> <name pos:line="514" pos:column="41">ex</name></decl></param>)
			<block pos:line="515" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="516" pos:column="33">Assert</name><op:operator pos:line="516" pos:column="39">.</op:operator><name pos:line="516" pos:column="40">Fail</name></name><argument_list pos:line="516" pos:column="44">(<argument><expr><name><name pos:line="516" pos:column="45">ex</name><op:operator pos:line="516" pos:column="47">.</op:operator><name pos:line="516" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="520" pos:column="17">[<expr><name pos:line="520" pos:column="18">SetUp</name></expr>]</attribute>
		<specifier pos:line="521" pos:column="17">public</specifier> <name pos:line="521" pos:column="24">void</name></type> <name pos:line="521" pos:column="29">resetContract</name><parameter_list pos:line="521" pos:column="42">()</parameter_list>
		<block pos:line="522" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="523" pos:column="13">ExtensionPointsRepository</name></type> <name pos:line="523" pos:column="39">extensionPointsRepository</name> =<init pos:line="523" pos:column="66"> <expr><name><name pos:line="523" pos:column="67">ExtensionPointsRepository</name><op:operator pos:line="523" pos:column="92">.</op:operator><name pos:line="523" pos:column="93">Instance</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="524" pos:column="13">extensionPointsRepository</name><op:operator pos:line="524" pos:column="38">.</op:operator><name pos:line="524" pos:column="39">RegisterWordSplitterImplementation</name></name><argument_list pos:line="524" pos:column="73">(<argument><expr><op:operator pos:line="524" pos:column="74">new</op:operator> <call><name pos:line="524" pos:column="78">WordSplitter</name><argument_list pos:line="524" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="525" pos:column="13">extensionPointsRepository</name><op:operator pos:line="525" pos:column="38">.</op:operator><name pos:line="525" pos:column="39">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="525" pos:column="81">(<argument><expr><op:operator pos:line="525" pos:column="82">new</op:operator> <call><name pos:line="525" pos:column="86">QueryWeightsSupplier</name><argument_list pos:line="525" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="526" pos:column="13">extensionPointsRepository</name><op:operator pos:line="526" pos:column="38">.</op:operator><name pos:line="526" pos:column="39">RegisterQueryRewriterImplementation</name></name><argument_list pos:line="526" pos:column="74">(<argument><expr><op:operator pos:line="526" pos:column="75">new</op:operator> <call><name pos:line="526" pos:column="79">DefaultQueryRewriter</name><argument_list pos:line="526" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
			<expr_stmt><expr><name pos:line="527" pos:column="25">contractFailed</name> <op:operator pos:line="527" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="527" pos:column="42">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="528" pos:column="25">Contract</name><op:operator pos:line="528" pos:column="33">.</op:operator><name pos:line="528" pos:column="34">ContractFailed</name></name> <op:operator pos:line="528" pos:column="49">+=</op:operator> <op:operator pos:line="528" pos:column="52">(</op:operator><name pos:line="528" pos:column="53">sender</name><op:operator pos:line="528" pos:column="59">,</op:operator> <name pos:line="528" pos:column="61">e</name><op:operator pos:line="528" pos:column="62">)</op:operator> =&gt;
			<block pos:line="529" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="530" pos:column="33">e</name><op:operator pos:line="530" pos:column="34">.</op:operator><name pos:line="530" pos:column="35">SetHandled</name></name><argument_list pos:line="530" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="531" pos:column="33">e</name><op:operator pos:line="531" pos:column="34">.</op:operator><name pos:line="531" pos:column="35">SetUnwind</name></name><argument_list pos:line="531" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="532" pos:column="33">contractFailed</name> <op:operator pos:line="532" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="532" pos:column="50">true</lit:literal></expr>;</expr_stmt>
			}</block></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="536" pos:column="17">private</specifier> <name pos:line="536" pos:column="25">bool</name></type> <name pos:line="536" pos:column="30">contractFailed</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
