<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser\SrcMLCppParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Extensions</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Logging</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Parser</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">SrcMLCppParser</name> <super pos:line="13" pos:column="33">: <name pos:line="13" pos:column="35">IParser</name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">SrcMLArchive</name></type> <name pos:line="15" pos:column="29">Archive</name> <block pos:line="15" pos:column="37">{ <function><name pos:line="15" pos:column="39">get</name>;</function> <function><name pos:line="15" pos:column="44">set</name>;</function> }</block></decl></decl_stmt>           <comment type="line" pos:line="15" pos:column="61">// should be deleted</comment>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">SrcMLGenerator</name></type> <name pos:line="16" pos:column="31">Generator</name> <block pos:line="16" pos:column="41">{ <function><name pos:line="16" pos:column="43">get</name>;</function> <function><name pos:line="16" pos:column="48">set</name>;</function> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="18" pos:column="30">()</parameter_list> <block pos:line="18" pos:column="33">{
        }</block></constructor>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="21" pos:column="30">(<param><decl><type><name pos:line="21" pos:column="31">SrcMLArchive</name></type> <name pos:line="21" pos:column="44">archive</name></decl></param>)</parameter_list> <block pos:line="21" pos:column="53">{
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">this</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Archive</name></name> <op:operator pos:line="22" pos:column="26">=</op:operator> <name pos:line="22" pos:column="28">archive</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="25" pos:column="30">(<param><decl><type><name pos:line="25" pos:column="31">SrcMLGenerator</name></type> <name pos:line="25" pos:column="46">generator</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="57">{
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">this</name><op:operator pos:line="26" pos:column="17">.</op:operator><name pos:line="26" pos:column="18">Generator</name></name> <op:operator pos:line="26" pos:column="28">=</op:operator> <name pos:line="26" pos:column="30">generator</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <name><name pos:line="29" pos:column="16">List</name><argument_list pos:line="29" pos:column="20">&lt;<argument><name pos:line="29" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="37">Parse</name><parameter_list pos:line="29" pos:column="42">(<param><decl><type><name pos:line="29" pos:column="43">string</name></type> <name pos:line="29" pos:column="50">fileName</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">programElements</name> =<init pos:line="30" pos:column="34"> <expr><op:operator pos:line="30" pos:column="35">new</op:operator> <call><name><name pos:line="30" pos:column="39">List</name><argument_list pos:line="30" pos:column="43">&lt;<argument><name pos:line="30" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">XElement</name></type> <name pos:line="31" pos:column="22">sourceElements</name></decl>;</decl_stmt>
            <if pos:line="32" pos:column="13">if<condition pos:line="32" pos:column="15">(<expr><name pos:line="32" pos:column="16">Archive</name> <op:operator pos:line="32" pos:column="24">!=</op:operator> <name pos:line="32" pos:column="27">null</name></expr>)</condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
                <expr_stmt><expr><name pos:line="33" pos:column="17">sourceElements</name> <op:operator pos:line="33" pos:column="32">=</op:operator> <call><name><name pos:line="33" pos:column="34">Archive</name><op:operator pos:line="33" pos:column="41">.</op:operator><name pos:line="33" pos:column="42">GetXElementForSourceFile</name></name><argument_list pos:line="33" pos:column="66">(<argument><expr><name pos:line="33" pos:column="67">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="34" pos:column="17">if<condition pos:line="34" pos:column="19">(<expr><name pos:line="34" pos:column="20">sourceElements</name> <op:operator pos:line="34" pos:column="35">!=</op:operator> <name pos:line="34" pos:column="38">null</name></expr>)</condition><then pos:line="34" pos:column="43"> <block pos:line="34" pos:column="44">{
                    <expr_stmt><expr><name pos:line="35" pos:column="21">programElements</name> <op:operator pos:line="35" pos:column="37">=</op:operator> <call><name pos:line="35" pos:column="39">Parse</name><argument_list pos:line="35" pos:column="44">(<argument><expr><name pos:line="35" pos:column="45">fileName</name></expr></argument><op:operator pos:line="35" pos:column="53">,</op:operator> <argument><expr><name pos:line="35" pos:column="55">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="36" pos:column="19">else <block pos:line="36" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="37" pos:column="21">FileLogger</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">DefaultLogger</name><op:operator pos:line="37" pos:column="45">.</op:operator><name pos:line="37" pos:column="46">ErrorFormat</name></name><argument_list pos:line="37" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="58">"SrcMLCppParser: File not found in archive: {0}"</lit:literal></expr></argument><op:operator pos:line="37" pos:column="106">,</op:operator> <argument><expr><name pos:line="37" pos:column="108">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="39" pos:column="15">else <if pos:line="39" pos:column="20">if<condition pos:line="39" pos:column="22">(<expr><name pos:line="39" pos:column="23">Generator</name> <op:operator pos:line="39" pos:column="33">!=</op:operator> <name pos:line="39" pos:column="36">null</name></expr>)</condition><then pos:line="39" pos:column="41"> <block pos:line="39" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">string</name></type> <name pos:line="40" pos:column="24">outFile</name> =<init pos:line="40" pos:column="33"> <expr><call><name><name pos:line="40" pos:column="34">Path</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">GetTempFileName</name></name><argument_list pos:line="40" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="41" pos:column="17">try <block pos:line="41" pos:column="21">{
                    <comment type="line" pos:line="42" pos:column="21">//This is a C++ parser, so we'll convert the input file as C++ no matter what the file extension is</comment>
                    <decl_stmt><decl><type><name pos:line="43" pos:column="21">var</name></type> <name pos:line="43" pos:column="25">srcmlfile</name> =<init pos:line="43" pos:column="36"> <expr><call><name><name pos:line="43" pos:column="37">Generator</name><op:operator pos:line="43" pos:column="46">.</op:operator><name pos:line="43" pos:column="47">GenerateSrcMLFromFile</name></name><argument_list pos:line="43" pos:column="68">(<argument><expr><name pos:line="43" pos:column="69">fileName</name></expr></argument><op:operator pos:line="43" pos:column="77">,</op:operator> <argument><expr><name pos:line="43" pos:column="79">outFile</name></expr></argument><op:operator pos:line="43" pos:column="86">,</op:operator> <argument><expr><name><name pos:line="43" pos:column="88">Language</name><op:operator pos:line="43" pos:column="96">.</op:operator><name pos:line="43" pos:column="97">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="44" pos:column="21">sourceElements</name> <op:operator pos:line="44" pos:column="36">=</op:operator> <call><name><name pos:line="44" pos:column="38">srcmlfile</name><op:operator pos:line="44" pos:column="47">.</op:operator><name pos:line="44" pos:column="48">FileUnits</name><op:operator pos:line="44" pos:column="57">.</op:operator><name pos:line="44" pos:column="58">FirstOrDefault</name></name><argument_list pos:line="44" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="45" pos:column="21">if<condition pos:line="45" pos:column="23">(<expr><name pos:line="45" pos:column="24">sourceElements</name> <op:operator pos:line="45" pos:column="39">!=</op:operator> <name pos:line="45" pos:column="42">null</name></expr>)</condition><then pos:line="45" pos:column="47"> <block pos:line="45" pos:column="48">{
                        <expr_stmt><expr><name pos:line="46" pos:column="25">programElements</name> <op:operator pos:line="46" pos:column="41">=</op:operator> <call><name pos:line="46" pos:column="43">Parse</name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">fileName</name></expr></argument><op:operator pos:line="46" pos:column="57">,</op:operator> <argument><expr><name pos:line="46" pos:column="59">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <finally pos:line="48" pos:column="19">finally <block pos:line="48" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="49" pos:column="21">File</name><op:operator pos:line="49" pos:column="25">.</op:operator><name pos:line="49" pos:column="26">Delete</name></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else pos:line="51" pos:column="15">else <block pos:line="51" pos:column="20">{
                <throw pos:line="52" pos:column="17">throw <expr><op:operator pos:line="52" pos:column="23">new</op:operator> <call><name pos:line="52" pos:column="27">InvalidOperationException</name><argument_list pos:line="52" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="53">"SrcMLCppParser - Archive and Generator are both null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>

            <return pos:line="55" pos:column="13">return <expr><name pos:line="55" pos:column="20">programElements</name></expr>;</return>
        }</block></function>

        

        <comment type="line" pos:line="60" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// New Parse method that takes both source file path and the XElement representation of the source file as input arguments.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// TODO: what if the XElement is null?</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;param name="sourceElements"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="68" pos:column="9">public</specifier> <name><name pos:line="68" pos:column="16">List</name><argument_list pos:line="68" pos:column="20">&lt;<argument><name pos:line="68" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="37">Parse</name><parameter_list pos:line="68" pos:column="42">(<param><decl><type><name pos:line="68" pos:column="43">string</name></type> <name pos:line="68" pos:column="50">fileName</name></decl></param><op:operator pos:line="68" pos:column="58">,</op:operator> <param><decl><type><name pos:line="68" pos:column="60">XElement</name></type> <name pos:line="68" pos:column="69">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="69" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">writeLog</name><argument_list pos:line="70" pos:column="21">( <argument><expr><lit:literal type="string" pos:line="70" pos:column="23">"SrcMLCppParser.Parse("</lit:literal> <op:operator pos:line="70" pos:column="47">+</op:operator> <name pos:line="70" pos:column="49">fileName</name> <op:operator pos:line="70" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="70" pos:column="60">", XElement)"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">programElements</name> =<init pos:line="71" pos:column="34"> <expr><op:operator pos:line="71" pos:column="35">new</op:operator> <call><name><name pos:line="71" pos:column="39">List</name><argument_list pos:line="71" pos:column="43">&lt;<argument><name pos:line="71" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="73" pos:column="13">//classes and structs have to parsed first</comment>
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">ParseClasses</name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">programElements</name></expr></argument><op:operator pos:line="74" pos:column="41">,</op:operator> <argument><expr><name pos:line="74" pos:column="43">sourceElements</name></expr></argument><op:operator pos:line="74" pos:column="57">,</op:operator> <argument><expr><name pos:line="74" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">ParseStructs</name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">programElements</name></expr></argument><op:operator pos:line="75" pos:column="41">,</op:operator> <argument><expr><name pos:line="75" pos:column="43">sourceElements</name></expr></argument><op:operator pos:line="75" pos:column="57">,</op:operator> <argument><expr><name pos:line="75" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="77" pos:column="30">.</op:operator><name pos:line="77" pos:column="31">ParseFields</name></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">programElements</name></expr></argument><op:operator pos:line="77" pos:column="58">,</op:operator> <argument><expr><name pos:line="77" pos:column="60">sourceElements</name></expr></argument><op:operator pos:line="77" pos:column="74">,</op:operator> <argument><expr><name pos:line="77" pos:column="76">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">ParseCppEnums</name><argument_list pos:line="78" pos:column="26">(<argument><expr><name pos:line="78" pos:column="27">programElements</name></expr></argument><op:operator pos:line="78" pos:column="42">,</op:operator> <argument><expr><name pos:line="78" pos:column="44">sourceElements</name></expr></argument><op:operator pos:line="78" pos:column="58">,</op:operator> <argument><expr><name pos:line="78" pos:column="60">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">ParseConstructors</name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">programElements</name></expr></argument><op:operator pos:line="79" pos:column="46">,</op:operator> <argument><expr><name pos:line="79" pos:column="48">sourceElements</name></expr></argument><op:operator pos:line="79" pos:column="62">,</op:operator> <argument><expr><name pos:line="79" pos:column="64">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">ParseFunctions</name><argument_list pos:line="80" pos:column="27">(<argument><expr><name pos:line="80" pos:column="28">programElements</name></expr></argument><op:operator pos:line="80" pos:column="43">,</op:operator> <argument><expr><name pos:line="80" pos:column="45">sourceElements</name></expr></argument><op:operator pos:line="80" pos:column="59">,</op:operator> <argument><expr><name pos:line="80" pos:column="61">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">ParseCppFunctionPrototypes</name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">programElements</name></expr></argument><op:operator pos:line="81" pos:column="55">,</op:operator> <argument><expr><name pos:line="81" pos:column="57">sourceElements</name></expr></argument><op:operator pos:line="81" pos:column="71">,</op:operator> <argument><expr><name pos:line="81" pos:column="73">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">ParseCppConstructorPrototypes</name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">programElements</name></expr></argument><op:operator pos:line="82" pos:column="58">,</op:operator> <argument><expr><name pos:line="82" pos:column="60">sourceElements</name></expr></argument><op:operator pos:line="82" pos:column="74">,</op:operator> <argument><expr><name pos:line="82" pos:column="76">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="83" pos:column="30">.</op:operator><name pos:line="83" pos:column="31">ParseComments</name></name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">programElements</name></expr></argument><op:operator pos:line="83" pos:column="60">,</op:operator> <argument><expr><name pos:line="83" pos:column="62">sourceElements</name></expr></argument><op:operator pos:line="83" pos:column="76">,</op:operator> <argument><expr><name pos:line="83" pos:column="78">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="85" pos:column="13">return <expr><name pos:line="85" pos:column="20">programElements</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="87" pos:column="9">// End of code changes</comment>

        <function><type><specifier pos:line="89" pos:column="9">private</specifier> <name pos:line="89" pos:column="17">void</name></type> <name pos:line="89" pos:column="22">ParseCppFunctionPrototypes</name><parameter_list pos:line="89" pos:column="48">(<param><decl><type><name><name pos:line="89" pos:column="49">List</name><argument_list pos:line="89" pos:column="53">&lt;<argument><name pos:line="89" pos:column="54">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="70">programElements</name></decl></param><op:operator pos:line="89" pos:column="85">,</op:operator> <param><decl><type><name pos:line="89" pos:column="87">XElement</name></type> <name pos:line="89" pos:column="96">sourceElements</name></decl></param><op:operator pos:line="89" pos:column="110">,</op:operator> <param><decl><type><name pos:line="89" pos:column="112">string</name></type> <name pos:line="89" pos:column="119">fileName</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="91" pos:column="13">IEnumerable</name><argument_list pos:line="91" pos:column="24">&lt;<argument><name pos:line="91" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="35">functions</name> =<init pos:line="91" pos:column="46">
                <expr><linq><from pos:line="92" pos:column="17">from <expr><name pos:line="92" pos:column="22">el</name></expr> <in pos:line="92" pos:column="25">in <expr><call><name><name pos:line="92" pos:column="28">sourceElements</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">Descendants</name></name><argument_list pos:line="92" pos:column="54">(<argument><expr><name><name pos:line="92" pos:column="55">SRC</name><op:operator pos:line="92" pos:column="58">.</op:operator><name pos:line="92" pos:column="59">FunctionDeclaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="93" pos:column="17">select <expr><name pos:line="93" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="94" pos:column="13">foreach (<init><decl><type><name pos:line="94" pos:column="22">XElement</name></type> <name pos:line="94" pos:column="31">function</name> <init pos:line="94" pos:column="40">in <expr><name pos:line="94" pos:column="43">functions</name></expr></init></decl></init>)
            <block pos:line="95" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="96" pos:column="17">programElements</name><op:operator pos:line="96" pos:column="32">.</op:operator><name pos:line="96" pos:column="33">Add</name></name><argument_list pos:line="96" pos:column="36">(<argument><expr><call><name pos:line="96" pos:column="37">ParseCppFunctionPrototype</name><argument_list pos:line="96" pos:column="62">(<argument><expr><name pos:line="96" pos:column="63">function</name></expr></argument><op:operator pos:line="96" pos:column="71">,</op:operator> <argument><expr><name pos:line="96" pos:column="73">fileName</name></expr></argument><op:operator pos:line="96" pos:column="81">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="96" pos:column="83">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="100" pos:column="9">private</specifier> <name pos:line="100" pos:column="17">void</name></type> <name pos:line="100" pos:column="22">ParseCppConstructorPrototypes</name><parameter_list pos:line="100" pos:column="51">(<param><decl><type><name><name pos:line="100" pos:column="52">List</name><argument_list pos:line="100" pos:column="56">&lt;<argument><name pos:line="100" pos:column="57">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="100" pos:column="73">programElements</name></decl></param><op:operator pos:line="100" pos:column="88">,</op:operator> <param><decl><type><name pos:line="100" pos:column="90">XElement</name></type> <name pos:line="100" pos:column="99">sourceElements</name></decl></param><op:operator pos:line="100" pos:column="113">,</op:operator> <param><decl><type><name pos:line="100" pos:column="115">string</name></type> <name pos:line="100" pos:column="122">fileName</name></decl></param>)</parameter_list>
        <block pos:line="101" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="102" pos:column="13">IEnumerable</name><argument_list pos:line="102" pos:column="24">&lt;<argument><name pos:line="102" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="35">functions</name> =<init pos:line="102" pos:column="46">
                <expr><linq><from pos:line="103" pos:column="17">from <expr><name pos:line="103" pos:column="22">el</name></expr> <in pos:line="103" pos:column="25">in <expr><call><name><name pos:line="103" pos:column="28">sourceElements</name><op:operator pos:line="103" pos:column="42">.</op:operator><name pos:line="103" pos:column="43">Descendants</name></name><argument_list pos:line="103" pos:column="54">(<argument><expr><name><name pos:line="103" pos:column="55">SRC</name><op:operator pos:line="103" pos:column="58">.</op:operator><name pos:line="103" pos:column="59">ConstructorDeclaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="104" pos:column="17">select <expr><name pos:line="104" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="105" pos:column="13">foreach (<init><decl><type><name pos:line="105" pos:column="22">XElement</name></type> <name pos:line="105" pos:column="31">function</name> <init pos:line="105" pos:column="40">in <expr><name pos:line="105" pos:column="43">functions</name></expr></init></decl></init>)
            <block pos:line="106" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="107" pos:column="17">programElements</name><op:operator pos:line="107" pos:column="32">.</op:operator><name pos:line="107" pos:column="33">Add</name></name><argument_list pos:line="107" pos:column="36">(<argument><expr><call><name pos:line="107" pos:column="37">ParseCppFunctionPrototype</name><argument_list pos:line="107" pos:column="62">(<argument><expr><name pos:line="107" pos:column="63">function</name></expr></argument><op:operator pos:line="107" pos:column="71">,</op:operator> <argument><expr><name pos:line="107" pos:column="73">fileName</name></expr></argument><op:operator pos:line="107" pos:column="81">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="107" pos:column="83">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="111" pos:column="9">private</specifier> <name pos:line="111" pos:column="17">MethodPrototypeElement</name></type> <name pos:line="111" pos:column="40">ParseCppFunctionPrototype</name><parameter_list pos:line="111" pos:column="65">(<param><decl><type><name pos:line="111" pos:column="66">XElement</name></type> <name pos:line="111" pos:column="75">function</name></decl></param><op:operator pos:line="111" pos:column="83">,</op:operator> <param><decl><type><name pos:line="111" pos:column="85">string</name></type> <name pos:line="111" pos:column="92">fileName</name></decl></param><op:operator pos:line="111" pos:column="100">,</op:operator> <param><decl><type><name pos:line="111" pos:column="102">bool</name></type> <name pos:line="111" pos:column="107">isConstructor</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">string</name></type> <name pos:line="113" pos:column="20">name</name> =<init pos:line="113" pos:column="26"> <expr><name><name pos:line="113" pos:column="27">String</name><op:operator pos:line="113" pos:column="33">.</op:operator><name pos:line="113" pos:column="34">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">int</name></type> <name pos:line="114" pos:column="17">definitionLineNumber</name> =<init pos:line="114" pos:column="39"> <expr><lit:literal type="number" pos:line="114" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">string</name></type> <name pos:line="115" pos:column="20">returnType</name> =<init pos:line="115" pos:column="32"> <expr><name><name pos:line="115" pos:column="33">String</name><op:operator pos:line="115" pos:column="39">.</op:operator><name pos:line="115" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="117" pos:column="30">.</op:operator><name pos:line="117" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="117" pos:column="53">(<argument><expr><name pos:line="117" pos:column="54">function</name></expr></argument><op:operator pos:line="117" pos:column="62">,</op:operator> <argument><specifier pos:line="117" pos:column="64">out</specifier> <expr><name pos:line="117" pos:column="68">name</name></expr></argument><op:operator pos:line="117" pos:column="72">,</op:operator> <argument><specifier pos:line="117" pos:column="74">out</specifier> <expr><name pos:line="117" pos:column="78">definitionLineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="118" pos:column="13">if <condition pos:line="118" pos:column="16">(<expr><call><name><name pos:line="118" pos:column="17">name</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">Contains</name></name><argument_list pos:line="118" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="31">"::"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="118" pos:column="37">
            <block pos:line="119" pos:column="13">{
                <expr_stmt><expr><name pos:line="120" pos:column="17">name</name> <op:operator pos:line="120" pos:column="22">=</op:operator> <call><name><name pos:line="120" pos:column="24">name</name><op:operator pos:line="120" pos:column="28">.</op:operator><name pos:line="120" pos:column="29">Substring</name></name><argument_list pos:line="120" pos:column="38">(<argument><expr><call><name><name pos:line="120" pos:column="39">name</name><op:operator pos:line="120" pos:column="43">.</op:operator><name pos:line="120" pos:column="44">LastIndexOf</name></name><argument_list pos:line="120" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="56">"::"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="120" pos:column="64">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">AccessLevel</name></type> <name pos:line="122" pos:column="25">accessLevel</name> =<init pos:line="122" pos:column="38"> <expr><call><name pos:line="122" pos:column="39">RetrieveCppAccessLevel</name><argument_list pos:line="122" pos:column="61">(<argument><expr><name pos:line="122" pos:column="62">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">XElement</name></type> <name pos:line="123" pos:column="22">type</name> =<init pos:line="123" pos:column="28"> <expr><call><name><name pos:line="123" pos:column="29">function</name><op:operator pos:line="123" pos:column="37">.</op:operator><name pos:line="123" pos:column="38">Element</name></name><argument_list pos:line="123" pos:column="45">(<argument><expr><name><name pos:line="123" pos:column="46">SRC</name><op:operator pos:line="123" pos:column="49">.</op:operator><name pos:line="123" pos:column="50">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="124" pos:column="13">if <condition pos:line="124" pos:column="16">(<expr><name pos:line="124" pos:column="17">type</name> <op:operator pos:line="124" pos:column="22">!=</op:operator> <name pos:line="124" pos:column="25">null</name></expr>)</condition><then pos:line="124" pos:column="30">
            <block pos:line="125" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="126" pos:column="17">XElement</name></type> <name pos:line="126" pos:column="26">typeName</name> =<init pos:line="126" pos:column="36"> <expr><call><name><name pos:line="126" pos:column="37">type</name><op:operator pos:line="126" pos:column="41">.</op:operator><name pos:line="126" pos:column="42">Element</name></name><argument_list pos:line="126" pos:column="49">(<argument><expr><name><name pos:line="126" pos:column="50">SRC</name><op:operator pos:line="126" pos:column="53">.</op:operator><name pos:line="126" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="127" pos:column="17">returnType</name> <op:operator pos:line="127" pos:column="28">=</op:operator> <name><name pos:line="127" pos:column="30">typeName</name><op:operator pos:line="127" pos:column="38">.</op:operator><name pos:line="127" pos:column="39">Value</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="130" pos:column="13">XElement</name></type> <name pos:line="130" pos:column="22">paramlist</name> =<init pos:line="130" pos:column="33"> <expr><call><name><name pos:line="130" pos:column="34">function</name><op:operator pos:line="130" pos:column="42">.</op:operator><name pos:line="130" pos:column="43">Element</name></name><argument_list pos:line="130" pos:column="50">(<argument><expr><name><name pos:line="130" pos:column="51">SRC</name><op:operator pos:line="130" pos:column="54">.</op:operator><name pos:line="130" pos:column="55">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="131" pos:column="13">IEnumerable</name><argument_list pos:line="131" pos:column="24">&lt;<argument><name pos:line="131" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="131" pos:column="35">argumentElements</name> =<init pos:line="131" pos:column="53">
                <expr><linq><from pos:line="132" pos:column="17">from <expr><name pos:line="132" pos:column="22">el</name></expr> <in pos:line="132" pos:column="25">in <expr><call><name><name pos:line="132" pos:column="28">paramlist</name><op:operator pos:line="132" pos:column="37">.</op:operator><name pos:line="132" pos:column="38">Descendants</name></name><argument_list pos:line="132" pos:column="49">(<argument><expr><name><name pos:line="132" pos:column="50">SRC</name><op:operator pos:line="132" pos:column="53">.</op:operator><name pos:line="132" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="133" pos:column="17">select <expr><name pos:line="133" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">string</name></type> <name pos:line="134" pos:column="20">arguments</name> =<init pos:line="134" pos:column="31"> <expr><name><name pos:line="134" pos:column="32">String</name><op:operator pos:line="134" pos:column="38">.</op:operator><name pos:line="134" pos:column="39">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="135" pos:column="13">foreach (<init><decl><type><name pos:line="135" pos:column="22">XElement</name></type> <name pos:line="135" pos:column="31">elem</name> <init pos:line="135" pos:column="36">in <expr><name pos:line="135" pos:column="39">argumentElements</name></expr></init></decl></init>)
            <block pos:line="136" pos:column="13">{
                <expr_stmt><expr><name pos:line="137" pos:column="17">arguments</name> <op:operator pos:line="137" pos:column="27">+=</op:operator> <name><name pos:line="137" pos:column="30">elem</name><op:operator pos:line="137" pos:column="34">.</op:operator><name pos:line="137" pos:column="35">Value</name></name> <op:operator pos:line="137" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="137" pos:column="43">" "</lit:literal></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="139" pos:column="13">arguments</name> <op:operator pos:line="139" pos:column="23">=</op:operator> <call><name><name pos:line="139" pos:column="25">arguments</name><op:operator pos:line="139" pos:column="34">.</op:operator><name pos:line="139" pos:column="35">TrimEnd</name></name><argument_list pos:line="139" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">string</name></type> <name pos:line="141" pos:column="20">fullFilePath</name> =<init pos:line="141" pos:column="34"> <expr><call><name><name pos:line="141" pos:column="35">System</name><op:operator pos:line="141" pos:column="41">.</op:operator><name pos:line="141" pos:column="42">IO</name><op:operator pos:line="141" pos:column="44">.</op:operator><name pos:line="141" pos:column="45">Path</name><op:operator pos:line="141" pos:column="49">.</op:operator><name pos:line="141" pos:column="50">GetFullPath</name></name><argument_list pos:line="141" pos:column="61">(<argument><expr><name pos:line="141" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">string</name></type> <name pos:line="142" pos:column="20">source</name> =<init pos:line="142" pos:column="28"> <expr><call><name><name pos:line="142" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="142" pos:column="46">.</op:operator><name pos:line="142" pos:column="47">RetrieveSource</name></name><argument_list pos:line="142" pos:column="61">(<argument><expr><name pos:line="142" pos:column="62">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="144" pos:column="13">return <expr><op:operator pos:line="144" pos:column="20">new</op:operator> <call><name pos:line="144" pos:column="24">MethodPrototypeElement</name><argument_list pos:line="144" pos:column="46">(<argument><expr><name pos:line="144" pos:column="47">name</name></expr></argument><op:operator pos:line="144" pos:column="51">,</op:operator> <argument><expr><name pos:line="144" pos:column="53">definitionLineNumber</name></expr></argument><op:operator pos:line="144" pos:column="73">,</op:operator> <argument><expr><name pos:line="144" pos:column="75">returnType</name></expr></argument><op:operator pos:line="144" pos:column="85">,</op:operator> <argument><expr><name pos:line="144" pos:column="87">accessLevel</name></expr></argument><op:operator pos:line="144" pos:column="98">,</op:operator> <argument><expr><name pos:line="144" pos:column="100">arguments</name></expr></argument><op:operator pos:line="144" pos:column="109">,</op:operator> <argument><expr><name pos:line="144" pos:column="111">fullFilePath</name></expr></argument><op:operator pos:line="144" pos:column="123">,</op:operator> <argument><expr><name pos:line="144" pos:column="125">source</name></expr></argument><op:operator pos:line="144" pos:column="131">,</op:operator> <argument><expr><name pos:line="144" pos:column="133">isConstructor</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="148" pos:column="9">private</specifier> <name><name pos:line="148" pos:column="17">string</name><index pos:line="148" pos:column="23">[]</index></name></type> <name pos:line="148" pos:column="26">ParseCppIncludes</name><parameter_list pos:line="148" pos:column="42">(<param><decl><type><name pos:line="148" pos:column="43">XElement</name></type> <name pos:line="148" pos:column="52">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="149" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="150" pos:column="13">List</name><argument_list pos:line="150" pos:column="17">&lt;<argument><name pos:line="150" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="26">includeFileNames</name> =<init pos:line="150" pos:column="44"> <expr><op:operator pos:line="150" pos:column="45">new</op:operator> <call><name><name pos:line="150" pos:column="49">List</name><argument_list pos:line="150" pos:column="53">&lt;<argument><name pos:line="150" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="150" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="151" pos:column="13">IEnumerable</name><argument_list pos:line="151" pos:column="24">&lt;<argument><name pos:line="151" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="35">includeStatements</name> =<init pos:line="151" pos:column="54">
                <expr><linq><from pos:line="152" pos:column="17">from <expr><name pos:line="152" pos:column="22">el</name></expr> <in pos:line="152" pos:column="25">in <expr><call><name><name pos:line="152" pos:column="28">sourceElements</name><op:operator pos:line="152" pos:column="42">.</op:operator><name pos:line="152" pos:column="43">Descendants</name></name><argument_list pos:line="152" pos:column="54">(<argument><expr><name><name pos:line="152" pos:column="55">CPP</name><op:operator pos:line="152" pos:column="58">.</op:operator><name pos:line="152" pos:column="59">Include</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="153" pos:column="17">select <expr><name pos:line="153" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="155" pos:column="13">foreach (<init><decl><type><name pos:line="155" pos:column="22">XElement</name></type> <name pos:line="155" pos:column="31">include</name> <init pos:line="155" pos:column="39">in <expr><name pos:line="155" pos:column="42">includeStatements</name></expr></init></decl></init>)
            <block pos:line="156" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="157" pos:column="17">string</name></type> <name pos:line="157" pos:column="24">filename</name> =<init pos:line="157" pos:column="34"> <expr><call><name><name pos:line="157" pos:column="35">include</name><op:operator pos:line="157" pos:column="42">.</op:operator><name pos:line="157" pos:column="43">Element</name></name><argument_list pos:line="157" pos:column="50">(<argument><expr><name><name pos:line="157" pos:column="51">CPP</name><op:operator pos:line="157" pos:column="54">.</op:operator><name pos:line="157" pos:column="55">File</name></name></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="60">.</op:operator><name pos:line="157" pos:column="61">Value</name></expr></init></decl>;</decl_stmt>
                <if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><call><name><name pos:line="158" pos:column="21">filename</name><op:operator pos:line="158" pos:column="29">.</op:operator><name pos:line="158" pos:column="30">Substring</name></name><argument_list pos:line="158" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="158" pos:column="40">0</lit:literal></expr></argument><op:operator pos:line="158" pos:column="41">,</op:operator> <argument><expr><lit:literal type="number" pos:line="158" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="158" pos:column="46">==</op:operator> <lit:literal type="string" pos:line="158" pos:column="49">"&lt;"</lit:literal></expr>)</condition><then pos:line="158" pos:column="53"> <continue pos:line="158" pos:column="54">continue;</continue></then></if> <comment type="line" pos:line="158" pos:column="64">//ignore includes of system files -&gt; they start with a bracket</comment>
                <expr_stmt><expr><name pos:line="159" pos:column="17">filename</name> <op:operator pos:line="159" pos:column="26">=</op:operator> <call><name><name pos:line="159" pos:column="28">filename</name><op:operator pos:line="159" pos:column="36">.</op:operator><name pos:line="159" pos:column="37">Substring</name></name><argument_list pos:line="159" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="159" pos:column="47">1</lit:literal></expr></argument><op:operator pos:line="159" pos:column="48">,</op:operator> <argument><expr><name><name pos:line="159" pos:column="50">filename</name><op:operator pos:line="159" pos:column="58">.</op:operator><name pos:line="159" pos:column="59">Length</name></name> <op:operator pos:line="159" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="159" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="159" pos:column="73">//remove quotes	</comment>
                <expr_stmt><expr><call><name><name pos:line="160" pos:column="17">includeFileNames</name><op:operator pos:line="160" pos:column="33">.</op:operator><name pos:line="160" pos:column="34">Add</name></name><argument_list pos:line="160" pos:column="37">(<argument><expr><name pos:line="160" pos:column="38">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="163" pos:column="13">return <expr><call><name><name pos:line="163" pos:column="20">includeFileNames</name><op:operator pos:line="163" pos:column="36">.</op:operator><name pos:line="163" pos:column="37">ToArray</name></name><argument_list pos:line="163" pos:column="44">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="166" pos:column="9">private</specifier> <name pos:line="166" pos:column="17">void</name></type> <name pos:line="166" pos:column="22">ParseClasses</name><parameter_list pos:line="166" pos:column="34">(<param><decl><type><name><name pos:line="166" pos:column="35">List</name><argument_list pos:line="166" pos:column="39">&lt;<argument><name pos:line="166" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="166" pos:column="56">programElements</name></decl></param><op:operator pos:line="166" pos:column="71">,</op:operator> <param><decl><type><name pos:line="166" pos:column="73">XElement</name></type> <name pos:line="166" pos:column="82">elements</name></decl></param><op:operator pos:line="166" pos:column="90">,</op:operator> <param><decl><type><name pos:line="166" pos:column="92">string</name></type> <name pos:line="166" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="167" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="168" pos:column="13">IEnumerable</name><argument_list pos:line="168" pos:column="24">&lt;<argument><name pos:line="168" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="35">classes</name> =<init pos:line="168" pos:column="44">
                <expr><linq><from pos:line="169" pos:column="17">from <expr><name pos:line="169" pos:column="22">el</name></expr> <in pos:line="169" pos:column="25">in <expr><call><name><name pos:line="169" pos:column="28">elements</name><op:operator pos:line="169" pos:column="36">.</op:operator><name pos:line="169" pos:column="37">Descendants</name></name><argument_list pos:line="169" pos:column="48">(<argument><expr><name><name pos:line="169" pos:column="49">SRC</name><op:operator pos:line="169" pos:column="52">.</op:operator><name pos:line="169" pos:column="53">Class</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="170" pos:column="17">select <expr><name pos:line="170" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="171" pos:column="13">foreach (<init><decl><type><name pos:line="171" pos:column="22">XElement</name></type> <name pos:line="171" pos:column="31">cls</name> <init pos:line="171" pos:column="35">in <expr><name pos:line="171" pos:column="38">classes</name></expr></init></decl></init>)
            <block pos:line="172" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="173" pos:column="17">programElements</name><op:operator pos:line="173" pos:column="32">.</op:operator><name pos:line="173" pos:column="33">Add</name></name><argument_list pos:line="173" pos:column="36">(<argument><expr><op:operator pos:line="173" pos:column="37">(</op:operator><name pos:line="173" pos:column="38">ClassElement</name><op:operator pos:line="173" pos:column="50">)</op:operator><call><name pos:line="173" pos:column="51">ParseClassOrStruct</name><argument_list pos:line="173" pos:column="69">(<argument><expr><name pos:line="173" pos:column="70">cls</name></expr></argument><op:operator pos:line="173" pos:column="73">,</op:operator> <argument><expr><name pos:line="173" pos:column="75">fileName</name></expr></argument><op:operator pos:line="173" pos:column="83">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="173" pos:column="85">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="177" pos:column="9">private</specifier> <name pos:line="177" pos:column="17">void</name></type> <name pos:line="177" pos:column="22">ParseStructs</name><parameter_list pos:line="177" pos:column="34">(<param><decl><type><name><name pos:line="177" pos:column="35">List</name><argument_list pos:line="177" pos:column="39">&lt;<argument><name pos:line="177" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="177" pos:column="56">programElements</name></decl></param><op:operator pos:line="177" pos:column="71">,</op:operator> <param><decl><type><name pos:line="177" pos:column="73">XElement</name></type> <name pos:line="177" pos:column="82">elements</name></decl></param><op:operator pos:line="177" pos:column="90">,</op:operator> <param><decl><type><name pos:line="177" pos:column="92">string</name></type> <name pos:line="177" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="178" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="179" pos:column="13">IEnumerable</name><argument_list pos:line="179" pos:column="24">&lt;<argument><name pos:line="179" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="179" pos:column="35">classes</name> =<init pos:line="179" pos:column="44">
                <expr><linq><from pos:line="180" pos:column="17">from <expr><name pos:line="180" pos:column="22">el</name></expr> <in pos:line="180" pos:column="25">in <expr><call><name><name pos:line="180" pos:column="28">elements</name><op:operator pos:line="180" pos:column="36">.</op:operator><name pos:line="180" pos:column="37">Descendants</name></name><argument_list pos:line="180" pos:column="48">(<argument><expr><name><name pos:line="180" pos:column="49">SRC</name><op:operator pos:line="180" pos:column="52">.</op:operator><name pos:line="180" pos:column="53">Struct</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="181" pos:column="17">select <expr><name pos:line="181" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="182" pos:column="13">foreach (<init><decl><type><name pos:line="182" pos:column="22">XElement</name></type> <name pos:line="182" pos:column="31">cls</name> <init pos:line="182" pos:column="35">in <expr><name pos:line="182" pos:column="38">classes</name></expr></init></decl></init>)
            <block pos:line="183" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="184" pos:column="17">programElements</name><op:operator pos:line="184" pos:column="32">.</op:operator><name pos:line="184" pos:column="33">Add</name></name><argument_list pos:line="184" pos:column="36">(<argument><expr><op:operator pos:line="184" pos:column="37">(</op:operator><name pos:line="184" pos:column="38">StructElement</name><op:operator pos:line="184" pos:column="51">)</op:operator><call><name pos:line="184" pos:column="52">ParseClassOrStruct</name><argument_list pos:line="184" pos:column="70">(<argument><expr><name pos:line="184" pos:column="71">cls</name></expr></argument><op:operator pos:line="184" pos:column="74">,</op:operator> <argument><expr><name pos:line="184" pos:column="76">fileName</name></expr></argument><op:operator pos:line="184" pos:column="84">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="184" pos:column="86">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="188" pos:column="9">private</specifier> <name pos:line="188" pos:column="17">ProgramElement</name></type> <name pos:line="188" pos:column="32">ParseClassOrStruct</name><parameter_list pos:line="188" pos:column="50">(<param><decl><type><name pos:line="188" pos:column="51">XElement</name></type> <name pos:line="188" pos:column="60">cls</name></decl></param><op:operator pos:line="188" pos:column="63">,</op:operator> <param><decl><type><name pos:line="188" pos:column="65">string</name></type> <name pos:line="188" pos:column="72">fileName</name></decl></param><op:operator pos:line="188" pos:column="80">,</op:operator> <param><decl><type><name pos:line="188" pos:column="82">bool</name></type> <name pos:line="188" pos:column="87">parseStruct</name></decl></param>)</parameter_list>
        <block pos:line="189" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">string</name></type> <name pos:line="190" pos:column="20">name</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">int</name></type> <name pos:line="191" pos:column="17">definitionLineNumber</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="192" pos:column="30">.</op:operator><name pos:line="192" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="192" pos:column="53">(<argument><expr><name pos:line="192" pos:column="54">cls</name></expr></argument><op:operator pos:line="192" pos:column="57">,</op:operator> <argument><specifier pos:line="192" pos:column="59">out</specifier> <expr><name pos:line="192" pos:column="63">name</name></expr></argument><op:operator pos:line="192" pos:column="67">,</op:operator> <argument><specifier pos:line="192" pos:column="69">out</specifier> <expr><name pos:line="192" pos:column="73">definitionLineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="194" pos:column="13">AccessLevel</name></type> <name pos:line="194" pos:column="25">accessLevel</name> =<init pos:line="194" pos:column="38"> <expr><call><name><name pos:line="194" pos:column="39">SrcMLParsingUtils</name><op:operator pos:line="194" pos:column="56">.</op:operator><name pos:line="194" pos:column="57">RetrieveAccessLevel</name></name><argument_list pos:line="194" pos:column="76">(<argument><expr><name pos:line="194" pos:column="77">cls</name></expr></argument><op:operator pos:line="194" pos:column="80">,</op:operator> <argument><expr><name><name pos:line="194" pos:column="82">AccessLevel</name><op:operator pos:line="194" pos:column="93">.</op:operator><name pos:line="194" pos:column="94">Public</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="196" pos:column="13">//parse namespace</comment>
            <decl_stmt><decl><type><name><name pos:line="197" pos:column="13">IEnumerable</name><argument_list pos:line="197" pos:column="24">&lt;<argument><name pos:line="197" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="197" pos:column="35">ownerNamespaces</name> =<init pos:line="197" pos:column="52">
                <expr><linq><from pos:line="198" pos:column="17">from <expr><name pos:line="198" pos:column="22">el</name></expr> <in pos:line="198" pos:column="25">in <expr><call><name><name pos:line="198" pos:column="28">cls</name><op:operator pos:line="198" pos:column="31">.</op:operator><name pos:line="198" pos:column="32">Ancestors</name></name><argument_list pos:line="198" pos:column="41">(<argument><expr><name><name pos:line="198" pos:column="42">SRC</name><op:operator pos:line="198" pos:column="45">.</op:operator><name pos:line="198" pos:column="46">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <where pos:line="199" pos:column="17">where <expr><call><name><name pos:line="199" pos:column="23">el</name><op:operator pos:line="199" pos:column="25">.</op:operator><name pos:line="199" pos:column="26">Element</name></name><argument_list pos:line="199" pos:column="33">(<argument><expr><name><name pos:line="199" pos:column="34">SRC</name><op:operator pos:line="199" pos:column="37">.</op:operator><name pos:line="199" pos:column="38">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="199" pos:column="43">.</op:operator><call><name pos:line="199" pos:column="44">Element</name><argument_list pos:line="199" pos:column="51">(<argument><expr><name><name pos:line="199" pos:column="52">SRC</name><op:operator pos:line="199" pos:column="55">.</op:operator><name pos:line="199" pos:column="56">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="199" pos:column="61">.</op:operator><name pos:line="199" pos:column="62">Value</name> <op:operator pos:line="199" pos:column="68">==</op:operator> <lit:literal type="string" pos:line="199" pos:column="71">"namespace"</lit:literal></expr></where>
                <select pos:line="200" pos:column="17">select <expr><name pos:line="200" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="201" pos:column="13">string</name></type> <name pos:line="201" pos:column="20">namespaceName</name> =<init pos:line="201" pos:column="35"> <expr><name><name pos:line="201" pos:column="36">String</name><op:operator pos:line="201" pos:column="42">.</op:operator><name pos:line="201" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="202" pos:column="13">foreach (<init><decl><type><name pos:line="202" pos:column="22">XElement</name></type> <name pos:line="202" pos:column="31">ownerNamespace</name> <init pos:line="202" pos:column="46">in <expr><name pos:line="202" pos:column="49">ownerNamespaces</name></expr></init></decl></init>)
            <block pos:line="203" pos:column="13">{
                <foreach pos:line="204" pos:column="17">foreach (<init><expr><name pos:line="204" pos:column="26">XElement</name> <name pos:line="204" pos:column="35">spc</name> <op:operator pos:line="204" pos:column="39">in</op:operator> <call><name><name pos:line="204" pos:column="42">ownerNamespace</name><op:operator pos:line="204" pos:column="56">.</op:operator><name pos:line="204" pos:column="57">Elements</name></name><argument_list pos:line="204" pos:column="65">(<argument><expr><name><name pos:line="204" pos:column="66">SRC</name><op:operator pos:line="204" pos:column="69">.</op:operator><name pos:line="204" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr></init>)
                <block pos:line="205" pos:column="17">{
                    <expr_stmt><expr><name pos:line="206" pos:column="21">namespaceName</name> <op:operator pos:line="206" pos:column="35">+=</op:operator> <name><name pos:line="206" pos:column="38">spc</name><op:operator pos:line="206" pos:column="41">.</op:operator><name pos:line="206" pos:column="42">Value</name></name> <op:operator pos:line="206" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="206" pos:column="50">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="209" pos:column="13">namespaceName</name> <op:operator pos:line="209" pos:column="27">=</op:operator> <call><name><name pos:line="209" pos:column="29">namespaceName</name><op:operator pos:line="209" pos:column="42">.</op:operator><name pos:line="209" pos:column="43">TrimEnd</name></name><argument_list pos:line="209" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="211" pos:column="13">//parse extended classes </comment>
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">string</name></type> <name pos:line="212" pos:column="20">extendedClasses</name> =<init pos:line="212" pos:column="37"> <expr><name><name pos:line="212" pos:column="38">String</name><op:operator pos:line="212" pos:column="44">.</op:operator><name pos:line="212" pos:column="45">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="213" pos:column="13">XElement</name></type> <name pos:line="213" pos:column="22">super</name> =<init pos:line="213" pos:column="29"> <expr><call><name><name pos:line="213" pos:column="30">cls</name><op:operator pos:line="213" pos:column="33">.</op:operator><name pos:line="213" pos:column="34">Element</name></name><argument_list pos:line="213" pos:column="41">(<argument><expr><name><name pos:line="213" pos:column="42">SRC</name><op:operator pos:line="213" pos:column="45">.</op:operator><name pos:line="213" pos:column="46">Super</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="214" pos:column="13">if <condition pos:line="214" pos:column="16">(<expr><name pos:line="214" pos:column="17">super</name> <op:operator pos:line="214" pos:column="23">!=</op:operator> <name pos:line="214" pos:column="26">null</name></expr>)</condition><then pos:line="214" pos:column="31">
            <block pos:line="215" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="216" pos:column="17">XElement</name></type> <name pos:line="216" pos:column="26">implements</name> =<init pos:line="216" pos:column="38"> <expr><call><name><name pos:line="216" pos:column="39">super</name><op:operator pos:line="216" pos:column="44">.</op:operator><name pos:line="216" pos:column="45">Element</name></name><argument_list pos:line="216" pos:column="52">(<argument><expr><name><name pos:line="216" pos:column="53">SRC</name><op:operator pos:line="216" pos:column="56">.</op:operator><name pos:line="216" pos:column="57">Implements</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="217" pos:column="17">if <condition pos:line="217" pos:column="20">(<expr><name pos:line="217" pos:column="21">implements</name> <op:operator pos:line="217" pos:column="32">!=</op:operator> <name pos:line="217" pos:column="35">null</name></expr>)</condition><then pos:line="217" pos:column="40">
                <block pos:line="218" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="219" pos:column="21">IEnumerable</name><argument_list pos:line="219" pos:column="32">&lt;<argument><name pos:line="219" pos:column="33">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="43">impNames</name> =<init pos:line="219" pos:column="53">
                        <expr><linq><from pos:line="220" pos:column="25">from <expr><name pos:line="220" pos:column="30">el</name></expr> <in pos:line="220" pos:column="33">in <expr><call><name><name pos:line="220" pos:column="36">implements</name><op:operator pos:line="220" pos:column="46">.</op:operator><name pos:line="220" pos:column="47">Descendants</name></name><argument_list pos:line="220" pos:column="58">(<argument><expr><name><name pos:line="220" pos:column="59">SRC</name><op:operator pos:line="220" pos:column="62">.</op:operator><name pos:line="220" pos:column="63">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="221" pos:column="25">select <expr><name pos:line="221" pos:column="32">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="222" pos:column="21">foreach (<init><decl><type><name pos:line="222" pos:column="30">XElement</name></type> <name pos:line="222" pos:column="39">impName</name> <init pos:line="222" pos:column="47">in <expr><name pos:line="222" pos:column="50">impNames</name></expr></init></decl></init>)
                    <block pos:line="223" pos:column="21">{
                        <expr_stmt><expr><name pos:line="224" pos:column="25">extendedClasses</name> <op:operator pos:line="224" pos:column="41">+=</op:operator> <name><name pos:line="224" pos:column="44">impName</name><op:operator pos:line="224" pos:column="51">.</op:operator><name pos:line="224" pos:column="52">Value</name></name> <op:operator pos:line="224" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="224" pos:column="60">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="226" pos:column="21">extendedClasses</name> <op:operator pos:line="226" pos:column="37">=</op:operator> <call><name><name pos:line="226" pos:column="39">extendedClasses</name><op:operator pos:line="226" pos:column="54">.</op:operator><name pos:line="226" pos:column="55">TrimEnd</name></name><argument_list pos:line="226" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="230" pos:column="13">string</name></type> <name pos:line="230" pos:column="20">fullFilePath</name> =<init pos:line="230" pos:column="34"> <expr><call><name><name pos:line="230" pos:column="35">System</name><op:operator pos:line="230" pos:column="41">.</op:operator><name pos:line="230" pos:column="42">IO</name><op:operator pos:line="230" pos:column="44">.</op:operator><name pos:line="230" pos:column="45">Path</name><op:operator pos:line="230" pos:column="49">.</op:operator><name pos:line="230" pos:column="50">GetFullPath</name></name><argument_list pos:line="230" pos:column="61">(<argument><expr><name pos:line="230" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">string</name></type> <name pos:line="231" pos:column="20">source</name> =<init pos:line="231" pos:column="28"> <expr><call><name><name pos:line="231" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="231" pos:column="46">.</op:operator><name pos:line="231" pos:column="47">RetrieveSource</name></name><argument_list pos:line="231" pos:column="61">(<argument><expr><name pos:line="231" pos:column="62">cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">string</name></type> <name pos:line="233" pos:column="20">body</name> =<init pos:line="233" pos:column="26"> <expr><name><name pos:line="233" pos:column="27">cls</name><op:operator pos:line="233" pos:column="30">.</op:operator><name pos:line="233" pos:column="31">Value</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="234" pos:column="13">if <condition pos:line="234" pos:column="16">(<expr><name pos:line="234" pos:column="17">parseStruct</name></expr>)</condition><then pos:line="234" pos:column="29">
            <block pos:line="235" pos:column="13">{
                <return pos:line="236" pos:column="17">return <expr><op:operator pos:line="236" pos:column="24">new</op:operator> <call><name pos:line="236" pos:column="28">StructElement</name><argument_list pos:line="236" pos:column="41">(<argument><expr><name pos:line="236" pos:column="42">name</name></expr></argument><op:operator pos:line="236" pos:column="46">,</op:operator> <argument><expr><name pos:line="236" pos:column="48">definitionLineNumber</name></expr></argument><op:operator pos:line="236" pos:column="68">,</op:operator> <argument><expr><name pos:line="236" pos:column="70">fullFilePath</name></expr></argument><op:operator pos:line="236" pos:column="82">,</op:operator> <argument><expr><name pos:line="236" pos:column="84">source</name></expr></argument><op:operator pos:line="236" pos:column="90">,</op:operator> <argument><expr><name pos:line="236" pos:column="92">accessLevel</name></expr></argument><op:operator pos:line="236" pos:column="103">,</op:operator> <argument><expr><name pos:line="236" pos:column="105">namespaceName</name></expr></argument><op:operator pos:line="236" pos:column="118">,</op:operator> <argument><expr><name pos:line="236" pos:column="120">body</name></expr></argument><op:operator pos:line="236" pos:column="124">,</op:operator> <argument><expr><name pos:line="236" pos:column="126">extendedClasses</name></expr></argument><op:operator pos:line="236" pos:column="141">,</op:operator> <argument><expr><name><name pos:line="236" pos:column="143">String</name><op:operator pos:line="236" pos:column="149">.</op:operator><name pos:line="236" pos:column="150">Empty</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="238" pos:column="13">else
            <block pos:line="239" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="240" pos:column="17">string</name></type> <name pos:line="240" pos:column="24">implementedInterfaces</name> =<init pos:line="240" pos:column="47"> <expr><name><name pos:line="240" pos:column="48">String</name><op:operator pos:line="240" pos:column="54">.</op:operator><name pos:line="240" pos:column="55">Empty</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="241" pos:column="17">return <expr><op:operator pos:line="241" pos:column="24">new</op:operator> <call><name pos:line="241" pos:column="28">ClassElement</name><argument_list pos:line="241" pos:column="40">(<argument><expr><name pos:line="241" pos:column="41">name</name></expr></argument><op:operator pos:line="241" pos:column="45">,</op:operator> <argument><expr><name pos:line="241" pos:column="47">definitionLineNumber</name></expr></argument><op:operator pos:line="241" pos:column="67">,</op:operator> <argument><expr><name pos:line="241" pos:column="69">fullFilePath</name></expr></argument><op:operator pos:line="241" pos:column="81">,</op:operator> <argument><expr><name pos:line="241" pos:column="83">source</name></expr></argument><op:operator pos:line="241" pos:column="89">,</op:operator> <argument><expr><name pos:line="241" pos:column="91">accessLevel</name></expr></argument><op:operator pos:line="241" pos:column="102">,</op:operator> <argument><expr><name pos:line="241" pos:column="104">namespaceName</name></expr></argument><op:operator pos:line="241" pos:column="117">,</op:operator>
                    <argument><expr><name pos:line="242" pos:column="21">extendedClasses</name></expr></argument><op:operator pos:line="242" pos:column="36">,</op:operator> <argument><expr><name pos:line="242" pos:column="38">implementedInterfaces</name></expr></argument><op:operator pos:line="242" pos:column="59">,</op:operator> <argument><expr><name><name pos:line="242" pos:column="61">String</name><op:operator pos:line="242" pos:column="67">.</op:operator><name pos:line="242" pos:column="68">Empty</name></name></expr></argument><op:operator pos:line="242" pos:column="73">,</op:operator> <argument><expr><name pos:line="242" pos:column="75">body</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="246" pos:column="9">private</specifier> <name pos:line="246" pos:column="17">void</name></type> <name pos:line="246" pos:column="22">ParseConstructors</name><parameter_list pos:line="246" pos:column="39">(<param><decl><type><name><name pos:line="246" pos:column="40">List</name><argument_list pos:line="246" pos:column="44">&lt;<argument><name pos:line="246" pos:column="45">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="246" pos:column="61">programElements</name></decl></param><op:operator pos:line="246" pos:column="76">,</op:operator> <param><decl><type><name pos:line="246" pos:column="78">XElement</name></type> <name pos:line="246" pos:column="87">elements</name></decl></param><op:operator pos:line="246" pos:column="95">,</op:operator> <param><decl><type><name pos:line="246" pos:column="97">string</name></type> <name pos:line="246" pos:column="104">fileName</name></decl></param>)</parameter_list>
        <block pos:line="247" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="248" pos:column="13">string</name><index pos:line="248" pos:column="19">[]</index></name></type> <name pos:line="248" pos:column="22">includedFiles</name> =<init pos:line="248" pos:column="37"> <expr><call><name pos:line="248" pos:column="38">ParseCppIncludes</name><argument_list pos:line="248" pos:column="54">(<argument><expr><name pos:line="248" pos:column="55">elements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="249" pos:column="13">IEnumerable</name><argument_list pos:line="249" pos:column="24">&lt;<argument><name pos:line="249" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="249" pos:column="35">constructors</name> =<init pos:line="249" pos:column="49">
                <expr><linq><from pos:line="250" pos:column="17">from <expr><name pos:line="250" pos:column="22">el</name></expr> <in pos:line="250" pos:column="25">in <expr><call><name><name pos:line="250" pos:column="28">elements</name><op:operator pos:line="250" pos:column="36">.</op:operator><name pos:line="250" pos:column="37">Descendants</name></name><argument_list pos:line="250" pos:column="48">(<argument><expr><name><name pos:line="250" pos:column="49">SRC</name><op:operator pos:line="250" pos:column="52">.</op:operator><name pos:line="250" pos:column="53">Constructor</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="251" pos:column="17">select <expr><name pos:line="251" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="252" pos:column="13">foreach (<init><decl><type><name pos:line="252" pos:column="22">XElement</name></type> <name pos:line="252" pos:column="31">cons</name> <init pos:line="252" pos:column="36">in <expr><name pos:line="252" pos:column="39">constructors</name></expr></init></decl></init>)
            <block pos:line="253" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="254" pos:column="17">programElements</name><op:operator pos:line="254" pos:column="32">.</op:operator><name pos:line="254" pos:column="33">Add</name></name><argument_list pos:line="254" pos:column="36">(<argument><expr><call><name pos:line="254" pos:column="37">ParseCppFunction</name><argument_list pos:line="254" pos:column="53">(<argument><expr><name pos:line="254" pos:column="54">cons</name></expr></argument><op:operator pos:line="254" pos:column="58">,</op:operator> <argument><expr><name pos:line="254" pos:column="60">programElements</name></expr></argument><op:operator pos:line="254" pos:column="75">,</op:operator> <argument><expr><name pos:line="254" pos:column="77">fileName</name></expr></argument><op:operator pos:line="254" pos:column="85">,</op:operator> <argument><expr><name pos:line="254" pos:column="87">includedFiles</name></expr></argument><op:operator pos:line="254" pos:column="100">,</op:operator> <argument><expr><call><name pos:line="254" pos:column="102">typeof</name><argument_list pos:line="254" pos:column="108">(<argument><expr><name pos:line="254" pos:column="109">MethodElement</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="254" pos:column="123">,</op:operator> <argument><expr><call><name pos:line="254" pos:column="125">typeof</name><argument_list pos:line="254" pos:column="131">(<argument><expr><name pos:line="254" pos:column="132">CppUnresolvedMethodElement</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="254" pos:column="159">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="254" pos:column="161">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="258" pos:column="9">private</specifier> <name pos:line="258" pos:column="17">void</name></type> <name pos:line="258" pos:column="22">ParseFunctions</name><parameter_list pos:line="258" pos:column="36">(<param><decl><type><name><name pos:line="258" pos:column="37">List</name><argument_list pos:line="258" pos:column="41">&lt;<argument><name pos:line="258" pos:column="42">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="258" pos:column="58">programElements</name></decl></param><op:operator pos:line="258" pos:column="73">,</op:operator> <param><decl><type><name pos:line="258" pos:column="75">XElement</name></type> <name pos:line="258" pos:column="84">elements</name></decl></param><op:operator pos:line="258" pos:column="92">,</op:operator> <param><decl><type><name pos:line="258" pos:column="94">string</name></type> <name pos:line="258" pos:column="101">fileName</name></decl></param>)</parameter_list>
        <block pos:line="259" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="260" pos:column="13">string</name><index pos:line="260" pos:column="19">[]</index></name></type> <name pos:line="260" pos:column="22">includedFiles</name> =<init pos:line="260" pos:column="37"> <expr><call><name pos:line="260" pos:column="38">ParseCppIncludes</name><argument_list pos:line="260" pos:column="54">(<argument><expr><name pos:line="260" pos:column="55">elements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="261" pos:column="13">IEnumerable</name><argument_list pos:line="261" pos:column="24">&lt;<argument><name pos:line="261" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="261" pos:column="35">functions</name> =<init pos:line="261" pos:column="46">
                <expr><linq><from pos:line="262" pos:column="17">from <expr><name pos:line="262" pos:column="22">el</name></expr> <in pos:line="262" pos:column="25">in <expr><call><name><name pos:line="262" pos:column="28">elements</name><op:operator pos:line="262" pos:column="36">.</op:operator><name pos:line="262" pos:column="37">Descendants</name></name><argument_list pos:line="262" pos:column="48">(<argument><expr><name><name pos:line="262" pos:column="49">SRC</name><op:operator pos:line="262" pos:column="52">.</op:operator><name pos:line="262" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="263" pos:column="17">select <expr><name pos:line="263" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="264" pos:column="13">foreach (<init><decl><type><name pos:line="264" pos:column="22">XElement</name></type> <name pos:line="264" pos:column="31">func</name> <init pos:line="264" pos:column="36">in <expr><name pos:line="264" pos:column="39">functions</name></expr></init></decl></init>)
            <block pos:line="265" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="266" pos:column="17">programElements</name><op:operator pos:line="266" pos:column="32">.</op:operator><name pos:line="266" pos:column="33">Add</name></name><argument_list pos:line="266" pos:column="36">(<argument><expr><call><name pos:line="266" pos:column="37">ParseCppFunction</name><argument_list pos:line="266" pos:column="53">(<argument><expr><name pos:line="266" pos:column="54">func</name></expr></argument><op:operator pos:line="266" pos:column="58">,</op:operator> <argument><expr><name pos:line="266" pos:column="60">programElements</name></expr></argument><op:operator pos:line="266" pos:column="75">,</op:operator> <argument><expr><name pos:line="266" pos:column="77">fileName</name></expr></argument><op:operator pos:line="266" pos:column="85">,</op:operator> <argument><expr><name pos:line="266" pos:column="87">includedFiles</name></expr></argument><op:operator pos:line="266" pos:column="100">,</op:operator> <argument><expr><call><name pos:line="266" pos:column="102">typeof</name><argument_list pos:line="266" pos:column="108">(<argument><expr><name pos:line="266" pos:column="109">MethodElement</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="266" pos:column="123">,</op:operator> <argument><expr><call><name pos:line="266" pos:column="125">typeof</name><argument_list pos:line="266" pos:column="131">(<argument><expr><name pos:line="266" pos:column="132">CppUnresolvedMethodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="270" pos:column="9">public</specifier> <specifier pos:line="270" pos:column="16">virtual</specifier> <name pos:line="270" pos:column="24">MethodElement</name></type> <name pos:line="270" pos:column="38">ParseCppFunction</name><parameter_list pos:line="270" pos:column="54">(<param><decl><type><name pos:line="270" pos:column="55">XElement</name></type> <name pos:line="270" pos:column="64">function</name></decl></param><op:operator pos:line="270" pos:column="72">,</op:operator> <param><decl><type><name><name pos:line="270" pos:column="74">List</name><argument_list pos:line="270" pos:column="78">&lt;<argument><name pos:line="270" pos:column="79">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="270" pos:column="95">programElements</name></decl></param><op:operator pos:line="270" pos:column="110">,</op:operator> <param><decl><type><name pos:line="270" pos:column="112">string</name></type> <name pos:line="270" pos:column="119">fileName</name></decl></param><op:operator pos:line="270" pos:column="127">,</op:operator>
                                                <param><decl><type><name><name pos:line="271" pos:column="49">string</name><index pos:line="271" pos:column="55">[]</index></name></type> <name pos:line="271" pos:column="58">includedFiles</name></decl></param><op:operator pos:line="271" pos:column="71">,</op:operator> <param><decl><type><name pos:line="271" pos:column="73">Type</name></type> <name pos:line="271" pos:column="78">resolvedType</name></decl></param><op:operator pos:line="271" pos:column="90">,</op:operator> <param><decl><type><name pos:line="271" pos:column="92">Type</name></type> <name pos:line="271" pos:column="97">unresolvedType</name></decl></param><op:operator pos:line="271" pos:column="111">,</op:operator> <param><decl><type><name pos:line="271" pos:column="113">bool</name></type> <name pos:line="271" pos:column="118">isConstructor</name> =<init pos:line="271" pos:column="133"> <expr><lit:literal type="boolean" pos:line="271" pos:column="134">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="272" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="273" pos:column="13">MethodElement</name></type> <name pos:line="273" pos:column="27">methodElement</name> =<init pos:line="273" pos:column="42"> <expr><name pos:line="273" pos:column="43">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="274" pos:column="13">string</name></type> <name pos:line="274" pos:column="20">source</name> =<init pos:line="274" pos:column="28"> <expr><name><name pos:line="274" pos:column="29">String</name><op:operator pos:line="274" pos:column="35">.</op:operator><name pos:line="274" pos:column="36">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="275" pos:column="13">int</name></type> <name pos:line="275" pos:column="17">definitionLineNumber</name> =<init pos:line="275" pos:column="39"> <expr><lit:literal type="number" pos:line="275" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="276" pos:column="13">string</name></type> <name pos:line="276" pos:column="20">returnType</name> =<init pos:line="276" pos:column="32"> <expr><name><name pos:line="276" pos:column="33">String</name><op:operator pos:line="276" pos:column="39">.</op:operator><name pos:line="276" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="278" pos:column="13">XElement</name></type> <name pos:line="278" pos:column="22">type</name> =<init pos:line="278" pos:column="28"> <expr><call><name><name pos:line="278" pos:column="29">function</name><op:operator pos:line="278" pos:column="37">.</op:operator><name pos:line="278" pos:column="38">Element</name></name><argument_list pos:line="278" pos:column="45">(<argument><expr><name><name pos:line="278" pos:column="46">SRC</name><op:operator pos:line="278" pos:column="49">.</op:operator><name pos:line="278" pos:column="50">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="279" pos:column="13">if <condition pos:line="279" pos:column="16">(<expr><name pos:line="279" pos:column="17">type</name> <op:operator pos:line="279" pos:column="22">!=</op:operator> <name pos:line="279" pos:column="25">null</name></expr>)</condition><then pos:line="279" pos:column="30">
            <block pos:line="280" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="281" pos:column="17">XElement</name></type> <name pos:line="281" pos:column="26">typeName</name> =<init pos:line="281" pos:column="36"> <expr><call><name><name pos:line="281" pos:column="37">type</name><op:operator pos:line="281" pos:column="41">.</op:operator><name pos:line="281" pos:column="42">Element</name></name><argument_list pos:line="281" pos:column="49">(<argument><expr><name><name pos:line="281" pos:column="50">SRC</name><op:operator pos:line="281" pos:column="53">.</op:operator><name pos:line="281" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="282" pos:column="17">returnType</name> <op:operator pos:line="282" pos:column="28">=</op:operator> <name><name pos:line="282" pos:column="30">typeName</name><op:operator pos:line="282" pos:column="38">.</op:operator><name pos:line="282" pos:column="39">Value</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="285" pos:column="13">XElement</name></type> <name pos:line="285" pos:column="22">paramlist</name> =<init pos:line="285" pos:column="33"> <expr><call><name><name pos:line="285" pos:column="34">function</name><op:operator pos:line="285" pos:column="42">.</op:operator><name pos:line="285" pos:column="43">Element</name></name><argument_list pos:line="285" pos:column="50">(<argument><expr><name><name pos:line="285" pos:column="51">SRC</name><op:operator pos:line="285" pos:column="54">.</op:operator><name pos:line="285" pos:column="55">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="286" pos:column="13">IEnumerable</name><argument_list pos:line="286" pos:column="24">&lt;<argument><name pos:line="286" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="286" pos:column="35">argumentElements</name> =<init pos:line="286" pos:column="53">
                <expr><linq><from pos:line="287" pos:column="17">from <expr><name pos:line="287" pos:column="22">el</name></expr> <in pos:line="287" pos:column="25">in <expr><call><name><name pos:line="287" pos:column="28">paramlist</name><op:operator pos:line="287" pos:column="37">.</op:operator><name pos:line="287" pos:column="38">Descendants</name></name><argument_list pos:line="287" pos:column="49">(<argument><expr><name><name pos:line="287" pos:column="50">SRC</name><op:operator pos:line="287" pos:column="53">.</op:operator><name pos:line="287" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="288" pos:column="17">select <expr><name pos:line="288" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">string</name></type> <name pos:line="289" pos:column="20">arguments</name> =<init pos:line="289" pos:column="31"> <expr><name><name pos:line="289" pos:column="32">String</name><op:operator pos:line="289" pos:column="38">.</op:operator><name pos:line="289" pos:column="39">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="290" pos:column="13">foreach (<init><decl><type><name pos:line="290" pos:column="22">XElement</name></type> <name pos:line="290" pos:column="31">elem</name> <init pos:line="290" pos:column="36">in <expr><name pos:line="290" pos:column="39">argumentElements</name></expr></init></decl></init>)
            <block pos:line="291" pos:column="13">{
                <expr_stmt><expr><name pos:line="292" pos:column="17">arguments</name> <op:operator pos:line="292" pos:column="27">+=</op:operator> <name><name pos:line="292" pos:column="30">elem</name><op:operator pos:line="292" pos:column="34">.</op:operator><name pos:line="292" pos:column="35">Value</name></name> <op:operator pos:line="292" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="292" pos:column="43">" "</lit:literal></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="294" pos:column="13">arguments</name> <op:operator pos:line="294" pos:column="23">=</op:operator> <call><name><name pos:line="294" pos:column="25">arguments</name><op:operator pos:line="294" pos:column="34">.</op:operator><name pos:line="294" pos:column="35">TrimEnd</name></name><argument_list pos:line="294" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="296" pos:column="13">string</name></type> <name pos:line="296" pos:column="20">body</name> =<init pos:line="296" pos:column="26"> <expr><call><name><name pos:line="296" pos:column="27">SrcMLParsingUtils</name><op:operator pos:line="296" pos:column="44">.</op:operator><name pos:line="296" pos:column="45">ParseBody</name></name><argument_list pos:line="296" pos:column="54">(<argument><expr><name pos:line="296" pos:column="55">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">string</name></type> <name pos:line="297" pos:column="20">fullFilePath</name> =<init pos:line="297" pos:column="34"> <expr><call><name><name pos:line="297" pos:column="35">System</name><op:operator pos:line="297" pos:column="41">.</op:operator><name pos:line="297" pos:column="42">IO</name><op:operator pos:line="297" pos:column="44">.</op:operator><name pos:line="297" pos:column="45">Path</name><op:operator pos:line="297" pos:column="49">.</op:operator><name pos:line="297" pos:column="50">GetFullPath</name></name><argument_list pos:line="297" pos:column="61">(<argument><expr><name pos:line="297" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


            <decl_stmt><decl><type><name pos:line="300" pos:column="13">XElement</name></type> <name pos:line="300" pos:column="22">nameElement</name> =<init pos:line="300" pos:column="35"> <expr><call><name><name pos:line="300" pos:column="36">function</name><op:operator pos:line="300" pos:column="44">.</op:operator><name pos:line="300" pos:column="45">Element</name></name><argument_list pos:line="300" pos:column="52">(<argument><expr><name><name pos:line="300" pos:column="53">SRC</name><op:operator pos:line="300" pos:column="56">.</op:operator><name pos:line="300" pos:column="57">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="301" pos:column="13">string</name></type> <name pos:line="301" pos:column="20">wholeName</name> =<init pos:line="301" pos:column="31"> <expr><name><name pos:line="301" pos:column="32">nameElement</name><op:operator pos:line="301" pos:column="43">.</op:operator><name pos:line="301" pos:column="44">Value</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="302" pos:column="13">if <condition pos:line="302" pos:column="16">(<expr><call><name><name pos:line="302" pos:column="17">wholeName</name><op:operator pos:line="302" pos:column="26">.</op:operator><name pos:line="302" pos:column="27">Contains</name></name><argument_list pos:line="302" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="36">"::"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="302" pos:column="42">
            <block pos:line="303" pos:column="13">{
                <comment type="line" pos:line="304" pos:column="17">//class function</comment>
                <decl_stmt><decl><type><name><name pos:line="305" pos:column="17">string</name><index pos:line="305" pos:column="23">[]</index></name></type> <name pos:line="305" pos:column="26">twonames</name> =<init pos:line="305" pos:column="36"> <expr><call><name><name pos:line="305" pos:column="37">wholeName</name><op:operator pos:line="305" pos:column="46">.</op:operator><name pos:line="305" pos:column="47">Split</name></name><argument_list pos:line="305" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="53">"::"</lit:literal><op:operator pos:line="305" pos:column="57">.</op:operator><call><name pos:line="305" pos:column="58">ToCharArray</name><argument_list pos:line="305" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="306" pos:column="17">string</name></type> <name pos:line="306" pos:column="24">funcName</name> =<init pos:line="306" pos:column="34"> <expr><name><name pos:line="306" pos:column="35">twonames</name><index pos:line="306" pos:column="43">[<expr><lit:literal type="number" pos:line="306" pos:column="44">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="307" pos:column="17">string</name></type> <name pos:line="307" pos:column="24">className</name> =<init pos:line="307" pos:column="35"> <expr><name><name pos:line="307" pos:column="36">twonames</name><index pos:line="307" pos:column="44">[<expr><lit:literal type="number" pos:line="307" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="308" pos:column="17">definitionLineNumber</name> <op:operator pos:line="308" pos:column="38">=</op:operator> <call><name><name pos:line="308" pos:column="40">Int32</name><op:operator pos:line="308" pos:column="45">.</op:operator><name pos:line="308" pos:column="46">Parse</name></name><argument_list pos:line="308" pos:column="51">(<argument><expr><call><name><name pos:line="308" pos:column="52">nameElement</name><op:operator pos:line="308" pos:column="63">.</op:operator><name pos:line="308" pos:column="64">Element</name></name><argument_list pos:line="308" pos:column="71">(<argument><expr><name><name pos:line="308" pos:column="72">SRC</name><op:operator pos:line="308" pos:column="75">.</op:operator><name pos:line="308" pos:column="76">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="308" pos:column="81">.</op:operator><call><name pos:line="308" pos:column="82">Attribute</name><argument_list pos:line="308" pos:column="91">(<argument><expr><name><name pos:line="308" pos:column="92">POS</name><op:operator pos:line="308" pos:column="95">.</op:operator><name pos:line="308" pos:column="96">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="308" pos:column="101">.</op:operator><name pos:line="308" pos:column="102">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="309" pos:column="17">source</name> <op:operator pos:line="309" pos:column="24">=</op:operator> <call><name><name pos:line="309" pos:column="26">SrcMLParsingUtils</name><op:operator pos:line="309" pos:column="43">.</op:operator><name pos:line="309" pos:column="44">RetrieveSource</name></name><argument_list pos:line="309" pos:column="58">(<argument><expr><name pos:line="309" pos:column="59">function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="311" pos:column="17">return <expr><call><name><name pos:line="311" pos:column="24">Activator</name><op:operator pos:line="311" pos:column="33">.</op:operator><name pos:line="311" pos:column="34">CreateInstance</name></name><argument_list pos:line="311" pos:column="48">(<argument><expr><name pos:line="311" pos:column="49">unresolvedType</name></expr></argument><op:operator pos:line="311" pos:column="63">,</op:operator> <argument><expr><name pos:line="311" pos:column="65">funcName</name></expr></argument><op:operator pos:line="311" pos:column="73">,</op:operator> <argument><expr><name pos:line="311" pos:column="75">definitionLineNumber</name></expr></argument><op:operator pos:line="311" pos:column="95">,</op:operator> <argument><expr><name pos:line="311" pos:column="97">fullFilePath</name></expr></argument><op:operator pos:line="311" pos:column="109">,</op:operator> <argument><expr><name pos:line="311" pos:column="111">source</name></expr></argument><op:operator pos:line="311" pos:column="117">,</op:operator> <argument><expr><name pos:line="311" pos:column="119">arguments</name></expr></argument><op:operator pos:line="311" pos:column="128">,</op:operator> <argument><expr><name pos:line="311" pos:column="130">returnType</name></expr></argument><op:operator pos:line="311" pos:column="140">,</op:operator> <argument><expr><name pos:line="311" pos:column="142">body</name></expr></argument><op:operator pos:line="311" pos:column="146">,</op:operator>
                                                        <argument><expr><name pos:line="312" pos:column="57">className</name></expr></argument><op:operator pos:line="312" pos:column="66">,</op:operator> <argument><expr><name pos:line="312" pos:column="68">isConstructor</name></expr></argument><op:operator pos:line="312" pos:column="81">,</op:operator> <argument><expr><name pos:line="312" pos:column="83">includedFiles</name></expr></argument>)</argument_list></call> <op:operator pos:line="312" pos:column="98">as</op:operator> <name pos:line="312" pos:column="101">MethodElement</name></expr>;</return>
            }</block></then>
            <else pos:line="314" pos:column="13">else
            <block pos:line="315" pos:column="13">{
                <comment type="line" pos:line="316" pos:column="17">//regular C-type function, or an inlined class function</comment>
                <decl_stmt><decl><type><name pos:line="317" pos:column="17">string</name></type> <name pos:line="317" pos:column="24">funcName</name> =<init pos:line="317" pos:column="34"> <expr><name pos:line="317" pos:column="35">wholeName</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="318" pos:column="17">definitionLineNumber</name> <op:operator pos:line="318" pos:column="38">=</op:operator> <call><name><name pos:line="318" pos:column="40">Int32</name><op:operator pos:line="318" pos:column="45">.</op:operator><name pos:line="318" pos:column="46">Parse</name></name><argument_list pos:line="318" pos:column="51">(<argument><expr><call><name><name pos:line="318" pos:column="52">nameElement</name><op:operator pos:line="318" pos:column="63">.</op:operator><name pos:line="318" pos:column="64">Attribute</name></name><argument_list pos:line="318" pos:column="73">(<argument><expr><name><name pos:line="318" pos:column="74">POS</name><op:operator pos:line="318" pos:column="77">.</op:operator><name pos:line="318" pos:column="78">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="318" pos:column="83">.</op:operator><name pos:line="318" pos:column="84">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="319" pos:column="17">source</name> <op:operator pos:line="319" pos:column="24">=</op:operator> <call><name><name pos:line="319" pos:column="26">SrcMLParsingUtils</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">RetrieveSource</name></name><argument_list pos:line="319" pos:column="58">(<argument><expr><name pos:line="319" pos:column="59">function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="320" pos:column="17">AccessLevel</name></type> <name pos:line="320" pos:column="29">accessLevel</name> =<init pos:line="320" pos:column="42"> <expr><call><name pos:line="320" pos:column="43">RetrieveCppAccessLevel</name><argument_list pos:line="320" pos:column="65">(<argument><expr><name pos:line="320" pos:column="66">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="322" pos:column="17">Guid</name></type> <name pos:line="322" pos:column="22">classId</name> =<init pos:line="322" pos:column="31"> <expr><name><name pos:line="322" pos:column="32">Guid</name><op:operator pos:line="322" pos:column="36">.</op:operator><name pos:line="322" pos:column="37">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="323" pos:column="17">string</name></type> <name pos:line="323" pos:column="24">className</name> =<init pos:line="323" pos:column="35"> <expr><name><name pos:line="323" pos:column="36">String</name><op:operator pos:line="323" pos:column="42">.</op:operator><name pos:line="323" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="324" pos:column="17">ClassElement</name></type> <name pos:line="324" pos:column="30">classElement</name> =<init pos:line="324" pos:column="44"> <expr><call><name><name pos:line="324" pos:column="45">SrcMLParsingUtils</name><op:operator pos:line="324" pos:column="62">.</op:operator><name pos:line="324" pos:column="63">RetrieveClassElement</name></name><argument_list pos:line="324" pos:column="83">(<argument><expr><name pos:line="324" pos:column="84">function</name></expr></argument><op:operator pos:line="324" pos:column="92">,</op:operator> <argument><expr><name pos:line="324" pos:column="94">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="325" pos:column="17">StructElement</name></type> <name pos:line="325" pos:column="31">structElement</name> =<init pos:line="325" pos:column="46"> <expr><call><name pos:line="325" pos:column="47">RetrieveStructElement</name><argument_list pos:line="325" pos:column="68">(<argument><expr><name pos:line="325" pos:column="69">function</name></expr></argument><op:operator pos:line="325" pos:column="77">,</op:operator> <argument><expr><name pos:line="325" pos:column="79">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="326" pos:column="17">if <condition pos:line="326" pos:column="20">(<expr><name pos:line="326" pos:column="21">classElement</name> <op:operator pos:line="326" pos:column="34">!=</op:operator> <name pos:line="326" pos:column="37">null</name></expr>)</condition><then pos:line="326" pos:column="42">
                <block pos:line="327" pos:column="17">{
                    <expr_stmt><expr><name pos:line="328" pos:column="21">classId</name> <op:operator pos:line="328" pos:column="29">=</op:operator> <name><name pos:line="328" pos:column="31">classElement</name><op:operator pos:line="328" pos:column="43">.</op:operator><name pos:line="328" pos:column="44">Id</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="329" pos:column="21">className</name> <op:operator pos:line="329" pos:column="31">=</op:operator> <name><name pos:line="329" pos:column="33">classElement</name><op:operator pos:line="329" pos:column="45">.</op:operator><name pos:line="329" pos:column="46">Name</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="331" pos:column="17">else <if pos:line="331" pos:column="22">if <condition pos:line="331" pos:column="25">(<expr><name pos:line="331" pos:column="26">structElement</name> <op:operator pos:line="331" pos:column="40">!=</op:operator> <name pos:line="331" pos:column="43">null</name></expr>)</condition><then pos:line="331" pos:column="48">
                <block pos:line="332" pos:column="17">{
                    <expr_stmt><expr><name pos:line="333" pos:column="21">classId</name> <op:operator pos:line="333" pos:column="29">=</op:operator> <name><name pos:line="333" pos:column="31">structElement</name><op:operator pos:line="333" pos:column="44">.</op:operator><name pos:line="333" pos:column="45">Id</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="334" pos:column="21">className</name> <op:operator pos:line="334" pos:column="31">=</op:operator> <name><name pos:line="334" pos:column="33">structElement</name><op:operator pos:line="334" pos:column="46">.</op:operator><name pos:line="334" pos:column="47">Name</name></name></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <expr_stmt><expr><name pos:line="336" pos:column="17">methodElement</name> <op:operator pos:line="336" pos:column="31">=</op:operator> <call><name><name pos:line="336" pos:column="33">Activator</name><op:operator pos:line="336" pos:column="42">.</op:operator><name pos:line="336" pos:column="43">CreateInstance</name></name><argument_list pos:line="336" pos:column="57">(<argument><expr><name pos:line="336" pos:column="58">resolvedType</name></expr></argument><op:operator pos:line="336" pos:column="70">,</op:operator> <argument><expr><name pos:line="336" pos:column="72">funcName</name></expr></argument><op:operator pos:line="336" pos:column="80">,</op:operator> <argument><expr><name pos:line="336" pos:column="82">definitionLineNumber</name></expr></argument><op:operator pos:line="336" pos:column="102">,</op:operator> <argument><expr><name pos:line="336" pos:column="104">fullFilePath</name></expr></argument><op:operator pos:line="336" pos:column="116">,</op:operator> <argument><expr><name pos:line="336" pos:column="118">source</name></expr></argument><op:operator pos:line="336" pos:column="124">,</op:operator> <argument><expr><name pos:line="336" pos:column="126">accessLevel</name></expr></argument><op:operator pos:line="336" pos:column="137">,</op:operator> <argument><expr><name pos:line="336" pos:column="139">arguments</name></expr></argument><op:operator pos:line="336" pos:column="148">,</op:operator>
                                         <argument><expr><name pos:line="337" pos:column="42">returnType</name></expr></argument><op:operator pos:line="337" pos:column="52">,</op:operator> <argument><expr><name pos:line="337" pos:column="54">body</name></expr></argument><op:operator pos:line="337" pos:column="58">,</op:operator>
                                         <argument><expr><name pos:line="338" pos:column="42">classId</name></expr></argument><op:operator pos:line="338" pos:column="49">,</op:operator> <argument><expr><name pos:line="338" pos:column="51">className</name></expr></argument><op:operator pos:line="338" pos:column="60">,</op:operator> <argument><expr><name><name pos:line="338" pos:column="62">String</name><op:operator pos:line="338" pos:column="68">.</op:operator><name pos:line="338" pos:column="69">Empty</name></name></expr></argument><op:operator pos:line="338" pos:column="74">,</op:operator> <argument><expr><name pos:line="338" pos:column="76">isConstructor</name></expr></argument>)</argument_list></call> <op:operator pos:line="338" pos:column="91">as</op:operator> <name pos:line="338" pos:column="94">MethodElement</name></expr>;</expr_stmt>
            }</block></else></if>

            <return pos:line="341" pos:column="13">return <expr><name pos:line="341" pos:column="20">methodElement</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="344" pos:column="9">public</specifier> <specifier pos:line="344" pos:column="16">static</specifier> <name pos:line="344" pos:column="23">void</name></type> <name pos:line="344" pos:column="28">ParseCppEnums</name><parameter_list pos:line="344" pos:column="41">(<param><decl><type><name><name pos:line="344" pos:column="42">List</name><argument_list pos:line="344" pos:column="46">&lt;<argument><name pos:line="344" pos:column="47">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="344" pos:column="63">programElements</name></decl></param><op:operator pos:line="344" pos:column="78">,</op:operator> <param><decl><type><name pos:line="344" pos:column="80">XElement</name></type> <name pos:line="344" pos:column="89">elements</name></decl></param><op:operator pos:line="344" pos:column="97">,</op:operator> <param><decl><type><name pos:line="344" pos:column="99">string</name></type> <name pos:line="344" pos:column="106">fileName</name></decl></param>)</parameter_list>
        <block pos:line="345" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="346" pos:column="13">IEnumerable</name><argument_list pos:line="346" pos:column="24">&lt;<argument><name pos:line="346" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="346" pos:column="35">enums</name> =<init pos:line="346" pos:column="42">
                <expr><linq><from pos:line="347" pos:column="17">from <expr><name pos:line="347" pos:column="22">el</name></expr> <in pos:line="347" pos:column="25">in <expr><call><name><name pos:line="347" pos:column="28">elements</name><op:operator pos:line="347" pos:column="36">.</op:operator><name pos:line="347" pos:column="37">Descendants</name></name><argument_list pos:line="347" pos:column="48">(<argument><expr><name><name pos:line="347" pos:column="49">SRC</name><op:operator pos:line="347" pos:column="52">.</op:operator><name pos:line="347" pos:column="53">Enum</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="348" pos:column="17">select <expr><name pos:line="348" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="350" pos:column="13">foreach (<init><decl><type><name pos:line="350" pos:column="22">XElement</name></type> <name pos:line="350" pos:column="31">enm</name> <init pos:line="350" pos:column="35">in <expr><name pos:line="350" pos:column="38">enums</name></expr></init></decl></init>)
            <block pos:line="351" pos:column="13">{
                <comment type="line" pos:line="352" pos:column="17">//SrcML doesn't seem to parse access level specifiers for enums, so just pretend they are all public for now</comment>
                <decl_stmt><decl><type><name pos:line="353" pos:column="17">AccessLevel</name></type> <name pos:line="353" pos:column="29">accessLevel</name> =<init pos:line="353" pos:column="42"> <expr><name><name pos:line="353" pos:column="43">AccessLevel</name><op:operator pos:line="353" pos:column="54">.</op:operator><name pos:line="353" pos:column="55">Public</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="355" pos:column="17">string</name></type> <name pos:line="355" pos:column="24">name</name> =<init pos:line="355" pos:column="30"> <expr><lit:literal type="string" pos:line="355" pos:column="31">""</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="356" pos:column="17">int</name></type> <name pos:line="356" pos:column="21">definitionLineNumber</name> =<init pos:line="356" pos:column="43"> <expr><lit:literal type="number" pos:line="356" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="357" pos:column="17">if <condition pos:line="357" pos:column="20">(<expr><call><name><name pos:line="357" pos:column="21">enm</name><op:operator pos:line="357" pos:column="24">.</op:operator><name pos:line="357" pos:column="25">Element</name></name><argument_list pos:line="357" pos:column="32">(<argument><expr><name><name pos:line="357" pos:column="33">SRC</name><op:operator pos:line="357" pos:column="36">.</op:operator><name pos:line="357" pos:column="37">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="43">!=</op:operator> <name pos:line="357" pos:column="46">null</name></expr>)</condition><then pos:line="357" pos:column="51">
                <block pos:line="358" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="359" pos:column="21">SrcMLParsingUtils</name><op:operator pos:line="359" pos:column="38">.</op:operator><name pos:line="359" pos:column="39">ParseNameAndLineNumber</name></name><argument_list pos:line="359" pos:column="61">(<argument><expr><name pos:line="359" pos:column="62">enm</name></expr></argument><op:operator pos:line="359" pos:column="65">,</op:operator> <argument><specifier pos:line="359" pos:column="67">out</specifier> <expr><name pos:line="359" pos:column="71">name</name></expr></argument><op:operator pos:line="359" pos:column="75">,</op:operator> <argument><specifier pos:line="359" pos:column="77">out</specifier> <expr><name pos:line="359" pos:column="81">definitionLineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="361" pos:column="17">else
                <block pos:line="362" pos:column="17">{
                    <comment type="line" pos:line="363" pos:column="21">//enums in C++ aren't required to have a name</comment>
                    <expr_stmt><expr><name pos:line="364" pos:column="21">name</name> <op:operator pos:line="364" pos:column="26">=</op:operator> <name><name pos:line="364" pos:column="28">ProgramElement</name><op:operator pos:line="364" pos:column="42">.</op:operator><name pos:line="364" pos:column="43">UndefinedName</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="365" pos:column="21">definitionLineNumber</name> <op:operator pos:line="365" pos:column="42">=</op:operator> <call><name><name pos:line="365" pos:column="44">Int32</name><op:operator pos:line="365" pos:column="49">.</op:operator><name pos:line="365" pos:column="50">Parse</name></name><argument_list pos:line="365" pos:column="55">(<argument><expr><call><name><name pos:line="365" pos:column="56">enm</name><op:operator pos:line="365" pos:column="59">.</op:operator><name pos:line="365" pos:column="60">Attribute</name></name><argument_list pos:line="365" pos:column="69">(<argument><expr><name><name pos:line="365" pos:column="70">POS</name><op:operator pos:line="365" pos:column="73">.</op:operator><name pos:line="365" pos:column="74">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="365" pos:column="79">.</op:operator><name pos:line="365" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line" pos:line="368" pos:column="17">//parse namespace</comment>
                <decl_stmt><decl><type><name><name pos:line="369" pos:column="17">IEnumerable</name><argument_list pos:line="369" pos:column="28">&lt;<argument><name pos:line="369" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="369" pos:column="39">ownerNamespaces</name> =<init pos:line="369" pos:column="56">
                    <expr><linq><from pos:line="370" pos:column="21">from <expr><name pos:line="370" pos:column="26">el</name></expr> <in pos:line="370" pos:column="29">in <expr><call><name><name pos:line="370" pos:column="32">enm</name><op:operator pos:line="370" pos:column="35">.</op:operator><name pos:line="370" pos:column="36">Ancestors</name></name><argument_list pos:line="370" pos:column="45">(<argument><expr><name><name pos:line="370" pos:column="46">SRC</name><op:operator pos:line="370" pos:column="49">.</op:operator><name pos:line="370" pos:column="50">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="371" pos:column="21">where <expr><call><name><name pos:line="371" pos:column="27">el</name><op:operator pos:line="371" pos:column="29">.</op:operator><name pos:line="371" pos:column="30">Element</name></name><argument_list pos:line="371" pos:column="37">(<argument><expr><name><name pos:line="371" pos:column="38">SRC</name><op:operator pos:line="371" pos:column="41">.</op:operator><name pos:line="371" pos:column="42">Type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="371" pos:column="48">!=</op:operator> <name pos:line="371" pos:column="51">null</name> <op:operator pos:line="371" pos:column="56">&amp;&amp;</op:operator>
                            <call><name><name pos:line="372" pos:column="29">el</name><op:operator pos:line="372" pos:column="31">.</op:operator><name pos:line="372" pos:column="32">Element</name></name><argument_list pos:line="372" pos:column="39">(<argument><expr><name><name pos:line="372" pos:column="40">SRC</name><op:operator pos:line="372" pos:column="43">.</op:operator><name pos:line="372" pos:column="44">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="372" pos:column="49">.</op:operator><call><name pos:line="372" pos:column="50">Element</name><argument_list pos:line="372" pos:column="57">(<argument><expr><name><name pos:line="372" pos:column="58">SRC</name><op:operator pos:line="372" pos:column="61">.</op:operator><name pos:line="372" pos:column="62">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="372" pos:column="68">!=</op:operator> <name pos:line="372" pos:column="71">null</name> <op:operator pos:line="372" pos:column="76">&amp;&amp;</op:operator>
                            <call><name><name pos:line="373" pos:column="29">el</name><op:operator pos:line="373" pos:column="31">.</op:operator><name pos:line="373" pos:column="32">Element</name></name><argument_list pos:line="373" pos:column="39">(<argument><expr><name><name pos:line="373" pos:column="40">SRC</name><op:operator pos:line="373" pos:column="43">.</op:operator><name pos:line="373" pos:column="44">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="373" pos:column="49">.</op:operator><call><name pos:line="373" pos:column="50">Element</name><argument_list pos:line="373" pos:column="57">(<argument><expr><name><name pos:line="373" pos:column="58">SRC</name><op:operator pos:line="373" pos:column="61">.</op:operator><name pos:line="373" pos:column="62">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="373" pos:column="67">.</op:operator><name pos:line="373" pos:column="68">Value</name> <op:operator pos:line="373" pos:column="74">==</op:operator> <lit:literal type="string" pos:line="373" pos:column="77">"namespace"</lit:literal></expr></where>
                    <select pos:line="374" pos:column="21">select <expr><name pos:line="374" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="375" pos:column="17">string</name></type> <name pos:line="375" pos:column="24">namespaceName</name> =<init pos:line="375" pos:column="39"> <expr><name><name pos:line="375" pos:column="40">String</name><op:operator pos:line="375" pos:column="46">.</op:operator><name pos:line="375" pos:column="47">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="376" pos:column="17">foreach (<init><decl><type><name pos:line="376" pos:column="26">XElement</name></type> <name pos:line="376" pos:column="35">ownerNamespace</name> <init pos:line="376" pos:column="50">in <expr><name pos:line="376" pos:column="53">ownerNamespaces</name></expr></init></decl></init>)
                <block pos:line="377" pos:column="17">{
                    <foreach pos:line="378" pos:column="21">foreach(<init><expr><name pos:line="378" pos:column="29">XElement</name> <name pos:line="378" pos:column="38">spc</name> <op:operator pos:line="378" pos:column="42">in</op:operator> <call><name><name pos:line="378" pos:column="45">ownerNamespace</name><op:operator pos:line="378" pos:column="59">.</op:operator><name pos:line="378" pos:column="60">Elements</name></name><argument_list pos:line="378" pos:column="68">(<argument><expr><name><name pos:line="378" pos:column="69">SRC</name><op:operator pos:line="378" pos:column="72">.</op:operator><name pos:line="378" pos:column="73">Name</name></name></expr></argument>)</argument_list></call></expr></init>)
                    <block pos:line="379" pos:column="21">{
                        <expr_stmt><expr><name pos:line="380" pos:column="25">namespaceName</name> <op:operator pos:line="380" pos:column="39">+=</op:operator> <name><name pos:line="380" pos:column="42">spc</name><op:operator pos:line="380" pos:column="45">.</op:operator><name pos:line="380" pos:column="46">Value</name></name> <op:operator pos:line="380" pos:column="52">+</op:operator> <lit:literal type="string" pos:line="380" pos:column="54">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="383" pos:column="17">namespaceName</name> <op:operator pos:line="383" pos:column="31">=</op:operator> <call><name><name pos:line="383" pos:column="33">namespaceName</name><op:operator pos:line="383" pos:column="46">.</op:operator><name pos:line="383" pos:column="47">TrimEnd</name></name><argument_list pos:line="383" pos:column="54">()</argument_list></call></expr>;</expr_stmt>


                <comment type="line" pos:line="386" pos:column="17">//parse values</comment>
                <decl_stmt><decl><type><name pos:line="387" pos:column="17">XElement</name></type> <name pos:line="387" pos:column="26">block</name> =<init pos:line="387" pos:column="33"> <expr><call><name><name pos:line="387" pos:column="34">enm</name><op:operator pos:line="387" pos:column="37">.</op:operator><name pos:line="387" pos:column="38">Element</name></name><argument_list pos:line="387" pos:column="45">(<argument><expr><name><name pos:line="387" pos:column="46">SRC</name><op:operator pos:line="387" pos:column="49">.</op:operator><name pos:line="387" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="388" pos:column="17">string</name></type> <name pos:line="388" pos:column="24">values</name> =<init pos:line="388" pos:column="32"> <expr><name><name pos:line="388" pos:column="33">String</name><op:operator pos:line="388" pos:column="39">.</op:operator><name pos:line="388" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="389" pos:column="17">if <condition pos:line="389" pos:column="20">(<expr><name pos:line="389" pos:column="21">block</name> <op:operator pos:line="389" pos:column="27">!=</op:operator> <name pos:line="389" pos:column="30">null</name></expr>)</condition><then pos:line="389" pos:column="35">
                <block pos:line="390" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="391" pos:column="21">IEnumerable</name><argument_list pos:line="391" pos:column="32">&lt;<argument><name pos:line="391" pos:column="33">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="391" pos:column="43">exprs</name> =<init pos:line="391" pos:column="50">
                        <expr><linq><from pos:line="392" pos:column="25">from <expr><name pos:line="392" pos:column="30">el</name></expr> <in pos:line="392" pos:column="33">in <expr><call><name><name pos:line="392" pos:column="36">block</name><op:operator pos:line="392" pos:column="41">.</op:operator><name pos:line="392" pos:column="42">Descendants</name></name><argument_list pos:line="392" pos:column="53">(<argument><expr><name><name pos:line="392" pos:column="54">SRC</name><op:operator pos:line="392" pos:column="57">.</op:operator><name pos:line="392" pos:column="58">Expression</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="393" pos:column="25">select <expr><name pos:line="393" pos:column="32">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="394" pos:column="21">foreach (<init><decl><type><name pos:line="394" pos:column="30">XElement</name></type> <name pos:line="394" pos:column="39">expr</name> <init pos:line="394" pos:column="44">in <expr><name pos:line="394" pos:column="47">exprs</name></expr></init></decl></init>)
                    <block pos:line="395" pos:column="21">{
                        <decl_stmt><decl><type><name><name pos:line="396" pos:column="25">IEnumerable</name><argument_list pos:line="396" pos:column="36">&lt;<argument><name pos:line="396" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="396" pos:column="47">enames</name> =<init pos:line="396" pos:column="55"> <expr><call><name><name pos:line="396" pos:column="56">expr</name><op:operator pos:line="396" pos:column="60">.</op:operator><name pos:line="396" pos:column="61">Elements</name></name><argument_list pos:line="396" pos:column="69">(<argument><expr><name><name pos:line="396" pos:column="70">SRC</name><op:operator pos:line="396" pos:column="73">.</op:operator><name pos:line="396" pos:column="74">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <foreach pos:line="397" pos:column="25">foreach (<init><decl><type><name pos:line="397" pos:column="34">XElement</name></type> <name pos:line="397" pos:column="43">ename</name> <init pos:line="397" pos:column="49">in <expr><name pos:line="397" pos:column="52">enames</name></expr></init></decl></init>)
                        <block pos:line="398" pos:column="25">{
                            <expr_stmt><expr><name pos:line="399" pos:column="29">values</name> <op:operator pos:line="399" pos:column="36">+=</op:operator> <name><name pos:line="399" pos:column="39">ename</name><op:operator pos:line="399" pos:column="44">.</op:operator><name pos:line="399" pos:column="45">Value</name></name> <op:operator pos:line="399" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="399" pos:column="53">" "</lit:literal></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="402" pos:column="21">values</name> <op:operator pos:line="402" pos:column="28">=</op:operator> <call><name><name pos:line="402" pos:column="30">values</name><op:operator pos:line="402" pos:column="36">.</op:operator><name pos:line="402" pos:column="37">TrimEnd</name></name><argument_list pos:line="402" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="405" pos:column="17">string</name></type> <name pos:line="405" pos:column="24">fullFilePath</name> =<init pos:line="405" pos:column="38"> <expr><call><name><name pos:line="405" pos:column="39">System</name><op:operator pos:line="405" pos:column="45">.</op:operator><name pos:line="405" pos:column="46">IO</name><op:operator pos:line="405" pos:column="48">.</op:operator><name pos:line="405" pos:column="49">Path</name><op:operator pos:line="405" pos:column="53">.</op:operator><name pos:line="405" pos:column="54">GetFullPath</name></name><argument_list pos:line="405" pos:column="65">(<argument><expr><name pos:line="405" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="406" pos:column="17">string</name></type> <name pos:line="406" pos:column="24">source</name> =<init pos:line="406" pos:column="32"> <expr><call><name><name pos:line="406" pos:column="33">SrcMLParsingUtils</name><op:operator pos:line="406" pos:column="50">.</op:operator><name pos:line="406" pos:column="51">RetrieveSource</name></name><argument_list pos:line="406" pos:column="65">(<argument><expr><name pos:line="406" pos:column="66">enm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="408" pos:column="17">programElements</name><op:operator pos:line="408" pos:column="32">.</op:operator><name pos:line="408" pos:column="33">Add</name></name><argument_list pos:line="408" pos:column="36">(<argument><expr><op:operator pos:line="408" pos:column="37">new</op:operator> <call><name pos:line="408" pos:column="41">EnumElement</name><argument_list pos:line="408" pos:column="52">(<argument><expr><name pos:line="408" pos:column="53">name</name></expr></argument><op:operator pos:line="408" pos:column="57">,</op:operator> <argument><expr><name pos:line="408" pos:column="59">definitionLineNumber</name></expr></argument><op:operator pos:line="408" pos:column="79">,</op:operator> <argument><expr><name pos:line="408" pos:column="81">fullFilePath</name></expr></argument><op:operator pos:line="408" pos:column="93">,</op:operator> <argument><expr><name pos:line="408" pos:column="95">source</name></expr></argument><op:operator pos:line="408" pos:column="101">,</op:operator> <argument><expr><name pos:line="408" pos:column="103">accessLevel</name></expr></argument><op:operator pos:line="408" pos:column="114">,</op:operator> <argument><expr><name pos:line="408" pos:column="116">namespaceName</name></expr></argument><op:operator pos:line="408" pos:column="129">,</op:operator> <argument><expr><name pos:line="408" pos:column="131">values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="412" pos:column="9">public</specifier> <specifier pos:line="412" pos:column="16">static</specifier> <name pos:line="412" pos:column="23">StructElement</name></type> <name pos:line="412" pos:column="37">RetrieveStructElement</name><parameter_list pos:line="412" pos:column="58">(<param><decl><type><name pos:line="412" pos:column="59">XElement</name></type> <name pos:line="412" pos:column="68">field</name></decl></param><op:operator pos:line="412" pos:column="73">,</op:operator> <param><decl><type><name><name pos:line="412" pos:column="75">List</name><argument_list pos:line="412" pos:column="79">&lt;<argument><name pos:line="412" pos:column="80">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="412" pos:column="96">programElements</name></decl></param>)</parameter_list>
        <block pos:line="413" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="414" pos:column="13">IEnumerable</name><argument_list pos:line="414" pos:column="24">&lt;<argument><name pos:line="414" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="414" pos:column="35">ownerStructs</name> =<init pos:line="414" pos:column="49">
                <expr><linq><from pos:line="415" pos:column="17">from <expr><name pos:line="415" pos:column="22">el</name></expr> <in pos:line="415" pos:column="25">in <expr><call><name><name pos:line="415" pos:column="28">field</name><op:operator pos:line="415" pos:column="33">.</op:operator><name pos:line="415" pos:column="34">Ancestors</name></name><argument_list pos:line="415" pos:column="43">(<argument><expr><name><name pos:line="415" pos:column="44">SRC</name><op:operator pos:line="415" pos:column="47">.</op:operator><name pos:line="415" pos:column="48">Struct</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="416" pos:column="17">select <expr><name pos:line="416" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <if pos:line="417" pos:column="13">if <condition pos:line="417" pos:column="16">(<expr><call><name><name pos:line="417" pos:column="17">ownerStructs</name><op:operator pos:line="417" pos:column="29">.</op:operator><name pos:line="417" pos:column="30">Count</name></name><argument_list pos:line="417" pos:column="35">()</argument_list></call> <op:operator pos:line="417" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="417" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="417" pos:column="42">
            <block pos:line="418" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="419" pos:column="17">XElement</name></type> <name pos:line="419" pos:column="26">name</name> =<init pos:line="419" pos:column="32"> <expr><call><name><name pos:line="419" pos:column="33">ownerStructs</name><op:operator pos:line="419" pos:column="45">.</op:operator><name pos:line="419" pos:column="46">First</name></name><argument_list pos:line="419" pos:column="51">()</argument_list></call><op:operator pos:line="419" pos:column="53">.</op:operator><call><name pos:line="419" pos:column="54">Element</name><argument_list pos:line="419" pos:column="61">(<argument><expr><name><name pos:line="419" pos:column="62">SRC</name><op:operator pos:line="419" pos:column="65">.</op:operator><name pos:line="419" pos:column="66">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="420" pos:column="17">string</name></type> <name pos:line="420" pos:column="24">ownerStructName</name> =<init pos:line="420" pos:column="41"> <expr><name><name pos:line="420" pos:column="42">name</name><op:operator pos:line="420" pos:column="46">.</op:operator><name pos:line="420" pos:column="47">Value</name></name></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="421" pos:column="17">//now find the StructElement object corresponding to ownerClassName, since those should have been gen'd by now</comment>
                <decl_stmt><decl><type><name pos:line="422" pos:column="17">ProgramElement</name></type> <name pos:line="422" pos:column="32">ownerStruct</name> =<init pos:line="422" pos:column="45"> <expr><call><name><name pos:line="422" pos:column="46">programElements</name><op:operator pos:line="422" pos:column="61">.</op:operator><name pos:line="422" pos:column="62">Find</name></name><argument_list pos:line="422" pos:column="66">(<argument><expr><name pos:line="422" pos:column="67">element</name> <op:operator pos:line="422" pos:column="75">=&gt;</op:operator> <name pos:line="422" pos:column="78">element</name> <op:operator pos:line="422" pos:column="86">is</op:operator> <name pos:line="422" pos:column="89">StructElement</name> <op:operator pos:line="422" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="422" pos:column="106">(</op:operator><op:operator pos:line="422" pos:column="107">(</op:operator><name pos:line="422" pos:column="108">StructElement</name><op:operator pos:line="422" pos:column="121">)</op:operator><name pos:line="422" pos:column="122">element</name><op:operator pos:line="422" pos:column="129">)</op:operator><op:operator pos:line="422" pos:column="130">.</op:operator><name pos:line="422" pos:column="131">Name</name> <op:operator pos:line="422" pos:column="136">==</op:operator> <name pos:line="422" pos:column="139">ownerStructName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="423" pos:column="17">return <expr><name pos:line="423" pos:column="24">ownerStruct</name> <op:operator pos:line="423" pos:column="36">as</op:operator> <name pos:line="423" pos:column="39">StructElement</name></expr>;</return>
            }</block></then>
            <else pos:line="425" pos:column="13">else
            <block pos:line="426" pos:column="13">{
                <comment type="line" pos:line="427" pos:column="17">//field is not contained by a class</comment>
                <return pos:line="428" pos:column="17">return <expr><name pos:line="428" pos:column="24">null</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="432" pos:column="9">private</specifier> <name pos:line="432" pos:column="17">AccessLevel</name></type> <name pos:line="432" pos:column="29">RetrieveCppAccessLevel</name><parameter_list pos:line="432" pos:column="51">(<param><decl><type><name pos:line="432" pos:column="52">XElement</name></type> <name pos:line="432" pos:column="61">field</name></decl></param>)</parameter_list>
        <block pos:line="433" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="434" pos:column="13">AccessLevel</name></type> <name pos:line="434" pos:column="25">accessLevel</name> =<init pos:line="434" pos:column="38"> <expr><name><name pos:line="434" pos:column="39">AccessLevel</name><op:operator pos:line="434" pos:column="50">.</op:operator><name pos:line="434" pos:column="51">Protected</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="436" pos:column="13">XElement</name></type> <name pos:line="436" pos:column="22">parent</name> =<init pos:line="436" pos:column="30"> <expr><name><name pos:line="436" pos:column="31">field</name><op:operator pos:line="436" pos:column="36">.</op:operator><name pos:line="436" pos:column="37">Parent</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="437" pos:column="13">if <condition pos:line="437" pos:column="16">(<expr><name><name pos:line="437" pos:column="17">parent</name><op:operator pos:line="437" pos:column="23">.</op:operator><name pos:line="437" pos:column="24">Name</name></name> <op:operator pos:line="437" pos:column="29">==</op:operator> <op:operator pos:line="437" pos:column="32">(</op:operator><name><name pos:line="437" pos:column="33">SRC</name><op:operator pos:line="437" pos:column="36">.</op:operator><name pos:line="437" pos:column="37">Public</name></name><op:operator pos:line="437" pos:column="43">)</op:operator></expr>)</condition><then pos:line="437" pos:column="45">
            <block pos:line="438" pos:column="13">{
                <expr_stmt><expr><name pos:line="439" pos:column="17">accessLevel</name> <op:operator pos:line="439" pos:column="29">=</op:operator> <name><name pos:line="439" pos:column="31">AccessLevel</name><op:operator pos:line="439" pos:column="42">.</op:operator><name pos:line="439" pos:column="43">Public</name></name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="441" pos:column="13">else <if pos:line="441" pos:column="18">if <condition pos:line="441" pos:column="21">(<expr><name><name pos:line="441" pos:column="22">parent</name><op:operator pos:line="441" pos:column="28">.</op:operator><name pos:line="441" pos:column="29">Name</name></name> <op:operator pos:line="441" pos:column="34">==</op:operator> <op:operator pos:line="441" pos:column="37">(</op:operator><name><name pos:line="441" pos:column="38">SRC</name><op:operator pos:line="441" pos:column="41">.</op:operator><name pos:line="441" pos:column="42">Private</name></name><op:operator pos:line="441" pos:column="49">)</op:operator></expr>)</condition><then pos:line="441" pos:column="51">
            <block pos:line="442" pos:column="13">{
                <expr_stmt><expr><name pos:line="443" pos:column="17">accessLevel</name> <op:operator pos:line="443" pos:column="29">=</op:operator> <name><name pos:line="443" pos:column="31">AccessLevel</name><op:operator pos:line="443" pos:column="42">.</op:operator><name pos:line="443" pos:column="43">Private</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <return pos:line="446" pos:column="13">return <expr><name pos:line="446" pos:column="20">accessLevel</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="449" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="450" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="451" pos:column="9">/// For debugging.</comment>
        <comment type="line" pos:line="452" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="453" pos:column="9">/// &lt;param name="logFile"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="454" pos:column="9">/// &lt;param name="str"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="455" pos:column="9">private</specifier> <name pos:line="455" pos:column="17">void</name></type> <name pos:line="455" pos:column="22">writeLog</name><parameter_list pos:line="455" pos:column="30">(<param><decl><type><name pos:line="455" pos:column="31">string</name></type> <name pos:line="455" pos:column="38">str</name></decl></param>)</parameter_list>
        <block pos:line="456" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="457" pos:column="13">FileLogger</name><op:operator pos:line="457" pos:column="23">.</op:operator><name pos:line="457" pos:column="24">DefaultLogger</name><op:operator pos:line="457" pos:column="37">.</op:operator><name pos:line="457" pos:column="38">Info</name></name><argument_list pos:line="457" pos:column="42">(<argument><expr><name pos:line="457" pos:column="43">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="line" pos:line="459" pos:column="9">// End of code changes</comment>
    }</block></class>
}</block></namespace>
</unit>
