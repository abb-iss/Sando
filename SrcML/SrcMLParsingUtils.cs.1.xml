<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser\SrcMLParsingUtils.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Xml</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Linq</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Extensions</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">Logging</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">ABB</name><op:operator pos:line="11" pos:column="10">.</op:operator><name pos:line="11" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Sando</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Parser</name></name>
<block pos:line="14" pos:column="1">{
	<class><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> class <name pos:line="15" pos:column="29">SrcMLParsingUtils</name>
	<block pos:line="16" pos:column="9">{
		<comment type="line" pos:line="17" pos:column="17">//private static readonly XNamespace SourceNamespace = "http://www.sdml.info/srcML/src";</comment>
		<comment type="line" pos:line="18" pos:column="17">//private static readonly XNamespace PositionNamespace = "http://www.sdml.info/srcML/position";</comment>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">static</specifier> <name pos:line="20" pos:column="23">void</name></type> <name pos:line="20" pos:column="28">ParseFields</name><parameter_list pos:line="20" pos:column="39">(<param><decl><type><name><name pos:line="20" pos:column="40">List</name><argument_list pos:line="20" pos:column="44">&lt;<argument><name pos:line="20" pos:column="45">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="61">programElements</name></decl></param><op:operator pos:line="20" pos:column="76">,</op:operator> <param><decl><type><name pos:line="20" pos:column="78">XElement</name></type> <name pos:line="20" pos:column="87">elements</name></decl></param><op:operator pos:line="20" pos:column="95">,</op:operator> <param><decl><type><name pos:line="20" pos:column="97">string</name></type> <name pos:line="20" pos:column="104">fileName</name></decl></param>)</parameter_list>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="22" pos:column="13">IEnumerable</name><argument_list pos:line="22" pos:column="24">&lt;<argument><name pos:line="22" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="35">fields</name> =<init pos:line="22" pos:column="43">
                <expr><linq><from pos:line="23" pos:column="17">from <expr><name pos:line="23" pos:column="22">el</name></expr> <in pos:line="23" pos:column="25">in <expr><call><name><name pos:line="23" pos:column="28">elements</name><op:operator pos:line="23" pos:column="36">.</op:operator><name pos:line="23" pos:column="37">Descendants</name></name><argument_list pos:line="23" pos:column="48">(<argument><expr><name><name pos:line="23" pos:column="49">SRC</name><op:operator pos:line="23" pos:column="52">.</op:operator><name pos:line="23" pos:column="53">Class</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="24" pos:column="17">select <expr><call><name><name pos:line="24" pos:column="24">el</name><op:operator pos:line="24" pos:column="26">.</op:operator><name pos:line="24" pos:column="27">Element</name></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name><name pos:line="24" pos:column="35">SRC</name><op:operator pos:line="24" pos:column="38">.</op:operator><name pos:line="24" pos:column="39">Block</name></name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="26" pos:column="13">fields</name> <op:operator pos:line="26" pos:column="20">=</op:operator>
                <linq><from pos:line="27" pos:column="17">from <expr><name pos:line="27" pos:column="22">el</name></expr> <in pos:line="27" pos:column="25">in <expr><call><name><name pos:line="27" pos:column="28">fields</name><op:operator pos:line="27" pos:column="34">.</op:operator><name pos:line="27" pos:column="35">Elements</name></name><argument_list pos:line="27" pos:column="43">(<argument><expr><name><name pos:line="27" pos:column="44">SRC</name><op:operator pos:line="27" pos:column="47">.</op:operator><name pos:line="27" pos:column="48">DeclarationStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="69">.</op:operator><call><name pos:line="27" pos:column="70">Elements</name><argument_list pos:line="27" pos:column="78">(<argument><expr><name><name pos:line="27" pos:column="79">SRC</name><op:operator pos:line="27" pos:column="82">.</op:operator><name pos:line="27" pos:column="83">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <where pos:line="28" pos:column="17">where <expr><call><name><name pos:line="28" pos:column="23">el</name><op:operator pos:line="28" pos:column="25">.</op:operator><name pos:line="28" pos:column="26">Element</name></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name><name pos:line="28" pos:column="34">SRC</name><op:operator pos:line="28" pos:column="37">.</op:operator><name pos:line="28" pos:column="38">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="28" pos:column="44">!=</op:operator> <name pos:line="28" pos:column="47">null</name> <op:operator pos:line="28" pos:column="52">&amp;&amp;</op:operator>
                        <call><name><name pos:line="29" pos:column="25">el</name><op:operator pos:line="29" pos:column="27">.</op:operator><name pos:line="29" pos:column="28">Element</name></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name><name pos:line="29" pos:column="36">SRC</name><op:operator pos:line="29" pos:column="39">.</op:operator><name pos:line="29" pos:column="40">Type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="46">!=</op:operator> <name pos:line="29" pos:column="49">null</name> <op:operator pos:line="29" pos:column="54">&amp;&amp;</op:operator>
                        <op:operator pos:line="30" pos:column="25">(</op:operator>
                            <op:operator pos:line="31" pos:column="29">(</op:operator><call><name><name pos:line="31" pos:column="30">el</name><op:operator pos:line="31" pos:column="32">.</op:operator><name pos:line="31" pos:column="33">Element</name></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name><name pos:line="31" pos:column="41">SRC</name><op:operator pos:line="31" pos:column="44">.</op:operator><name pos:line="31" pos:column="45">Init</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="31" pos:column="51">!=</op:operator> <name pos:line="31" pos:column="54">null</name> <op:operator pos:line="31" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="31" pos:column="62">el</name><op:operator pos:line="31" pos:column="64">.</op:operator><name pos:line="31" pos:column="65">Elements</name></name><argument_list pos:line="31" pos:column="73">()</argument_list></call><op:operator pos:line="31" pos:column="75">.</op:operator><call><name pos:line="31" pos:column="76">Count</name><argument_list pos:line="31" pos:column="81">()</argument_list></call> <op:operator pos:line="31" pos:column="84">==</op:operator> <lit:literal type="number" pos:line="31" pos:column="87">3</lit:literal><op:operator pos:line="31" pos:column="88">)</op:operator> <op:operator pos:line="31" pos:column="90">||</op:operator>
                            <call><name><name pos:line="32" pos:column="29">el</name><op:operator pos:line="32" pos:column="31">.</op:operator><name pos:line="32" pos:column="32">Elements</name></name><argument_list pos:line="32" pos:column="40">()</argument_list></call><op:operator pos:line="32" pos:column="42">.</op:operator><call><name pos:line="32" pos:column="43">Count</name><argument_list pos:line="32" pos:column="48">()</argument_list></call> <op:operator pos:line="32" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="32" pos:column="54">2</lit:literal>
                        <op:operator pos:line="33" pos:column="25">)</op:operator></expr></where>
                <select pos:line="34" pos:column="17">select <expr><name pos:line="34" pos:column="24">el</name></expr></select></linq></expr>;</expr_stmt>

            <foreach pos:line="36" pos:column="13">foreach (<init><decl><type><name pos:line="36" pos:column="22">XElement</name></type> <name pos:line="36" pos:column="31">field</name> <init pos:line="36" pos:column="37">in <expr><name pos:line="36" pos:column="40">fields</name></expr></init></decl></init>)
            <block pos:line="37" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">string</name></type> <name pos:line="38" pos:column="24">name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="39" pos:column="17">int</name></type> <name pos:line="39" pos:column="21">definitionLineNumber</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="40" pos:column="17">SrcMLParsingUtils</name><op:operator pos:line="40" pos:column="34">.</op:operator><name pos:line="40" pos:column="35">ParseNameAndLineNumber</name></name><argument_list pos:line="40" pos:column="57">(<argument><expr><name pos:line="40" pos:column="58">field</name></expr></argument><op:operator pos:line="40" pos:column="63">,</op:operator> <argument><specifier pos:line="40" pos:column="65">out</specifier> <expr><name pos:line="40" pos:column="69">name</name></expr></argument><op:operator pos:line="40" pos:column="73">,</op:operator> <argument><specifier pos:line="40" pos:column="75">out</specifier> <expr><name pos:line="40" pos:column="79">definitionLineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="42" pos:column="17">ClassElement</name></type> <name pos:line="42" pos:column="30">classElement</name> =<init pos:line="42" pos:column="44"> <expr><call><name pos:line="42" pos:column="45">RetrieveClassElement</name><argument_list pos:line="42" pos:column="65">(<argument><expr><name pos:line="42" pos:column="66">field</name></expr></argument><op:operator pos:line="42" pos:column="71">,</op:operator> <argument><expr><name pos:line="42" pos:column="73">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">Guid</name></type> <name pos:line="43" pos:column="22">classId</name> =<init pos:line="43" pos:column="31"> <expr><name pos:line="43" pos:column="32">classElement</name> <op:operator pos:line="43" pos:column="45">!=</op:operator> <name pos:line="43" pos:column="48">null</name> <op:operator pos:line="43" pos:column="53">?</op:operator> <name><name pos:line="43" pos:column="55">classElement</name><op:operator pos:line="43" pos:column="67">.</op:operator><name pos:line="43" pos:column="68">Id</name></name> <op:operator pos:line="43" pos:column="71">:</op:operator> <name><name pos:line="43" pos:column="73">Guid</name><op:operator pos:line="43" pos:column="77">.</op:operator><name pos:line="43" pos:column="78">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="44" pos:column="17">string</name></type> <name pos:line="44" pos:column="24">className</name> =<init pos:line="44" pos:column="35"> <expr><name pos:line="44" pos:column="36">classElement</name> <op:operator pos:line="44" pos:column="49">!=</op:operator> <name pos:line="44" pos:column="52">null</name> <op:operator pos:line="44" pos:column="57">?</op:operator> <name><name pos:line="44" pos:column="59">classElement</name><op:operator pos:line="44" pos:column="71">.</op:operator><name pos:line="44" pos:column="72">Name</name></name> <op:operator pos:line="44" pos:column="77">:</op:operator> <name><name pos:line="44" pos:column="79">String</name><op:operator pos:line="44" pos:column="85">.</op:operator><name pos:line="44" pos:column="86">Empty</name></name></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="46" pos:column="17">//parse access level and type</comment>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">typeElement</name> =<init pos:line="47" pos:column="34"> <expr><call><name><name pos:line="47" pos:column="35">field</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">Element</name></name><argument_list pos:line="47" pos:column="48">(<argument><expr><name><name pos:line="47" pos:column="49">SRC</name><op:operator pos:line="47" pos:column="52">.</op:operator><name pos:line="47" pos:column="53">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">AccessLevel</name></type> <name pos:line="48" pos:column="29">accessLevel</name> =<init pos:line="48" pos:column="42"> <expr><call><name pos:line="48" pos:column="43">RetrieveAccessLevel</name><argument_list pos:line="48" pos:column="62">(<argument><expr><name pos:line="48" pos:column="63">typeElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name pos:line="50" pos:column="17">IEnumerable</name><argument_list pos:line="50" pos:column="28">&lt;<argument><name pos:line="50" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="50" pos:column="39">types</name> =<init pos:line="50" pos:column="46"> <expr><call><name><name pos:line="50" pos:column="47">typeElement</name><op:operator pos:line="50" pos:column="58">.</op:operator><name pos:line="50" pos:column="59">Elements</name></name><argument_list pos:line="50" pos:column="67">(<argument><expr><name><name pos:line="50" pos:column="68">SRC</name><op:operator pos:line="50" pos:column="71">.</op:operator><name pos:line="50" pos:column="72">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="51" pos:column="17">string</name></type> <name pos:line="51" pos:column="24">fieldType</name> =<init pos:line="51" pos:column="35"> <expr><name><name pos:line="51" pos:column="36">String</name><op:operator pos:line="51" pos:column="42">.</op:operator><name pos:line="51" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="52" pos:column="17">foreach (<init><decl><type><name pos:line="52" pos:column="26">XElement</name></type> <name pos:line="52" pos:column="35">type</name> <init pos:line="52" pos:column="40">in <expr><name pos:line="52" pos:column="43">types</name></expr></init></decl></init>)
                <block pos:line="53" pos:column="17">{
                    <expr_stmt><expr><name pos:line="54" pos:column="21">fieldType</name> <op:operator pos:line="54" pos:column="31">+=</op:operator> <name><name pos:line="54" pos:column="34">type</name><op:operator pos:line="54" pos:column="38">.</op:operator><name pos:line="54" pos:column="39">Value</name></name> <op:operator pos:line="54" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="54" pos:column="47">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="56" pos:column="17">fieldType</name> <op:operator pos:line="56" pos:column="27">=</op:operator> <call><name><name pos:line="56" pos:column="29">fieldType</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">TrimEnd</name></name><argument_list pos:line="56" pos:column="46">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="58" pos:column="17">string</name></type> <name pos:line="58" pos:column="24">initialValue</name> =<init pos:line="58" pos:column="38"> <expr><name><name pos:line="58" pos:column="39">String</name><op:operator pos:line="58" pos:column="45">.</op:operator><name pos:line="58" pos:column="46">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="59" pos:column="17">XElement</name></type> <name pos:line="59" pos:column="26">initialValueElement</name> =<init pos:line="59" pos:column="47"> <expr><call><name><name pos:line="59" pos:column="48">field</name><op:operator pos:line="59" pos:column="53">.</op:operator><name pos:line="59" pos:column="54">Element</name></name><argument_list pos:line="59" pos:column="61">(<argument><expr><name><name pos:line="59" pos:column="62">SRC</name><op:operator pos:line="59" pos:column="65">.</op:operator><name pos:line="59" pos:column="66">Init</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">initialValueElement</name> <op:operator pos:line="60" pos:column="41">!=</op:operator> <name pos:line="60" pos:column="44">null</name></expr>)</condition><then pos:line="60" pos:column="49">
                    <expr_stmt><expr><name pos:line="61" pos:column="21">initialValue</name> <op:operator pos:line="61" pos:column="34">=</op:operator> <call><name><name pos:line="61" pos:column="36">initialValueElement</name><op:operator pos:line="61" pos:column="55">.</op:operator><name pos:line="61" pos:column="56">Element</name></name><argument_list pos:line="61" pos:column="63">(<argument><expr><name><name pos:line="61" pos:column="64">SRC</name><op:operator pos:line="61" pos:column="67">.</op:operator><name pos:line="61" pos:column="68">Expression</name></name></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="79">.</op:operator><name pos:line="61" pos:column="80">Value</name></expr>;</expr_stmt></then></if>

                <decl_stmt><decl><type><name pos:line="63" pos:column="17">string</name></type> <name pos:line="63" pos:column="24">fullFilePath</name> =<init pos:line="63" pos:column="38"> <expr><call><name><name pos:line="63" pos:column="39">System</name><op:operator pos:line="63" pos:column="45">.</op:operator><name pos:line="63" pos:column="46">IO</name><op:operator pos:line="63" pos:column="48">.</op:operator><name pos:line="63" pos:column="49">Path</name><op:operator pos:line="63" pos:column="53">.</op:operator><name pos:line="63" pos:column="54">GetFullPath</name></name><argument_list pos:line="63" pos:column="65">(<argument><expr><name pos:line="63" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="64" pos:column="17">string</name></type> <name pos:line="64" pos:column="24">snippet</name> =<init pos:line="64" pos:column="33"> <expr><call><name pos:line="64" pos:column="34">RetrieveSource</name><argument_list pos:line="64" pos:column="48">(<argument><expr><name pos:line="64" pos:column="49">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">programElements</name><op:operator pos:line="66" pos:column="32">.</op:operator><name pos:line="66" pos:column="33">Add</name></name><argument_list pos:line="66" pos:column="36">(<argument><expr><op:operator pos:line="66" pos:column="37">new</op:operator> <call><name pos:line="66" pos:column="41">FieldElement</name><argument_list pos:line="66" pos:column="53">(<argument><expr><name pos:line="66" pos:column="54">name</name></expr></argument><op:operator pos:line="66" pos:column="58">,</op:operator> <argument><expr><name pos:line="66" pos:column="60">definitionLineNumber</name></expr></argument><op:operator pos:line="66" pos:column="80">,</op:operator> <argument><expr><name pos:line="66" pos:column="82">fullFilePath</name></expr></argument><op:operator pos:line="66" pos:column="94">,</op:operator> <argument><expr><name pos:line="66" pos:column="96">snippet</name></expr></argument><op:operator pos:line="66" pos:column="103">,</op:operator> <argument><expr><name pos:line="66" pos:column="105">accessLevel</name></expr></argument><op:operator pos:line="66" pos:column="116">,</op:operator> <argument><expr><name pos:line="66" pos:column="118">fieldType</name></expr></argument><op:operator pos:line="66" pos:column="127">,</op:operator> <argument><expr><name pos:line="66" pos:column="129">classId</name></expr></argument><op:operator pos:line="66" pos:column="136">,</op:operator> <argument><expr><name pos:line="66" pos:column="138">className</name></expr></argument><op:operator pos:line="66" pos:column="147">,</op:operator> <argument><expr><name><name pos:line="66" pos:column="149">String</name><op:operator pos:line="66" pos:column="155">.</op:operator><name pos:line="66" pos:column="156">Empty</name></name></expr></argument><op:operator pos:line="66" pos:column="161">,</op:operator> <argument><expr><name pos:line="66" pos:column="163">initialValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

		<function><type><specifier pos:line="70" pos:column="17">public</specifier> <specifier pos:line="70" pos:column="24">static</specifier> <name pos:line="70" pos:column="31">void</name></type> <name pos:line="70" pos:column="36">ParseComments</name><parameter_list pos:line="70" pos:column="49">(<param><decl><type><name><name pos:line="70" pos:column="50">List</name><argument_list pos:line="70" pos:column="54">&lt;<argument><name pos:line="70" pos:column="55">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="71">programElements</name></decl></param><op:operator pos:line="70" pos:column="86">,</op:operator> <param><decl><type><name pos:line="70" pos:column="88">XElement</name></type> <name pos:line="70" pos:column="97">elements</name></decl></param><op:operator pos:line="70" pos:column="105">,</op:operator> <param><decl><type><name pos:line="70" pos:column="107">string</name></type> <name pos:line="70" pos:column="114">fileName</name></decl></param>)</parameter_list>
		<block pos:line="71" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="72" pos:column="25">IEnumerable</name><argument_list pos:line="72" pos:column="36">&lt;<argument><name pos:line="72" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="47">comments</name> =<init pos:line="72" pos:column="57">
				<expr><linq><from pos:line="73" pos:column="33">from <expr><name pos:line="73" pos:column="38">el</name></expr> <in pos:line="73" pos:column="41">in <expr><call><name><name pos:line="73" pos:column="44">elements</name><op:operator pos:line="73" pos:column="52">.</op:operator><name pos:line="73" pos:column="53">Descendants</name></name><argument_list pos:line="73" pos:column="64">(<argument><expr><name><name pos:line="73" pos:column="65">SRC</name><op:operator pos:line="73" pos:column="68">.</op:operator><name pos:line="73" pos:column="69">Comment</name></name></expr></argument>)</argument_list></call></expr></in></from>
				<select pos:line="74" pos:column="33">select <expr><name pos:line="74" pos:column="40">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="76" pos:column="13">List</name><argument_list pos:line="76" pos:column="17">&lt;<argument><name><name pos:line="76" pos:column="18">List</name><argument_list pos:line="76" pos:column="22">&lt;<argument><name pos:line="76" pos:column="23">XElement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="34">commentGroups</name> =<init pos:line="76" pos:column="49"> <expr><op:operator pos:line="76" pos:column="50">new</op:operator> <call><name><name pos:line="76" pos:column="54">List</name><argument_list pos:line="76" pos:column="58">&lt;<argument><name><name pos:line="76" pos:column="59">List</name><argument_list pos:line="76" pos:column="63">&lt;<argument><name pos:line="76" pos:column="64">XElement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="77" pos:column="13">List</name><argument_list pos:line="77" pos:column="17">&lt;<argument><name pos:line="77" pos:column="18">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="28">lastGroup</name> =<init pos:line="77" pos:column="39"> <expr><name pos:line="77" pos:column="40">null</name></expr></init></decl>;</decl_stmt>
		    <foreach pos:line="78" pos:column="21">foreach (<init><decl><type><name pos:line="78" pos:column="30">var</name></type> <name pos:line="78" pos:column="34">aComment</name> <init pos:line="78" pos:column="43">in <expr><name pos:line="78" pos:column="46">comments</name></expr></init></decl></init>)
		    <block pos:line="79" pos:column="21">{
                  <if pos:line="80" pos:column="19">if<condition pos:line="80" pos:column="21">(<expr><name pos:line="80" pos:column="22">lastGroup</name><op:operator pos:line="80" pos:column="31">!=</op:operator><name pos:line="80" pos:column="33">null</name></expr>)</condition><then pos:line="80" pos:column="38">
                  <block pos:line="81" pos:column="19">{
                      <decl_stmt><decl><type><name pos:line="82" pos:column="23">int</name></type> <name pos:line="82" pos:column="27">line</name> =<init pos:line="82" pos:column="33"> <expr><call><name><name pos:line="82" pos:column="34">Int32</name><op:operator pos:line="82" pos:column="39">.</op:operator><name pos:line="82" pos:column="40">Parse</name></name><argument_list pos:line="82" pos:column="45">(<argument><expr><call><name><name pos:line="82" pos:column="46">lastGroup</name><op:operator pos:line="82" pos:column="55">.</op:operator><name pos:line="82" pos:column="56">Last</name></name><argument_list pos:line="82" pos:column="60">()</argument_list></call><op:operator pos:line="82" pos:column="62">.</op:operator><call><name pos:line="82" pos:column="63">Attribute</name><argument_list pos:line="82" pos:column="72">(<argument><expr><name><name pos:line="82" pos:column="73">POS</name><op:operator pos:line="82" pos:column="76">.</op:operator><name pos:line="82" pos:column="77">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="82">.</op:operator><name pos:line="82" pos:column="83">Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <decl_stmt><decl><type><name pos:line="83" pos:column="23">int</name></type> <name pos:line="83" pos:column="27">linenext</name> =<init pos:line="83" pos:column="37"> <expr><call><name><name pos:line="83" pos:column="38">Int32</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">Parse</name></name><argument_list pos:line="83" pos:column="49">(<argument><expr><call><name><name pos:line="83" pos:column="50">aComment</name><op:operator pos:line="83" pos:column="58">.</op:operator><name pos:line="83" pos:column="59">Attribute</name></name><argument_list pos:line="83" pos:column="68">(<argument><expr><name><name pos:line="83" pos:column="69">POS</name><op:operator pos:line="83" pos:column="72">.</op:operator><name pos:line="83" pos:column="73">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="83" pos:column="78">.</op:operator><name pos:line="83" pos:column="79">Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <if pos:line="84" pos:column="23">if<condition pos:line="84" pos:column="25">(<expr><name pos:line="84" pos:column="26">line</name><op:operator pos:line="84" pos:column="30">+</op:operator><lit:literal type="number" pos:line="84" pos:column="31">1</lit:literal><op:operator pos:line="84" pos:column="32">==</op:operator><name pos:line="84" pos:column="34">linenext</name></expr>)</condition><then pos:line="84" pos:column="43">
                      <block pos:line="85" pos:column="23">{
                          <expr_stmt><expr><call><name><name pos:line="86" pos:column="27">lastGroup</name><op:operator pos:line="86" pos:column="36">.</op:operator><name pos:line="86" pos:column="37">Add</name></name><argument_list pos:line="86" pos:column="40">(<argument><expr><name pos:line="86" pos:column="41">aComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      }</block></then><else pos:line="87" pos:column="24">else
                      <block pos:line="88" pos:column="23">{
                          <decl_stmt><decl><type><name pos:line="89" pos:column="27">var</name></type> <name pos:line="89" pos:column="31">xElements</name> =<init pos:line="89" pos:column="42"> <expr><op:operator pos:line="89" pos:column="43">new</op:operator> <call><name><name pos:line="89" pos:column="47">List</name><argument_list pos:line="89" pos:column="51">&lt;<argument><name pos:line="89" pos:column="52">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="89" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                          <expr_stmt><expr><call><name><name pos:line="90" pos:column="27">xElements</name><op:operator pos:line="90" pos:column="36">.</op:operator><name pos:line="90" pos:column="37">Add</name></name><argument_list pos:line="90" pos:column="40">(<argument><expr><name pos:line="90" pos:column="41">aComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name pos:line="91" pos:column="27">commentGroups</name><op:operator pos:line="91" pos:column="40">.</op:operator><name pos:line="91" pos:column="41">Add</name></name><argument_list pos:line="91" pos:column="44">(<argument><expr><name pos:line="91" pos:column="45">xElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          <expr_stmt><expr><name pos:line="92" pos:column="27">lastGroup</name> <op:operator pos:line="92" pos:column="37">=</op:operator> <name pos:line="92" pos:column="39">xElements</name></expr>;</expr_stmt>
                      }</block></else></if>
                  }</block></then>
                  <else pos:line="95" pos:column="19">else
                  <block pos:line="96" pos:column="19">{
                      <decl_stmt><decl><type><name pos:line="97" pos:column="23">var</name></type> <name pos:line="97" pos:column="27">xElements</name> =<init pos:line="97" pos:column="38"> <expr><op:operator pos:line="97" pos:column="39">new</op:operator> <call><name><name pos:line="97" pos:column="43">List</name><argument_list pos:line="97" pos:column="47">&lt;<argument><name pos:line="97" pos:column="48">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><call><name><name pos:line="98" pos:column="23">xElements</name><op:operator pos:line="98" pos:column="32">.</op:operator><name pos:line="98" pos:column="33">Add</name></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">aComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><call><name><name pos:line="99" pos:column="23">commentGroups</name><op:operator pos:line="99" pos:column="36">.</op:operator><name pos:line="99" pos:column="37">Add</name></name><argument_list pos:line="99" pos:column="40">(<argument><expr><name pos:line="99" pos:column="41">xElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><name pos:line="100" pos:column="23">lastGroup</name> <op:operator pos:line="100" pos:column="33">=</op:operator> <name pos:line="100" pos:column="35">xElements</name></expr>;</expr_stmt>
                  }</block></else></if>
		    }</block></foreach>


            <foreach pos:line="105" pos:column="13">foreach (<init><decl><type><name pos:line="105" pos:column="22">var</name></type> <name pos:line="105" pos:column="26">oneGroup</name> <init pos:line="105" pos:column="35">in <expr><name pos:line="105" pos:column="38">commentGroups</name></expr></init></decl></init>)
            <block pos:line="106" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">var</name></type> <name pos:line="107" pos:column="21">comment</name> =<init pos:line="107" pos:column="30"> <expr><call><name><name pos:line="107" pos:column="31">oneGroup</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">First</name></name><argument_list pos:line="107" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">var</name></type> <name pos:line="108" pos:column="21">commentText</name> =<init pos:line="108" pos:column="34"> <expr><call><name pos:line="108" pos:column="35">GetCommentText</name><argument_list pos:line="108" pos:column="49">(<argument><expr><name pos:line="108" pos:column="50">oneGroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="109" pos:column="17">int</name></type> <name pos:line="109" pos:column="21">commentLine</name> =<init pos:line="109" pos:column="34"> <expr><call><name><name pos:line="109" pos:column="35">Int32</name><op:operator pos:line="109" pos:column="40">.</op:operator><name pos:line="109" pos:column="41">Parse</name></name><argument_list pos:line="109" pos:column="46">(<argument><expr><call><name><name pos:line="109" pos:column="47">comment</name><op:operator pos:line="109" pos:column="54">.</op:operator><name pos:line="109" pos:column="55">Attribute</name></name><argument_list pos:line="109" pos:column="64">(<argument><expr><name><name pos:line="109" pos:column="65">POS</name><op:operator pos:line="109" pos:column="68">.</op:operator><name pos:line="109" pos:column="69">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="74">.</op:operator><name pos:line="109" pos:column="75">Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>				
				<if pos:line="110" pos:column="33">if<condition pos:line="110" pos:column="35">(<expr><call><name><name pos:line="110" pos:column="36">String</name><op:operator pos:line="110" pos:column="42">.</op:operator><name pos:line="110" pos:column="43">IsNullOrWhiteSpace</name></name><argument_list pos:line="110" pos:column="61">(<argument><expr><name pos:line="110" pos:column="62">commentText</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="75"> <continue pos:line="110" pos:column="76">continue;</continue></then></if>

				<comment type="line" pos:line="112" pos:column="33">//comment name doesn't contain non-word characters and is compact-er than its body</comment>
                <decl_stmt><decl><type><name pos:line="113" pos:column="17">var</name></type> <name pos:line="113" pos:column="21">commentName</name> =<init pos:line="113" pos:column="34"> <expr><lit:literal type="string" pos:line="113" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="114" pos:column="17">commentName</name> <op:operator pos:line="114" pos:column="29">=</op:operator> <call><name pos:line="114" pos:column="31">GetCommentSummary</name><argument_list pos:line="114" pos:column="48">(<argument><expr><call><name pos:line="114" pos:column="49">GetCommentText</name><argument_list pos:line="114" pos:column="63">(<argument><expr><name pos:line="114" pos:column="64">oneGroup</name></expr></argument><op:operator pos:line="114" pos:column="72">,</op:operator><argument><expr><lit:literal type="boolean" pos:line="114" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="115" pos:column="17">if<condition pos:line="115" pos:column="19">(<expr><call><name><name pos:line="115" pos:column="20">string</name><op:operator pos:line="115" pos:column="26">.</op:operator><name pos:line="115" pos:column="27">IsNullOrWhiteSpace</name></name><argument_list pos:line="115" pos:column="45">(<argument><expr><name pos:line="115" pos:column="46">commentName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="115" pos:column="59"> <block pos:line="115" pos:column="60">{ <continue pos:line="115" pos:column="62">continue;</continue> }</block></then></if>

                <comment type="line" pos:line="117" pos:column="17">//comments above method or class</comment>
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">var</name></type> <name pos:line="118" pos:column="21">lastComment</name> =<init pos:line="118" pos:column="34"> <expr><call><name><name pos:line="118" pos:column="35">oneGroup</name><op:operator pos:line="118" pos:column="43">.</op:operator><name pos:line="118" pos:column="44">Last</name></name><argument_list pos:line="118" pos:column="48">()</argument_list></call> <op:operator pos:line="118" pos:column="51">as</op:operator> <name pos:line="118" pos:column="54">XElement</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="119" pos:column="17">ProgramElement</name></type> <name pos:line="119" pos:column="32">programElement</name>=<init><expr><name pos:line="119" pos:column="47">null</name></expr></init></decl>;</decl_stmt>
                <if pos:line="120" pos:column="17">if<condition pos:line="120" pos:column="19">(<expr><name pos:line="120" pos:column="20">lastComment</name> <op:operator pos:line="120" pos:column="32">!=</op:operator> <name pos:line="120" pos:column="35">null</name> <op:operator pos:line="120" pos:column="40">&amp;&amp;</op:operator> <call><name><name pos:line="120" pos:column="43">lastComment</name><op:operator pos:line="120" pos:column="54">.</op:operator><name pos:line="120" pos:column="55">Attribute</name></name><argument_list pos:line="120" pos:column="64">(<argument><expr><name><name pos:line="120" pos:column="65">POS</name><op:operator pos:line="120" pos:column="68">.</op:operator><name pos:line="120" pos:column="69">Line</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="75">!=</op:operator> <name pos:line="120" pos:column="78">null</name></expr>)</condition><then pos:line="120" pos:column="83">
                <block pos:line="121" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="122" pos:column="21">var</name></type> <name pos:line="122" pos:column="25">definitionLineNumber</name> =<init pos:line="122" pos:column="47"> <expr><call><name><name pos:line="122" pos:column="48">Int32</name><op:operator pos:line="122" pos:column="53">.</op:operator><name pos:line="122" pos:column="54">Parse</name></name><argument_list pos:line="122" pos:column="59">(<argument><expr><call><name><name pos:line="122" pos:column="60">lastComment</name><op:operator pos:line="122" pos:column="71">.</op:operator><name pos:line="122" pos:column="72">Attribute</name></name><argument_list pos:line="122" pos:column="81">(<argument><expr><name><name pos:line="122" pos:column="82">POS</name><op:operator pos:line="122" pos:column="85">.</op:operator><name pos:line="122" pos:column="86">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="91">.</op:operator><name pos:line="122" pos:column="92">Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="123" pos:column="21">programElement</name> <op:operator pos:line="123" pos:column="36">=</op:operator>
                        <call><name><name pos:line="124" pos:column="25">programElements</name><op:operator pos:line="124" pos:column="40">.</op:operator><name pos:line="124" pos:column="41">Find</name></name><argument_list pos:line="124" pos:column="45">(<argument><expr><name pos:line="124" pos:column="46">element</name> <op:operator pos:line="124" pos:column="54">=&gt;</op:operator> <name><name pos:line="124" pos:column="57">element</name><op:operator pos:line="124" pos:column="64">.</op:operator><name pos:line="124" pos:column="65">DefinitionLineNumber</name></name> <op:operator pos:line="124" pos:column="86">==</op:operator> <name pos:line="124" pos:column="89">definitionLineNumber</name> <op:operator pos:line="124" pos:column="110">+</op:operator> <lit:literal type="number" pos:line="124" pos:column="112">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="126" pos:column="17">if<condition pos:line="126" pos:column="19">(<expr><name pos:line="126" pos:column="20">programElement</name><op:operator pos:line="126" pos:column="34">!=</op:operator><name pos:line="126" pos:column="36">null</name></expr>)</condition><then pos:line="126" pos:column="41">
                <block pos:line="127" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="128" pos:column="21">programElements</name><op:operator pos:line="128" pos:column="36">.</op:operator><name pos:line="128" pos:column="37">Add</name></name><argument_list pos:line="128" pos:column="40">(<argument><expr><op:operator pos:line="128" pos:column="41">new</op:operator> <call><name pos:line="128" pos:column="45">CommentElement</name><argument_list pos:line="128" pos:column="59">(<argument><expr><name pos:line="128" pos:column="60">commentName</name></expr></argument><op:operator pos:line="128" pos:column="71">,</op:operator> <argument><expr><name pos:line="128" pos:column="73">commentLine</name></expr></argument><op:operator pos:line="128" pos:column="84">,</op:operator> <argument><expr><name><name pos:line="128" pos:column="86">programElement</name><op:operator pos:line="128" pos:column="100">.</op:operator><name pos:line="128" pos:column="101">FullFilePath</name></name></expr></argument><op:operator pos:line="128" pos:column="113">,</op:operator> <argument><expr><call><name pos:line="128" pos:column="115">RetrieveSource</name><argument_list pos:line="128" pos:column="129">(<argument><expr><name pos:line="128" pos:column="130">commentText</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="128" pos:column="142">,</op:operator> <argument><expr><name pos:line="128" pos:column="144">commentText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                    <continue pos:line="129" pos:column="21">continue;</continue>                    
                }</block></then></if>

				

				<comment type="line" pos:line="134" pos:column="33">//comments inside a method or class</comment>
				<decl_stmt><decl><type><name pos:line="135" pos:column="33">MethodElement</name></type> <name pos:line="135" pos:column="47">methodEl</name> =<init pos:line="135" pos:column="57"> <expr><call><name pos:line="135" pos:column="58">RetrieveMethodElement</name><argument_list pos:line="135" pos:column="79">(<argument><expr><name pos:line="135" pos:column="80">comment</name></expr></argument><op:operator pos:line="135" pos:column="87">,</op:operator> <argument><expr><name pos:line="135" pos:column="89">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="136" pos:column="33">if<condition pos:line="136" pos:column="35">(<expr><name pos:line="136" pos:column="36">methodEl</name> <op:operator pos:line="136" pos:column="45">!=</op:operator> <name pos:line="136" pos:column="48">null</name></expr>)</condition><then pos:line="136" pos:column="53">
				<block pos:line="137" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="138" pos:column="41">programElements</name><op:operator pos:line="138" pos:column="56">.</op:operator><name pos:line="138" pos:column="57">Add</name></name><argument_list pos:line="138" pos:column="60">(<argument><expr><op:operator pos:line="138" pos:column="61">new</op:operator> <call><name pos:line="138" pos:column="65">CommentElement</name><argument_list pos:line="138" pos:column="79">(<argument><expr><name pos:line="138" pos:column="80">commentName</name></expr></argument><op:operator pos:line="138" pos:column="91">,</op:operator> <argument><expr><name pos:line="138" pos:column="93">commentLine</name></expr></argument><op:operator pos:line="138" pos:column="104">,</op:operator> <argument><expr><name><name pos:line="138" pos:column="106">methodEl</name><op:operator pos:line="138" pos:column="114">.</op:operator><name pos:line="138" pos:column="115">FullFilePath</name></name></expr></argument><op:operator pos:line="138" pos:column="127">,</op:operator> <argument><expr><call><name pos:line="138" pos:column="129">RetrieveSource</name><argument_list pos:line="138" pos:column="143">(<argument><expr><name pos:line="138" pos:column="144">commentText</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="138" pos:column="156">,</op:operator> <argument><expr><name pos:line="138" pos:column="158">commentText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="139" pos:column="41">continue;</continue>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="141" pos:column="33">ClassElement</name></type> <name pos:line="141" pos:column="46">classEl</name> =<init pos:line="141" pos:column="55"> <expr><call><name pos:line="141" pos:column="56">RetrieveClassElement</name><argument_list pos:line="141" pos:column="76">(<argument><expr><name pos:line="141" pos:column="77">comment</name></expr></argument><op:operator pos:line="141" pos:column="84">,</op:operator> <argument><expr><name pos:line="141" pos:column="86">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="142" pos:column="33">if<condition pos:line="142" pos:column="35">(<expr><name pos:line="142" pos:column="36">classEl</name> <op:operator pos:line="142" pos:column="44">!=</op:operator> <name pos:line="142" pos:column="47">null</name></expr>)</condition><then pos:line="142" pos:column="52">
				<block pos:line="143" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="144" pos:column="41">programElements</name><op:operator pos:line="144" pos:column="56">.</op:operator><name pos:line="144" pos:column="57">Add</name></name><argument_list pos:line="144" pos:column="60">(<argument><expr><op:operator pos:line="144" pos:column="61">new</op:operator> <call><name pos:line="144" pos:column="65">CommentElement</name><argument_list pos:line="144" pos:column="79">(<argument><expr><name pos:line="144" pos:column="80">commentName</name></expr></argument><op:operator pos:line="144" pos:column="91">,</op:operator> <argument><expr><name pos:line="144" pos:column="93">commentLine</name></expr></argument><op:operator pos:line="144" pos:column="104">,</op:operator> <argument><expr><name><name pos:line="144" pos:column="106">classEl</name><op:operator pos:line="144" pos:column="113">.</op:operator><name pos:line="144" pos:column="114">FullFilePath</name></name></expr></argument><op:operator pos:line="144" pos:column="126">,</op:operator> <argument><expr><call><name pos:line="144" pos:column="128">RetrieveSource</name><argument_list pos:line="144" pos:column="142">(<argument><expr><name pos:line="144" pos:column="143">commentText</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="144" pos:column="155">,</op:operator> <argument><expr><name pos:line="144" pos:column="157">commentText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="145" pos:column="41">continue;</continue>
				}</block></then></if>

				<comment type="line" pos:line="148" pos:column="33">//comments is not associated with another element, so it's a plain CommentElement</comment>
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">programElements</name><op:operator pos:line="149" pos:column="48">.</op:operator><name pos:line="149" pos:column="49">Add</name></name><argument_list pos:line="149" pos:column="52">(<argument><expr><op:operator pos:line="149" pos:column="53">new</op:operator> <call><name pos:line="149" pos:column="57">CommentElement</name><argument_list pos:line="149" pos:column="71">(<argument><expr><name pos:line="149" pos:column="72">commentName</name></expr></argument><op:operator pos:line="149" pos:column="83">,</op:operator> <argument><expr><name pos:line="149" pos:column="85">commentLine</name></expr></argument><op:operator pos:line="149" pos:column="96">,</op:operator> <argument><expr><name pos:line="149" pos:column="98">fileName</name></expr></argument><op:operator pos:line="149" pos:column="106">,</op:operator> <argument><expr><call><name pos:line="149" pos:column="108">RetrieveSource</name><argument_list pos:line="149" pos:column="122">(<argument><expr><name pos:line="149" pos:column="123">commentText</name></expr></argument>)</argument_list></call></expr></argument><op:operator pos:line="149" pos:column="135">,</op:operator> <argument><expr><name pos:line="149" pos:column="137">commentText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
		}</block></function>

	 

	    <function><type><specifier pos:line="155" pos:column="13">public</specifier> <specifier pos:line="155" pos:column="20">static</specifier> <name pos:line="155" pos:column="27">string</name></type> <name pos:line="155" pos:column="34">GetCommentSummary</name><parameter_list pos:line="155" pos:column="51">(<param><decl><type><name pos:line="155" pos:column="52">string</name></type> <name pos:line="155" pos:column="59">commentText</name></decl></param>)</parameter_list>
	    <block pos:line="156" pos:column="13">{
	        <decl_stmt><decl><type><name pos:line="157" pos:column="17">string</name></type> <name pos:line="157" pos:column="24">commentName</name>=<init><expr><lit:literal type="string" pos:line="157" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="158" pos:column="17">char</name><index pos:line="158" pos:column="21">[]</index></name></type> <name pos:line="158" pos:column="24">splits</name> =<init pos:line="158" pos:column="32"> <expr><block pos:line="158" pos:column="33">{<expr><lit:literal type="char" pos:line="158" pos:column="34">'\n'</lit:literal></expr><op:operator pos:line="158" pos:column="38">,</op:operator> <expr><lit:literal type="char" pos:line="158" pos:column="40">'\r'</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="159" pos:column="17">var</name></type> <name pos:line="159" pos:column="21">splitString</name> =<init pos:line="159" pos:column="34"> <expr><call><name><name pos:line="159" pos:column="35">commentText</name><op:operator pos:line="159" pos:column="46">.</op:operator><name pos:line="159" pos:column="47">Split</name></name><argument_list pos:line="159" pos:column="52">(<argument><expr><name pos:line="159" pos:column="53">splits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="160" pos:column="13">foreach (<init><decl><type><name pos:line="160" pos:column="22">var</name></type> <name pos:line="160" pos:column="26">line</name> <init pos:line="160" pos:column="31">in <expr><name pos:line="160" pos:column="34">splitString</name></expr></init></decl></init>)
            <block pos:line="161" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="162" pos:column="17">char</name><index pos:line="162" pos:column="21">[]</index></name></type> <name pos:line="162" pos:column="24">arr</name> =<init pos:line="162" pos:column="29"> <expr><call><name><name pos:line="162" pos:column="30">line</name><op:operator pos:line="162" pos:column="34">.</op:operator><name pos:line="162" pos:column="35">ToCharArray</name></name><argument_list pos:line="162" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name pos:line="164" pos:column="17">arr</name> <op:operator pos:line="164" pos:column="21">=</op:operator> <call><name><name pos:line="164" pos:column="23">Array</name><op:operator pos:line="164" pos:column="28">.</op:operator><name><name pos:line="164" pos:column="29">FindAll</name><argument_list pos:line="164" pos:column="36">&lt;<argument><name pos:line="164" pos:column="37">char</name></argument>&gt;</argument_list></name></name><argument_list pos:line="164" pos:column="42">(<argument><expr><name pos:line="164" pos:column="43">arr</name></expr></argument><op:operator pos:line="164" pos:column="46">,</op:operator> <argument><expr><op:operator pos:line="164" pos:column="48">(</op:operator><name pos:line="164" pos:column="49">c</name> <op:operator pos:line="164" pos:column="51">=&gt;</op:operator> <op:operator pos:line="164" pos:column="54">(</op:operator><call><name><name pos:line="164" pos:column="55">char</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">IsLetterOrDigit</name></name><argument_list pos:line="164" pos:column="75">(<argument><expr><name pos:line="164" pos:column="76">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="79">||</op:operator> <call><name><name pos:line="164" pos:column="82">char</name><op:operator pos:line="164" pos:column="86">.</op:operator><name pos:line="164" pos:column="87">IsWhiteSpace</name></name><argument_list pos:line="164" pos:column="99">(<argument><expr><name pos:line="164" pos:column="100">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="103">)</op:operator><op:operator pos:line="164" pos:column="104">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="165" pos:column="17">var</name></type> <name pos:line="165" pos:column="21">textLine</name> =<init pos:line="165" pos:column="31"> <expr><op:operator pos:line="165" pos:column="32">new</op:operator> <call><name pos:line="165" pos:column="36">string</name><argument_list pos:line="165" pos:column="42">(<argument><expr><name pos:line="165" pos:column="43">arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="166" pos:column="17">if <condition pos:line="166" pos:column="20">(<expr><call><name><name pos:line="166" pos:column="21">textLine</name><op:operator pos:line="166" pos:column="29">.</op:operator><name pos:line="166" pos:column="30">Trim</name></name><argument_list pos:line="166" pos:column="34">()</argument_list></call><op:operator pos:line="166" pos:column="36">.</op:operator><name pos:line="166" pos:column="37">Length</name> <op:operator pos:line="166" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="166" pos:column="46">10</lit:literal></expr>)</condition><then pos:line="166" pos:column="49">
                <block pos:line="167" pos:column="17">{
                    <if pos:line="168" pos:column="21">if <condition pos:line="168" pos:column="24">(<expr><op:operator pos:line="168" pos:column="25">!</op:operator><call><name><name pos:line="168" pos:column="26">Regex</name><op:operator pos:line="168" pos:column="31">.</op:operator><name pos:line="168" pos:column="32">Match</name></name><argument_list pos:line="168" pos:column="37">(<argument><expr><name pos:line="168" pos:column="38">line</name></expr></argument><op:operator pos:line="168" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="168" pos:column="44">@"\s*/+\s*&lt;\w*&gt;\s*[\r\n]*"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="168" pos:column="71">.</op:operator><name pos:line="168" pos:column="72">Success</name></expr>)</condition><then pos:line="168" pos:column="80">
                    <block pos:line="169" pos:column="21">{
                        <expr_stmt><expr><name pos:line="170" pos:column="25">commentName</name> <op:operator pos:line="170" pos:column="37">=</op:operator> <call><name><name pos:line="170" pos:column="39">line</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">Trim</name></name><argument_list pos:line="170" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="171" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>	        
	        <if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><call><name><name pos:line="175" pos:column="21">String</name><op:operator pos:line="175" pos:column="27">.</op:operator><name pos:line="175" pos:column="28">IsNullOrWhiteSpace</name></name><argument_list pos:line="175" pos:column="46">(<argument><expr><name pos:line="175" pos:column="47">commentName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="175" pos:column="60"> <expr_stmt><expr><name pos:line="175" pos:column="61">commentName</name> <op:operator pos:line="175" pos:column="73">=</op:operator> <name pos:line="175" pos:column="75">commentText</name></expr>;</expr_stmt></then></if>
            <if pos:line="176" pos:column="13">if <condition pos:line="176" pos:column="16">(<expr><call><name><name pos:line="176" pos:column="17">commentName</name><op:operator pos:line="176" pos:column="28">.</op:operator><name pos:line="176" pos:column="29">StartsWith</name></name><argument_list pos:line="176" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="40">"/"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="176" pos:column="45"> <expr_stmt><expr><name pos:line="176" pos:column="46">commentName</name> <op:operator pos:line="176" pos:column="58">=</op:operator> <call><name><name pos:line="176" pos:column="60">commentName</name><op:operator pos:line="176" pos:column="71">.</op:operator><name pos:line="176" pos:column="72">TrimStart</name></name><argument_list pos:line="176" pos:column="81">(<argument><expr><lit:literal type="char" pos:line="176" pos:column="82">'/'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	        <return pos:line="177" pos:column="17">return <expr><call><name><name pos:line="177" pos:column="24">commentName</name><op:operator pos:line="177" pos:column="35">.</op:operator><name pos:line="177" pos:column="36">Trim</name></name><argument_list pos:line="177" pos:column="40">()</argument_list></call></expr>;</return>
	    }</block></function>

	    <function><type><specifier pos:line="180" pos:column="13">private</specifier> <specifier pos:line="180" pos:column="21">static</specifier> <name pos:line="180" pos:column="28">string</name></type> <name pos:line="180" pos:column="35">GetCommentText</name><parameter_list pos:line="180" pos:column="49">(<param><decl><type><name><name pos:line="180" pos:column="50">List</name><argument_list pos:line="180" pos:column="54">&lt;<argument><name pos:line="180" pos:column="55">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="180" pos:column="65">comments</name></decl></param><op:operator pos:line="180" pos:column="73">,</op:operator> <param><decl><type><name pos:line="180" pos:column="75">bool</name></type> <name pos:line="180" pos:column="80">preserveSlashes</name>=<init><expr><lit:literal type="boolean" pos:line="180" pos:column="96">true</lit:literal></expr></init></decl></param>)</parameter_list>
	    <block pos:line="181" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">StringBuilder</name></type> <name pos:line="182" pos:column="27">builder</name> =<init pos:line="182" pos:column="36"> <expr><op:operator pos:line="182" pos:column="37">new</op:operator> <call><name pos:line="182" pos:column="41">StringBuilder</name><argument_list pos:line="182" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="183" pos:column="17">Boolean</name></type> <name pos:line="183" pos:column="25">first</name> =<init pos:line="183" pos:column="32"> <expr><lit:literal type="boolean" pos:line="183" pos:column="33">true</lit:literal></expr></init></decl>;</decl_stmt>
	        <foreach pos:line="184" pos:column="17">foreach (<init><decl><type><name pos:line="184" pos:column="26">var</name></type> <name pos:line="184" pos:column="30">comment</name> <init pos:line="184" pos:column="38">in <expr><name pos:line="184" pos:column="41">comments</name></expr></init></decl></init>)
	        <block pos:line="185" pos:column="17">{
                <if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><name pos:line="186" pos:column="21">first</name></expr>)</condition><then pos:line="186" pos:column="27">
                <block pos:line="187" pos:column="17">{
                    <expr_stmt><expr><name pos:line="188" pos:column="21">first</name> <op:operator pos:line="188" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="188" pos:column="29">false</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="190" pos:column="17">else
                <block pos:line="191" pos:column="17">{                    
                    <expr_stmt><expr><call><name><name pos:line="192" pos:column="21">builder</name><op:operator pos:line="192" pos:column="28">.</op:operator><name pos:line="192" pos:column="29">Append</name></name><argument_list pos:line="192" pos:column="35">(<argument><expr><name><name pos:line="192" pos:column="36">Environment</name><op:operator pos:line="192" pos:column="47">.</op:operator><name pos:line="192" pos:column="48">NewLine</name></name> <op:operator pos:line="192" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="192" pos:column="58">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
	            <decl_stmt><decl><type><name pos:line="194" pos:column="21">var</name></type> <name pos:line="194" pos:column="25">commentText</name> =<init pos:line="194" pos:column="38"> <expr><name><name pos:line="194" pos:column="39">comment</name><op:operator pos:line="194" pos:column="46">.</op:operator><name pos:line="194" pos:column="47">Value</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="195" pos:column="17">if<condition pos:line="195" pos:column="19">(<expr><op:operator pos:line="195" pos:column="20">!</op:operator><name pos:line="195" pos:column="21">preserveSlashes</name></expr>)</condition><then pos:line="195" pos:column="37">
                    <if pos:line="196" pos:column="21">if <condition pos:line="196" pos:column="24">(<expr><call><name><name pos:line="196" pos:column="25">commentText</name><op:operator pos:line="196" pos:column="36">.</op:operator><name pos:line="196" pos:column="37">StartsWith</name></name><argument_list pos:line="196" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="48">"/"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="196" pos:column="53"> <expr_stmt><expr><name pos:line="196" pos:column="54">commentText</name> <op:operator pos:line="196" pos:column="66">=</op:operator> <call><name><name pos:line="196" pos:column="68">commentText</name><op:operator pos:line="196" pos:column="79">.</op:operator><name pos:line="196" pos:column="80">TrimStart</name></name><argument_list pos:line="196" pos:column="89">(<argument><expr><lit:literal type="char" pos:line="196" pos:column="90">'/'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
                <expr_stmt><expr><call><name><name pos:line="197" pos:column="17">builder</name><op:operator pos:line="197" pos:column="24">.</op:operator><name pos:line="197" pos:column="25">Append</name></name><argument_list pos:line="197" pos:column="31">(<argument><expr><call><name><name pos:line="197" pos:column="32">commentText</name><op:operator pos:line="197" pos:column="43">.</op:operator><name pos:line="197" pos:column="44">TrimStart</name></name><argument_list pos:line="197" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        }</block></foreach>	        
	        <return pos:line="200" pos:column="17">return <expr><call><name><name pos:line="200" pos:column="24">builder</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">ToString</name></name><argument_list pos:line="200" pos:column="40">()</argument_list></call></expr>;</return>
	    }</block></function>

	    <function><type><specifier pos:line="203" pos:column="13">public</specifier> <specifier pos:line="203" pos:column="20">static</specifier> <name pos:line="203" pos:column="27">string</name></type> <name pos:line="203" pos:column="34">ParseBody</name><parameter_list pos:line="203" pos:column="43">(<param><decl><type><name pos:line="203" pos:column="44">XElement</name></type> <name pos:line="203" pos:column="53">function</name></decl></param>)</parameter_list>
		<block pos:line="204" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="205" pos:column="25">string</name></type> <name pos:line="205" pos:column="32">body</name> =<init pos:line="205" pos:column="38"> <expr><name><name pos:line="205" pos:column="39">String</name><op:operator pos:line="205" pos:column="45">.</op:operator><name pos:line="205" pos:column="46">Empty</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="206" pos:column="25">XElement</name></type> <name pos:line="206" pos:column="34">block</name> =<init pos:line="206" pos:column="41"> <expr><call><name><name pos:line="206" pos:column="42">function</name><op:operator pos:line="206" pos:column="50">.</op:operator><name pos:line="206" pos:column="51">Element</name></name><argument_list pos:line="206" pos:column="58">(<argument><expr><name><name pos:line="206" pos:column="59">SRC</name><op:operator pos:line="206" pos:column="62">.</op:operator><name pos:line="206" pos:column="63">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="207" pos:column="25">if<condition pos:line="207" pos:column="27">(<expr><name pos:line="207" pos:column="28">block</name> <op:operator pos:line="207" pos:column="34">!=</op:operator> <name pos:line="207" pos:column="37">null</name></expr>)</condition><then pos:line="207" pos:column="42">
			<block pos:line="208" pos:column="25">{

				<decl_stmt><decl><type><name><name pos:line="210" pos:column="33">IEnumerable</name><argument_list pos:line="210" pos:column="44">&lt;<argument><name pos:line="210" pos:column="45">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="55">comments</name> =<init pos:line="210" pos:column="65">
					<expr><linq><from pos:line="211" pos:column="41">from <expr><name pos:line="211" pos:column="46">el</name></expr> <in pos:line="211" pos:column="49">in <expr><call><name><name pos:line="211" pos:column="52">block</name><op:operator pos:line="211" pos:column="57">.</op:operator><name pos:line="211" pos:column="58">Descendants</name></name><argument_list pos:line="211" pos:column="69">(<argument><expr><name><name pos:line="211" pos:column="70">SRC</name><op:operator pos:line="211" pos:column="73">.</op:operator><name pos:line="211" pos:column="74">Comment</name></name></expr></argument>)</argument_list></call></expr></in></from>
					<select pos:line="212" pos:column="41">select <expr><name pos:line="212" pos:column="48">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
				<foreach pos:line="213" pos:column="33">foreach(<init><decl><type><name pos:line="213" pos:column="41">XElement</name></type> <name pos:line="213" pos:column="50">elem</name> <init pos:line="213" pos:column="55">in <expr><name pos:line="213" pos:column="58">comments</name></expr></init></decl></init>)
				<block pos:line="214" pos:column="33">{
					<expr_stmt><expr><name pos:line="215" pos:column="41">body</name> <op:operator pos:line="215" pos:column="46">+=</op:operator> <call><name><name pos:line="215" pos:column="49">String</name><op:operator pos:line="215" pos:column="55">.</op:operator><name pos:line="215" pos:column="56">Join</name></name><argument_list pos:line="215" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="61">" "</lit:literal></expr></argument><op:operator pos:line="215" pos:column="64">,</op:operator> <argument><expr><name><name pos:line="215" pos:column="66">elem</name><op:operator pos:line="215" pos:column="70">.</op:operator><name pos:line="215" pos:column="71">Value</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="215" pos:column="80">" "</lit:literal></expr>;</expr_stmt>
				}</block></foreach>

				<comment type="line" pos:line="218" pos:column="33">//Expressions should also include all names, but we need to verify this...</comment>
				<decl_stmt><decl><type><name><name pos:line="219" pos:column="33">IEnumerable</name><argument_list pos:line="219" pos:column="44">&lt;<argument><name pos:line="219" pos:column="45">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="55">expressions</name> =<init pos:line="219" pos:column="68">
						<expr><linq><from pos:line="220" pos:column="49">from <expr><name pos:line="220" pos:column="54">el</name></expr> <in pos:line="220" pos:column="57">in <expr><call><name><name pos:line="220" pos:column="60">block</name><op:operator pos:line="220" pos:column="65">.</op:operator><name pos:line="220" pos:column="66">Descendants</name></name><argument_list pos:line="220" pos:column="77">(<argument><expr><name><name pos:line="220" pos:column="78">SRC</name><op:operator pos:line="220" pos:column="81">.</op:operator><name pos:line="220" pos:column="82">Expression</name></name></expr></argument>)</argument_list></call></expr></in></from>
						<select pos:line="221" pos:column="49">select <expr><name pos:line="221" pos:column="56">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
				<foreach pos:line="222" pos:column="33">foreach(<init><decl><type><name pos:line="222" pos:column="41">XElement</name></type> <name pos:line="222" pos:column="50">elem</name> <init pos:line="222" pos:column="55">in <expr><name pos:line="222" pos:column="58">expressions</name></expr></init></decl></init>)
				<block pos:line="223" pos:column="33">{
					<expr_stmt><expr><name pos:line="224" pos:column="41">body</name> <op:operator pos:line="224" pos:column="46">+=</op:operator> <call><name><name pos:line="224" pos:column="49">String</name><op:operator pos:line="224" pos:column="55">.</op:operator><name pos:line="224" pos:column="56">Join</name></name><argument_list pos:line="224" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="61">" "</lit:literal></expr></argument><op:operator pos:line="224" pos:column="64">,</op:operator> <argument><expr><name><name pos:line="224" pos:column="66">elem</name><op:operator pos:line="224" pos:column="70">.</op:operator><name pos:line="224" pos:column="71">Value</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="224" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="224" pos:column="80">" "</lit:literal></expr>;</expr_stmt>
				}</block></foreach>
                <comment type="line" pos:line="226" pos:column="17">//need to also add a names from declarations</comment>
                <decl_stmt><decl><type><name><name pos:line="227" pos:column="17">IEnumerable</name><argument_list pos:line="227" pos:column="28">&lt;<argument><name pos:line="227" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="227" pos:column="39">declarations</name> =<init pos:line="227" pos:column="53">
                    <expr><linq><from pos:line="228" pos:column="21">from <expr><name pos:line="228" pos:column="26">el</name></expr> <in pos:line="228" pos:column="29">in <expr><call><name><name pos:line="228" pos:column="32">block</name><op:operator pos:line="228" pos:column="37">.</op:operator><name pos:line="228" pos:column="38">Descendants</name></name><argument_list pos:line="228" pos:column="49">(<argument><expr><name><name pos:line="228" pos:column="50">SRC</name><op:operator pos:line="228" pos:column="53">.</op:operator><name pos:line="228" pos:column="54">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="229" pos:column="21">select <expr><name pos:line="229" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
			    <foreach pos:line="230" pos:column="29">foreach (<init><decl><type><name pos:line="230" pos:column="38">var</name></type> <name pos:line="230" pos:column="42">declaration</name> <init pos:line="230" pos:column="54">in <expr><name pos:line="230" pos:column="57">declarations</name></expr></init></decl></init>)
			    <block pos:line="231" pos:column="29">{
                    <decl_stmt><decl><type><name pos:line="232" pos:column="21">var</name></type> <name pos:line="232" pos:column="25">declNames</name> =<init pos:line="232" pos:column="36"> <expr><linq><from pos:line="232" pos:column="37">from <expr><name pos:line="232" pos:column="42">el</name></expr> <in pos:line="232" pos:column="45">in <expr><call><name><name pos:line="232" pos:column="48">declaration</name><op:operator pos:line="232" pos:column="59">.</op:operator><name pos:line="232" pos:column="60">Descendants</name></name><argument_list pos:line="232" pos:column="71">(<argument><expr><name><name pos:line="232" pos:column="72">SRC</name><op:operator pos:line="232" pos:column="75">.</op:operator><name pos:line="232" pos:column="76">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                    <where pos:line="233" pos:column="37">where <expr><op:operator pos:line="233" pos:column="43">(</op:operator><call><name><name pos:line="233" pos:column="44">el</name><op:operator pos:line="233" pos:column="46">.</op:operator><name pos:line="233" pos:column="47">Parent</name><op:operator pos:line="233" pos:column="53">.</op:operator><name pos:line="233" pos:column="54">Name</name><op:operator pos:line="233" pos:column="58">.</op:operator><name pos:line="233" pos:column="59">LocalName</name><op:operator pos:line="233" pos:column="68">.</op:operator><name pos:line="233" pos:column="69">Equals</name></name><argument_list pos:line="233" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="76">"type"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="233" pos:column="83">||</op:operator>
                                    <call><name><name pos:line="234" pos:column="37">el</name><op:operator pos:line="234" pos:column="39">.</op:operator><name pos:line="234" pos:column="40">Parent</name><op:operator pos:line="234" pos:column="46">.</op:operator><name pos:line="234" pos:column="47">Name</name><op:operator pos:line="234" pos:column="51">.</op:operator><name pos:line="234" pos:column="52">LocalName</name><op:operator pos:line="234" pos:column="61">.</op:operator><name pos:line="234" pos:column="62">Equals</name></name><argument_list pos:line="234" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="69">"decl"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="234" pos:column="76">)</op:operator></expr></where>
                                    <select pos:line="235" pos:column="37">select <expr><name pos:line="235" pos:column="44">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="236" pos:column="21">foreach (<init><decl><type><name pos:line="236" pos:column="30">XElement</name></type> <name pos:line="236" pos:column="39">elem</name> <init pos:line="236" pos:column="44">in <expr><name pos:line="236" pos:column="47">declNames</name></expr></init></decl></init>)
                    <block pos:line="237" pos:column="21">{
                        <expr_stmt><expr><name pos:line="238" pos:column="25">body</name> <op:operator pos:line="238" pos:column="30">+=</op:operator> <call><name><name pos:line="238" pos:column="33">String</name><op:operator pos:line="238" pos:column="39">.</op:operator><name pos:line="238" pos:column="40">Join</name></name><argument_list pos:line="238" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="45">" "</lit:literal></expr></argument><op:operator pos:line="238" pos:column="48">,</op:operator> <argument><expr><name><name pos:line="238" pos:column="50">elem</name><op:operator pos:line="238" pos:column="54">.</op:operator><name pos:line="238" pos:column="55">Value</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="238" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="238" pos:column="64">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>			        
			    }</block></foreach>
				<expr_stmt><expr><name pos:line="241" pos:column="33">body</name> <op:operator pos:line="241" pos:column="38">=</op:operator> <call><name><name pos:line="241" pos:column="40">body</name><op:operator pos:line="241" pos:column="44">.</op:operator><name pos:line="241" pos:column="45">TrimEnd</name></name><argument_list pos:line="241" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="243" pos:column="25">body</name> <op:operator pos:line="243" pos:column="30">=</op:operator> <call><name><name pos:line="243" pos:column="32">Regex</name><op:operator pos:line="243" pos:column="37">.</op:operator><name pos:line="243" pos:column="38">Replace</name></name><argument_list pos:line="243" pos:column="45">(<argument><expr><name pos:line="243" pos:column="46">body</name></expr></argument><op:operator pos:line="243" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="243" pos:column="52">"\\W"</lit:literal></expr></argument><op:operator pos:line="243" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="243" pos:column="59">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="244" pos:column="25">return <expr><name pos:line="244" pos:column="32">body</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="247" pos:column="17">public</specifier> <specifier pos:line="247" pos:column="24">static</specifier> <name pos:line="247" pos:column="31">void</name></type> <name pos:line="247" pos:column="36">ParseNameAndLineNumber</name><parameter_list pos:line="247" pos:column="58">(<param><decl><type><name pos:line="247" pos:column="59">XElement</name></type> <name pos:line="247" pos:column="68">target</name></decl></param><op:operator pos:line="247" pos:column="74">,</op:operator> <param><decl><type><specifier pos:line="247" pos:column="76">out</specifier> <name pos:line="247" pos:column="80">string</name></type> <name pos:line="247" pos:column="87">name</name></decl></param><op:operator pos:line="247" pos:column="91">,</op:operator> <param><decl><type><specifier pos:line="247" pos:column="93">out</specifier> <name pos:line="247" pos:column="97">int</name></type> <name pos:line="247" pos:column="101">definitionLineNumber</name></decl></param>)</parameter_list>
		<block pos:line="248" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="249" pos:column="25">XElement</name></type> <name pos:line="249" pos:column="34">nameElement</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="250" pos:column="25">nameElement</name> <op:operator pos:line="250" pos:column="37">=</op:operator> <call><name><name pos:line="250" pos:column="39">target</name><op:operator pos:line="250" pos:column="45">.</op:operator><name pos:line="250" pos:column="46">Element</name></name><argument_list pos:line="250" pos:column="53">(<argument><expr><name><name pos:line="250" pos:column="54">SRC</name><op:operator pos:line="250" pos:column="57">.</op:operator><name pos:line="250" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="251" pos:column="25">if<condition pos:line="251" pos:column="27">(<expr><name pos:line="251" pos:column="28">nameElement</name> <op:operator pos:line="251" pos:column="40">==</op:operator> <name pos:line="251" pos:column="43">null</name> <op:operator pos:line="251" pos:column="48">&amp;&amp;</op:operator> 
				<call><name><name pos:line="252" pos:column="33">target</name><op:operator pos:line="252" pos:column="39">.</op:operator><name pos:line="252" pos:column="40">Element</name></name><argument_list pos:line="252" pos:column="47">(<argument><expr><name><name pos:line="252" pos:column="48">SRC</name><op:operator pos:line="252" pos:column="51">.</op:operator><name pos:line="252" pos:column="52">Super</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="252" pos:column="59">!=</op:operator> <name pos:line="252" pos:column="62">null</name></expr>)</condition><then pos:line="252" pos:column="67"> 
			<block pos:line="253" pos:column="25">{
				<comment type="line" pos:line="254" pos:column="33">//case of anonymous inner class, should have a super</comment>
				<expr_stmt><expr><name pos:line="255" pos:column="33">nameElement</name> <op:operator pos:line="255" pos:column="45">=</op:operator> <call><name><name pos:line="255" pos:column="47">target</name><op:operator pos:line="255" pos:column="53">.</op:operator><name pos:line="255" pos:column="54">Element</name></name><argument_list pos:line="255" pos:column="61">(<argument><expr><name><name pos:line="255" pos:column="62">SRC</name><op:operator pos:line="255" pos:column="65">.</op:operator><name pos:line="255" pos:column="66">Super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="256" pos:column="33">nameElement</name> <op:operator pos:line="256" pos:column="45">=</op:operator> <call><name><name pos:line="256" pos:column="47">nameElement</name><op:operator pos:line="256" pos:column="58">.</op:operator><name pos:line="256" pos:column="59">Element</name></name><argument_list pos:line="256" pos:column="66">(<argument><expr><name><name pos:line="256" pos:column="67">SRC</name><op:operator pos:line="256" pos:column="70">.</op:operator><name pos:line="256" pos:column="71">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="257" pos:column="33">name</name> <op:operator pos:line="257" pos:column="38">=</op:operator> <name><name pos:line="257" pos:column="40">nameElement</name><op:operator pos:line="257" pos:column="51">.</op:operator><name pos:line="257" pos:column="52">Value</name></name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="259" pos:column="25">else <if pos:line="259" pos:column="30">if<condition pos:line="259" pos:column="32">(<expr><name pos:line="259" pos:column="33">nameElement</name> <op:operator pos:line="259" pos:column="45">==</op:operator> <name pos:line="259" pos:column="48">null</name></expr>)</condition><then pos:line="259" pos:column="53">
			<block pos:line="260" pos:column="25">{
				<comment type="line" pos:line="261" pos:column="33">//case of there is no resemblance of a name available</comment>
				<expr_stmt><expr><name pos:line="262" pos:column="33">name</name> <op:operator pos:line="262" pos:column="38">=</op:operator> <name><name pos:line="262" pos:column="40">ProgramElement</name><op:operator pos:line="262" pos:column="54">.</op:operator><name pos:line="262" pos:column="55">UndefinedName</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="263" pos:column="33">nameElement</name> <op:operator pos:line="263" pos:column="45">=</op:operator> <name pos:line="263" pos:column="47">target</name></expr>;</expr_stmt> <comment type="line" pos:line="263" pos:column="55">//still try to parse line number</comment>
			}</block></then>
			<else pos:line="265" pos:column="25">else
			<block pos:line="266" pos:column="25">{
				<comment type="line" pos:line="267" pos:column="33">//normal case</comment>
				<expr_stmt><expr><name pos:line="268" pos:column="33">name</name> <op:operator pos:line="268" pos:column="38">=</op:operator> <name><name pos:line="268" pos:column="40">nameElement</name><op:operator pos:line="268" pos:column="51">.</op:operator><name pos:line="268" pos:column="52">Value</name></name></expr>;</expr_stmt>
			}</block></else></if></else></if>

			<comment type="line" pos:line="271" pos:column="25">////try to get line number</comment>
			<if pos:line="272" pos:column="25">if<condition pos:line="272" pos:column="27">(<expr><call><name><name pos:line="272" pos:column="28">nameElement</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">Attribute</name></name><argument_list pos:line="272" pos:column="49">(<argument><expr><name><name pos:line="272" pos:column="50">POS</name><op:operator pos:line="272" pos:column="53">.</op:operator><name pos:line="272" pos:column="54">Line</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="272" pos:column="60">!=</op:operator> <name pos:line="272" pos:column="63">null</name></expr>)</condition><then pos:line="272" pos:column="68">
			<block pos:line="273" pos:column="25">{
				<expr_stmt><expr><name pos:line="274" pos:column="33">definitionLineNumber</name> <op:operator pos:line="274" pos:column="54">=</op:operator> <call><name><name pos:line="274" pos:column="56">Int32</name><op:operator pos:line="274" pos:column="61">.</op:operator><name pos:line="274" pos:column="62">Parse</name></name><argument_list pos:line="274" pos:column="67">(<argument><expr><call><name><name pos:line="274" pos:column="68">nameElement</name><op:operator pos:line="274" pos:column="79">.</op:operator><name pos:line="274" pos:column="80">Attribute</name></name><argument_list pos:line="274" pos:column="89">(<argument><expr><name><name pos:line="274" pos:column="90">POS</name><op:operator pos:line="274" pos:column="93">.</op:operator><name pos:line="274" pos:column="94">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="274" pos:column="99">.</op:operator><name pos:line="274" pos:column="100">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="276" pos:column="25">else
			<block pos:line="277" pos:column="25">{
				<comment type="line" pos:line="278" pos:column="33">//i can't find the line number</comment>
				<expr_stmt><expr><name pos:line="279" pos:column="33">definitionLineNumber</name> <op:operator pos:line="279" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="279" pos:column="56">0</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></function>

		<function><type><specifier pos:line="283" pos:column="17">public</specifier> <specifier pos:line="283" pos:column="24">static</specifier> <name pos:line="283" pos:column="31">ClassElement</name></type> <name pos:line="283" pos:column="44">RetrieveClassElement</name><parameter_list pos:line="283" pos:column="64">(<param><decl><type><name pos:line="283" pos:column="65">XElement</name></type> <name pos:line="283" pos:column="74">field</name></decl></param><op:operator pos:line="283" pos:column="79">,</op:operator> <param><decl><type><name><name pos:line="283" pos:column="81">List</name><argument_list pos:line="283" pos:column="85">&lt;<argument><name pos:line="283" pos:column="86">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="283" pos:column="102">programElements</name></decl></param>)</parameter_list>
		<block pos:line="284" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="285" pos:column="25">IEnumerable</name><argument_list pos:line="285" pos:column="36">&lt;<argument><name pos:line="285" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="285" pos:column="47">ownerClasses</name> =<init pos:line="285" pos:column="61">
				<expr><linq><from pos:line="286" pos:column="33">from <expr><name pos:line="286" pos:column="38">el</name></expr> <in pos:line="286" pos:column="41">in <expr><call><name><name pos:line="286" pos:column="44">field</name><op:operator pos:line="286" pos:column="49">.</op:operator><name pos:line="286" pos:column="50">Ancestors</name></name><argument_list pos:line="286" pos:column="59">(<argument><expr><name><name pos:line="286" pos:column="60">SRC</name><op:operator pos:line="286" pos:column="63">.</op:operator><name pos:line="286" pos:column="64">Class</name></name></expr></argument>)</argument_list></call></expr></in></from>
				<select pos:line="287" pos:column="33">select <expr><name pos:line="287" pos:column="40">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
			<if pos:line="288" pos:column="25">if<condition pos:line="288" pos:column="27">(<expr><call><name><name pos:line="288" pos:column="28">ownerClasses</name><op:operator pos:line="288" pos:column="40">.</op:operator><name pos:line="288" pos:column="41">Count</name></name><argument_list pos:line="288" pos:column="46">()</argument_list></call> <op:operator pos:line="288" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="288" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="288" pos:column="53">
			<block pos:line="289" pos:column="25">{
				<comment type="line" pos:line="290" pos:column="33">//this ignores the possibility that a field may be part of an inner class</comment>
				<decl_stmt><decl><type><name pos:line="291" pos:column="33">XElement</name></type> <name pos:line="291" pos:column="42">name</name> =<init pos:line="291" pos:column="48"> <expr><call><name><name pos:line="291" pos:column="49">ownerClasses</name><op:operator pos:line="291" pos:column="61">.</op:operator><name pos:line="291" pos:column="62">First</name></name><argument_list pos:line="291" pos:column="67">()</argument_list></call><op:operator pos:line="291" pos:column="69">.</op:operator><call><name pos:line="291" pos:column="70">Element</name><argument_list pos:line="291" pos:column="77">(<argument><expr><name><name pos:line="291" pos:column="78">SRC</name><op:operator pos:line="291" pos:column="81">.</op:operator><name pos:line="291" pos:column="82">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			    <decl_stmt><decl><type><name pos:line="292" pos:column="29">string</name></type> <name pos:line="292" pos:column="36">ownerClassName</name>=<init><expr><lit:literal type="string" pos:line="292" pos:column="51">""</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="293" pos:column="17">if<condition pos:line="293" pos:column="19">(<expr><name pos:line="293" pos:column="20">name</name><op:operator pos:line="293" pos:column="24">==</op:operator><name pos:line="293" pos:column="26">null</name></expr>)</condition><then pos:line="293" pos:column="31">
                    <expr_stmt><expr><name pos:line="294" pos:column="21">ownerClassName</name> <op:operator pos:line="294" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="294" pos:column="38">"anonymous"</lit:literal></expr>;</expr_stmt></then>
                <else pos:line="295" pos:column="17">else
				    <expr_stmt><expr><name pos:line="296" pos:column="37">ownerClassName</name> <op:operator pos:line="296" pos:column="52">=</op:operator> <name><name pos:line="296" pos:column="54">name</name><op:operator pos:line="296" pos:column="58">.</op:operator><name pos:line="296" pos:column="59">Value</name></name></expr>;</expr_stmt></else></if>
				<comment type="line" pos:line="297" pos:column="33">//now find the ClassElement object corresponding to ownerClassName, since those should have been gen'd by now</comment>
				<decl_stmt><decl><type><name pos:line="298" pos:column="33">ProgramElement</name></type> <name pos:line="298" pos:column="48">ownerClass</name> =<init pos:line="298" pos:column="60"> <expr><call><name><name pos:line="298" pos:column="61">programElements</name><op:operator pos:line="298" pos:column="76">.</op:operator><name pos:line="298" pos:column="77">Find</name></name><argument_list pos:line="298" pos:column="81">(<argument><expr><name pos:line="298" pos:column="82">element</name> <op:operator pos:line="298" pos:column="90">=&gt;</op:operator> <name pos:line="298" pos:column="93">element</name> <op:operator pos:line="298" pos:column="101">is</op:operator> <name pos:line="298" pos:column="104">ClassElement</name> <op:operator pos:line="298" pos:column="117">&amp;&amp;</op:operator> <op:operator pos:line="298" pos:column="120">(</op:operator><op:operator pos:line="298" pos:column="121">(</op:operator><name pos:line="298" pos:column="122">ClassElement</name><op:operator pos:line="298" pos:column="134">)</op:operator><name pos:line="298" pos:column="135">element</name><op:operator pos:line="298" pos:column="142">)</op:operator><op:operator pos:line="298" pos:column="143">.</op:operator><name pos:line="298" pos:column="144">Name</name> <op:operator pos:line="298" pos:column="149">==</op:operator> <name pos:line="298" pos:column="152">ownerClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="299" pos:column="33">return <expr><name pos:line="299" pos:column="40">ownerClass</name> <op:operator pos:line="299" pos:column="51">as</op:operator> <name pos:line="299" pos:column="54">ClassElement</name></expr>;</return>
			}</block></then>
			<else pos:line="301" pos:column="25">else
			<block pos:line="302" pos:column="25">{
				<comment type="line" pos:line="303" pos:column="33">//field is not contained by a class</comment>
				<return pos:line="304" pos:column="33">return <expr><name pos:line="304" pos:column="40">null</name></expr>;</return>
			}</block></else></if>
		}</block></function>

      

		<function><type><specifier pos:line="310" pos:column="17">public</specifier> <specifier pos:line="310" pos:column="24">static</specifier> <name pos:line="310" pos:column="31">MethodElement</name></type> <name pos:line="310" pos:column="45">RetrieveMethodElement</name><parameter_list pos:line="310" pos:column="66">(<param><decl><type><name pos:line="310" pos:column="67">XElement</name></type> <name pos:line="310" pos:column="76">field</name></decl></param><op:operator pos:line="310" pos:column="81">,</op:operator> <param><decl><type><name><name pos:line="310" pos:column="83">List</name><argument_list pos:line="310" pos:column="87">&lt;<argument><name pos:line="310" pos:column="88">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="310" pos:column="104">programElements</name></decl></param>)</parameter_list>
		<block pos:line="311" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="312" pos:column="25">IEnumerable</name><argument_list pos:line="312" pos:column="36">&lt;<argument><name pos:line="312" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="312" pos:column="47">ownerMethods</name> =<init pos:line="312" pos:column="61">
				<expr><linq><from pos:line="313" pos:column="33">from <expr><name pos:line="313" pos:column="38">el</name></expr> <in pos:line="313" pos:column="41">in <expr><call><name><name pos:line="313" pos:column="44">field</name><op:operator pos:line="313" pos:column="49">.</op:operator><name pos:line="313" pos:column="50">Ancestors</name></name><argument_list pos:line="313" pos:column="59">(<argument><expr><name><name pos:line="313" pos:column="60">SRC</name><op:operator pos:line="313" pos:column="63">.</op:operator><name pos:line="313" pos:column="64">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
				<select pos:line="314" pos:column="33">select <expr><name pos:line="314" pos:column="40">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
			<macro><name pos:line="315" pos:column="25">ownerMethods</name></macro><expr_stmt><expr><op:operator pos:line="315" pos:column="37">.</op:operator><macro><name pos:line="315" pos:column="38">Union</name><argument_list pos:line="315" pos:column="43">(<argument pos:line="315" pos:column="44">from el in field.Ancestors(SRC.Constructor) select el</argument>)</argument_list></macro></expr>;</expr_stmt>

			<if pos:line="317" pos:column="25">if<condition pos:line="317" pos:column="27">(<expr><call><name><name pos:line="317" pos:column="28">ownerMethods</name><op:operator pos:line="317" pos:column="40">.</op:operator><name pos:line="317" pos:column="41">Count</name></name><argument_list pos:line="317" pos:column="46">()</argument_list></call> <op:operator pos:line="317" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="317" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="317" pos:column="53">
			<block pos:line="318" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="319" pos:column="33">XElement</name></type> <name pos:line="319" pos:column="42">name</name> =<init pos:line="319" pos:column="48"> <expr><call><name><name pos:line="319" pos:column="49">ownerMethods</name><op:operator pos:line="319" pos:column="61">.</op:operator><name pos:line="319" pos:column="62">First</name></name><argument_list pos:line="319" pos:column="67">()</argument_list></call><op:operator pos:line="319" pos:column="69">.</op:operator><call><name pos:line="319" pos:column="70">Element</name><argument_list pos:line="319" pos:column="77">(<argument><expr><name><name pos:line="319" pos:column="78">SRC</name><op:operator pos:line="319" pos:column="81">.</op:operator><name pos:line="319" pos:column="82">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="320" pos:column="33">string</name></type> <name pos:line="320" pos:column="40">ownerMethodName</name> =<init pos:line="320" pos:column="57"> <expr><name><name pos:line="320" pos:column="58">name</name><op:operator pos:line="320" pos:column="62">.</op:operator><name pos:line="320" pos:column="63">Value</name></name></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="321" pos:column="33">//now find the MethodElement object corresponding to ownerMethodName, since those should have been gen'd by now</comment>
                <decl_stmt><decl><type><name pos:line="322" pos:column="17">ProgramElement</name></type> <name pos:line="322" pos:column="32">ownerMethod</name> =<init pos:line="322" pos:column="45"> <expr><call><name><name pos:line="322" pos:column="46">programElements</name><op:operator pos:line="322" pos:column="61">.</op:operator><name pos:line="322" pos:column="62">Find</name></name><argument_list pos:line="322" pos:column="66">(<argument><expr><name pos:line="322" pos:column="67">element</name> <op:operator pos:line="322" pos:column="75">=&gt;</op:operator> <name pos:line="322" pos:column="78">element</name> <op:operator pos:line="322" pos:column="86">is</op:operator> <name pos:line="322" pos:column="89">MethodElement</name> <op:operator pos:line="322" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="322" pos:column="106">(</op:operator><op:operator pos:line="322" pos:column="107">(</op:operator><name pos:line="322" pos:column="108">MethodElement</name><op:operator pos:line="322" pos:column="121">)</op:operator><name pos:line="322" pos:column="122">element</name><op:operator pos:line="322" pos:column="129">)</op:operator><op:operator pos:line="322" pos:column="130">.</op:operator><name pos:line="322" pos:column="131">Name</name> <op:operator pos:line="322" pos:column="136">==</op:operator> <name pos:line="322" pos:column="139">ownerMethodName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="323" pos:column="33">return <expr><name pos:line="323" pos:column="40">ownerMethod</name> <op:operator pos:line="323" pos:column="52">as</op:operator> <name pos:line="323" pos:column="55">MethodElement</name></expr>;</return>
			}</block></then>
			<else pos:line="325" pos:column="25">else
			<block pos:line="326" pos:column="25">{
				<comment type="line" pos:line="327" pos:column="33">//field is not contained by a method</comment>
				<return pos:line="328" pos:column="33">return <expr><name pos:line="328" pos:column="40">null</name></expr>;</return>
			}</block></else></if>
		}</block></function>

        <function><type><specifier pos:line="332" pos:column="9">public</specifier> <specifier pos:line="332" pos:column="16">static</specifier> <name pos:line="332" pos:column="23">string</name></type> <name pos:line="332" pos:column="30">RetrieveSource</name><parameter_list pos:line="332" pos:column="44">(<param><decl><type><name pos:line="332" pos:column="45">string</name></type> <name pos:line="332" pos:column="52">source</name></decl></param>)</parameter_list>
        <block pos:line="333" pos:column="9">{
            <try pos:line="334" pos:column="13">try
            <block pos:line="335" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="336" pos:column="17">var</name></type> <name pos:line="336" pos:column="21">snip</name> =<init pos:line="336" pos:column="27"> <expr><op:operator pos:line="336" pos:column="28">new</op:operator> <call><name pos:line="336" pos:column="32">StringBuilder</name><argument_list pos:line="336" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="337" pos:column="17">var</name></type> <name pos:line="337" pos:column="21">lines</name> =<init pos:line="337" pos:column="28"> <expr><call><name><name pos:line="337" pos:column="29">source</name><op:operator pos:line="337" pos:column="35">.</op:operator><name pos:line="337" pos:column="36">Replace</name></name><argument_list pos:line="337" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="337" pos:column="44">"\t"</lit:literal></expr></argument><op:operator pos:line="337" pos:column="48">,</op:operator> <argument><expr><lit:literal type="string" pos:line="337" pos:column="50">"   "</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="337" pos:column="56">.</op:operator><call><name pos:line="337" pos:column="57">Split</name><argument_list pos:line="337" pos:column="62">(<argument><expr><lit:literal type="char" pos:line="337" pos:column="63">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="337" pos:column="68">.</op:operator><call><name pos:line="337" pos:column="69">ToList</name><argument_list pos:line="337" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="338" pos:column="17">var</name></type> <name pos:line="338" pos:column="21">prefixToRemove</name> =<init pos:line="338" pos:column="37"> <expr><name><name pos:line="338" pos:column="38">String</name><op:operator pos:line="338" pos:column="44">.</op:operator><name pos:line="338" pos:column="45">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="339" pos:column="17">char</name><index pos:line="339" pos:column="21">[]</index></name></type> <name pos:line="339" pos:column="24">trimChars</name> =<init pos:line="339" pos:column="35"> <expr><block pos:line="339" pos:column="36">{ <expr><lit:literal type="char" pos:line="339" pos:column="38">'\n'</lit:literal></expr><op:operator pos:line="339" pos:column="42">,</op:operator> <expr><lit:literal type="char" pos:line="339" pos:column="44">'\r'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="340" pos:column="33">//if(lines.Count &gt; 1 &amp;&amp; numLines &gt; 2)</comment>
                <if pos:line="341" pos:column="17">if<condition pos:line="341" pos:column="19">(<expr><name><name pos:line="341" pos:column="20">lines</name><op:operator pos:line="341" pos:column="25">.</op:operator><name pos:line="341" pos:column="26">Count</name></name> <op:operator pos:line="341" pos:column="32">&gt;</op:operator> <lit:literal type="number" pos:line="341" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="341" pos:column="36">
                <block pos:line="342" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="343" pos:column="21">var</name></type> <name pos:line="343" pos:column="25">secondLine</name> =<init pos:line="343" pos:column="37"> <expr><name><name pos:line="343" pos:column="38">lines</name><index pos:line="343" pos:column="43">[<expr><lit:literal type="number" pos:line="343" pos:column="44">1</lit:literal></expr>]</index></name><op:operator pos:line="343" pos:column="46">.</op:operator><call><name pos:line="343" pos:column="47">Trim</name><argument_list pos:line="343" pos:column="51">(<argument><expr><name pos:line="343" pos:column="52">trimChars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="344" pos:column="21">var</name></type> <name pos:line="344" pos:column="25">match</name> =<init pos:line="344" pos:column="32"> <expr><call><name><name pos:line="344" pos:column="33">Regex</name><op:operator pos:line="344" pos:column="38">.</op:operator><name pos:line="344" pos:column="39">Match</name></name><argument_list pos:line="344" pos:column="44">(<argument><expr><name pos:line="344" pos:column="45">secondLine</name></expr></argument><op:operator pos:line="344" pos:column="55">,</op:operator> <argument><expr><lit:literal type="string" pos:line="344" pos:column="57">"(\\s+)"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="345" pos:column="21">if<condition pos:line="345" pos:column="23">(<expr><name><name pos:line="345" pos:column="24">match</name><op:operator pos:line="345" pos:column="29">.</op:operator><name pos:line="345" pos:column="30">Success</name></name></expr>)</condition><then pos:line="345" pos:column="38">
                        <expr_stmt><expr><name pos:line="346" pos:column="25">prefixToRemove</name> <op:operator pos:line="346" pos:column="40">=</op:operator> <name><name pos:line="346" pos:column="42">match</name><op:operator pos:line="346" pos:column="47">.</op:operator><name pos:line="346" pos:column="48">Groups</name><index pos:line="346" pos:column="54">[<expr><lit:literal type="number" pos:line="346" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="346" pos:column="57">.</op:operator><name pos:line="346" pos:column="58">Value</name></expr>;</expr_stmt></then></if>
                }</block></then></if>
                <if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">(<expr><name><name pos:line="348" pos:column="21">lines</name><op:operator pos:line="348" pos:column="26">.</op:operator><name pos:line="348" pos:column="27">Count</name></name> <op:operator pos:line="348" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="348" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="348" pos:column="37">
                <block pos:line="349" pos:column="17">{
					<comment type="line" pos:line="350" pos:column="41">//for(int i = 0; i &lt; lines.Count &amp;&amp; i &lt; numLines; ++i)</comment>
                    <for pos:line="351" pos:column="21">for(<init><decl><type><name pos:line="351" pos:column="25">int</name></type> <name pos:line="351" pos:column="29">i</name>=<init><expr><lit:literal type="number" pos:line="351" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="351" pos:column="34">i</name><op:operator pos:line="351" pos:column="35">&lt;</op:operator><name><name pos:line="351" pos:column="36">lines</name><op:operator pos:line="351" pos:column="41">.</op:operator><name pos:line="351" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><op:operator pos:line="351" pos:column="49">++</op:operator><name pos:line="351" pos:column="51">i</name></expr></incr>)
                    <block pos:line="352" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="353" pos:column="25">var</name></type> <name pos:line="353" pos:column="29">line</name> =<init pos:line="353" pos:column="35"> <expr><name><name pos:line="353" pos:column="36">lines</name><index pos:line="353" pos:column="41">[<expr><name pos:line="353" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="353" pos:column="44">.</op:operator><call><name pos:line="353" pos:column="45">Trim</name><argument_list pos:line="353" pos:column="49">(<argument><expr><name pos:line="353" pos:column="50">trimChars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="354" pos:column="25">if<condition pos:line="354" pos:column="27">(<expr><call><name><name pos:line="354" pos:column="28">line</name><op:operator pos:line="354" pos:column="32">.</op:operator><name pos:line="354" pos:column="33">StartsWith</name></name><argument_list pos:line="354" pos:column="43">(<argument><expr><name pos:line="354" pos:column="44">prefixToRemove</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="60">
                            <expr_stmt><expr><name pos:line="355" pos:column="29">line</name> <op:operator pos:line="355" pos:column="34">=</op:operator> <call><name><name pos:line="355" pos:column="36">line</name><op:operator pos:line="355" pos:column="40">.</op:operator><name pos:line="355" pos:column="41">Substring</name></name><argument_list pos:line="355" pos:column="50">(<argument><expr><name><name pos:line="355" pos:column="51">prefixToRemove</name><op:operator pos:line="355" pos:column="65">.</op:operator><name pos:line="355" pos:column="66">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                        <expr_stmt><expr><call><name><name pos:line="356" pos:column="25">snip</name><op:operator pos:line="356" pos:column="29">.</op:operator><name pos:line="356" pos:column="30">AppendLine</name></name><argument_list pos:line="356" pos:column="40">(<argument><expr><name pos:line="356" pos:column="41">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></then></if>
                <return pos:line="359" pos:column="17">return <expr><call><name><name pos:line="359" pos:column="24">snip</name><op:operator pos:line="359" pos:column="28">.</op:operator><name pos:line="359" pos:column="29">ToString</name></name><argument_list pos:line="359" pos:column="37">()</argument_list></call></expr>;</return>
            }</block>
            <catch pos:line="361" pos:column="13">catch (<param><decl><type><name pos:line="361" pos:column="20">Exception</name></type> <name pos:line="361" pos:column="30">e</name></decl></param>)
            <block pos:line="362" pos:column="13">{
                <return pos:line="363" pos:column="17">return <expr><name pos:line="363" pos:column="24">source</name></expr>;</return>
            }</block></catch></try>
        }</block></function>

		<function><type><specifier pos:line="367" pos:column="17">public</specifier> <specifier pos:line="367" pos:column="24">static</specifier> <name pos:line="367" pos:column="31">string</name></type> <name pos:line="367" pos:column="38">RetrieveSource</name><parameter_list pos:line="367" pos:column="52">(<param><decl><type><name pos:line="367" pos:column="53">XElement</name></type> <name pos:line="367" pos:column="62">theThang</name></decl></param>)</parameter_list>
		<block pos:line="368" pos:column="17">{
		    <decl_stmt><decl><type><name pos:line="369" pos:column="21">string</name></type> <name pos:line="369" pos:column="28">retrieveSnippet</name> =<init pos:line="369" pos:column="45"> <expr><name><name pos:line="369" pos:column="46">theThang</name><op:operator pos:line="369" pos:column="54">.</op:operator><name pos:line="369" pos:column="55">Value</name></name></expr></init></decl>;</decl_stmt>
            <return pos:line="370" pos:column="13">return <expr><call><name pos:line="370" pos:column="20">RetrieveSource</name><argument_list pos:line="370" pos:column="34">(<argument><expr><name pos:line="370" pos:column="35">retrieveSnippet</name></expr></argument>)</argument_list></call></expr>;</return>

		}</block></function>

        

	    <function><type><specifier pos:line="376" pos:column="13">public</specifier> <specifier pos:line="376" pos:column="20">static</specifier> <name pos:line="376" pos:column="27">AccessLevel</name></type> <name pos:line="376" pos:column="39">RetrieveAccessLevel</name><parameter_list pos:line="376" pos:column="58">(<param><decl><type><name pos:line="376" pos:column="59">XElement</name></type> <name pos:line="376" pos:column="68">parent</name></decl></param><op:operator pos:line="376" pos:column="74">,</op:operator> <param><decl><type><name pos:line="376" pos:column="76">AccessLevel</name></type> <name pos:line="376" pos:column="88">defautlAccessLevel</name> =<init pos:line="376" pos:column="108"> <expr><name><name pos:line="376" pos:column="109">AccessLevel</name><op:operator pos:line="376" pos:column="120">.</op:operator><name pos:line="376" pos:column="121">Internal</name></name></expr></init></decl></param>)</parameter_list>
	    <block pos:line="377" pos:column="13">{
	        <if pos:line="378" pos:column="17">if <condition pos:line="378" pos:column="20">(<expr><name pos:line="378" pos:column="21">parent</name> <op:operator pos:line="378" pos:column="28">==</op:operator> <name pos:line="378" pos:column="31">null</name></expr>)</condition><then pos:line="378" pos:column="36">
	            <return pos:line="379" pos:column="21">return <expr><name pos:line="379" pos:column="28">defautlAccessLevel</name></expr>;</return></then></if>

	        <decl_stmt><decl><type><name pos:line="381" pos:column="17">var</name></type> <name pos:line="381" pos:column="21">specifierElements</name> =<init pos:line="381" pos:column="40"> <expr><call><name><name pos:line="381" pos:column="41">parent</name><op:operator pos:line="381" pos:column="47">.</op:operator><name pos:line="381" pos:column="48">Elements</name></name><argument_list pos:line="381" pos:column="56">(<argument><expr><name><name pos:line="381" pos:column="57">SRC</name><op:operator pos:line="381" pos:column="60">.</op:operator><name pos:line="381" pos:column="61">Specifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="382" pos:column="13">foreach (<init><decl><type><name pos:line="382" pos:column="22">var</name></type> <name pos:line="382" pos:column="26">element</name> <init pos:line="382" pos:column="34">in <expr><name pos:line="382" pos:column="37">specifierElements</name></expr></init></decl></init>)
            <block pos:line="383" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="384" pos:column="17">AccessLevel</name></type> <name pos:line="384" pos:column="29">accessLevel</name></decl>;</decl_stmt>
                <if pos:line="385" pos:column="17">if <condition pos:line="385" pos:column="20">(<expr><call><name><name pos:line="385" pos:column="21">Enum</name><op:operator pos:line="385" pos:column="25">.</op:operator><name pos:line="385" pos:column="26">TryParse</name></name><argument_list pos:line="385" pos:column="34">(<argument><expr><name><name pos:line="385" pos:column="35">element</name><op:operator pos:line="385" pos:column="42">.</op:operator><name pos:line="385" pos:column="43">Value</name></name></expr></argument><op:operator pos:line="385" pos:column="48">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="385" pos:column="50">true</lit:literal></expr></argument><op:operator pos:line="385" pos:column="54">,</op:operator> <argument><specifier pos:line="385" pos:column="56">out</specifier> <expr><name pos:line="385" pos:column="60">accessLevel</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="385" pos:column="73">
                    <return pos:line="386" pos:column="21">return <expr><name pos:line="386" pos:column="28">accessLevel</name></expr>;</return></then></if>
            }</block></foreach>
            <return pos:line="388" pos:column="13">return <expr><name pos:line="388" pos:column="20">defautlAccessLevel</name></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
