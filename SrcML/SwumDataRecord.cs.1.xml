<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Recommender\Recommender\SwumDataRecord.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">ABB</name><op:operator pos:line="5" pos:column="10">.</op:operator><name pos:line="5" pos:column="11">Swum</name><op:operator pos:line="5" pos:column="15">.</op:operator><name pos:line="5" pos:column="16">Nodes</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Recommender</name></name> <block pos:line="7" pos:column="29">{
    <comment type="line" pos:line="8" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// Contains various data determined by constructing SWUM on a method.</comment>
    <comment type="line" pos:line="10" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">SwumDataRecord</name> <block pos:line="11" pos:column="33">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">MethodDeclarationNode</name></type> <name pos:line="12" pos:column="38">SwumNode</name> <block pos:line="12" pos:column="47">{ <function><name pos:line="12" pos:column="49">get</name>;</function> <function><name pos:line="12" pos:column="54">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">string</name></type> <name pos:line="13" pos:column="23">Action</name> <block pos:line="13" pos:column="30">{ <function><name pos:line="13" pos:column="32">get</name>;</function> <function><name pos:line="13" pos:column="37">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">PhraseNode</name></type> <name pos:line="14" pos:column="27">ParsedAction</name> <block pos:line="14" pos:column="40">{ <function><name pos:line="14" pos:column="42">get</name>;</function> <function><name pos:line="14" pos:column="47">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">string</name></type> <name pos:line="15" pos:column="23">Theme</name> <block pos:line="15" pos:column="29">{ <function><name pos:line="15" pos:column="31">get</name>;</function> <function><name pos:line="15" pos:column="36">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">PhraseNode</name></type> <name pos:line="16" pos:column="27">ParsedTheme</name> <block pos:line="16" pos:column="39">{ <function><name pos:line="16" pos:column="41">get</name>;</function> <function><name pos:line="16" pos:column="46">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">string</name></type> <name pos:line="17" pos:column="23">IndirectObject</name> <block pos:line="17" pos:column="38">{ <function><name pos:line="17" pos:column="40">get</name>;</function> <function><name pos:line="17" pos:column="45">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">PhraseNode</name></type> <name pos:line="18" pos:column="27">ParsedIndirectObject</name> <block pos:line="18" pos:column="48">{ <function><name pos:line="18" pos:column="50">get</name>;</function> <function><name pos:line="18" pos:column="55">set</name>;</function> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">public</specifier> <name><name pos:line="19" pos:column="16">ISet</name><argument_list pos:line="19" pos:column="20">&lt;<argument><name pos:line="19" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="19" pos:column="29">FileNames</name> <block pos:line="19" pos:column="39">{ <function><name pos:line="19" pos:column="41">get</name>;</function> private <function><name pos:line="19" pos:column="54">set</name>;</function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="21" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// Creates a new empty SwumDataRecord.</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">SwumDataRecord</name><parameter_list pos:line="24" pos:column="30">()</parameter_list> <block pos:line="24" pos:column="33">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">SwumNode</name> <op:operator pos:line="25" pos:column="22">=</op:operator> <name pos:line="25" pos:column="24">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">Action</name> <op:operator pos:line="26" pos:column="20">=</op:operator> <name><name pos:line="26" pos:column="22">string</name><op:operator pos:line="26" pos:column="28">.</op:operator><name pos:line="26" pos:column="29">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">ParsedAction</name> <op:operator pos:line="27" pos:column="26">=</op:operator> <name pos:line="27" pos:column="28">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">Theme</name> <op:operator pos:line="28" pos:column="19">=</op:operator> <name><name pos:line="28" pos:column="21">string</name><op:operator pos:line="28" pos:column="27">.</op:operator><name pos:line="28" pos:column="28">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">ParsedTheme</name> <op:operator pos:line="29" pos:column="25">=</op:operator> <name pos:line="29" pos:column="27">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">IndirectObject</name> <op:operator pos:line="30" pos:column="28">=</op:operator> <name><name pos:line="30" pos:column="30">string</name><op:operator pos:line="30" pos:column="36">.</op:operator><name pos:line="30" pos:column="37">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="31" pos:column="13">ParsedIndirectObject</name> <op:operator pos:line="31" pos:column="34">=</op:operator> <name pos:line="31" pos:column="36">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">FileNames</name> <op:operator pos:line="32" pos:column="23">=</op:operator> <op:operator pos:line="32" pos:column="25">new</op:operator> <call><name><name pos:line="32" pos:column="29">HashSet</name><argument_list pos:line="32" pos:column="36">&lt;<argument><name pos:line="32" pos:column="37">string</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Returns a string representation of the object.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name pos:line="38" pos:column="25">string</name></type> <name pos:line="38" pos:column="32">ToString</name><parameter_list pos:line="38" pos:column="40">()</parameter_list> <block pos:line="38" pos:column="43">{
            <return pos:line="39" pos:column="13">return <expr><call><name><name pos:line="39" pos:column="20">string</name><op:operator pos:line="39" pos:column="26">.</op:operator><name pos:line="39" pos:column="27">Format</name></name><argument_list pos:line="39" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="34">"{0}|{1}|{2}|{3}"</lit:literal></expr></argument><op:operator pos:line="39" pos:column="51">,</op:operator> <argument><expr><name pos:line="39" pos:column="53">ParsedAction</name></expr></argument><op:operator pos:line="39" pos:column="65">,</op:operator> <argument><expr><name pos:line="39" pos:column="67">ParsedTheme</name></expr></argument><op:operator pos:line="39" pos:column="78">,</op:operator> <argument><expr><name pos:line="39" pos:column="80">ParsedIndirectObject</name></expr></argument><op:operator pos:line="39" pos:column="100">,</op:operator> <argument><expr><call><name><name pos:line="39" pos:column="102">string</name><op:operator pos:line="39" pos:column="108">.</op:operator><name pos:line="39" pos:column="109">Join</name></name><argument_list pos:line="39" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="114">";"</lit:literal></expr></argument><op:operator pos:line="39" pos:column="117">,</op:operator> <argument><expr><name pos:line="39" pos:column="119">FileNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Creates a SwumDataRecord from a string representation</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;param name="source"&gt;The string to parse the SwumDataRecord from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;returns&gt;A new SwumDataRecord.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">static</specifier> <name pos:line="47" pos:column="23">SwumDataRecord</name></type> <name pos:line="47" pos:column="38">Parse</name><parameter_list pos:line="47" pos:column="43">(<param><decl><type><name pos:line="47" pos:column="44">string</name></type> <name pos:line="47" pos:column="51">source</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="59">{
            <if pos:line="48" pos:column="13">if<condition pos:line="48" pos:column="15">(<expr><name pos:line="48" pos:column="16">source</name> <op:operator pos:line="48" pos:column="23">==</op:operator> <name pos:line="48" pos:column="26">null</name></expr>)</condition><then pos:line="48" pos:column="31"> <block pos:line="48" pos:column="32">{
                <throw pos:line="49" pos:column="17">throw <expr><op:operator pos:line="49" pos:column="23">new</op:operator> <call><name pos:line="49" pos:column="27">ArgumentNullException</name><argument_list pos:line="49" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="49">"source"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name><name pos:line="52" pos:column="13">string</name><index pos:line="52" pos:column="19">[]</index></name></type> <name pos:line="52" pos:column="22">fields</name> =<init pos:line="52" pos:column="30"> <expr><call><name><name pos:line="52" pos:column="31">source</name><op:operator pos:line="52" pos:column="37">.</op:operator><name pos:line="52" pos:column="38">Split</name></name><argument_list pos:line="52" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="52" pos:column="44">'|'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><name><name pos:line="53" pos:column="16">fields</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">Length</name></name> <op:operator pos:line="53" pos:column="30">!=</op:operator> <lit:literal type="number" pos:line="53" pos:column="33">4</lit:literal></expr>)</condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{
                <throw pos:line="54" pos:column="17">throw <expr><op:operator pos:line="54" pos:column="23">new</op:operator> <call><name pos:line="54" pos:column="27">FormatException</name><argument_list pos:line="54" pos:column="42">(<argument><expr><call><name><name pos:line="54" pos:column="43">string</name><op:operator pos:line="54" pos:column="49">.</op:operator><name pos:line="54" pos:column="50">Format</name></name><argument_list pos:line="54" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="57">"Wrong number of |-separated fields. Expected 4, saw {0}"</lit:literal></expr></argument><op:operator pos:line="54" pos:column="114">,</op:operator> <argument><expr><name><name pos:line="54" pos:column="116">fields</name><op:operator pos:line="54" pos:column="122">.</op:operator><name pos:line="54" pos:column="123">Length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">sdr</name> =<init pos:line="56" pos:column="22"> <expr><op:operator pos:line="56" pos:column="23">new</op:operator> <call><name pos:line="56" pos:column="27">SwumDataRecord</name><argument_list pos:line="56" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="57" pos:column="13">if<condition pos:line="57" pos:column="15">(<expr><op:operator pos:line="57" pos:column="16">!</op:operator><call><name><name pos:line="57" pos:column="17">string</name><op:operator pos:line="57" pos:column="23">.</op:operator><name pos:line="57" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="57" pos:column="42">(<argument><expr><name><name pos:line="57" pos:column="43">fields</name><index pos:line="57" pos:column="49">[<expr><lit:literal type="number" pos:line="57" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="57" pos:column="54"> <block pos:line="57" pos:column="55">{
                <expr_stmt><expr><name><name pos:line="58" pos:column="17">sdr</name><op:operator pos:line="58" pos:column="20">.</op:operator><name pos:line="58" pos:column="21">ParsedAction</name></name> <op:operator pos:line="58" pos:column="34">=</op:operator> <call><name><name pos:line="58" pos:column="36">PhraseNode</name><op:operator pos:line="58" pos:column="46">.</op:operator><name pos:line="58" pos:column="47">Parse</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><name><name pos:line="58" pos:column="53">fields</name><index pos:line="58" pos:column="59">[<expr><lit:literal type="number" pos:line="58" pos:column="60">0</lit:literal></expr>]</index></name><op:operator pos:line="58" pos:column="62">.</op:operator><call><name pos:line="58" pos:column="63">Trim</name><argument_list pos:line="58" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="59" pos:column="17">sdr</name><op:operator pos:line="59" pos:column="20">.</op:operator><name pos:line="59" pos:column="21">Action</name></name> <op:operator pos:line="59" pos:column="28">=</op:operator> <call><name><name pos:line="59" pos:column="30">sdr</name><op:operator pos:line="59" pos:column="33">.</op:operator><name pos:line="59" pos:column="34">ParsedAction</name><op:operator pos:line="59" pos:column="46">.</op:operator><name pos:line="59" pos:column="47">ToPlainString</name></name><argument_list pos:line="59" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="61" pos:column="13">if<condition pos:line="61" pos:column="15">(<expr><op:operator pos:line="61" pos:column="16">!</op:operator><call><name><name pos:line="61" pos:column="17">string</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="61" pos:column="42">(<argument><expr><name><name pos:line="61" pos:column="43">fields</name><index pos:line="61" pos:column="49">[<expr><lit:literal type="number" pos:line="61" pos:column="50">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="61" pos:column="54"> <block pos:line="61" pos:column="55">{
                <expr_stmt><expr><name><name pos:line="62" pos:column="17">sdr</name><op:operator pos:line="62" pos:column="20">.</op:operator><name pos:line="62" pos:column="21">ParsedTheme</name></name> <op:operator pos:line="62" pos:column="33">=</op:operator> <call><name><name pos:line="62" pos:column="35">PhraseNode</name><op:operator pos:line="62" pos:column="45">.</op:operator><name pos:line="62" pos:column="46">Parse</name></name><argument_list pos:line="62" pos:column="51">(<argument><expr><name><name pos:line="62" pos:column="52">fields</name><index pos:line="62" pos:column="58">[<expr><lit:literal type="number" pos:line="62" pos:column="59">1</lit:literal></expr>]</index></name><op:operator pos:line="62" pos:column="61">.</op:operator><call><name pos:line="62" pos:column="62">Trim</name><argument_list pos:line="62" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="63" pos:column="17">sdr</name><op:operator pos:line="63" pos:column="20">.</op:operator><name pos:line="63" pos:column="21">Theme</name></name> <op:operator pos:line="63" pos:column="27">=</op:operator> <call><name><name pos:line="63" pos:column="29">sdr</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">ParsedTheme</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">ToPlainString</name></name><argument_list pos:line="63" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="65" pos:column="13">if<condition pos:line="65" pos:column="15">(<expr><op:operator pos:line="65" pos:column="16">!</op:operator><call><name><name pos:line="65" pos:column="17">string</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="65" pos:column="42">(<argument><expr><name><name pos:line="65" pos:column="43">fields</name><index pos:line="65" pos:column="49">[<expr><lit:literal type="number" pos:line="65" pos:column="50">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="54"> <block pos:line="65" pos:column="55">{
                <expr_stmt><expr><name><name pos:line="66" pos:column="17">sdr</name><op:operator pos:line="66" pos:column="20">.</op:operator><name pos:line="66" pos:column="21">ParsedIndirectObject</name></name> <op:operator pos:line="66" pos:column="42">=</op:operator> <call><name><name pos:line="66" pos:column="44">PhraseNode</name><op:operator pos:line="66" pos:column="54">.</op:operator><name pos:line="66" pos:column="55">Parse</name></name><argument_list pos:line="66" pos:column="60">(<argument><expr><name><name pos:line="66" pos:column="61">fields</name><index pos:line="66" pos:column="67">[<expr><lit:literal type="number" pos:line="66" pos:column="68">2</lit:literal></expr>]</index></name><op:operator pos:line="66" pos:column="70">.</op:operator><call><name pos:line="66" pos:column="71">Trim</name><argument_list pos:line="66" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="67" pos:column="17">sdr</name><op:operator pos:line="67" pos:column="20">.</op:operator><name pos:line="67" pos:column="21">IndirectObject</name></name> <op:operator pos:line="67" pos:column="36">=</op:operator> <call><name><name pos:line="67" pos:column="38">sdr</name><op:operator pos:line="67" pos:column="41">.</op:operator><name pos:line="67" pos:column="42">ParsedIndirectObject</name><op:operator pos:line="67" pos:column="62">.</op:operator><name pos:line="67" pos:column="63">ToPlainString</name></name><argument_list pos:line="67" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="69" pos:column="13">if<condition pos:line="69" pos:column="15">(<expr><op:operator pos:line="69" pos:column="16">!</op:operator><call><name><name pos:line="69" pos:column="17">string</name><op:operator pos:line="69" pos:column="23">.</op:operator><name pos:line="69" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="69" pos:column="42">(<argument><expr><name><name pos:line="69" pos:column="43">fields</name><index pos:line="69" pos:column="49">[<expr><lit:literal type="number" pos:line="69" pos:column="50">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="69" pos:column="54"> <block pos:line="69" pos:column="55">{
                <foreach pos:line="70" pos:column="17">foreach(<init><decl><type><name pos:line="70" pos:column="25">var</name></type> <name pos:line="70" pos:column="29">file</name> <init pos:line="70" pos:column="34">in <expr><name><name pos:line="70" pos:column="37">fields</name><index pos:line="70" pos:column="43">[<expr><lit:literal type="number" pos:line="70" pos:column="44">3</lit:literal></expr>]</index></name><op:operator pos:line="70" pos:column="46">.</op:operator><call><name pos:line="70" pos:column="47">Split</name><argument_list pos:line="70" pos:column="52">(<argument><expr><op:operator pos:line="70" pos:column="53">new</op:operator><index pos:line="70" pos:column="56">[]</index> <block pos:line="70" pos:column="59">{ <expr><lit:literal type="char" pos:line="70" pos:column="61">';'</lit:literal></expr> }</block></expr></argument><op:operator pos:line="70" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="70" pos:column="68">StringSplitOptions</name><op:operator pos:line="70" pos:column="86">.</op:operator><name pos:line="70" pos:column="87">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl></init>) <block pos:line="70" pos:column="108">{
                    <expr_stmt><expr><call><name><name pos:line="71" pos:column="21">sdr</name><op:operator pos:line="71" pos:column="24">.</op:operator><name pos:line="71" pos:column="25">FileNames</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">Add</name></name><argument_list pos:line="71" pos:column="38">(<argument><expr><name pos:line="71" pos:column="39">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">sdr</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
