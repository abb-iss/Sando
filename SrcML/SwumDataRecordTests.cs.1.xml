<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Recommender\Recommender.UnitTests\SwumDataRecordTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">Swum</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">ABB</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">Swum</name><op:operator pos:line="7" pos:column="15">.</op:operator><name pos:line="7" pos:column="16">Nodes</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Recommender</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Recommender</name><op:operator pos:line="10" pos:column="28">.</op:operator><name pos:line="10" pos:column="29">UnitTests</name></name> <block pos:line="10" pos:column="39">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">SwumDataRecordTests</name> <block pos:line="12" pos:column="38">{
        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">TestRoundTrip</name><parameter_list pos:line="14" pos:column="34">()</parameter_list> <block pos:line="14" pos:column="37">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">a1</name> =<init pos:line="15" pos:column="21"> <expr><op:operator pos:line="15" pos:column="22">new</op:operator> <call><name pos:line="15" pos:column="26">WordNode</name><argument_list pos:line="15" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="35">"DB"</lit:literal></expr></argument><op:operator pos:line="15" pos:column="39">,</op:operator> <argument><expr><name><name pos:line="15" pos:column="41">PartOfSpeechTag</name><op:operator pos:line="15" pos:column="56">.</op:operator><name pos:line="15" pos:column="57">Preamble</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">a2</name> =<init pos:line="16" pos:column="21"> <expr><op:operator pos:line="16" pos:column="22">new</op:operator> <call><name pos:line="16" pos:column="26">WordNode</name><argument_list pos:line="16" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="35">"Get"</lit:literal></expr></argument><op:operator pos:line="16" pos:column="40">,</op:operator> <argument><expr><name><name pos:line="16" pos:column="42">PartOfSpeechTag</name><op:operator pos:line="16" pos:column="57">.</op:operator><name pos:line="16" pos:column="58">Verb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">t1</name> =<init pos:line="17" pos:column="21"> <expr><op:operator pos:line="17" pos:column="22">new</op:operator> <call><name pos:line="17" pos:column="26">WordNode</name><argument_list pos:line="17" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="35">"Hydro"</lit:literal></expr></argument><op:operator pos:line="17" pos:column="42">,</op:operator> <argument><expr><name><name pos:line="17" pos:column="44">PartOfSpeechTag</name><op:operator pos:line="17" pos:column="59">.</op:operator><name pos:line="17" pos:column="60">NounModifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">t2</name> =<init pos:line="18" pos:column="21"> <expr><op:operator pos:line="18" pos:column="22">new</op:operator> <call><name pos:line="18" pos:column="26">WordNode</name><argument_list pos:line="18" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="35">"Fixed"</lit:literal></expr></argument><op:operator pos:line="18" pos:column="42">,</op:operator> <argument><expr><name><name pos:line="18" pos:column="44">PartOfSpeechTag</name><op:operator pos:line="18" pos:column="59">.</op:operator><name pos:line="18" pos:column="60">NounModifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">t3</name> =<init pos:line="19" pos:column="21"> <expr><op:operator pos:line="19" pos:column="22">new</op:operator> <call><name pos:line="19" pos:column="26">WordNode</name><argument_list pos:line="19" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="35">"Schedule"</lit:literal></expr></argument><op:operator pos:line="19" pos:column="45">,</op:operator> <argument><expr><name><name pos:line="19" pos:column="47">PartOfSpeechTag</name><op:operator pos:line="19" pos:column="62">.</op:operator><name pos:line="19" pos:column="63">Noun</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">sdr</name> =<init pos:line="21" pos:column="22"> <expr><op:operator pos:line="21" pos:column="23">new</op:operator> <call><name pos:line="21" pos:column="27">SwumDataRecord</name><argument_list pos:line="21" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">sdr</name><op:operator pos:line="22" pos:column="16">.</op:operator><name pos:line="22" pos:column="17">ParsedAction</name></name> <op:operator pos:line="22" pos:column="30">=</op:operator> <op:operator pos:line="22" pos:column="32">new</op:operator> <call><name pos:line="22" pos:column="36">PhraseNode</name><argument_list pos:line="22" pos:column="46">(<argument><expr><op:operator pos:line="22" pos:column="47">new</op:operator><index pos:line="22" pos:column="50">[]</index> <block pos:line="22" pos:column="53">{<expr><name pos:line="22" pos:column="54">a1</name></expr><op:operator pos:line="22" pos:column="56">,</op:operator> <expr><name pos:line="22" pos:column="58">a2</name></expr>}</block></expr></argument><op:operator pos:line="22" pos:column="61">,</op:operator> <argument><expr><name><name pos:line="22" pos:column="63">Location</name><op:operator pos:line="22" pos:column="71">.</op:operator><name pos:line="22" pos:column="72">None</name></name></expr></argument><op:operator pos:line="22" pos:column="76">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="22" pos:column="78">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">sdr</name><op:operator pos:line="23" pos:column="16">.</op:operator><name pos:line="23" pos:column="17">Action</name></name> <op:operator pos:line="23" pos:column="24">=</op:operator> <call><name><name pos:line="23" pos:column="26">sdr</name><op:operator pos:line="23" pos:column="29">.</op:operator><name pos:line="23" pos:column="30">ParsedAction</name><op:operator pos:line="23" pos:column="42">.</op:operator><name pos:line="23" pos:column="43">ToPlainString</name></name><argument_list pos:line="23" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">sdr</name><op:operator pos:line="24" pos:column="16">.</op:operator><name pos:line="24" pos:column="17">ParsedTheme</name></name> <op:operator pos:line="24" pos:column="29">=</op:operator> <op:operator pos:line="24" pos:column="31">new</op:operator> <call><name pos:line="24" pos:column="35">PhraseNode</name><argument_list pos:line="24" pos:column="45">(<argument><expr><op:operator pos:line="24" pos:column="46">new</op:operator><index pos:line="24" pos:column="49">[]</index> <block pos:line="24" pos:column="52">{<expr><name pos:line="24" pos:column="53">t1</name></expr><op:operator pos:line="24" pos:column="55">,</op:operator> <expr><name pos:line="24" pos:column="57">t2</name></expr><op:operator pos:line="24" pos:column="59">,</op:operator> <expr><name pos:line="24" pos:column="61">t3</name></expr>}</block></expr></argument><op:operator pos:line="24" pos:column="64">,</op:operator> <argument><expr><name><name pos:line="24" pos:column="66">Location</name><op:operator pos:line="24" pos:column="74">.</op:operator><name pos:line="24" pos:column="75">None</name></name></expr></argument><op:operator pos:line="24" pos:column="79">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="24" pos:column="81">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">sdr</name><op:operator pos:line="25" pos:column="16">.</op:operator><name pos:line="25" pos:column="17">Theme</name></name> <op:operator pos:line="25" pos:column="23">=</op:operator> <call><name><name pos:line="25" pos:column="25">sdr</name><op:operator pos:line="25" pos:column="28">.</op:operator><name pos:line="25" pos:column="29">ParsedTheme</name><op:operator pos:line="25" pos:column="40">.</op:operator><name pos:line="25" pos:column="41">ToPlainString</name></name><argument_list pos:line="25" pos:column="54">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">actual</name> =<init pos:line="27" pos:column="25"> <expr><call><name><name pos:line="27" pos:column="26">SwumDataRecord</name><op:operator pos:line="27" pos:column="40">.</op:operator><name pos:line="27" pos:column="41">Parse</name></name><argument_list pos:line="27" pos:column="46">(<argument><expr><call><name><name pos:line="27" pos:column="47">sdr</name><op:operator pos:line="27" pos:column="50">.</op:operator><name pos:line="27" pos:column="51">ToString</name></name><argument_list pos:line="27" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">IsTrue</name></name><argument_list pos:line="28" pos:column="26">(<argument><expr><call><name pos:line="28" pos:column="27">SwumDataRecordsAreEqual</name><argument_list pos:line="28" pos:column="50">(<argument><expr><name pos:line="28" pos:column="51">sdr</name></expr></argument><op:operator pos:line="28" pos:column="54">,</op:operator> <argument><expr><name pos:line="28" pos:column="56">actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">TestRoundTrip_FileNames</name><parameter_list pos:line="32" pos:column="44">()</parameter_list> <block pos:line="32" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">a1</name> =<init pos:line="33" pos:column="21"> <expr><op:operator pos:line="33" pos:column="22">new</op:operator> <call><name pos:line="33" pos:column="26">WordNode</name><argument_list pos:line="33" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="35">"DB"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="39">,</op:operator> <argument><expr><name><name pos:line="33" pos:column="41">PartOfSpeechTag</name><op:operator pos:line="33" pos:column="56">.</op:operator><name pos:line="33" pos:column="57">Preamble</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">a2</name> =<init pos:line="34" pos:column="21"> <expr><op:operator pos:line="34" pos:column="22">new</op:operator> <call><name pos:line="34" pos:column="26">WordNode</name><argument_list pos:line="34" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="35">"Get"</lit:literal></expr></argument><op:operator pos:line="34" pos:column="40">,</op:operator> <argument><expr><name><name pos:line="34" pos:column="42">PartOfSpeechTag</name><op:operator pos:line="34" pos:column="57">.</op:operator><name pos:line="34" pos:column="58">Verb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">t1</name> =<init pos:line="35" pos:column="21"> <expr><op:operator pos:line="35" pos:column="22">new</op:operator> <call><name pos:line="35" pos:column="26">WordNode</name><argument_list pos:line="35" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="35">"Hydro"</lit:literal></expr></argument><op:operator pos:line="35" pos:column="42">,</op:operator> <argument><expr><name><name pos:line="35" pos:column="44">PartOfSpeechTag</name><op:operator pos:line="35" pos:column="59">.</op:operator><name pos:line="35" pos:column="60">NounModifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">t2</name> =<init pos:line="36" pos:column="21"> <expr><op:operator pos:line="36" pos:column="22">new</op:operator> <call><name pos:line="36" pos:column="26">WordNode</name><argument_list pos:line="36" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="35">"Fixed"</lit:literal></expr></argument><op:operator pos:line="36" pos:column="42">,</op:operator> <argument><expr><name><name pos:line="36" pos:column="44">PartOfSpeechTag</name><op:operator pos:line="36" pos:column="59">.</op:operator><name pos:line="36" pos:column="60">NounModifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">t3</name> =<init pos:line="37" pos:column="21"> <expr><op:operator pos:line="37" pos:column="22">new</op:operator> <call><name pos:line="37" pos:column="26">WordNode</name><argument_list pos:line="37" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="35">"Schedule"</lit:literal></expr></argument><op:operator pos:line="37" pos:column="45">,</op:operator> <argument><expr><name><name pos:line="37" pos:column="47">PartOfSpeechTag</name><op:operator pos:line="37" pos:column="62">.</op:operator><name pos:line="37" pos:column="63">Noun</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">f1</name> =<init pos:line="38" pos:column="21"> <expr><lit:literal type="string" pos:line="38" pos:column="22">@"C:\foo\bar.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">f2</name> =<init pos:line="39" pos:column="21"> <expr><lit:literal type="string" pos:line="39" pos:column="22">@"C:\foo\baz\xyzzy.h"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">f3</name> =<init pos:line="40" pos:column="21"> <expr><lit:literal type="string" pos:line="40" pos:column="22">"test.cpp"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">sdr</name> =<init pos:line="42" pos:column="22"> <expr><op:operator pos:line="42" pos:column="23">new</op:operator> <call><name pos:line="42" pos:column="27">SwumDataRecord</name><argument_list pos:line="42" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">sdr</name><op:operator pos:line="43" pos:column="16">.</op:operator><name pos:line="43" pos:column="17">ParsedAction</name></name> <op:operator pos:line="43" pos:column="30">=</op:operator> <op:operator pos:line="43" pos:column="32">new</op:operator> <call><name pos:line="43" pos:column="36">PhraseNode</name><argument_list pos:line="43" pos:column="46">(<argument><expr><op:operator pos:line="43" pos:column="47">new</op:operator><index pos:line="43" pos:column="50">[]</index> <block pos:line="43" pos:column="53">{ <expr><name pos:line="43" pos:column="55">a1</name></expr><op:operator pos:line="43" pos:column="57">,</op:operator> <expr><name pos:line="43" pos:column="59">a2</name></expr> }</block></expr></argument><op:operator pos:line="43" pos:column="63">,</op:operator> <argument><expr><name><name pos:line="43" pos:column="65">Location</name><op:operator pos:line="43" pos:column="73">.</op:operator><name pos:line="43" pos:column="74">None</name></name></expr></argument><op:operator pos:line="43" pos:column="78">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="43" pos:column="80">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">sdr</name><op:operator pos:line="44" pos:column="16">.</op:operator><name pos:line="44" pos:column="17">Action</name></name> <op:operator pos:line="44" pos:column="24">=</op:operator> <call><name><name pos:line="44" pos:column="26">sdr</name><op:operator pos:line="44" pos:column="29">.</op:operator><name pos:line="44" pos:column="30">ParsedAction</name><op:operator pos:line="44" pos:column="42">.</op:operator><name pos:line="44" pos:column="43">ToPlainString</name></name><argument_list pos:line="44" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">sdr</name><op:operator pos:line="45" pos:column="16">.</op:operator><name pos:line="45" pos:column="17">ParsedTheme</name></name> <op:operator pos:line="45" pos:column="29">=</op:operator> <op:operator pos:line="45" pos:column="31">new</op:operator> <call><name pos:line="45" pos:column="35">PhraseNode</name><argument_list pos:line="45" pos:column="45">(<argument><expr><op:operator pos:line="45" pos:column="46">new</op:operator><index pos:line="45" pos:column="49">[]</index> <block pos:line="45" pos:column="52">{ <expr><name pos:line="45" pos:column="54">t1</name></expr><op:operator pos:line="45" pos:column="56">,</op:operator> <expr><name pos:line="45" pos:column="58">t2</name></expr><op:operator pos:line="45" pos:column="60">,</op:operator> <expr><name pos:line="45" pos:column="62">t3</name></expr> }</block></expr></argument><op:operator pos:line="45" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="45" pos:column="68">Location</name><op:operator pos:line="45" pos:column="76">.</op:operator><name pos:line="45" pos:column="77">None</name></name></expr></argument><op:operator pos:line="45" pos:column="81">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="45" pos:column="83">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">sdr</name><op:operator pos:line="46" pos:column="16">.</op:operator><name pos:line="46" pos:column="17">Theme</name></name> <op:operator pos:line="46" pos:column="23">=</op:operator> <call><name><name pos:line="46" pos:column="25">sdr</name><op:operator pos:line="46" pos:column="28">.</op:operator><name pos:line="46" pos:column="29">ParsedTheme</name><op:operator pos:line="46" pos:column="40">.</op:operator><name pos:line="46" pos:column="41">ToPlainString</name></name><argument_list pos:line="46" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">sdr</name><op:operator pos:line="47" pos:column="16">.</op:operator><name pos:line="47" pos:column="17">FileNames</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">Add</name></name><argument_list pos:line="47" pos:column="30">(<argument><expr><name pos:line="47" pos:column="31">f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">sdr</name><op:operator pos:line="48" pos:column="16">.</op:operator><name pos:line="48" pos:column="17">FileNames</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">Add</name></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">sdr</name><op:operator pos:line="49" pos:column="16">.</op:operator><name pos:line="49" pos:column="17">FileNames</name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">Add</name></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">f3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">actual</name> =<init pos:line="51" pos:column="25"> <expr><call><name><name pos:line="51" pos:column="26">SwumDataRecord</name><op:operator pos:line="51" pos:column="40">.</op:operator><name pos:line="51" pos:column="41">Parse</name></name><argument_list pos:line="51" pos:column="46">(<argument><expr><call><name><name pos:line="51" pos:column="47">sdr</name><op:operator pos:line="51" pos:column="50">.</op:operator><name pos:line="51" pos:column="51">ToString</name></name><argument_list pos:line="51" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">IsTrue</name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><call><name pos:line="52" pos:column="27">SwumDataRecordsAreEqual</name><argument_list pos:line="52" pos:column="50">(<argument><expr><name pos:line="52" pos:column="51">sdr</name></expr></argument><op:operator pos:line="52" pos:column="54">,</op:operator> <argument><expr><name pos:line="52" pos:column="56">actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">bool</name></type> <name pos:line="56" pos:column="21">WordNodesAreEqual</name><parameter_list pos:line="56" pos:column="38">(<param><decl><type><name pos:line="56" pos:column="39">WordNode</name></type> <name pos:line="56" pos:column="48">wn1</name></decl></param><op:operator pos:line="56" pos:column="51">,</op:operator> <param><decl><type><name pos:line="56" pos:column="53">WordNode</name></type> <name pos:line="56" pos:column="62">wn2</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="67">{
            <if pos:line="57" pos:column="13">if<condition pos:line="57" pos:column="15">(<expr><name pos:line="57" pos:column="16">wn1</name> <op:operator pos:line="57" pos:column="20">==</op:operator> <name pos:line="57" pos:column="23">wn2</name></expr>)</condition><then pos:line="57" pos:column="27"> <block pos:line="57" pos:column="28">{
                <return pos:line="58" pos:column="17">return <expr><lit:literal type="boolean" pos:line="58" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="60" pos:column="13">if<condition pos:line="60" pos:column="15">(<expr><name pos:line="60" pos:column="16">wn1</name> <op:operator pos:line="60" pos:column="20">==</op:operator> <name pos:line="60" pos:column="23">null</name> <op:operator pos:line="60" pos:column="28">^</op:operator> <name pos:line="60" pos:column="30">wn2</name> <op:operator pos:line="60" pos:column="34">==</op:operator> <name pos:line="60" pos:column="37">null</name></expr>)</condition><then pos:line="60" pos:column="42"> <block pos:line="60" pos:column="43">{
                <return pos:line="61" pos:column="17">return <expr><lit:literal type="boolean" pos:line="61" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <return pos:line="64" pos:column="13">return <expr><name><name pos:line="64" pos:column="20">wn1</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">Text</name></name> <op:operator pos:line="64" pos:column="29">==</op:operator> <name><name pos:line="64" pos:column="32">wn2</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">Text</name></name>
                   <op:operator pos:line="65" pos:column="20">&amp;&amp;</op:operator> <name><name pos:line="65" pos:column="23">wn1</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">Tag</name></name> <op:operator pos:line="65" pos:column="31">==</op:operator> <name><name pos:line="65" pos:column="34">wn2</name><op:operator pos:line="65" pos:column="37">.</op:operator><name pos:line="65" pos:column="38">Tag</name></name>
                   <op:operator pos:line="66" pos:column="20">&amp;&amp;</op:operator> <name><name pos:line="66" pos:column="23">wn1</name><op:operator pos:line="66" pos:column="26">.</op:operator><name pos:line="66" pos:column="27">Location</name></name> <op:operator pos:line="66" pos:column="36">==</op:operator> <name><name pos:line="66" pos:column="39">wn2</name><op:operator pos:line="66" pos:column="42">.</op:operator><name pos:line="66" pos:column="43">Location</name></name>
                   <op:operator pos:line="67" pos:column="20">&amp;&amp;</op:operator> <call><name><name pos:line="67" pos:column="23">Math</name><op:operator pos:line="67" pos:column="27">.</op:operator><name pos:line="67" pos:column="28">Abs</name></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name><name pos:line="67" pos:column="32">wn1</name><op:operator pos:line="67" pos:column="35">.</op:operator><name pos:line="67" pos:column="36">Confidence</name></name> <op:operator pos:line="67" pos:column="47">-</op:operator> <name><name pos:line="67" pos:column="49">wn2</name><op:operator pos:line="67" pos:column="52">.</op:operator><name pos:line="67" pos:column="53">Confidence</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="65">&lt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="67">.00001</lit:literal></expr>;</return>

        }</block></function>

        <function><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">bool</name></type> <name pos:line="71" pos:column="21">PhraseNodesAreEqual</name><parameter_list pos:line="71" pos:column="40">(<param><decl><type><name pos:line="71" pos:column="41">PhraseNode</name></type> <name pos:line="71" pos:column="52">pn1</name></decl></param><op:operator pos:line="71" pos:column="55">,</op:operator> <param><decl><type><name pos:line="71" pos:column="57">PhraseNode</name></type> <name pos:line="71" pos:column="68">pn2</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="73">{
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">pn1</name> <op:operator pos:line="72" pos:column="20">==</op:operator> <name pos:line="72" pos:column="23">pn2</name></expr>)</condition><then pos:line="72" pos:column="27"> <block pos:line="72" pos:column="28">{
                <return pos:line="73" pos:column="17">return <expr><lit:literal type="boolean" pos:line="73" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="75" pos:column="13">if<condition pos:line="75" pos:column="15">(<expr><name pos:line="75" pos:column="16">pn1</name> <op:operator pos:line="75" pos:column="20">==</op:operator> <name pos:line="75" pos:column="23">null</name> <op:operator pos:line="75" pos:column="28">^</op:operator> <name pos:line="75" pos:column="30">pn2</name> <op:operator pos:line="75" pos:column="34">==</op:operator> <name pos:line="75" pos:column="37">null</name></expr>)</condition><then pos:line="75" pos:column="42"> <block pos:line="75" pos:column="43">{
                <return pos:line="76" pos:column="17">return <expr><lit:literal type="boolean" pos:line="76" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>
            
            <if pos:line="79" pos:column="13">if<condition pos:line="79" pos:column="15">(<expr><call><name><name pos:line="79" pos:column="16">pn1</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">Size</name></name><argument_list pos:line="79" pos:column="24">()</argument_list></call> <op:operator pos:line="79" pos:column="27">!=</op:operator> <call><name><name pos:line="79" pos:column="30">pn2</name><op:operator pos:line="79" pos:column="33">.</op:operator><name pos:line="79" pos:column="34">Size</name></name><argument_list pos:line="79" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="79" pos:column="41"> <block pos:line="79" pos:column="42">{
                <return pos:line="80" pos:column="17">return <expr><lit:literal type="boolean" pos:line="80" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>
            <for pos:line="82" pos:column="13">for(<init><decl><type><name pos:line="82" pos:column="17">int</name></type> <name pos:line="82" pos:column="21">i</name> =<init pos:line="82" pos:column="24"> <expr><lit:literal type="number" pos:line="82" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="82" pos:column="28">i</name> <op:operator pos:line="82" pos:column="30">&lt;</op:operator> <call><name><name pos:line="82" pos:column="32">pn1</name><op:operator pos:line="82" pos:column="35">.</op:operator><name pos:line="82" pos:column="36">Size</name></name><argument_list pos:line="82" pos:column="40">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="82" pos:column="44">i</name><op:operator pos:line="82" pos:column="45">++</op:operator></expr></incr>) <block pos:line="82" pos:column="49">{
                <if pos:line="83" pos:column="17">if<condition pos:line="83" pos:column="19">(<expr><op:operator pos:line="83" pos:column="20">!</op:operator><call><name pos:line="83" pos:column="21">WordNodesAreEqual</name><argument_list pos:line="83" pos:column="38">(<argument><expr><name><name pos:line="83" pos:column="39">pn1</name><index pos:line="83" pos:column="42">[<expr><name pos:line="83" pos:column="43">i</name></expr>]</index></name></expr></argument><op:operator pos:line="83" pos:column="45">,</op:operator> <argument><expr><name><name pos:line="83" pos:column="47">pn2</name><index pos:line="83" pos:column="50">[<expr><name pos:line="83" pos:column="51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="83" pos:column="55"> <block pos:line="83" pos:column="56">{
                    <return pos:line="84" pos:column="21">return <expr><lit:literal type="boolean" pos:line="84" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></for>
            <return pos:line="87" pos:column="13">return <expr><lit:literal type="boolean" pos:line="87" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">bool</name></type> <name pos:line="90" pos:column="21">SwumDataRecordsAreEqual</name><parameter_list pos:line="90" pos:column="44">(<param><decl><type><name pos:line="90" pos:column="45">SwumDataRecord</name></type> <name pos:line="90" pos:column="60">sdr1</name></decl></param><op:operator pos:line="90" pos:column="64">,</op:operator> <param><decl><type><name pos:line="90" pos:column="66">SwumDataRecord</name></type> <name pos:line="90" pos:column="81">sdr2</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="87">{
            <if pos:line="91" pos:column="13">if<condition pos:line="91" pos:column="15">(<expr><name pos:line="91" pos:column="16">sdr1</name> <op:operator pos:line="91" pos:column="21">==</op:operator> <name pos:line="91" pos:column="24">sdr2</name></expr>)</condition><then pos:line="91" pos:column="29"> <block pos:line="91" pos:column="30">{
                <return pos:line="92" pos:column="17">return <expr><lit:literal type="boolean" pos:line="92" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><name pos:line="94" pos:column="16">sdr1</name> <op:operator pos:line="94" pos:column="21">==</op:operator> <name pos:line="94" pos:column="24">null</name> <op:operator pos:line="94" pos:column="29">^</op:operator> <name pos:line="94" pos:column="31">sdr2</name> <op:operator pos:line="94" pos:column="36">==</op:operator> <name pos:line="94" pos:column="39">null</name></expr>)</condition><then pos:line="94" pos:column="44"> <block pos:line="94" pos:column="45">{
                <return pos:line="95" pos:column="17">return <expr><lit:literal type="boolean" pos:line="95" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="98" pos:column="13">bool</name></type> <name pos:line="98" pos:column="18">areEqual</name> =<init pos:line="98" pos:column="28"> <expr><call><name pos:line="98" pos:column="29">PhraseNodesAreEqual</name><argument_list pos:line="98" pos:column="48">(<argument><expr><name><name pos:line="98" pos:column="49">sdr1</name><op:operator pos:line="98" pos:column="53">.</op:operator><name pos:line="98" pos:column="54">ParsedAction</name></name></expr></argument><op:operator pos:line="98" pos:column="66">,</op:operator> <argument><expr><name><name pos:line="98" pos:column="68">sdr2</name><op:operator pos:line="98" pos:column="72">.</op:operator><name pos:line="98" pos:column="73">ParsedAction</name></name></expr></argument>)</argument_list></call>
                            <op:operator pos:line="99" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="99" pos:column="32">PhraseNodesAreEqual</name><argument_list pos:line="99" pos:column="51">(<argument><expr><name><name pos:line="99" pos:column="52">sdr1</name><op:operator pos:line="99" pos:column="56">.</op:operator><name pos:line="99" pos:column="57">ParsedTheme</name></name></expr></argument><op:operator pos:line="99" pos:column="68">,</op:operator> <argument><expr><name><name pos:line="99" pos:column="70">sdr2</name><op:operator pos:line="99" pos:column="74">.</op:operator><name pos:line="99" pos:column="75">ParsedTheme</name></name></expr></argument>)</argument_list></call>
                            <op:operator pos:line="100" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="100" pos:column="32">PhraseNodesAreEqual</name><argument_list pos:line="100" pos:column="51">(<argument><expr><name><name pos:line="100" pos:column="52">sdr1</name><op:operator pos:line="100" pos:column="56">.</op:operator><name pos:line="100" pos:column="57">ParsedIndirectObject</name></name></expr></argument><op:operator pos:line="100" pos:column="77">,</op:operator> <argument><expr><name><name pos:line="100" pos:column="79">sdr2</name><op:operator pos:line="100" pos:column="83">.</op:operator><name pos:line="100" pos:column="84">ParsedIndirectObject</name></name></expr></argument>)</argument_list></call>
                            <op:operator pos:line="101" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="101" pos:column="32">sdr1</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">Action</name></name> <op:operator pos:line="101" pos:column="44">==</op:operator> <name><name pos:line="101" pos:column="47">sdr2</name><op:operator pos:line="101" pos:column="51">.</op:operator><name pos:line="101" pos:column="52">Action</name></name>
                            <op:operator pos:line="102" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="102" pos:column="32">sdr1</name><op:operator pos:line="102" pos:column="36">.</op:operator><name pos:line="102" pos:column="37">Theme</name></name> <op:operator pos:line="102" pos:column="43">==</op:operator> <name><name pos:line="102" pos:column="46">sdr2</name><op:operator pos:line="102" pos:column="50">.</op:operator><name pos:line="102" pos:column="51">Theme</name></name>
                            <op:operator pos:line="103" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="103" pos:column="32">sdr1</name><op:operator pos:line="103" pos:column="36">.</op:operator><name pos:line="103" pos:column="37">IndirectObject</name></name> <op:operator pos:line="103" pos:column="52">==</op:operator> <name><name pos:line="103" pos:column="55">sdr2</name><op:operator pos:line="103" pos:column="59">.</op:operator><name pos:line="103" pos:column="60">IndirectObject</name></name>
                            <op:operator pos:line="104" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="104" pos:column="32">sdr1</name><op:operator pos:line="104" pos:column="36">.</op:operator><name pos:line="104" pos:column="37">FileNames</name><op:operator pos:line="104" pos:column="46">.</op:operator><name pos:line="104" pos:column="47">Count</name></name> <op:operator pos:line="104" pos:column="53">==</op:operator> <name><name pos:line="104" pos:column="56">sdr2</name><op:operator pos:line="104" pos:column="60">.</op:operator><name pos:line="104" pos:column="61">FileNames</name><op:operator pos:line="104" pos:column="70">.</op:operator><name pos:line="104" pos:column="71">Count</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="105" pos:column="13">if<condition pos:line="105" pos:column="15">(<expr><name pos:line="105" pos:column="16">areEqual</name></expr>)</condition><then pos:line="105" pos:column="25"> <block pos:line="105" pos:column="26">{
                <comment type="line" pos:line="106" pos:column="17">//both FileNames are the same size</comment>
                <foreach pos:line="107" pos:column="17">foreach(<init><decl><type><name pos:line="107" pos:column="25">var</name></type> <name pos:line="107" pos:column="29">file</name> <init pos:line="107" pos:column="34">in <expr><name><name pos:line="107" pos:column="37">sdr1</name><op:operator pos:line="107" pos:column="41">.</op:operator><name pos:line="107" pos:column="42">FileNames</name></name></expr></init></decl></init>) <block pos:line="107" pos:column="53">{
                    <expr_stmt><expr><name pos:line="108" pos:column="21">areEqual</name> <op:operator pos:line="108" pos:column="30">=</op:operator> <name pos:line="108" pos:column="32">areEqual</name> <op:operator pos:line="108" pos:column="41">&amp;&amp;</op:operator> <call><name><name pos:line="108" pos:column="44">sdr2</name><op:operator pos:line="108" pos:column="48">.</op:operator><name pos:line="108" pos:column="49">FileNames</name><op:operator pos:line="108" pos:column="58">.</op:operator><name pos:line="108" pos:column="59">Contains</name></name><argument_list pos:line="108" pos:column="67">(<argument><expr><name pos:line="108" pos:column="68">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">areEqual</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
