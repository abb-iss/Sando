<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Recommender\Recommender.UnitTests\SwumManagerTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Threading</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">NUnit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Framework</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Recommender</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Recommender</name><op:operator pos:line="11" pos:column="28">.</op:operator><name pos:line="11" pos:column="29">UnitTests</name></name> <block pos:line="11" pos:column="39">{
    <class><attribute pos:line="12" pos:column="5">[<expr><name pos:line="12" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="13" pos:column="11">SwumManagerTests</name> <block pos:line="13" pos:column="28">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">readonly</specifier> <name pos:line="14" pos:column="18">SwumManager</name></type> <name pos:line="14" pos:column="30">manager</name> =<init pos:line="14" pos:column="39"> <expr><name><name pos:line="14" pos:column="40">SwumManager</name><op:operator pos:line="14" pos:column="51">.</op:operator><name pos:line="14" pos:column="52">Instance</name></name></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">FixtureSetup</name><parameter_list pos:line="17" pos:column="33">()</parameter_list> <block pos:line="17" pos:column="36">{
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">manager</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Generator</name></name> <op:operator pos:line="18" pos:column="31">=</op:operator> <op:operator pos:line="18" pos:column="33">new</op:operator> <call><name pos:line="18" pos:column="37">SrcMLGenerator</name><argument_list pos:line="18" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="52">@"LIBS\SrcML"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">Teardown</name><parameter_list pos:line="22" pos:column="29">()</parameter_list> <block pos:line="22" pos:column="32">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">manager</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Clear</name></name><argument_list pos:line="23" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">TestCacheRoundTrip</name><parameter_list pos:line="27" pos:column="39">()</parameter_list> <block pos:line="27" pos:column="42">{
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">manager</name><op:operator pos:line="28" pos:column="20">.</op:operator><name pos:line="28" pos:column="21">AddSrcMLFile</name></name><argument_list pos:line="28" pos:column="33">(<argument><expr><op:operator pos:line="28" pos:column="34">new</op:operator> <call><name pos:line="28" pos:column="38">SrcMLFile</name><argument_list pos:line="28" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="48">@"TestFiles\json_reader.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">int</name></type> <name pos:line="29" pos:column="17">beforeCount</name> =<init pos:line="29" pos:column="30"> <expr><call><name><name pos:line="29" pos:column="31">manager</name><op:operator pos:line="29" pos:column="38">.</op:operator><name pos:line="29" pos:column="39">GetSwumData</name></name><argument_list pos:line="29" pos:column="50">()</argument_list></call><op:operator pos:line="29" pos:column="52">.</op:operator><name pos:line="29" pos:column="53">Count</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="30" pos:column="13">//string tempFile = Path.GetTempFileName();</comment>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">string</name></type> <name pos:line="31" pos:column="20">tempFile</name> =<init pos:line="31" pos:column="30"> <expr><lit:literal type="string" pos:line="31" pos:column="31">"swum_cache.txt"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">manager</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">PrintSwumCache</name></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">manager</name><op:operator pos:line="33" pos:column="20">.</op:operator><name pos:line="33" pos:column="21">ReadSwumCache</name></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">AreEqual</name></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">beforeCount</name></expr></argument><op:operator pos:line="34" pos:column="40">,</op:operator> <argument><expr><call><name><name pos:line="34" pos:column="42">manager</name><op:operator pos:line="34" pos:column="49">.</op:operator><name pos:line="34" pos:column="50">GetSwumData</name></name><argument_list pos:line="34" pos:column="61">()</argument_list></call><op:operator pos:line="34" pos:column="63">.</op:operator><name pos:line="34" pos:column="64">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="35" pos:column="13">//TODO: add assertions that verify contents of SWUM</comment>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">TestAddSourceFile</name><parameter_list pos:line="39" pos:column="38">()</parameter_list> <block pos:line="39" pos:column="41">{
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Assert</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">IsFalse</name></name><argument_list pos:line="40" pos:column="27">(<argument><expr><call><name><name pos:line="40" pos:column="28">manager</name><op:operator pos:line="40" pos:column="35">.</op:operator><name pos:line="40" pos:column="36">GetSwumData</name></name><argument_list pos:line="40" pos:column="47">()</argument_list></call><op:operator pos:line="40" pos:column="49">.</op:operator><call><name pos:line="40" pos:column="50">Any</name><argument_list pos:line="40" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">manager</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">AddSourceFile</name></name><argument_list pos:line="41" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="35">@"TestFiles\small_json_reader.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">AreEqual</name></name><argument_list pos:line="42" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="29">5</lit:literal></expr></argument><op:operator pos:line="42" pos:column="30">,</op:operator> <argument><expr><call><name><name pos:line="42" pos:column="32">manager</name><op:operator pos:line="42" pos:column="39">.</op:operator><name pos:line="42" pos:column="40">GetSwumData</name></name><argument_list pos:line="42" pos:column="51">()</argument_list></call><op:operator pos:line="42" pos:column="53">.</op:operator><name><name pos:line="42" pos:column="54">Keys</name><op:operator pos:line="42" pos:column="58">.</op:operator><name pos:line="42" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">IsNotNull</name></name><argument_list pos:line="43" pos:column="29">(<argument><expr><call><name><name pos:line="43" pos:column="30">manager</name><op:operator pos:line="43" pos:column="37">.</op:operator><name pos:line="43" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="43" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="58">"static bool containsNewLine( Reader::Location begin, Reader::Location end )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">IsNotNull</name></name><argument_list pos:line="44" pos:column="29">(<argument><expr><call><name><name pos:line="44" pos:column="30">manager</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="44" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="58">"static std::string codePointToUTF8(unsigned int cp)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">IsNotNull</name></name><argument_list pos:line="45" pos:column="29">(<argument><expr><call><name><name pos:line="45" pos:column="30">manager</name><op:operator pos:line="45" pos:column="37">.</op:operator><name pos:line="45" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="45" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="58">"Reader::Reader()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">IsNotNull</name></name><argument_list pos:line="46" pos:column="29">(<argument><expr><call><name><name pos:line="46" pos:column="30">manager</name><op:operator pos:line="46" pos:column="37">.</op:operator><name pos:line="46" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="46" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="58">"bool Reader::parse( const std::string &amp;document, Value &amp;root, bool collectComments )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">IsNotNull</name></name><argument_list pos:line="47" pos:column="29">(<argument><expr><call><name><name pos:line="47" pos:column="30">manager</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="47" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="58">"bool Reader::parse( std::istream&amp; sin, Value &amp;root, bool collectComments )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="50" pos:column="9">[<expr><name pos:line="50" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">TestAddSourceFile_DoubleExtension</name><parameter_list pos:line="51" pos:column="54">()</parameter_list> <block pos:line="51" pos:column="57">{
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">IsFalse</name></name><argument_list pos:line="52" pos:column="27">(<argument><expr><call><name><name pos:line="52" pos:column="28">manager</name><op:operator pos:line="52" pos:column="35">.</op:operator><name pos:line="52" pos:column="36">GetSwumData</name></name><argument_list pos:line="52" pos:column="47">()</argument_list></call><op:operator pos:line="52" pos:column="49">.</op:operator><call><name pos:line="52" pos:column="50">Any</name><argument_list pos:line="52" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">manager</name><op:operator pos:line="53" pos:column="20">.</op:operator><name pos:line="53" pos:column="21">AddSourceFile</name></name><argument_list pos:line="53" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="35">@"TestFiles\small_json.reader.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">AreEqual</name></name><argument_list pos:line="54" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="29">5</lit:literal></expr></argument><op:operator pos:line="54" pos:column="30">,</op:operator> <argument><expr><call><name><name pos:line="54" pos:column="32">manager</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">GetSwumData</name></name><argument_list pos:line="54" pos:column="51">()</argument_list></call><op:operator pos:line="54" pos:column="53">.</op:operator><name><name pos:line="54" pos:column="54">Keys</name><op:operator pos:line="54" pos:column="58">.</op:operator><name pos:line="54" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">IsNotNull</name></name><argument_list pos:line="55" pos:column="29">(<argument><expr><call><name><name pos:line="55" pos:column="30">manager</name><op:operator pos:line="55" pos:column="37">.</op:operator><name pos:line="55" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="55" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="58">"static bool containsNewLine( Reader::Location begin, Reader::Location end )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">IsNotNull</name></name><argument_list pos:line="56" pos:column="29">(<argument><expr><call><name><name pos:line="56" pos:column="30">manager</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="56" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="58">"static std::string codePointToUTF8(unsigned int cp)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsNotNull</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><call><name><name pos:line="57" pos:column="30">manager</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="57" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="58">"Reader::Reader()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">IsNotNull</name></name><argument_list pos:line="58" pos:column="29">(<argument><expr><call><name><name pos:line="58" pos:column="30">manager</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="58" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="58">"bool Reader::parse( const std::string &amp;document, Value &amp;root, bool collectComments )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">IsNotNull</name></name><argument_list pos:line="59" pos:column="29">(<argument><expr><call><name><name pos:line="59" pos:column="30">manager</name><op:operator pos:line="59" pos:column="37">.</op:operator><name pos:line="59" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="59" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="58">"bool Reader::parse( std::istream&amp; sin, Value &amp;root, bool collectComments )"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">TestAddSourceFile_CSharp_Property</name><parameter_list pos:line="63" pos:column="54">()</parameter_list> <block pos:line="63" pos:column="57">{
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">IsFalse</name></name><argument_list pos:line="64" pos:column="27">(<argument><expr><call><name><name pos:line="64" pos:column="28">manager</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">GetSwumData</name></name><argument_list pos:line="64" pos:column="47">()</argument_list></call><op:operator pos:line="64" pos:column="49">.</op:operator><call><name pos:line="64" pos:column="50">Any</name><argument_list pos:line="64" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">manager</name><op:operator pos:line="65" pos:column="20">.</op:operator><name pos:line="65" pos:column="21">AddSourceFile</name></name><argument_list pos:line="65" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="35">@"TestFiles\CSharp_with_property.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">AreEqual</name></name><argument_list pos:line="66" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="29">3</lit:literal></expr></argument><op:operator pos:line="66" pos:column="30">,</op:operator> <argument><expr><call><name><name pos:line="66" pos:column="32">manager</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">GetSwumData</name></name><argument_list pos:line="66" pos:column="51">()</argument_list></call><op:operator pos:line="66" pos:column="53">.</op:operator><name><name pos:line="66" pos:column="54">Keys</name><op:operator pos:line="66" pos:column="58">.</op:operator><name pos:line="66" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">IsNotNull</name></name><argument_list pos:line="67" pos:column="29">(<argument><expr><call><name><name pos:line="67" pos:column="30">manager</name><op:operator pos:line="67" pos:column="37">.</op:operator><name pos:line="67" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="67" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="58">"public TestClass()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Assert</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">IsNotNull</name></name><argument_list pos:line="68" pos:column="29">(<argument><expr><call><name><name pos:line="68" pos:column="30">manager</name><op:operator pos:line="68" pos:column="37">.</op:operator><name pos:line="68" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="68" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="58">"public void DoStuff(string theStuff, int count)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">IsNotNull</name></name><argument_list pos:line="69" pos:column="29">(<argument><expr><call><name><name pos:line="69" pos:column="30">manager</name><op:operator pos:line="69" pos:column="37">.</op:operator><name pos:line="69" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="69" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="58">"private int PrivateStuff(int count)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">TestRemoveSourceFile</name><parameter_list pos:line="73" pos:column="41">()</parameter_list> <block pos:line="73" pos:column="44">{
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">manager</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">AddSourceFile</name></name><argument_list pos:line="74" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="35">@"TestFiles\small_json_reader.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">manager</name><op:operator pos:line="75" pos:column="20">.</op:operator><name pos:line="75" pos:column="21">AddSourceFile</name></name><argument_list pos:line="75" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="35">@"TestFiles\function_def.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">IsNotNull</name></name><argument_list pos:line="76" pos:column="29">(<argument><expr><call><name><name pos:line="76" pos:column="30">manager</name><op:operator pos:line="76" pos:column="37">.</op:operator><name pos:line="76" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="76" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="58">"char* MyFunction(int foo)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">manager</name><op:operator pos:line="77" pos:column="20">.</op:operator><name pos:line="77" pos:column="21">RemoveSourceFile</name></name><argument_list pos:line="77" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="38">@"TestFiles\function_def.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">IsNull</name></name><argument_list pos:line="78" pos:column="26">(<argument><expr><call><name><name pos:line="78" pos:column="27">manager</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">GetSwumForSignature</name></name><argument_list pos:line="78" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="55">"char* MyFunction(int foo)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">TestUpdateSourceFile</name><parameter_list pos:line="82" pos:column="41">()</parameter_list> <block pos:line="82" pos:column="44">{
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">File</name><op:operator pos:line="83" pos:column="17">.</op:operator><name pos:line="83" pos:column="18">Copy</name></name><argument_list pos:line="83" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="23">@"TestFiles\function_def.cpp"</lit:literal></expr></argument><op:operator pos:line="83" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="83" pos:column="54">@"TestFiles\SwumUpdateTest.cpp"</lit:literal></expr></argument><op:operator pos:line="83" pos:column="85">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="83" pos:column="87">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">manager</name><op:operator pos:line="84" pos:column="20">.</op:operator><name pos:line="84" pos:column="21">AddSourceFile</name></name><argument_list pos:line="84" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="35">@"TestFiles\SwumUpdateTest.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">AreEqual</name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="29">2</lit:literal></expr></argument><op:operator pos:line="85" pos:column="30">,</op:operator> <argument><expr><call><name><name pos:line="85" pos:column="32">manager</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">GetSwumData</name></name><argument_list pos:line="85" pos:column="51">()</argument_list></call><op:operator pos:line="85" pos:column="53">.</op:operator><name pos:line="85" pos:column="54">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">IsNotNull</name></name><argument_list pos:line="86" pos:column="29">(<argument><expr><call><name><name pos:line="86" pos:column="30">manager</name><op:operator pos:line="86" pos:column="37">.</op:operator><name pos:line="86" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="86" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="58">"char* MyFunction(int foo)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">File</name><op:operator pos:line="88" pos:column="17">.</op:operator><name pos:line="88" pos:column="18">Copy</name></name><argument_list pos:line="88" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="23">@"TestFiles\function_def2.cpp"</lit:literal></expr></argument><op:operator pos:line="88" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="88" pos:column="55">@"TestFiles\SwumUpdateTest.cpp"</lit:literal></expr></argument><op:operator pos:line="88" pos:column="86">,</op:operator> <argument><expr><lit:literal type="boolean" pos:line="88" pos:column="88">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">manager</name><op:operator pos:line="89" pos:column="20">.</op:operator><name pos:line="89" pos:column="21">UpdateSourceFile</name></name><argument_list pos:line="89" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="38">@"TestFiles\SwumUpdateTest.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">AreEqual</name></name><argument_list pos:line="90" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="29">2</lit:literal></expr></argument><op:operator pos:line="90" pos:column="30">,</op:operator> <argument><expr><call><name><name pos:line="90" pos:column="32">manager</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">GetSwumData</name></name><argument_list pos:line="90" pos:column="51">()</argument_list></call><op:operator pos:line="90" pos:column="53">.</op:operator><name pos:line="90" pos:column="54">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">Assert</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">IsNull</name></name><argument_list pos:line="91" pos:column="26">(<argument><expr><call><name><name pos:line="91" pos:column="27">manager</name><op:operator pos:line="91" pos:column="34">.</op:operator><name pos:line="91" pos:column="35">GetSwumForSignature</name></name><argument_list pos:line="91" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="55">"char* MyFunction(int foo)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">IsNotNull</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><call><name><name pos:line="92" pos:column="30">manager</name><op:operator pos:line="92" pos:column="37">.</op:operator><name pos:line="92" pos:column="38">GetSwumForSignature</name></name><argument_list pos:line="92" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="58">"char* UpdatedMyFunction(int foo)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">File</name><op:operator pos:line="94" pos:column="17">.</op:operator><name pos:line="94" pos:column="18">Delete</name></name><argument_list pos:line="94" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="25">@"TestFiles\SwumUpdateTest.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="97" pos:column="9">[<expr><name pos:line="97" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">TestConcurrentReadWrite</name><parameter_list pos:line="98" pos:column="44">()</parameter_list> <block pos:line="98" pos:column="47">{
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">manager</name><op:operator pos:line="99" pos:column="20">.</op:operator><name pos:line="99" pos:column="21">AddSourceFile</name></name><argument_list pos:line="99" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="35">@"TestFiles\json_reader.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">Thread</name></type> <name pos:line="100" pos:column="20">addThread</name> =<init pos:line="100" pos:column="31"> <expr><op:operator pos:line="100" pos:column="32">new</op:operator> <call><name pos:line="100" pos:column="36">Thread</name><argument_list pos:line="100" pos:column="42">(<argument><expr><name pos:line="100" pos:column="43">AddSourceFiles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">addThread</name><op:operator pos:line="101" pos:column="22">.</op:operator><name pos:line="101" pos:column="23">Start</name></name><argument_list pos:line="101" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="102" pos:column="13">foreach(<init><expr><name pos:line="102" pos:column="21">var</name> <name pos:line="102" pos:column="25">sig</name> <op:operator pos:line="102" pos:column="29">in</op:operator> <call><name><name pos:line="102" pos:column="32">manager</name><op:operator pos:line="102" pos:column="39">.</op:operator><name pos:line="102" pos:column="40">GetSwumData</name></name><argument_list pos:line="102" pos:column="51">()</argument_list></call></expr></init>) <block pos:line="102" pos:column="55">{
                <expr_stmt><expr><call><name><name pos:line="103" pos:column="17">Console</name><op:operator pos:line="103" pos:column="24">.</op:operator><name pos:line="103" pos:column="25">WriteLine</name></name><argument_list pos:line="103" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="35">"From file {0}, found sig: {1}"</lit:literal></expr></argument><op:operator pos:line="103" pos:column="66">,</op:operator> <argument><expr><call><name><name pos:line="103" pos:column="68">sig</name><op:operator pos:line="103" pos:column="71">.</op:operator><name pos:line="103" pos:column="72">Value</name><op:operator pos:line="103" pos:column="77">.</op:operator><name pos:line="103" pos:column="78">FileNames</name><op:operator pos:line="103" pos:column="87">.</op:operator><name pos:line="103" pos:column="88">FirstOrDefault</name></name><argument_list pos:line="103" pos:column="102">()</argument_list></call></expr></argument><op:operator pos:line="103" pos:column="104">,</op:operator> <argument><expr><name><name pos:line="103" pos:column="106">sig</name><op:operator pos:line="103" pos:column="109">.</op:operator><name pos:line="103" pos:column="110">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">addThread</name><op:operator pos:line="105" pos:column="22">.</op:operator><name pos:line="105" pos:column="23">Join</name></name><argument_list pos:line="105" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="28">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="108" pos:column="9">private</specifier> <name pos:line="108" pos:column="17">void</name></type> <name pos:line="108" pos:column="22">AddSourceFiles</name><parameter_list pos:line="108" pos:column="36">()</parameter_list> <block pos:line="108" pos:column="39">{
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Console</name><op:operator pos:line="109" pos:column="20">.</op:operator><name pos:line="109" pos:column="21">WriteLine</name></name><argument_list pos:line="109" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="31">"Thread 2: adding file: "</lit:literal> <op:operator pos:line="109" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="109" pos:column="59">@"TestFiles\small_json_reader.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">manager</name><op:operator pos:line="110" pos:column="20">.</op:operator><name pos:line="110" pos:column="21">AddSrcMLFile</name></name><argument_list pos:line="110" pos:column="33">(<argument><expr><op:operator pos:line="110" pos:column="34">new</op:operator> <call><name pos:line="110" pos:column="38">SrcMLFile</name><argument_list pos:line="110" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="48">@"TestFiles\small_json_reader.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Console</name><op:operator pos:line="111" pos:column="20">.</op:operator><name pos:line="111" pos:column="21">WriteLine</name></name><argument_list pos:line="111" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="31">"Thread 2: adding file: "</lit:literal> <op:operator pos:line="111" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="111" pos:column="59">@"TestFiles\function_def.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">manager</name><op:operator pos:line="112" pos:column="20">.</op:operator><name pos:line="112" pos:column="21">AddSrcMLFile</name></name><argument_list pos:line="112" pos:column="33">(<argument><expr><op:operator pos:line="112" pos:column="34">new</op:operator> <call><name pos:line="112" pos:column="38">SrcMLFile</name><argument_list pos:line="112" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="48">@"TestFiles\function_def.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Console</name><op:operator pos:line="113" pos:column="20">.</op:operator><name pos:line="113" pos:column="21">WriteLine</name></name><argument_list pos:line="113" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="31">"Thread 2: adding file: "</lit:literal> <op:operator pos:line="113" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="113" pos:column="59">@"TestFiles\function_def2.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">manager</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">AddSourceFile</name></name><argument_list pos:line="114" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="35">@"TestFiles\function_def2.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
