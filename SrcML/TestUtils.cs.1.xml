<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\UnitTestHelpers\TestUtils.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Core</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Extensions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Indexer</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">IndexFiltering</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Indexer</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Searching</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Parser</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">VisualStudio</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">SolutionMonitor</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Core</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">Extensions</name><op:operator pos:line="13" pos:column="28">.</op:operator><name pos:line="13" pos:column="29">Logging</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name pos:line="15" pos:column="11">UnitTestHelpers</name>
<block pos:line="16" pos:column="1">{
    <class><specifier pos:line="17" pos:column="5">public</specifier> class <name pos:line="17" pos:column="18">TestUtils</name>
    <block pos:line="18" pos:column="5">{
        <function><type><specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">static</specifier> <name pos:line="19" pos:column="23">void</name></type> <name pos:line="19" pos:column="28">ClearDirectory</name><parameter_list pos:line="19" pos:column="42">(<param><decl><type><name pos:line="19" pos:column="43">string</name></type> <name pos:line="19" pos:column="50">dir</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><call><name><name pos:line="21" pos:column="17">Directory</name><op:operator pos:line="21" pos:column="26">.</op:operator><name pos:line="21" pos:column="27">Exists</name></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">dir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="21" pos:column="39">
            <block pos:line="22" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="23" pos:column="17">var</name></type> <name pos:line="23" pos:column="21">files</name> =<init pos:line="23" pos:column="28"> <expr><call><name><name pos:line="23" pos:column="29">Directory</name><op:operator pos:line="23" pos:column="38">.</op:operator><name pos:line="23" pos:column="39">GetFiles</name></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="24" pos:column="17">foreach (<init><decl><type><name pos:line="24" pos:column="26">var</name></type> <name pos:line="24" pos:column="30">file</name> <init pos:line="24" pos:column="35">in <expr><name pos:line="24" pos:column="38">files</name></expr></init></decl></init>)
                <block pos:line="25" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="26" pos:column="21">File</name><op:operator pos:line="26" pos:column="25">.</op:operator><name pos:line="26" pos:column="26">Delete</name></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">void</name></type> <name pos:line="31" pos:column="36">InitializeDefaultExtensionPoints</name><parameter_list pos:line="31" pos:column="68">()</parameter_list>
		<block pos:line="32" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">FileLogger</name><op:operator pos:line="33" pos:column="23">.</op:operator><name pos:line="33" pos:column="24">SetupDefautlFileLogger</name></name><argument_list pos:line="33" pos:column="46">(<argument><expr><call><name><name pos:line="33" pos:column="47">Path</name><op:operator pos:line="33" pos:column="51">.</op:operator><name pos:line="33" pos:column="52">GetTempPath</name></name><argument_list pos:line="33" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">ExtensionPointsRepository</name></type> <name pos:line="34" pos:column="51">extensionPointsRepository</name> =<init pos:line="34" pos:column="78"> <expr><name><name pos:line="34" pos:column="79">ExtensionPointsRepository</name><op:operator pos:line="34" pos:column="104">.</op:operator><name pos:line="34" pos:column="105">Instance</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">PathManager</name><op:operator pos:line="35" pos:column="24">.</op:operator><name pos:line="35" pos:column="25">Create</name></name><argument_list pos:line="35" pos:column="31">(<argument><expr><call><name><name pos:line="35" pos:column="32">Path</name><op:operator pos:line="35" pos:column="36">.</op:operator><name pos:line="35" pos:column="37">GetTempPath</name></name><argument_list pos:line="35" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">generator</name> =<init pos:line="36" pos:column="28"> <expr><op:operator pos:line="36" pos:column="29">new</op:operator> <call><name><name pos:line="36" pos:column="33">ABB</name><op:operator pos:line="36" pos:column="36">.</op:operator><name pos:line="36" pos:column="37">SrcML</name><op:operator pos:line="36" pos:column="42">.</op:operator><name pos:line="36" pos:column="43">SrcMLGenerator</name></name><argument_list pos:line="36" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="58">@"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">extensionPointsRepository</name><op:operator pos:line="37" pos:column="38">.</op:operator><name pos:line="37" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="37" pos:column="67">(<argument><expr><op:operator pos:line="37" pos:column="68">new</op:operator> <call><name><name pos:line="37" pos:column="72">List</name><argument_list pos:line="37" pos:column="76">&lt;<argument><name pos:line="37" pos:column="77">string</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="84">()</argument_list></call> <block pos:line="37" pos:column="87">{ <expr><lit:literal type="string" pos:line="37" pos:column="89">".cs"</lit:literal></expr> }</block></expr></argument><op:operator pos:line="37" pos:column="96">,</op:operator> <argument><expr><op:operator pos:line="37" pos:column="98">new</op:operator> <call><name pos:line="37" pos:column="102">SrcMLCSharpParser</name><argument_list pos:line="37" pos:column="119">(<argument><expr><name pos:line="37" pos:column="120">generator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">extensionPointsRepository</name><op:operator pos:line="38" pos:column="38">.</op:operator><name pos:line="38" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="38" pos:column="67">(<argument><expr><op:operator pos:line="38" pos:column="68">new</op:operator> <call><name><name pos:line="38" pos:column="72">List</name><argument_list pos:line="38" pos:column="76">&lt;<argument><name pos:line="38" pos:column="77">string</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="84">()</argument_list></call> <block pos:line="38" pos:column="87">{ <expr><lit:literal type="string" pos:line="38" pos:column="89">".h"</lit:literal></expr><op:operator pos:line="38" pos:column="93">,</op:operator> <expr><lit:literal type="string" pos:line="38" pos:column="95">".cpp"</lit:literal></expr><op:operator pos:line="38" pos:column="101">,</op:operator> <expr><lit:literal type="string" pos:line="38" pos:column="103">".cxx"</lit:literal></expr> }</block></expr></argument><op:operator pos:line="38" pos:column="111">,</op:operator> <argument><expr><op:operator pos:line="38" pos:column="113">new</op:operator> <call><name pos:line="38" pos:column="117">SrcMLCppParser</name><argument_list pos:line="38" pos:column="131">(<argument><expr><name pos:line="38" pos:column="132">generator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">extensionPointsRepository</name><op:operator pos:line="40" pos:column="50">.</op:operator><name pos:line="40" pos:column="51">RegisterWordSplitterImplementation</name></name><argument_list pos:line="40" pos:column="85">(<argument><expr><op:operator pos:line="40" pos:column="86">new</op:operator> <call><name pos:line="40" pos:column="90">WordSplitter</name><argument_list pos:line="40" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">extensionPointsRepository</name><op:operator pos:line="42" pos:column="50">.</op:operator><name pos:line="42" pos:column="51">RegisterResultsReordererImplementation</name></name><argument_list pos:line="42" pos:column="89">(<argument><expr><op:operator pos:line="42" pos:column="90">new</op:operator> <call><name pos:line="42" pos:column="94">SortByScoreResultsReorderer</name><argument_list pos:line="42" pos:column="121">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">extensionPointsRepository</name><op:operator pos:line="44" pos:column="50">.</op:operator><name pos:line="44" pos:column="51">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="44" pos:column="93">(<argument><expr><op:operator pos:line="44" pos:column="94">new</op:operator> <call><name pos:line="44" pos:column="98">QueryWeightsSupplier</name><argument_list pos:line="44" pos:column="118">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">extensionPointsRepository</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">RegisterQueryRewriterImplementation</name></name><argument_list pos:line="46" pos:column="86">(<argument><expr><op:operator pos:line="46" pos:column="87">new</op:operator> <call><name pos:line="46" pos:column="91">DefaultQueryRewriter</name><argument_list pos:line="46" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <decl_stmt><decl><type><name pos:line="48" pos:column="21">var</name></type> <name pos:line="48" pos:column="25">solutionKey</name> =<init pos:line="48" pos:column="38"> <expr><op:operator pos:line="48" pos:column="39">new</op:operator> <call><name pos:line="48" pos:column="43">SolutionKey</name><argument_list pos:line="48" pos:column="54">(<argument><expr><call><name><name pos:line="48" pos:column="55">Guid</name><op:operator pos:line="48" pos:column="59">.</op:operator><name pos:line="48" pos:column="60">NewGuid</name></name><argument_list pos:line="48" pos:column="67">()</argument_list></call></expr></argument><op:operator pos:line="48" pos:column="69">,</op:operator> <argument><expr><call><name><name pos:line="48" pos:column="71">Path</name><op:operator pos:line="48" pos:column="75">.</op:operator><name pos:line="48" pos:column="76">GetTempPath</name></name><argument_list pos:line="48" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">ServiceLocator</name><op:operator pos:line="49" pos:column="27">.</op:operator><name pos:line="49" pos:column="28">RegisterInstance</name></name><argument_list pos:line="49" pos:column="44">(<argument><expr><name pos:line="49" pos:column="45">solutionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">extensionPointsRepository</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">RegisterIndexFilterManagerImplementation</name></name><argument_list pos:line="51" pos:column="79">(<argument><expr><op:operator pos:line="51" pos:column="80">new</op:operator> <call><name pos:line="51" pos:column="84">IndexFilterManager</name><argument_list pos:line="51" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
    }</block></class>
}</block></namespace>
</unit>
