<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\TESTEXTENSIONPOINTS\TestWordSplitter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">ExtensionContracts</name><op:operator pos:line="3" pos:column="31">.</op:operator><name pos:line="3" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Sando</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">TestExtensionPoints</name></name>
<block pos:line="6" pos:column="1">{
	<class><specifier pos:line="7" pos:column="9">public</specifier> class <name pos:line="7" pos:column="22">TestWordSplitter</name> <super pos:line="7" pos:column="39">: <name pos:line="7" pos:column="41">IWordSplitter</name></super>
	<block pos:line="8" pos:column="9">{
		<function><type><specifier pos:line="9" pos:column="17">public</specifier> <name><name pos:line="9" pos:column="24">string</name><index pos:line="9" pos:column="30">[]</index></name></type> <name pos:line="9" pos:column="33">ExtractWords</name><parameter_list pos:line="9" pos:column="45">(<param><decl><type><name pos:line="9" pos:column="46">string</name></type> <name pos:line="9" pos:column="53">text</name></decl></param>)</parameter_list>
		<block pos:line="10" pos:column="17">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">text</name> <op:operator pos:line="11" pos:column="30">=</op:operator> <call><name><name pos:line="11" pos:column="32">Regex</name><op:operator pos:line="11" pos:column="37">.</op:operator><name pos:line="11" pos:column="38">Replace</name></name><argument_list pos:line="11" pos:column="45">(<argument><expr><name pos:line="11" pos:column="46">text</name></expr></argument><op:operator pos:line="11" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="11" pos:column="52">@"([A-Z][a-z]+|[A-Z]+|[0-9]+)"</lit:literal></expr></argument><op:operator pos:line="11" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="11" pos:column="84">"_$1"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="11" pos:column="90">.</op:operator><call><name pos:line="11" pos:column="91">Replace</name><argument_list pos:line="11" pos:column="98">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="99">" _"</lit:literal></expr></argument><op:operator pos:line="11" pos:column="103">,</op:operator> <argument><expr><lit:literal type="string" pos:line="11" pos:column="105">"_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name pos:line="12" pos:column="25">char</name><index pos:line="12" pos:column="29">[]</index></name></type> <name pos:line="12" pos:column="32">delimiters</name> =<init pos:line="12" pos:column="44"> <expr><op:operator pos:line="12" pos:column="45">new</op:operator> <name><name pos:line="12" pos:column="49">char</name><index pos:line="12" pos:column="53">[]</index></name> <block pos:line="12" pos:column="56">{ <expr><lit:literal type="char" pos:line="12" pos:column="58">'_'</lit:literal></expr><op:operator pos:line="12" pos:column="61">,</op:operator> <expr><lit:literal type="char" pos:line="12" pos:column="63">':'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<return pos:line="13" pos:column="25">return <expr><call><name><name pos:line="13" pos:column="32">text</name><op:operator pos:line="13" pos:column="36">.</op:operator><name pos:line="13" pos:column="37">Split</name></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">delimiters</name></expr></argument><op:operator pos:line="13" pos:column="53">,</op:operator> <argument><expr><name><name pos:line="13" pos:column="55">StringSplitOptions</name><op:operator pos:line="13" pos:column="73">.</op:operator><name pos:line="13" pos:column="74">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
