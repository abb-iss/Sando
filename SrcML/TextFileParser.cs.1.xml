<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser\TextFileParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Core</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Extensions</name><op:operator pos:line="4" pos:column="28">.</op:operator><name pos:line="4" pos:column="29">Logging</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Parser</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">TextFileParser</name> <super pos:line="10" pos:column="33">: <name pos:line="10" pos:column="35">IParser</name></super>
    <block pos:line="11" pos:column="5">{               
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <name><name pos:line="12" pos:column="16">List</name><argument_list pos:line="12" pos:column="20">&lt;<argument><name pos:line="12" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="37">Parse</name><parameter_list pos:line="12" pos:column="42">(<param><decl><type><name pos:line="12" pos:column="43">string</name></type> <name pos:line="12" pos:column="50">filename</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><call><name><name pos:line="14" pos:column="17">File</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Exists</name></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">filename</name></expr></argument>)</argument_list></call> <op:operator pos:line="14" pos:column="39">&amp;&amp;</op:operator> <call><name pos:line="14" pos:column="42">GetSizeInMb</name><argument_list pos:line="14" pos:column="53">(<argument><expr><name pos:line="14" pos:column="54">filename</name></expr></argument>)</argument_list></call> <op:operator pos:line="14" pos:column="64">&gt;</op:operator> <lit:literal type="number" pos:line="14" pos:column="66">15</lit:literal></expr>)</condition><then pos:line="14" pos:column="69">
            <block pos:line="15" pos:column="13">{
                <return pos:line="16" pos:column="17">return <expr><op:operator pos:line="16" pos:column="24">new</op:operator> <call><name><name pos:line="16" pos:column="28">List</name><argument_list pos:line="16" pos:column="32">&lt;<argument><name pos:line="16" pos:column="33">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="48">()</argument_list></call></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">list</name> =<init pos:line="18" pos:column="23"> <expr><op:operator pos:line="18" pos:column="24">new</op:operator> <call><name><name pos:line="18" pos:column="28">List</name><argument_list pos:line="18" pos:column="32">&lt;<argument><name pos:line="18" pos:column="33">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try pos:line="19" pos:column="13">try
            <block pos:line="20" pos:column="13">{
                <comment type="line" pos:line="21" pos:column="17">// Create an instance of StreamReader to read from a file.</comment>
                <comment type="line" pos:line="22" pos:column="17">// The using statement also closes the StreamReader.</comment>
                <using pos:line="23" pos:column="17">using (var sr = <type><specifier pos:line="23" pos:column="33">new</specifier></type> <name pos:line="23" pos:column="37">StreamReader</name><parameter_list pos:line="23" pos:column="49">(<param><decl><type><name pos:line="23" pos:column="50">filename</name></type></decl></param>)</parameter_list></using>)</block>
                <block pos:line="24" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="25" pos:column="21">String</name></type> <name pos:line="25" pos:column="28">line</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="26" pos:column="21">int</name></type> <name pos:line="26" pos:column="25">linenum</name> =<init pos:line="26" pos:column="34"> <expr><lit:literal type="number" pos:line="26" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <comment type="line" pos:line="27" pos:column="21">// Read and display lines from the file until the end of</comment>
                    <comment type="line" pos:line="28" pos:column="21">// the file is reached.</comment>
                    <while pos:line="29" pos:column="21">while <condition pos:line="29" pos:column="27">(<expr><op:operator pos:line="29" pos:column="28">(</op:operator><name pos:line="29" pos:column="29">line</name> <op:operator pos:line="29" pos:column="34">=</op:operator> <call><name><name pos:line="29" pos:column="36">sr</name><op:operator pos:line="29" pos:column="38">.</op:operator><name pos:line="29" pos:column="39">ReadLine</name></name><argument_list pos:line="29" pos:column="47">()</argument_list></call><op:operator pos:line="29" pos:column="49">)</op:operator> <op:operator pos:line="29" pos:column="51">!=</op:operator> <name pos:line="29" pos:column="54">null</name></expr>)</condition>
                    <block pos:line="30" pos:column="21">{
                        <expr_stmt><expr><name pos:line="31" pos:column="25">linenum</name><op:operator pos:line="31" pos:column="32">++</op:operator></expr>;</expr_stmt>
                        <if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><call><name><name pos:line="32" pos:column="29">String</name><op:operator pos:line="32" pos:column="35">.</op:operator><name pos:line="32" pos:column="36">IsNullOrWhiteSpace</name></name><argument_list pos:line="32" pos:column="54">(<argument><expr><name pos:line="32" pos:column="55">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="32" pos:column="61"> <continue pos:line="32" pos:column="62">continue;</continue></then></if>
                        <comment type="line" pos:line="33" pos:column="25">//var name = Regex.Replace(line, @"(\w+)\W+", "$1 ");</comment>
                        <decl_stmt><decl><type><name pos:line="34" pos:column="25">var</name></type> <name pos:line="34" pos:column="29">name</name> =<init pos:line="34" pos:column="35"> <expr><call><name><name pos:line="34" pos:column="36">line</name><op:operator pos:line="34" pos:column="40">.</op:operator><name pos:line="34" pos:column="41">TrimStart</name></name><argument_list pos:line="34" pos:column="50">(<argument><expr><lit:literal type="char" pos:line="34" pos:column="51">' '</lit:literal></expr></argument><op:operator pos:line="34" pos:column="54">,</op:operator> <argument><expr><lit:literal type="char" pos:line="34" pos:column="56">'\n'</lit:literal></expr></argument><op:operator pos:line="34" pos:column="60">,</op:operator> <argument><expr><lit:literal type="char" pos:line="34" pos:column="62">'\r'</lit:literal></expr></argument><op:operator pos:line="34" pos:column="66">,</op:operator> <argument><expr><lit:literal type="char" pos:line="34" pos:column="68">'\t'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="35" pos:column="25">name</name> <op:operator pos:line="35" pos:column="30">=</op:operator> <call><name><name pos:line="35" pos:column="32">name</name><op:operator pos:line="35" pos:column="36">.</op:operator><name pos:line="35" pos:column="37">TrimEnd</name></name><argument_list pos:line="35" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="35" pos:column="45">' '</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="36" pos:column="25">var</name></type> <name pos:line="36" pos:column="29">snippet</name> =<init pos:line="36" pos:column="38"> <expr><call><name><name pos:line="36" pos:column="39">SrcMLParsingUtils</name><op:operator pos:line="36" pos:column="56">.</op:operator><name pos:line="36" pos:column="57">RetrieveSource</name></name><argument_list pos:line="36" pos:column="71">(<argument><expr><name pos:line="36" pos:column="72">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="37" pos:column="25">var</name></type> <name pos:line="37" pos:column="29">element</name> =<init pos:line="37" pos:column="38"> <expr><op:operator pos:line="37" pos:column="39">new</op:operator> <call><name pos:line="37" pos:column="43">TextLineElement</name><argument_list pos:line="37" pos:column="58">(<argument><expr><name pos:line="37" pos:column="59">name</name></expr></argument><op:operator pos:line="37" pos:column="63">,</op:operator> <argument><expr><name pos:line="37" pos:column="65">linenum</name></expr></argument><op:operator pos:line="37" pos:column="72">,</op:operator> <argument><expr><name pos:line="37" pos:column="74">filename</name></expr></argument><op:operator pos:line="37" pos:column="82">,</op:operator> <argument><expr><name pos:line="37" pos:column="84">snippet</name></expr></argument><op:operator pos:line="37" pos:column="91">,</op:operator> <argument><expr><name pos:line="37" pos:column="93">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="38" pos:column="25">list</name><op:operator pos:line="38" pos:column="29">.</op:operator><name pos:line="38" pos:column="30">Add</name></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>

                }</block></try>
            }</block></function>
            <catch pos:line="43" pos:column="13">catch (<param><decl><type><name pos:line="43" pos:column="20">Exception</name></type> <name pos:line="43" pos:column="30">e</name></decl></param>)
            <block pos:line="44" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">FileLogger</name><op:operator pos:line="45" pos:column="27">.</op:operator><name pos:line="45" pos:column="28">DefaultLogger</name><op:operator pos:line="45" pos:column="41">.</op:operator><name pos:line="45" pos:column="42">Error</name></name><argument_list pos:line="45" pos:column="47">(<argument><expr><call><name><name pos:line="45" pos:column="48">ExceptionFormatter</name><op:operator pos:line="45" pos:column="66">.</op:operator><name pos:line="45" pos:column="67">CreateMessage</name></name><argument_list pos:line="45" pos:column="80">(<argument><expr><name pos:line="45" pos:column="81">e</name></expr></argument><op:operator pos:line="45" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="45" pos:column="84">"The file could not be read:"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <return pos:line="47" pos:column="13">return <expr><name pos:line="47" pos:column="20">list</name></expr>;</return>
        }</block></class>

        <function><type><specifier pos:line="50" pos:column="9">private</specifier> <name pos:line="50" pos:column="17">float</name></type> <name pos:line="50" pos:column="23">GetSizeInMb</name><parameter_list pos:line="50" pos:column="34">(<param><decl><type><name pos:line="50" pos:column="35">string</name></type> <name pos:line="50" pos:column="42">filename</name></decl></param>)</parameter_list>
        <block pos:line="51" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">float</name></type> <name pos:line="52" pos:column="19">sizeInMb</name> =<init pos:line="52" pos:column="29"> <expr><op:operator pos:line="52" pos:column="30">(</op:operator><op:operator pos:line="52" pos:column="31">new</op:operator> <call><name pos:line="52" pos:column="35">FileInfo</name><argument_list pos:line="52" pos:column="43">(<argument><expr><name pos:line="52" pos:column="44">filename</name></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="53">.</op:operator><name pos:line="52" pos:column="54">Length</name> <op:operator pos:line="52" pos:column="61">/</op:operator> <lit:literal type="number" pos:line="52" pos:column="63">1024f</lit:literal><op:operator pos:line="52" pos:column="68">)</op:operator> <op:operator pos:line="52" pos:column="70">/</op:operator> <lit:literal type="number" pos:line="52" pos:column="72">1024f</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="53" pos:column="13">return <expr><name pos:line="53" pos:column="20">sizeInMb</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="56" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// New Parse method that takes two arguments, due to modification of IParser</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;param name="sourceElements"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name><name pos:line="63" pos:column="16">List</name><argument_list pos:line="63" pos:column="20">&lt;<argument><name pos:line="63" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="37">Parse</name><parameter_list pos:line="63" pos:column="42">(<param><decl><type><name pos:line="63" pos:column="43">string</name></type> <name pos:line="63" pos:column="50">fileName</name></decl></param><op:operator pos:line="63" pos:column="58">,</op:operator> <param><decl><type><name><name pos:line="63" pos:column="60">System</name><op:operator pos:line="63" pos:column="66">.</op:operator><name pos:line="63" pos:column="67">Xml</name><op:operator pos:line="63" pos:column="70">.</op:operator><name pos:line="63" pos:column="71">Linq</name><op:operator pos:line="63" pos:column="75">.</op:operator><name pos:line="63" pos:column="76">XElement</name></name></type> <name pos:line="63" pos:column="85">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="64" pos:column="9">{
            <return pos:line="65" pos:column="13">return <expr><call><name pos:line="65" pos:column="20">Parse</name><argument_list pos:line="65" pos:column="25">(<argument><expr><name pos:line="65" pos:column="26">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="67" pos:column="9">// End of code changes</comment>
    }</block></namespace>
}
</unit>
