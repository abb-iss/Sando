<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser.UnitTests\TextFileParserTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Parser</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Parser</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">UnitTests</name></name>
<block pos:line="9" pos:column="1">{
	<class><attribute pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">TestFixture</name></expr>]</attribute>
	class <name pos:line="11" pos:column="15">TextFileParserTest</name>
	<block pos:line="12" pos:column="9">{

		<function><type><attribute pos:line="14" pos:column="17">[<expr><name pos:line="14" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="15" pos:column="17">public</specifier> <name pos:line="15" pos:column="24">void</name></type> <name pos:line="15" pos:column="29">ParseXAMLFile</name><parameter_list pos:line="15" pos:column="42">()</parameter_list>
		<block pos:line="16" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">var</name></type> <name pos:line="17" pos:column="29">parser</name> =<init pos:line="17" pos:column="37"> <expr><op:operator pos:line="17" pos:column="38">new</op:operator> <call><name pos:line="17" pos:column="42">TextFileParser</name><argument_list pos:line="17" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">var</name></type> <name pos:line="18" pos:column="29">elements</name> =<init pos:line="18" pos:column="39"> <expr><call><name><name pos:line="18" pos:column="40">parser</name><op:operator pos:line="18" pos:column="46">.</op:operator><name pos:line="18" pos:column="47">Parse</name></name><argument_list pos:line="18" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="53">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\SearchViewControl.xaml.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="19" pos:column="25">Assert</name><op:operator pos:line="19" pos:column="31">.</op:operator><name pos:line="19" pos:column="32">IsNotNull</name></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="20" pos:column="25">Assert</name><op:operator pos:line="20" pos:column="31">.</op:operator><name pos:line="20" pos:column="32">AreEqual</name></name><argument_list pos:line="20" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="20" pos:column="41">205</lit:literal></expr></argument><op:operator pos:line="20" pos:column="44">,</op:operator> <argument><expr><name><name pos:line="20" pos:column="46">elements</name><op:operator pos:line="20" pos:column="54">.</op:operator><name pos:line="20" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="21" pos:column="25">foreach(<init><decl><type><name pos:line="21" pos:column="33">var</name></type> <name pos:line="21" pos:column="37">element</name> <init pos:line="21" pos:column="45">in <expr><name pos:line="21" pos:column="48">elements</name></expr></init></decl></init>)
			<block pos:line="22" pos:column="25">{
				<if pos:line="23" pos:column="33">if<condition pos:line="23" pos:column="35">(<expr><name><name pos:line="23" pos:column="36">element</name><op:operator pos:line="23" pos:column="43">.</op:operator><name pos:line="23" pos:column="44">DefinitionLineNumber</name></name> <op:operator pos:line="23" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="23" pos:column="68">218</lit:literal></expr>)</condition><then pos:line="23" pos:column="72">
				<block pos:line="24" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="25" pos:column="41">Assert</name><op:operator pos:line="25" pos:column="47">.</op:operator><name pos:line="25" pos:column="48">AreEqual</name></name><argument_list pos:line="25" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="57">"&lt;/UserControl&gt;"</lit:literal></expr></argument><op:operator pos:line="25" pos:column="73">,</op:operator> <argument><expr><name><name pos:line="25" pos:column="75">element</name><op:operator pos:line="25" pos:column="82">.</op:operator><name pos:line="25" pos:column="83">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

			}</block></foreach>
		}</block></function>


        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">ParseTxtFile</name><parameter_list pos:line="33" pos:column="33">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">parser</name> =<init pos:line="35" pos:column="25"> <expr><op:operator pos:line="35" pos:column="26">new</op:operator> <call><name pos:line="35" pos:column="30">TextFileParser</name><argument_list pos:line="35" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">elements</name> =<init pos:line="36" pos:column="27"> <expr><call><name><name pos:line="36" pos:column="28">parser</name><op:operator pos:line="36" pos:column="34">.</op:operator><name pos:line="36" pos:column="35">Parse</name></name><argument_list pos:line="36" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="41">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\LongFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">IsNotNull</name></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">AreEqual</name></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">elements</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">Count</name></name></expr></argument><op:operator pos:line="38" pos:column="43">,</op:operator> <argument><expr><lit:literal type="number" pos:line="38" pos:column="45">987386</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">elements</name> <op:operator pos:line="39" pos:column="22">=</op:operator> <call><name><name pos:line="39" pos:column="24">parser</name><op:operator pos:line="39" pos:column="30">.</op:operator><name pos:line="39" pos:column="31">Parse</name></name><argument_list pos:line="39" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="37">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\NotSoLongFile.txt"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Assert</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">IsNotNull</name></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">AreEqual</name></name><argument_list pos:line="41" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="29">23945</lit:literal></expr></argument><op:operator pos:line="41" pos:column="34">,</op:operator> <argument><expr><name><name pos:line="41" pos:column="36">elements</name><op:operator pos:line="41" pos:column="44">.</op:operator><name pos:line="41" pos:column="45">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>


		<function><type><attribute pos:line="46" pos:column="17">[<expr><name pos:line="46" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="47" pos:column="17">public</specifier> <name pos:line="47" pos:column="24">void</name></type> <name pos:line="47" pos:column="29">ParseXAMLFile2</name><parameter_list pos:line="47" pos:column="43">()</parameter_list>
		<block pos:line="48" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="49" pos:column="25">var</name></type> <name pos:line="49" pos:column="29">parser</name> =<init pos:line="49" pos:column="37"> <expr><op:operator pos:line="49" pos:column="38">new</op:operator> <call><name pos:line="49" pos:column="42">XMLFileParser</name><argument_list pos:line="49" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">var</name></type> <name pos:line="50" pos:column="29">elements</name> =<init pos:line="50" pos:column="39"> <expr><call><name><name pos:line="50" pos:column="40">parser</name><op:operator pos:line="50" pos:column="46">.</op:operator><name pos:line="50" pos:column="47">Parse</name></name><argument_list pos:line="50" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="53">"..\\..\\Parser\\Parser.UnitTests\\TestFiles\\SearchViewControl.xaml.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">Assert</name><op:operator pos:line="51" pos:column="31">.</op:operator><name pos:line="51" pos:column="32">IsNotNull</name></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">Assert</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">AreEqual</name></name><argument_list pos:line="52" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="41">84</lit:literal></expr></argument><op:operator pos:line="52" pos:column="43">,</op:operator> <argument><expr><name><name pos:line="52" pos:column="45">elements</name><op:operator pos:line="52" pos:column="53">.</op:operator><name pos:line="52" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="53" pos:column="25">foreach(<init><decl><type><name pos:line="53" pos:column="33">var</name></type> <name pos:line="53" pos:column="37">element</name> <init pos:line="53" pos:column="45">in <expr><name pos:line="53" pos:column="48">elements</name></expr></init></decl></init>)
			<block pos:line="54" pos:column="25">{
				<if pos:line="55" pos:column="33">if<condition pos:line="55" pos:column="35">(<expr><name><name pos:line="55" pos:column="36">element</name><op:operator pos:line="55" pos:column="43">.</op:operator><name pos:line="55" pos:column="44">DefinitionLineNumber</name></name> <op:operator pos:line="55" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="55" pos:column="68">204</lit:literal></expr>)</condition><then pos:line="55" pos:column="72">
				<block pos:line="56" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="57" pos:column="41">Assert</name><op:operator pos:line="57" pos:column="47">.</op:operator><name pos:line="57" pos:column="48">AreEqual</name></name><argument_list pos:line="57" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="57">"Auto 0 -5,0,0,0 2 0"</lit:literal></expr></argument><op:operator pos:line="57" pos:column="78">,</op:operator> <argument><expr><name><name pos:line="57" pos:column="80">element</name><op:operator pos:line="57" pos:column="87">.</op:operator><name pos:line="57" pos:column="88">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

			}</block></foreach>
		}</block></function>


	}</block></class>
}</block></namespace>
</unit>
