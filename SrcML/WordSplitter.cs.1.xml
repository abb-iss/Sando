<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Core\Core\Tools\WordSplitter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">WordSplitter</name> <super pos:line="10" pos:column="31">: <name pos:line="10" pos:column="33">IWordSplitter</name></super>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <name><name pos:line="12" pos:column="16">string</name><index pos:line="12" pos:column="22">[]</index></name></type> <name pos:line="12" pos:column="25">ExtractWords</name><parameter_list pos:line="12" pos:column="37">(<param><decl><type><name pos:line="12" pos:column="38">string</name></type> <name pos:line="12" pos:column="45">word</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><name pos:line="14" pos:column="13">word</name> <op:operator pos:line="14" pos:column="18">=</op:operator> <call><name><name pos:line="14" pos:column="20">Regex</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Replace</name></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">word</name></expr></argument><op:operator pos:line="14" pos:column="38">,</op:operator> <argument><expr><lit:literal type="string" pos:line="14" pos:column="40">@"([A-Z][a-z]+)"</lit:literal></expr></argument><op:operator pos:line="14" pos:column="56">,</op:operator> <argument><expr><lit:literal type="string" pos:line="14" pos:column="58">"_$1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="15" pos:column="13">word</name> <op:operator pos:line="15" pos:column="18">=</op:operator> <call><name><name pos:line="15" pos:column="20">Regex</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Replace</name></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">word</name></expr></argument><op:operator pos:line="15" pos:column="38">,</op:operator> <argument><expr><lit:literal type="string" pos:line="15" pos:column="40">@"([A-Z]+|[0-9]+)"</lit:literal></expr></argument><op:operator pos:line="15" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="15" pos:column="60">"_$1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">word</name> <op:operator pos:line="16" pos:column="18">=</op:operator> <call><name><name pos:line="16" pos:column="20">word</name><op:operator pos:line="16" pos:column="24">.</op:operator><name pos:line="16" pos:column="25">Replace</name></name><argument_list pos:line="16" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="33">" _"</lit:literal></expr></argument><op:operator pos:line="16" pos:column="37">,</op:operator> <argument><expr><lit:literal type="string" pos:line="16" pos:column="39">"_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">delimiters</name> =<init pos:line="17" pos:column="29"> <expr><op:operator pos:line="17" pos:column="30">new</op:operator><index pos:line="17" pos:column="33">[]</index> <block pos:line="17" pos:column="36">{ <expr><lit:literal type="char" pos:line="17" pos:column="38">'_'</lit:literal></expr><op:operator pos:line="17" pos:column="41">,</op:operator> <expr><lit:literal type="char" pos:line="17" pos:column="43">':'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <return pos:line="18" pos:column="13">return <expr><call><name><name pos:line="18" pos:column="20">word</name><op:operator pos:line="18" pos:column="24">.</op:operator><name pos:line="18" pos:column="25">Split</name></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">delimiters</name></expr></argument><op:operator pos:line="18" pos:column="41">,</op:operator> <argument><expr><name><name pos:line="18" pos:column="43">StringSplitOptions</name><op:operator pos:line="18" pos:column="61">.</op:operator><name pos:line="18" pos:column="62">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">static</specifier> <name><name pos:line="22" pos:column="23">List</name><argument_list pos:line="22" pos:column="27">&lt;<argument><name pos:line="22" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="36">ExtractSearchTerms</name><parameter_list pos:line="22" pos:column="54">(<param><decl><type><name pos:line="22" pos:column="55">string</name></type> <name pos:line="22" pos:column="62">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Contract</name><op:operator pos:line="24" pos:column="21">.</op:operator><name pos:line="24" pos:column="22">Requires</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">searchTerms</name> <op:operator pos:line="24" pos:column="43">!=</op:operator> <name pos:line="24" pos:column="46">null</name></expr></argument><op:operator pos:line="24" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="24" pos:column="52">"WordSplitter:ExtractSearchTerms - searchTerms cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="26" pos:column="25">//1.handle quotes</comment>
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">matchCollection</name> =<init pos:line="27" pos:column="34"> <expr><call><name><name pos:line="27" pos:column="35">Regex</name><op:operator pos:line="27" pos:column="40">.</op:operator><name pos:line="27" pos:column="41">Matches</name></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">searchTerms</name></expr></argument><op:operator pos:line="27" pos:column="60">,</op:operator> <argument><expr><name pos:line="27" pos:column="62">QuotesPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">matches</name> =<init pos:line="28" pos:column="26"> <expr><op:operator pos:line="28" pos:column="27">new</op:operator> <call><name><name pos:line="28" pos:column="31">List</name><argument_list pos:line="28" pos:column="35">&lt;<argument><name pos:line="28" pos:column="36">string</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="29" pos:column="13">foreach (<init><decl><type><name pos:line="29" pos:column="22">Match</name></type> <name pos:line="29" pos:column="28">match</name> <init pos:line="29" pos:column="34">in <expr><name pos:line="29" pos:column="37">matchCollection</name></expr></init></decl></init>)
            <block pos:line="30" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">string</name></type> <name pos:line="31" pos:column="24">currentMatch</name> =<init pos:line="31" pos:column="38"> <expr><name><name pos:line="31" pos:column="39">match</name><op:operator pos:line="31" pos:column="44">.</op:operator><name pos:line="31" pos:column="45">Value</name></name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="31" pos:column="51">//.Trim('"', ' ');</comment>
                <expr_stmt><expr><name pos:line="32" pos:column="17">searchTerms</name> <op:operator pos:line="32" pos:column="29">=</op:operator> <call><name><name pos:line="32" pos:column="31">searchTerms</name><op:operator pos:line="32" pos:column="42">.</op:operator><name pos:line="32" pos:column="43">Replace</name></name><argument_list pos:line="32" pos:column="50">(<argument><expr><name><name pos:line="32" pos:column="51">match</name><op:operator pos:line="32" pos:column="56">.</op:operator><name pos:line="32" pos:column="57">Value</name></name></expr></argument><op:operator pos:line="32" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="32" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><op:operator pos:line="33" pos:column="21">!</op:operator><call><name><name pos:line="33" pos:column="22">String</name><op:operator pos:line="33" pos:column="28">.</op:operator><name pos:line="33" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">currentMatch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="33" pos:column="62">
                    <expr_stmt><expr><call><name><name pos:line="34" pos:column="21">matches</name><op:operator pos:line="34" pos:column="28">.</op:operator><name pos:line="34" pos:column="29">Add</name></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">currentMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>

			<comment type="line" pos:line="37" pos:column="25">//2.add unsplit terms</comment>
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">var</name></type> <name pos:line="38" pos:column="29">splitTerms</name> =<init pos:line="38" pos:column="41"> <expr><call><name><name pos:line="38" pos:column="42">searchTerms</name><op:operator pos:line="38" pos:column="53">.</op:operator><name pos:line="38" pos:column="54">Split</name></name><argument_list pos:line="38" pos:column="59">(<argument><expr><op:operator pos:line="38" pos:column="60">new</op:operator><index pos:line="38" pos:column="63">[]</index> <block pos:line="38" pos:column="66">{ <expr><lit:literal type="char" pos:line="38" pos:column="68">' '</lit:literal></expr> }</block></expr></argument><op:operator pos:line="38" pos:column="73">,</op:operator> <argument><expr><name><name pos:line="38" pos:column="75">StringSplitOptions</name><op:operator pos:line="38" pos:column="93">.</op:operator><name pos:line="38" pos:column="94">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="39" pos:column="25">foreach(<init><decl><type><name pos:line="39" pos:column="33">string</name></type> <name pos:line="39" pos:column="40">term</name> <init pos:line="39" pos:column="45">in <expr><name pos:line="39" pos:column="48">splitTerms</name></expr></init></decl></init>)
			<block pos:line="40" pos:column="25">{
				<if pos:line="41" pos:column="33">if<condition pos:line="41" pos:column="35">(<expr><call><name><name pos:line="41" pos:column="36">term</name><op:operator pos:line="41" pos:column="40">.</op:operator><name pos:line="41" pos:column="41">All</name></name><argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">c</name> <op:operator pos:line="41" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="41" pos:column="50">Char</name><op:operator pos:line="41" pos:column="54">.</op:operator><name pos:line="41" pos:column="55">IsUpper</name></name><argument_list pos:line="41" pos:column="62">(<argument><expr><name pos:line="41" pos:column="63">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="66">||</op:operator> <call><name><name pos:line="41" pos:column="69">Char</name><op:operator pos:line="41" pos:column="73">.</op:operator><name pos:line="41" pos:column="74">IsLower</name></name><argument_list pos:line="41" pos:column="81">(<argument><expr><name pos:line="41" pos:column="82">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="86">||</op:operator> <call><name><name pos:line="41" pos:column="89">term</name><op:operator pos:line="41" pos:column="93">.</op:operator><name pos:line="41" pos:column="94">All</name></name><argument_list pos:line="41" pos:column="97">(<argument><expr><name pos:line="41" pos:column="98">c</name> <op:operator pos:line="41" pos:column="100">=&gt;</op:operator> <call><name><name pos:line="41" pos:column="103">Char</name><op:operator pos:line="41" pos:column="107">.</op:operator><name pos:line="41" pos:column="108">IsLetter</name></name><argument_list pos:line="41" pos:column="116">(<argument><expr><name pos:line="41" pos:column="117">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="120">||</op:operator> <call><name><name pos:line="41" pos:column="123">Char</name><op:operator pos:line="41" pos:column="127">.</op:operator><name pos:line="41" pos:column="128">IsNumber</name></name><argument_list pos:line="41" pos:column="136">(<argument><expr><name pos:line="41" pos:column="137">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="141">
				<block pos:line="42" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="43" pos:column="41">matches</name><op:operator pos:line="43" pos:column="48">.</op:operator><name pos:line="43" pos:column="49">Add</name></name><argument_list pos:line="43" pos:column="52">(<argument><expr><name pos:line="43" pos:column="53">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></foreach>

			<comment type="line" pos:line="47" pos:column="25">//3.do rest...</comment>
            <expr_stmt><expr><name pos:line="48" pos:column="13">searchTerms</name> <op:operator pos:line="48" pos:column="25">=</op:operator> <call><name><name pos:line="48" pos:column="27">Regex</name><op:operator pos:line="48" pos:column="32">.</op:operator><name pos:line="48" pos:column="33">Replace</name></name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">searchTerms</name></expr></argument><op:operator pos:line="48" pos:column="52">,</op:operator> <argument><expr><name pos:line="48" pos:column="54">Pattern</name></expr></argument><op:operator pos:line="48" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="48" pos:column="63">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="49" pos:column="13">searchTerms</name> <op:operator pos:line="49" pos:column="25">=</op:operator> <call><name><name pos:line="49" pos:column="27">Regex</name><op:operator pos:line="49" pos:column="32">.</op:operator><name pos:line="49" pos:column="33">Replace</name></name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">searchTerms</name></expr></argument><op:operator pos:line="49" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="49" pos:column="54">@"(-{0,1})([A-Z][a-z]+)"</lit:literal></expr></argument><op:operator pos:line="49" pos:column="78">,</op:operator> <argument><expr><lit:literal type="string" pos:line="49" pos:column="80">" $1$2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="50" pos:column="13">searchTerms</name> <op:operator pos:line="50" pos:column="25">=</op:operator> <call><name><name pos:line="50" pos:column="27">Regex</name><op:operator pos:line="50" pos:column="32">.</op:operator><name pos:line="50" pos:column="33">Replace</name></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">searchTerms</name></expr></argument><op:operator pos:line="50" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="50" pos:column="54">@"(-{0,1})([A-Z]+|[0-9]+)"</lit:literal></expr></argument><op:operator pos:line="50" pos:column="80">,</op:operator> <argument><expr><lit:literal type="string" pos:line="50" pos:column="82">" $1$2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="52" pos:column="13">searchTerms</name> <op:operator pos:line="52" pos:column="25">=</op:operator> <call><name><name pos:line="52" pos:column="27">searchTerms</name><op:operator pos:line="52" pos:column="38">.</op:operator><name pos:line="52" pos:column="39">Replace</name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="47">"\""</lit:literal></expr></argument><op:operator pos:line="52" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="52" pos:column="53">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">matches</name><op:operator pos:line="53" pos:column="20">.</op:operator><name pos:line="53" pos:column="21">AddRange</name></name><argument_list pos:line="53" pos:column="29">(<argument><expr><call><name><name pos:line="53" pos:column="30">searchTerms</name><op:operator pos:line="53" pos:column="41">.</op:operator><name pos:line="53" pos:column="42">Split</name></name><argument_list pos:line="53" pos:column="47">(<argument><expr><op:operator pos:line="53" pos:column="48">new</op:operator><index pos:line="53" pos:column="51">[]</index> <block pos:line="53" pos:column="54">{ <expr><lit:literal type="char" pos:line="53" pos:column="56">' '</lit:literal></expr> }</block></expr></argument><op:operator pos:line="53" pos:column="61">,</op:operator> <argument><expr><name><name pos:line="53" pos:column="63">StringSplitOptions</name><op:operator pos:line="53" pos:column="81">.</op:operator><name pos:line="53" pos:column="82">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="54" pos:column="13">for(<init><decl><type><name pos:line="54" pos:column="17">int</name></type> <name pos:line="54" pos:column="21">i</name> =<init pos:line="54" pos:column="24"> <expr><lit:literal type="number" pos:line="54" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="54" pos:column="28">i</name> <op:operator pos:line="54" pos:column="30">&lt;</op:operator> <name><name pos:line="54" pos:column="32">matches</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">Count</name></name></expr>;</condition> <incr><expr><op:operator pos:line="54" pos:column="47">++</op:operator><name pos:line="54" pos:column="49">i</name></expr></incr>)
            <block pos:line="55" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">string</name></type> <name pos:line="56" pos:column="24">lower</name> =<init pos:line="56" pos:column="31"> <expr><name><name pos:line="56" pos:column="32">matches</name><index pos:line="56" pos:column="39">[<expr><name pos:line="56" pos:column="40">i</name></expr>]</index></name><op:operator pos:line="56" pos:column="42">.</op:operator><call><name pos:line="56" pos:column="43">Trim</name><argument_list pos:line="56" pos:column="47">()</argument_list></call><op:operator pos:line="56" pos:column="49">.</op:operator><call><name pos:line="56" pos:column="50">ToLower</name><argument_list pos:line="56" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="57" pos:column="17">matches</name><index pos:line="57" pos:column="24">[<expr><name pos:line="57" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="57" pos:column="28">=</op:operator> <call><name><name pos:line="57" pos:column="30">Regex</name><op:operator pos:line="57" pos:column="35">.</op:operator><name pos:line="57" pos:column="36">Replace</name></name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">lower</name></expr></argument><op:operator pos:line="57" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="57" pos:column="51">@"[ ]{2,}"</lit:literal></expr></argument><op:operator pos:line="57" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="57" pos:column="63">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="59" pos:column="13">return <expr><call><name><name pos:line="59" pos:column="20">matches</name><op:operator pos:line="59" pos:column="27">.</op:operator><name pos:line="59" pos:column="28">Distinct</name></name><argument_list pos:line="59" pos:column="36">()</argument_list></call><op:operator pos:line="59" pos:column="38">.</op:operator><call><name pos:line="59" pos:column="39">ToList</name><argument_list pos:line="59" pos:column="45">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">static</specifier> <name><name pos:line="62" pos:column="23">SortedSet</name><argument_list pos:line="62" pos:column="32">&lt;<argument><name pos:line="62" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="41">GetFileExtensions</name><parameter_list pos:line="62" pos:column="58">(<param><decl><type><name pos:line="62" pos:column="59">string</name></type> <name pos:line="62" pos:column="66">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="63" pos:column="9">{
            <comment type="line" pos:line="64" pos:column="13">//2a.add filetype extensions</comment>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">matchCollection</name> =<init pos:line="65" pos:column="34"> <expr><call><name><name pos:line="65" pos:column="35">Regex</name><op:operator pos:line="65" pos:column="40">.</op:operator><name pos:line="65" pos:column="41">Matches</name></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">searchTerms</name></expr></argument><op:operator pos:line="65" pos:column="60">,</op:operator> <argument><expr><name pos:line="65" pos:column="62">FileExtensionPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">matches</name> =<init pos:line="66" pos:column="26"> <expr><op:operator pos:line="66" pos:column="27">new</op:operator> <call><name><name pos:line="66" pos:column="31">SortedSet</name><argument_list pos:line="66" pos:column="40">&lt;<argument><name pos:line="66" pos:column="41">string</name></argument>&gt;</argument_list></name><argument_list pos:line="66" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="67" pos:column="13">foreach (<init><decl><type><name pos:line="67" pos:column="22">Match</name></type> <name pos:line="67" pos:column="28">match</name> <init pos:line="67" pos:column="34">in <expr><name pos:line="67" pos:column="37">matchCollection</name></expr></init></decl></init>)
            <block pos:line="68" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">string</name></type> <name pos:line="69" pos:column="24">currentMatch</name> =<init pos:line="69" pos:column="38"> <expr><name><name pos:line="69" pos:column="39">match</name><op:operator pos:line="69" pos:column="44">.</op:operator><name pos:line="69" pos:column="45">Value</name></name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="69" pos:column="51">//.Trim('"', ' ');</comment>
                <expr_stmt><expr><name pos:line="70" pos:column="17">searchTerms</name> <op:operator pos:line="70" pos:column="29">=</op:operator> <call><name><name pos:line="70" pos:column="31">searchTerms</name><op:operator pos:line="70" pos:column="42">.</op:operator><name pos:line="70" pos:column="43">Replace</name></name><argument_list pos:line="70" pos:column="50">(<argument><expr><name><name pos:line="70" pos:column="51">match</name><op:operator pos:line="70" pos:column="56">.</op:operator><name pos:line="70" pos:column="57">Value</name></name></expr></argument><op:operator pos:line="70" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="70" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><op:operator pos:line="71" pos:column="21">!</op:operator><call><name><name pos:line="71" pos:column="22">String</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">currentMatch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="62">
                <block pos:line="72" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="73" pos:column="21">matches</name><op:operator pos:line="73" pos:column="28">.</op:operator><name pos:line="73" pos:column="29">Add</name></name><argument_list pos:line="73" pos:column="32">(<argument><expr><call><name><name pos:line="73" pos:column="33">currentMatch</name><op:operator pos:line="73" pos:column="45">.</op:operator><name pos:line="73" pos:column="46">Substring</name></name><argument_list pos:line="73" pos:column="55">(<argument><expr><call><name><name pos:line="73" pos:column="56">currentMatch</name><op:operator pos:line="73" pos:column="68">.</op:operator><name pos:line="73" pos:column="69">IndexOf</name></name><argument_list pos:line="73" pos:column="76">(<argument><expr><lit:literal type="char" pos:line="73" pos:column="77">':'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="81">+</op:operator><lit:literal type="number" pos:line="73" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                }</block></then></if>
            }</block></foreach>
            <return pos:line="76" pos:column="13">return <expr><name pos:line="76" pos:column="20">matches</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="79" pos:column="9">public</specifier> <specifier pos:line="79" pos:column="16">static</specifier> <name pos:line="79" pos:column="23">bool</name></type> <name pos:line="79" pos:column="28">InvalidCharactersFound</name><parameter_list pos:line="79" pos:column="50">(<param><decl><type><name pos:line="79" pos:column="51">string</name></type> <name pos:line="79" pos:column="58">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">MatchCollection</name></type> <name pos:line="81" pos:column="29">matchCollection</name> =<init pos:line="81" pos:column="46"> <expr><call><name><name pos:line="81" pos:column="47">Regex</name><op:operator pos:line="81" pos:column="52">.</op:operator><name pos:line="81" pos:column="53">Matches</name></name><argument_list pos:line="81" pos:column="60">(<argument><expr><name pos:line="81" pos:column="61">searchTerms</name></expr></argument><op:operator pos:line="81" pos:column="72">,</op:operator> <argument><expr><name pos:line="81" pos:column="74">QuotesPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="82" pos:column="13">foreach(<init><decl><type><name pos:line="82" pos:column="21">Match</name></type> <name pos:line="82" pos:column="27">match</name> <init pos:line="82" pos:column="33">in <expr><name pos:line="82" pos:column="36">matchCollection</name></expr></init></decl></init>)
            <block pos:line="83" pos:column="13">{
                <expr_stmt><expr><name pos:line="84" pos:column="17">searchTerms</name> <op:operator pos:line="84" pos:column="29">=</op:operator> <call><name><name pos:line="84" pos:column="31">searchTerms</name><op:operator pos:line="84" pos:column="42">.</op:operator><name pos:line="84" pos:column="43">Replace</name></name><argument_list pos:line="84" pos:column="50">(<argument><expr><name><name pos:line="84" pos:column="51">match</name><op:operator pos:line="84" pos:column="56">.</op:operator><name pos:line="84" pos:column="57">Value</name></name></expr></argument><op:operator pos:line="84" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="84" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="86" pos:column="13">searchTerms</name> <op:operator pos:line="86" pos:column="25">=</op:operator> <call><name><name pos:line="86" pos:column="27">searchTerms</name><op:operator pos:line="86" pos:column="38">.</op:operator><name pos:line="86" pos:column="39">Replace</name></name><argument_list pos:line="86" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="47">"\""</lit:literal></expr></argument><op:operator pos:line="86" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="86" pos:column="53">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="87" pos:column="13">return <expr><call><name><name pos:line="87" pos:column="20">Regex</name><op:operator pos:line="87" pos:column="25">.</op:operator><name pos:line="87" pos:column="26">IsMatch</name></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">searchTerms</name></expr></argument><op:operator pos:line="87" pos:column="45">,</op:operator> <argument><expr><name pos:line="87" pos:column="47">Pattern</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">private</specifier> <name pos:line="90" pos:column="17">const</name> <name pos:line="90" pos:column="23">string</name></type> <name pos:line="90" pos:column="30">Pattern</name> =<init pos:line="90" pos:column="39"> <expr><lit:literal type="string" pos:line="90" pos:column="40">"[^a-zA-Z0-9\\s\\*\\-]"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="91" pos:column="9">private</specifier> <name pos:line="91" pos:column="17">const</name> <name pos:line="91" pos:column="23">string</name></type> <name pos:line="91" pos:column="30">QuotesPattern</name> =<init pos:line="91" pos:column="45"> <expr><lit:literal type="string" pos:line="91" pos:column="46">"-{0,1}\"[^\"]+\""</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="92" pos:column="9">private</specifier> <name pos:line="92" pos:column="17">const</name> <name pos:line="92" pos:column="23">string</name></type> <name pos:line="92" pos:column="30">FileExtensionPattern</name> =<init pos:line="92" pos:column="52"> <expr><lit:literal type="string" pos:line="92" pos:column="53">"filetype\\:([a-zA-Z]\\w+)"</lit:literal></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
