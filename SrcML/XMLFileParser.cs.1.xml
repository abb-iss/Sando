<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\USDASHE1\Documents\Visual Studio 2012\Projects\sandoHead\Parser\Parser\XMLFileParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Xml</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Xml</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Parser</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">XMLFileParser</name> <super pos:line="14" pos:column="32">: <name pos:line="14" pos:column="34">IParser</name></super>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">static</specifier> <specifier pos:line="16" pos:column="24">readonly</specifier> <name pos:line="16" pos:column="33">int</name></type> <name pos:line="16" pos:column="37">SnippetLinesAbove</name> =<init pos:line="16" pos:column="56"> <expr><lit:literal type="number" pos:line="16" pos:column="57">0</lit:literal></expr></init></decl>;</decl_stmt>
        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <name><name pos:line="17" pos:column="16">List</name><argument_list pos:line="17" pos:column="20">&lt;<argument><name pos:line="17" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="37">Parse</name><parameter_list pos:line="17" pos:column="42">(<param><decl><type><name pos:line="17" pos:column="43">string</name></type> <name pos:line="17" pos:column="50">filename</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">programElements</name> =<init pos:line="19" pos:column="34"> <expr><op:operator pos:line="19" pos:column="35">new</op:operator> <call><name><name pos:line="19" pos:column="39">List</name><argument_list pos:line="19" pos:column="43">&lt;<argument><name pos:line="19" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="21" pos:column="13">XmlTextReader</name></type> <name pos:line="21" pos:column="27">reader</name> =<init pos:line="21" pos:column="35"> <expr><op:operator pos:line="21" pos:column="36">new</op:operator> <call><name pos:line="21" pos:column="40">XmlTextReader</name><argument_list pos:line="21" pos:column="53">(<argument><expr><name pos:line="21" pos:column="54">filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <while pos:line="23" pos:column="13">while <condition pos:line="23" pos:column="19">(<expr><call><name><name pos:line="23" pos:column="20">reader</name><op:operator pos:line="23" pos:column="26">.</op:operator><name pos:line="23" pos:column="27">Read</name></name><argument_list pos:line="23" pos:column="31">()</argument_list></call></expr>)</condition>
            <block pos:line="24" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="25" pos:column="17">string</name></type> <name pos:line="25" pos:column="24">text</name> =<init pos:line="25" pos:column="30"> <expr><name><name pos:line="25" pos:column="31">String</name><op:operator pos:line="25" pos:column="37">.</op:operator><name pos:line="25" pos:column="38">Empty</name></name></expr></init></decl>;</decl_stmt>

                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">reader</name><op:operator pos:line="27" pos:column="27">.</op:operator><name pos:line="27" pos:column="28">NodeType</name></name> <op:operator pos:line="27" pos:column="37">==</op:operator> <name><name pos:line="27" pos:column="40">XmlNodeType</name><op:operator pos:line="27" pos:column="51">.</op:operator><name pos:line="27" pos:column="52">Text</name></name></expr>)</condition><then pos:line="27" pos:column="57">
                <block pos:line="28" pos:column="17">{
                    <expr_stmt><expr><name pos:line="29" pos:column="21">text</name> <op:operator pos:line="29" pos:column="26">=</op:operator> <name><name pos:line="29" pos:column="28">reader</name><op:operator pos:line="29" pos:column="34">.</op:operator><name pos:line="29" pos:column="35">Value</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="31" pos:column="17">else <if pos:line="31" pos:column="22">if <condition pos:line="31" pos:column="25">(<expr><name><name pos:line="31" pos:column="26">reader</name><op:operator pos:line="31" pos:column="32">.</op:operator><name pos:line="31" pos:column="33">NodeType</name></name> <op:operator pos:line="31" pos:column="42">==</op:operator> <name><name pos:line="31" pos:column="45">XmlNodeType</name><op:operator pos:line="31" pos:column="56">.</op:operator><name pos:line="31" pos:column="57">Element</name></name></expr>)</condition><then pos:line="31" pos:column="65">
                <block pos:line="32" pos:column="17">{
                    <while pos:line="33" pos:column="21">while <condition pos:line="33" pos:column="27">(<expr><call><name><name pos:line="33" pos:column="28">reader</name><op:operator pos:line="33" pos:column="34">.</op:operator><name pos:line="33" pos:column="35">MoveToNextAttribute</name></name><argument_list pos:line="33" pos:column="54">()</argument_list></call></expr>)</condition>
                    <block pos:line="34" pos:column="21">{
                        <expr_stmt><expr><name pos:line="35" pos:column="25">text</name> <op:operator pos:line="35" pos:column="30">+=</op:operator> <name><name pos:line="35" pos:column="33">reader</name><op:operator pos:line="35" pos:column="39">.</op:operator><name pos:line="35" pos:column="40">Value</name></name> <op:operator pos:line="35" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="35" pos:column="48">" "</lit:literal></expr>;</expr_stmt>
                    }</block></while>
                }</block></then></if></else></if>

                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><op:operator pos:line="39" pos:column="21">!</op:operator><call><name><name pos:line="39" pos:column="22">String</name><op:operator pos:line="39" pos:column="28">.</op:operator><name pos:line="39" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name pos:line="39" pos:column="48">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="54">
                <block pos:line="40" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="41" pos:column="21">var</name></type> <name pos:line="41" pos:column="25">cleanedText</name> =<init pos:line="41" pos:column="38"> <expr><call><name><name pos:line="41" pos:column="39">text</name><op:operator pos:line="41" pos:column="43">.</op:operator><name pos:line="41" pos:column="44">TrimStart</name></name><argument_list pos:line="41" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="41" pos:column="54">' '</lit:literal></expr></argument><op:operator pos:line="41" pos:column="57">,</op:operator> <argument><expr><lit:literal type="char" pos:line="41" pos:column="59">'\n'</lit:literal></expr></argument><op:operator pos:line="41" pos:column="63">,</op:operator> <argument><expr><lit:literal type="char" pos:line="41" pos:column="65">'\r'</lit:literal></expr></argument><op:operator pos:line="41" pos:column="69">,</op:operator> <argument><expr><lit:literal type="char" pos:line="41" pos:column="71">'\t'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="42" pos:column="21">cleanedText</name> <op:operator pos:line="42" pos:column="33">=</op:operator> <call><name><name pos:line="42" pos:column="35">cleanedText</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">TrimEnd</name></name><argument_list pos:line="42" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="42" pos:column="55">' '</lit:literal></expr></argument><op:operator pos:line="42" pos:column="58">,</op:operator> <argument><expr><lit:literal type="char" pos:line="42" pos:column="60">'\n'</lit:literal></expr></argument><op:operator pos:line="42" pos:column="64">,</op:operator> <argument><expr><lit:literal type="char" pos:line="42" pos:column="66">'\r'</lit:literal></expr></argument><op:operator pos:line="42" pos:column="70">,</op:operator> <argument><expr><lit:literal type="char" pos:line="42" pos:column="72">'\t'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="43" pos:column="21">var</name></type> <name pos:line="43" pos:column="25">linenum</name> =<init pos:line="43" pos:column="34"> <expr><name><name pos:line="43" pos:column="35">reader</name><op:operator pos:line="43" pos:column="41">.</op:operator><name pos:line="43" pos:column="42">LineNumber</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="44" pos:column="21">var</name></type> <name pos:line="44" pos:column="25">snippet</name> =<init pos:line="44" pos:column="34"> <expr><call><name><name pos:line="44" pos:column="35">SrcMLParsingUtils</name><op:operator pos:line="44" pos:column="52">.</op:operator><name pos:line="44" pos:column="53">RetrieveSource</name></name><argument_list pos:line="44" pos:column="67">(<argument><expr><name pos:line="44" pos:column="68">cleanedText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="45" pos:column="21">var</name></type> <name pos:line="45" pos:column="25">pe</name> =<init pos:line="45" pos:column="29"> <expr><op:operator pos:line="45" pos:column="30">new</op:operator> <call><name pos:line="45" pos:column="34">TextLineElement</name><argument_list pos:line="45" pos:column="49">(<argument><expr><name pos:line="45" pos:column="50">cleanedText</name></expr></argument><op:operator pos:line="45" pos:column="61">,</op:operator> <argument><expr><name pos:line="45" pos:column="63">linenum</name></expr></argument><op:operator pos:line="45" pos:column="70">,</op:operator> <argument><expr><name pos:line="45" pos:column="72">filename</name></expr></argument><op:operator pos:line="45" pos:column="80">,</op:operator> <argument><expr><name pos:line="45" pos:column="82">snippet</name></expr></argument><op:operator pos:line="45" pos:column="89">,</op:operator> <argument><expr><name pos:line="45" pos:column="91">cleanedText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="46" pos:column="21">programElements</name><op:operator pos:line="46" pos:column="36">.</op:operator><name pos:line="46" pos:column="37">Add</name></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>


            <return pos:line="51" pos:column="13">return <expr><name pos:line="51" pos:column="20">programElements</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="54" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// New Parse method that takes two arguments, due to modification of IParser</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="sourceElements"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="61" pos:column="9">public</specifier> <name><name pos:line="61" pos:column="16">List</name><argument_list pos:line="61" pos:column="20">&lt;<argument><name pos:line="61" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="61" pos:column="37">Parse</name><parameter_list pos:line="61" pos:column="42">(<param><decl><type><name pos:line="61" pos:column="43">string</name></type> <name pos:line="61" pos:column="50">fileName</name></decl></param><op:operator pos:line="61" pos:column="58">,</op:operator> <param><decl><type><name><name pos:line="61" pos:column="60">System</name><op:operator pos:line="61" pos:column="66">.</op:operator><name pos:line="61" pos:column="67">Xml</name><op:operator pos:line="61" pos:column="70">.</op:operator><name pos:line="61" pos:column="71">Linq</name><op:operator pos:line="61" pos:column="75">.</op:operator><name pos:line="61" pos:column="76">XElement</name></name></type> <name pos:line="61" pos:column="85">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="62" pos:column="9">{
            <return pos:line="63" pos:column="13">return <expr><call><name pos:line="63" pos:column="20">Parse</name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="65" pos:column="9">// End of code changes</comment>
    }</block></class>
}</block></namespace>
</unit>
